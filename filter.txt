/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/


#include <iostream>
#include <unistd.h>
using namespace std;

// переменные для калмана
float varVolt = 1.8;  // среднее отклонение (ищем в excel)
float varProcess = 0.01; // скорость реакции на изменение (подбирается вручную)
float Pc = 0.0;
float G = 0.0;
float P = 1.0;
float Xp = 0.0;
float Zp = 0.0;
float Xe = 0.0;

float filter(float val) {  //функция фильтрации
  Pc = P + varProcess;
  G = Pc/(Pc + varVolt);
  P = (1-G)*Pc;
  Xp = Xe;
  Zp = Xp;
  Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
  return(Xe);
}

float filtVal = 0;
//float values[10]= {1,1,1,1,1,5,5,-5,5,5};
float values[30]= {0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5};
float filtered_values_kalman[100] {};
float filtered_values_expRunningAverage[100] {};

float expRunningAverage(float newVal) {
  static float filVal = 0;
  filVal += (newVal - filVal) * 0.05;
  return filVal;
}

int main()
{
    for (int i = 0; i < 30; ++i) {
        values[i] *= 2;
    }
    for (int i = 0; i < 30; ++i) {
        filtered_values_kalman[i] = filter(values[i]);
        // filtVal += (values[i] - filtVal) * 0.1;
        filtered_values_expRunningAverage[i] = expRunningAverage(values[i]);
        sleep(0.01);
    }
   
    for (int i = 0; i < 30; ++i) {
        cout << filtered_values_kalman[i];
        cout << " ";
    }
    cout << endl;
    cout << endl;
        for (int i = 0; i < 30; ++i) {
        cout << filtered_values_expRunningAverage[i];
        cout << " ";
    }
    return 0;
}
