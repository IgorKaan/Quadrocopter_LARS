
GD103C8T6_Quadro_sensor_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b4c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08009c60  08009c60  00019c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a13c  0800a13c  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800a13c  0800a13c  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a13c  0800a13c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a13c  0800a13c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d50  20000200  0800a344  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f50  0800a344  00021f50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002676f  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005991  00000000  00000000  00046998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00015f2b  00000000  00000000  0004c329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  00062258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002170  00000000  00000000  00063810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007eb4  00000000  00000000  00065980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023397  00000000  00000000  0006d834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009bb65  00000000  00000000  00090bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c730  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005714  00000000  00000000  0012c780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	08009c44 	.word	0x08009c44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	08009c44 	.word	0x08009c44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <expRunningAveragePressure>:
 * @return the value read on the SPI bus
 */
uint32_t ms5611_readRawTemp();
uint32_t ms5611_readRawPressure();

float expRunningAveragePressure(float newVal) {
 80010fc:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * KK;
 80010fe:	4c07      	ldr	r4, [pc, #28]	; (800111c <expRunningAveragePressure+0x20>)
 8001100:	6825      	ldr	r5, [r4, #0]
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fd14 	bl	8000b30 <__aeabi_fsub>
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <expRunningAveragePressure+0x24>)
 800110a:	6819      	ldr	r1, [r3, #0]
 800110c:	f7ff fe1a 	bl	8000d44 <__aeabi_fmul>
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff fd0f 	bl	8000b34 <__addsf3>
 8001116:	6020      	str	r0, [r4, #0]
  return filVal;
}
 8001118:	bd38      	pop	{r3, r4, r5, pc}
 800111a:	bf00      	nop
 800111c:	20000228 	.word	0x20000228
 8001120:	20000000 	.word	0x20000000
 8001124:	00000000 	.word	0x00000000

08001128 <getAltitude>:

double getAltitude(double pressure, double seaLevelPressure)
{
 8001128:	b508      	push	{r3, lr}
    return (44330.0f * (1.0f - pow((double)pressure / (double)seaLevelPressure, 0.1902949f)));
 800112a:	f7ff faff 	bl	800072c <__aeabi_ddiv>
 800112e:	a308      	add	r3, pc, #32	; (adr r3, 8001150 <getAltitude+0x28>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f004 fd84 	bl	8005c40 <pow>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	2000      	movs	r0, #0
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <getAltitude+0x38>)
 8001140:	f7ff f812 	bl	8000168 <__aeabi_dsub>
 8001144:	a304      	add	r3, pc, #16	; (adr r3, 8001158 <getAltitude+0x30>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
}
 800114e:	bd08      	pop	{r3, pc}
 8001150:	60000000 	.word	0x60000000
 8001154:	3fc85b95 	.word	0x3fc85b95
 8001158:	00000000 	.word	0x00000000
 800115c:	40e5a540 	.word	0x40e5a540
 8001160:	3ff00000 	.word	0x3ff00000

08001164 <ms5611_write>:
	prom[4] = ms5611_read16bits(CMD_PROM_C5);
	prom[5] = ms5611_read16bits(CMD_PROM_C6);
}

void ms5611_write(uint8_t data)
{
 8001164:	b513      	push	{r0, r1, r4, lr}
	MS5611_EN
 8001166:	4c0c      	ldr	r4, [pc, #48]	; (8001198 <ms5611_write+0x34>)
{
 8001168:	f88d 0007 	strb.w	r0, [sp, #7]
	MS5611_EN
 800116c:	2200      	movs	r2, #0
 800116e:	4620      	mov	r0, r4
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	f002 f826 	bl	80031c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8001178:	2332      	movs	r3, #50	; 0x32
 800117a:	f10d 0107 	add.w	r1, sp, #7
 800117e:	2201      	movs	r2, #1
 8001180:	4806      	ldr	r0, [pc, #24]	; (800119c <ms5611_write+0x38>)
 8001182:	f002 fbc0 	bl	8003906 <HAL_SPI_Transmit>
	MS5611_DIS
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	4620      	mov	r0, r4
 800118e:	f002 f819 	bl	80031c4 <HAL_GPIO_WritePin>
}
 8001192:	b002      	add	sp, #8
 8001194:	bd10      	pop	{r4, pc}
 8001196:	bf00      	nop
 8001198:	40010800 	.word	0x40010800
 800119c:	20000450 	.word	0x20000450

080011a0 <ms5611_read24bits>:
	return_value = ((uint16_t)byte[1]<<8) | (byte[2]);
	return return_value;
}

uint32_t ms5611_read24bits(uint8_t reg)
{
 80011a0:	b510      	push	{r4, lr}
	uint8_t byte[4];
	uint32_t return_value;
	MS5611_EN
 80011a2:	4c12      	ldr	r4, [pc, #72]	; (80011ec <ms5611_read24bits+0x4c>)
{
 80011a4:	b086      	sub	sp, #24
 80011a6:	f88d 000f 	strb.w	r0, [sp, #15]
	MS5611_EN
 80011aa:	2200      	movs	r2, #0
 80011ac:	4620      	mov	r0, r4
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	f002 f807 	bl	80031c4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, &reg, byte, 4, SPI_TIMEOUT);
 80011b6:	2332      	movs	r3, #50	; 0x32
 80011b8:	aa05      	add	r2, sp, #20
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	f10d 010f 	add.w	r1, sp, #15
 80011c0:	2304      	movs	r3, #4
 80011c2:	480b      	ldr	r0, [pc, #44]	; (80011f0 <ms5611_read24bits+0x50>)
 80011c4:	f002 fc4c 	bl	8003a60 <HAL_SPI_TransmitReceive>
	MS5611_DIS
 80011c8:	4620      	mov	r0, r4
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d0:	f001 fff8 	bl	80031c4 <HAL_GPIO_WritePin>
	return_value = ((uint32_t)byte[1]<<16) | ((uint32_t)(byte[2]<<8)) | (byte[3]);
 80011d4:	f89d 0015 	ldrb.w	r0, [sp, #21]
 80011d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80011dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80011e0:	f89d 0016 	ldrb.w	r0, [sp, #22]
	return return_value;
}
 80011e4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80011e8:	b006      	add	sp, #24
 80011ea:	bd10      	pop	{r4, pc}
 80011ec:	40010800 	.word	0x40010800
 80011f0:	20000450 	.word	0x20000450

080011f4 <ms5611_readRawTemp>:

uint32_t ms5611_readRawTemp()
{
 80011f4:	b508      	push	{r3, lr}
	uint32_t D2;
	//Convert temp
	ms5611_write(tempAddr);
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <ms5611_readRawTemp+0x1c>)
 80011f8:	7818      	ldrb	r0, [r3, #0]
 80011fa:	f7ff ffb3 	bl	8001164 <ms5611_write>
	//Conversion Time
	HAL_Delay(convDelay);
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <ms5611_readRawTemp+0x20>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	f001 fbe9 	bl	80029d8 <HAL_Delay>
	//Read ADC
	D2 = ms5611_read24bits(0x00);

	return D2;
}
 8001206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	D2 = ms5611_read24bits(0x00);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff bfc8 	b.w	80011a0 <ms5611_read24bits>
 8001210:	20000009 	.word	0x20000009
 8001214:	20000004 	.word	0x20000004

08001218 <ms5611_readRawPressure>:

uint32_t ms5611_readRawPressure()
{
 8001218:	b508      	push	{r3, lr}
	uint32_t D1;
	//Convert pressure
	ms5611_write(pressAddr);
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <ms5611_readRawPressure+0x1c>)
 800121c:	7818      	ldrb	r0, [r3, #0]
 800121e:	f7ff ffa1 	bl	8001164 <ms5611_write>
	//Conversion time
	HAL_Delay(convDelay);
 8001222:	4b05      	ldr	r3, [pc, #20]	; (8001238 <ms5611_readRawPressure+0x20>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f001 fbd7 	bl	80029d8 <HAL_Delay>
	//Read ADC
	D1 = ms5611_read24bits(0x00);

	return D1;
}
 800122a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	D1 = ms5611_read24bits(0x00);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff bfb6 	b.w	80011a0 <ms5611_read24bits>
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004
 800123c:	00000000 	.word	0x00000000

08001240 <Barometer_calculate>:
}



void Barometer_calculate()
{
 8001240:	b570      	push	{r4, r5, r6, lr}
	int32_t dT;
	int64_t TEMP, OFF, SENS, P;
	uint32_t D1, D2;
	float press, r, c;

	D1 = ms5611_readRawPressure();
 8001242:	f7ff ffe9 	bl	8001218 <ms5611_readRawPressure>
 8001246:	4604      	mov	r4, r0
	D2 = ms5611_readRawTemp();
 8001248:	f7ff ffd4 	bl	80011f4 <ms5611_readRawTemp>

	dT = 0;
	TEMP = 2000 + ((int64_t)dT * prom[5])/8388608;
	OFF = (int64_t)prom[1] * 65536 + ((int64_t)prom[3] * dT ) / 128;
	SENS = (int64_t)prom[0] * 32768 + ((int64_t)prom[2] * dT) / 256;
 800124c:	4a38      	ldr	r2, [pc, #224]	; (8001330 <Barometer_calculate+0xf0>)
		TEMP = TEMP - T2;
		OFF = OFF - OFF2;
		SENS = SENS - SENS2;
	}

	P = (D1*SENS/2097152 - OFF)/32768;
 800124e:	8813      	ldrh	r3, [r2, #0]
	OFF = (int64_t)prom[1] * 65536 + ((int64_t)prom[3] * dT ) / 128;
 8001250:	8852      	ldrh	r2, [r2, #2]
	P = (D1*SENS/2097152 - OFF)/32768;
 8001252:	fba3 0304 	umull	r0, r3, r3, r4
 8001256:	03db      	lsls	r3, r3, #15
 8001258:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 800125c:	f3c0 108a 	ubfx	r0, r0, #6, #11
 8001260:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
	OFF = (int64_t)prom[1] * 65536 + ((int64_t)prom[3] * dT ) / 128;
 8001264:	0412      	lsls	r2, r2, #16
	P = (D1*SENS/2097152 - OFF)/32768;
 8001266:	1a80      	subs	r0, r0, r2
 8001268:	ea4f 5363 	mov.w	r3, r3, asr #21
 800126c:	f163 0300 	sbc.w	r3, r3, #0
 8001270:	2b00      	cmp	r3, #0
 8001272:	da04      	bge.n	800127e <Barometer_calculate+0x3e>
 8001274:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001278:	1880      	adds	r0, r0, r2
 800127a:	f143 0300 	adc.w	r3, r3, #0
	temperature = TEMP;
 800127e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
	P = (D1*SENS/2097152 - OFF)/32768;
 8001282:	0bc0      	lsrs	r0, r0, #15
 8001284:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	temperature = TEMP;
 8001288:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <Barometer_calculate+0xf4>)
 800128a:	601a      	str	r2, [r3, #0]
	pressure = P;
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <Barometer_calculate+0xf8>)
 800128e:	6018      	str	r0, [r3, #0]

	press = (float)pressure;
 8001290:	f7ff fd04 	bl	8000c9c <__aeabi_i2f>
 8001294:	4606      	mov	r6, r0
	p_mm = press / 133.3;
 8001296:	f7ff f8c7 	bl	8000428 <__aeabi_f2d>
 800129a:	a31f      	add	r3, pc, #124	; (adr r3, 8001318 <Barometer_calculate+0xd8>)
 800129c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a0:	4604      	mov	r4, r0
 80012a2:	460d      	mov	r5, r1
 80012a4:	f7ff fa42 	bl	800072c <__aeabi_ddiv>
 80012a8:	f7ff fbee 	bl	8000a88 <__aeabi_d2f>
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <Barometer_calculate+0xfc>)
	r= press/101325.0;
 80012ae:	4924      	ldr	r1, [pc, #144]	; (8001340 <Barometer_calculate+0x100>)
	p_mm = press / 133.3;
 80012b0:	6018      	str	r0, [r3, #0]
	r= press/101325.0;
 80012b2:	4630      	mov	r0, r6
 80012b4:	f7ff fdfa 	bl	8000eac <__aeabi_fdiv>
	c = 1.0/5.255;
	altitude = (1 - pow(r,c))*44330.77;
 80012b8:	f7ff f8b6 	bl	8000428 <__aeabi_f2d>
 80012bc:	a318      	add	r3, pc, #96	; (adr r3, 8001320 <Barometer_calculate+0xe0>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f004 fcbd 	bl	8005c40 <pow>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	2000      	movs	r0, #0
 80012cc:	491d      	ldr	r1, [pc, #116]	; (8001344 <Barometer_calculate+0x104>)
 80012ce:	f7fe ff4b 	bl	8000168 <__aeabi_dsub>
 80012d2:	a315      	add	r3, pc, #84	; (adr r3, 8001328 <Barometer_calculate+0xe8>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff f8fe 	bl	80004d8 <__aeabi_dmul>
 80012dc:	f7ff fbd4 	bl	8000a88 <__aeabi_d2f>
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <Barometer_calculate+0x108>)
 80012e2:	6018      	str	r0, [r3, #0]
	altitudeCorrected = altitude - altitudeOffset;
 80012e4:	4b19      	ldr	r3, [pc, #100]	; (800134c <Barometer_calculate+0x10c>)
 80012e6:	6819      	ldr	r1, [r3, #0]
 80012e8:	f7ff fc22 	bl	8000b30 <__aeabi_fsub>
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <Barometer_calculate+0x110>)
 80012ee:	6018      	str	r0, [r3, #0]
	relativeAltitude = getAltitude(press, referencePressure);
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <Barometer_calculate+0x114>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	f7ff f898 	bl	8000428 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4620      	mov	r0, r4
 80012fe:	4629      	mov	r1, r5
 8001300:	f7ff ff12 	bl	8001128 <getAltitude>
 8001304:	f7ff fbc0 	bl	8000a88 <__aeabi_d2f>
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <Barometer_calculate+0x118>)
 800130a:	6018      	str	r0, [r3, #0]
	relativeAltitudeFiltered = expRunningAveragePressure(relativeAltitude);
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	f7ff fef5 	bl	80010fc <expRunningAveragePressure>
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <Barometer_calculate+0x11c>)
 8001314:	6018      	str	r0, [r3, #0]
}
 8001316:	bd70      	pop	{r4, r5, r6, pc}
 8001318:	9999999a 	.word	0x9999999a
 800131c:	4060a999 	.word	0x4060a999
 8001320:	c0000000 	.word	0xc0000000
 8001324:	3fc85b95 	.word	0x3fc85b95
 8001328:	a3d70a3d 	.word	0xa3d70a3d
 800132c:	40e5a558 	.word	0x40e5a558
 8001330:	20000234 	.word	0x20000234
 8001334:	2000024c 	.word	0x2000024c
 8001338:	20000230 	.word	0x20000230
 800133c:	2000022c 	.word	0x2000022c
 8001340:	47c5e680 	.word	0x47c5e680
 8001344:	3ff00000 	.word	0x3ff00000
 8001348:	2000021c 	.word	0x2000021c
 800134c:	20000224 	.word	0x20000224
 8001350:	20000220 	.word	0x20000220
 8001354:	20000240 	.word	0x20000240
 8001358:	20000244 	.word	0x20000244
 800135c:	20000248 	.word	0x20000248

08001360 <expRunningAverageGX>:

uint8_t _buffer[21];

static uint8_t _mag_adjust[3];

float expRunningAverageGX(float newVal) {
 8001360:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 8001362:	4c07      	ldr	r4, [pc, #28]	; (8001380 <expRunningAverageGX+0x20>)
 8001364:	6825      	ldr	r5, [r4, #0]
 8001366:	4629      	mov	r1, r5
 8001368:	f7ff fbe2 	bl	8000b30 <__aeabi_fsub>
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <expRunningAverageGX+0x24>)
 800136e:	6819      	ldr	r1, [r3, #0]
 8001370:	f7ff fce8 	bl	8000d44 <__aeabi_fmul>
 8001374:	4629      	mov	r1, r5
 8001376:	f7ff fbdd 	bl	8000b34 <__addsf3>
 800137a:	6020      	str	r0, [r4, #0]
  return filVal;
}
 800137c:	bd38      	pop	{r3, r4, r5, pc}
 800137e:	bf00      	nop
 8001380:	20000280 	.word	0x20000280
 8001384:	2000000c 	.word	0x2000000c

08001388 <expRunningAverageGY>:

float expRunningAverageGY(float newVal) {
 8001388:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 800138a:	4c07      	ldr	r4, [pc, #28]	; (80013a8 <expRunningAverageGY+0x20>)
 800138c:	6825      	ldr	r5, [r4, #0]
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff fbce 	bl	8000b30 <__aeabi_fsub>
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <expRunningAverageGY+0x24>)
 8001396:	6819      	ldr	r1, [r3, #0]
 8001398:	f7ff fcd4 	bl	8000d44 <__aeabi_fmul>
 800139c:	4629      	mov	r1, r5
 800139e:	f7ff fbc9 	bl	8000b34 <__addsf3>
 80013a2:	6020      	str	r0, [r4, #0]
  return filVal;
}
 80013a4:	bd38      	pop	{r3, r4, r5, pc}
 80013a6:	bf00      	nop
 80013a8:	2000027c 	.word	0x2000027c
 80013ac:	2000000c 	.word	0x2000000c

080013b0 <expRunningAverageGZ>:

float expRunningAverageGZ(float newVal) {
 80013b0:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 80013b2:	4c07      	ldr	r4, [pc, #28]	; (80013d0 <expRunningAverageGZ+0x20>)
 80013b4:	6825      	ldr	r5, [r4, #0]
 80013b6:	4629      	mov	r1, r5
 80013b8:	f7ff fbba 	bl	8000b30 <__aeabi_fsub>
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <expRunningAverageGZ+0x24>)
 80013be:	6819      	ldr	r1, [r3, #0]
 80013c0:	f7ff fcc0 	bl	8000d44 <__aeabi_fmul>
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7ff fbb5 	bl	8000b34 <__addsf3>
 80013ca:	6020      	str	r0, [r4, #0]
  return filVal;
}
 80013cc:	bd38      	pop	{r3, r4, r5, pc}
 80013ce:	bf00      	nop
 80013d0:	20000278 	.word	0x20000278
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <expRunningAverageAX>:

float expRunningAverageAX(float newVal) {
 80013d8:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 80013da:	4c07      	ldr	r4, [pc, #28]	; (80013f8 <expRunningAverageAX+0x20>)
 80013dc:	6825      	ldr	r5, [r4, #0]
 80013de:	4629      	mov	r1, r5
 80013e0:	f7ff fba6 	bl	8000b30 <__aeabi_fsub>
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <expRunningAverageAX+0x24>)
 80013e6:	6819      	ldr	r1, [r3, #0]
 80013e8:	f7ff fcac 	bl	8000d44 <__aeabi_fmul>
 80013ec:	4629      	mov	r1, r5
 80013ee:	f7ff fba1 	bl	8000b34 <__addsf3>
 80013f2:	6020      	str	r0, [r4, #0]
  return filVal;
}
 80013f4:	bd38      	pop	{r3, r4, r5, pc}
 80013f6:	bf00      	nop
 80013f8:	20000274 	.word	0x20000274
 80013fc:	2000000c 	.word	0x2000000c

08001400 <expRunningAverageAY>:

float expRunningAverageAY(float newVal) {
 8001400:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 8001402:	4c07      	ldr	r4, [pc, #28]	; (8001420 <expRunningAverageAY+0x20>)
 8001404:	6825      	ldr	r5, [r4, #0]
 8001406:	4629      	mov	r1, r5
 8001408:	f7ff fb92 	bl	8000b30 <__aeabi_fsub>
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <expRunningAverageAY+0x24>)
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	f7ff fc98 	bl	8000d44 <__aeabi_fmul>
 8001414:	4629      	mov	r1, r5
 8001416:	f7ff fb8d 	bl	8000b34 <__addsf3>
 800141a:	6020      	str	r0, [r4, #0]
  return filVal;
}
 800141c:	bd38      	pop	{r3, r4, r5, pc}
 800141e:	bf00      	nop
 8001420:	20000270 	.word	0x20000270
 8001424:	2000000c 	.word	0x2000000c

08001428 <expRunningAverageAZ>:

float expRunningAverageAZ(float newVal) {
 8001428:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 800142a:	4c07      	ldr	r4, [pc, #28]	; (8001448 <expRunningAverageAZ+0x20>)
 800142c:	6825      	ldr	r5, [r4, #0]
 800142e:	4629      	mov	r1, r5
 8001430:	f7ff fb7e 	bl	8000b30 <__aeabi_fsub>
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <expRunningAverageAZ+0x24>)
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	f7ff fc84 	bl	8000d44 <__aeabi_fmul>
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff fb79 	bl	8000b34 <__addsf3>
 8001442:	6020      	str	r0, [r4, #0]
  return filVal;
}
 8001444:	bd38      	pop	{r3, r4, r5, pc}
 8001446:	bf00      	nop
 8001448:	2000026c 	.word	0x2000026c
 800144c:	2000000c 	.word	0x2000000c

08001450 <MPU9250_OnActivate>:
return(Xe);
}

__weak void MPU9250_OnActivate()
{
}
 8001450:	4770      	bx	lr
	...

08001454 <SPIx_WriteRead>:
{
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001454:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t receivedbyte = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	f88d 3017 	strb.w	r3, [sp, #23]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 800145c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 8001460:	f88d 000f 	strb.w	r0, [sp, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	4808      	ldr	r0, [pc, #32]	; (8001488 <SPIx_WriteRead+0x34>)
 8001468:	2301      	movs	r3, #1
 800146a:	f10d 0217 	add.w	r2, sp, #23
 800146e:	f10d 010f 	add.w	r1, sp, #15
 8001472:	f002 faf5 	bl	8003a60 <HAL_SPI_TransmitReceive>
 8001476:	b920      	cbnz	r0, 8001482 <SPIx_WriteRead+0x2e>
		return -1;
	}
	else
	{
	}
	return receivedbyte;
 8001478:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
 800147c:	b007      	add	sp, #28
 800147e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
 8001482:	20ff      	movs	r0, #255	; 0xff
 8001484:	e7fa      	b.n	800147c <SPIx_WriteRead+0x28>
 8001486:	bf00      	nop
 8001488:	200003f8 	.word	0x200003f8

0800148c <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *p_buffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800148c:	b570      	push	{r4, r5, r6, lr}
 800148e:	460e      	mov	r6, r1
 8001490:	4604      	mov	r4, r0
 8001492:	4615      	mov	r5, r2
	MPU9250_OnActivate();
 8001494:	f7ff ffdc 	bl	8001450 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2110      	movs	r1, #16
 800149c:	480a      	ldr	r0, [pc, #40]	; (80014c8 <MPU_SPI_Write+0x3c>)
 800149e:	f001 fe91 	bl	80031c4 <HAL_GPIO_WritePin>
	MPU9250_Activate();
	SPIx_WriteRead(WriteAddr);
 80014a2:	4630      	mov	r0, r6
 80014a4:	f7ff ffd6 	bl	8001454 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 80014a8:	4425      	add	r5, r4
 80014aa:	42ac      	cmp	r4, r5
 80014ac:	d106      	bne.n	80014bc <MPU_SPI_Write+0x30>
		SPIx_WriteRead(*p_buffer);
		NumByteToWrite--;
		p_buffer++;
	}
	MPU9250_Deactivate();
}
 80014ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2110      	movs	r1, #16
 80014b6:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MPU_SPI_Write+0x3c>)
 80014b8:	f001 be84 	b.w	80031c4 <HAL_GPIO_WritePin>
		SPIx_WriteRead(*p_buffer);
 80014bc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80014c0:	f7ff ffc8 	bl	8001454 <SPIx_WriteRead>
		p_buffer++;
 80014c4:	e7f1      	b.n	80014aa <MPU_SPI_Write+0x1e>
 80014c6:	bf00      	nop
 80014c8:	40010800 	.word	0x40010800

080014cc <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *p_buffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80014cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014ce:	460c      	mov	r4, r1
 80014d0:	4605      	mov	r5, r0
 80014d2:	4616      	mov	r6, r2
	MPU9250_OnActivate();
 80014d4:	f7ff ffbc 	bl	8001450 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2110      	movs	r1, #16
 80014dc:	4810      	ldr	r0, [pc, #64]	; (8001520 <MPU_SPI_Read+0x54>)
 80014de:	f001 fe71 	bl	80031c4 <HAL_GPIO_WritePin>
	MPU9250_Activate();
	uint8_t data = ReadAddr | READWRITE_CMD;
 80014e2:	f064 047f 	orn	r4, r4, #127	; 0x7f
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	2201      	movs	r2, #1
 80014ec:	f10d 0107 	add.w	r1, sp, #7
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <MPU_SPI_Read+0x58>)
	uint8_t data = ReadAddr | READWRITE_CMD;
 80014f2:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 80014f6:	f002 fa06 	bl	8003906 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&MPU9250_SPI, p_buffer, NumByteToRead, HAL_MAX_DELAY) == HAL_OK) {
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	4632      	mov	r2, r6
 8001500:	4629      	mov	r1, r5
 8001502:	4808      	ldr	r0, [pc, #32]	; (8001524 <MPU_SPI_Read+0x58>)
 8001504:	f002 fba0 	bl	8003c48 <HAL_SPI_Receive>
 8001508:	b918      	cbnz	r0, 8001512 <MPU_SPI_Read+0x46>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800150a:	2110      	movs	r1, #16
 800150c:	4806      	ldr	r0, [pc, #24]	; (8001528 <MPU_SPI_Read+0x5c>)
 800150e:	f001 fe5e 	bl	80031ce <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2110      	movs	r1, #16
 8001516:	4802      	ldr	r0, [pc, #8]	; (8001520 <MPU_SPI_Read+0x54>)
 8001518:	f001 fe54 	bl	80031c4 <HAL_GPIO_WritePin>
	else {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	}
	MPU9250_Deactivate();
}
 800151c:	b002      	add	sp, #8
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	40010800 	.word	0x40010800
 8001524:	200003f8 	.word	0x200003f8
 8001528:	40010c00 	.word	0x40010c00

0800152c <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 800152c:	b507      	push	{r0, r1, r2, lr}
	MPU_SPI_Write(&data, subAddress, 1);
 800152e:	2201      	movs	r2, #1
{
 8001530:	f88d 1007 	strb.w	r1, [sp, #7]
	MPU_SPI_Write(&data, subAddress, 1);
 8001534:	4601      	mov	r1, r0
 8001536:	f10d 0007 	add.w	r0, sp, #7
 800153a:	f7ff ffa7 	bl	800148c <MPU_SPI_Write>
	HAL_Delay(10);
 800153e:	200a      	movs	r0, #10
 8001540:	f001 fa4a 	bl	80029d8 <HAL_Delay>
}
 8001544:	b003      	add	sp, #12
 8001546:	f85d fb04 	ldr.w	pc, [sp], #4

0800154a <writeAK8963Register>:
	MPU_SPI_Read(dest, subAddress, count);
}

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 800154a:	b538      	push	{r3, r4, r5, lr}
 800154c:	4605      	mov	r5, r0
 800154e:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8001550:	2025      	movs	r0, #37	; 0x25
 8001552:	210c      	movs	r1, #12
 8001554:	f7ff ffea 	bl	800152c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001558:	4629      	mov	r1, r5
 800155a:	2026      	movs	r0, #38	; 0x26
 800155c:	f7ff ffe6 	bl	800152c <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8001560:	4621      	mov	r1, r4
 8001562:	2063      	movs	r0, #99	; 0x63
 8001564:	f7ff ffe2 	bl	800152c <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
}
 8001568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 800156c:	2181      	movs	r1, #129	; 0x81
 800156e:	2027      	movs	r0, #39	; 0x27
 8001570:	f7ff bfdc 	b.w	800152c <writeRegister>

08001574 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	4606      	mov	r6, r0
 8001578:	460c      	mov	r4, r1
 800157a:	4615      	mov	r5, r2
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 800157c:	218c      	movs	r1, #140	; 0x8c
 800157e:	2025      	movs	r0, #37	; 0x25
 8001580:	f7ff ffd4 	bl	800152c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001584:	4631      	mov	r1, r6
 8001586:	2026      	movs	r0, #38	; 0x26
 8001588:	f7ff ffd0 	bl	800152c <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 800158c:	f044 0180 	orr.w	r1, r4, #128	; 0x80
 8001590:	2027      	movs	r0, #39	; 0x27
 8001592:	f7ff ffcb 	bl	800152c <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8001596:	2001      	movs	r0, #1
 8001598:	f001 fa1e 	bl	80029d8 <HAL_Delay>
	MPU_SPI_Read(dest, subAddress, count);
 800159c:	4622      	mov	r2, r4
 800159e:	4628      	mov	r0, r5

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
}
 80015a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MPU_SPI_Read(dest, subAddress, count);
 80015a4:	2149      	movs	r1, #73	; 0x49
 80015a6:	f7ff bf91 	b.w	80014cc <MPU_SPI_Read>
	...

080015ac <MPU9250_Init>:
	return _buffer[0];
}

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 80015ac:	b510      	push	{r4, lr}
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80015ae:	2101      	movs	r1, #1
 80015b0:	206b      	movs	r0, #107	; 0x6b
 80015b2:	f7ff ffbb 	bl	800152c <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80015b6:	2120      	movs	r1, #32
 80015b8:	206a      	movs	r0, #106	; 0x6a
 80015ba:	f7ff ffb7 	bl	800152c <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80015be:	210d      	movs	r1, #13
 80015c0:	2024      	movs	r0, #36	; 0x24
 80015c2:	f7ff ffb3 	bl	800152c <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 80015c6:	2100      	movs	r1, #0
 80015c8:	200a      	movs	r0, #10
 80015ca:	f7ff ffbe 	bl	800154a <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1, PWR_RESET);
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	206b      	movs	r0, #107	; 0x6b
 80015d2:	f7ff ffab 	bl	800152c <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80015d6:	200a      	movs	r0, #10
 80015d8:	f001 f9fe 	bl	80029d8 <HAL_Delay>
	MPU_SPI_Read(dest, subAddress, count);
 80015dc:	4c39      	ldr	r4, [pc, #228]	; (80016c4 <MPU9250_Init+0x118>)
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2, AK8963_RESET);
 80015de:	2101      	movs	r1, #1
 80015e0:	200b      	movs	r0, #11
 80015e2:	f7ff ffb2 	bl	800154a <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80015e6:	2101      	movs	r1, #1
 80015e8:	206b      	movs	r0, #107	; 0x6b
 80015ea:	f7ff ff9f 	bl	800152c <writeRegister>
	MPU_SPI_Read(dest, subAddress, count);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2175      	movs	r1, #117	; 0x75
 80015f2:	4620      	mov	r0, r4
 80015f4:	f7ff ff6a 	bl	80014cc <MPU_SPI_Read>
	{
		//return 1;
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 80015f8:	2100      	movs	r1, #0
 80015fa:	206c      	movs	r0, #108	; 0x6c
 80015fc:	f7ff ff96 	bl	800152c <writeRegister>

	// setting accel range to 8G as default
	writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_16G);
 8001600:	2118      	movs	r1, #24
 8001602:	201c      	movs	r0, #28
 8001604:	f7ff ff92 	bl	800152c <writeRegister>

	// setting the gyro range to 500DPS as default
	writeRegister(GYRO_CONFIG, GYRO_FS_SEL_2000DPS);
 8001608:	2118      	movs	r1, #24
 800160a:	201b      	movs	r0, #27
 800160c:	f7ff ff8e 	bl	800152c <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2, DLPF_5);
 8001610:	2106      	movs	r1, #6
 8001612:	201d      	movs	r0, #29
 8001614:	f7ff ff8a 	bl	800152c <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG, DLPF_5);
 8001618:	2106      	movs	r1, #6
 800161a:	201a      	movs	r0, #26
 800161c:	f7ff ff86 	bl	800152c <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV, 0x00);
 8001620:	2100      	movs	r1, #0
 8001622:	2019      	movs	r0, #25
 8001624:	f7ff ff82 	bl	800152c <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8001628:	2120      	movs	r1, #32
 800162a:	206a      	movs	r0, #106	; 0x6a
 800162c:	f7ff ff7e 	bl	800152c <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8001630:	210d      	movs	r1, #13
 8001632:	2024      	movs	r0, #36	; 0x24
 8001634:	f7ff ff7a 	bl	800152c <writeRegister>
	MPU_SPI_Read(dest, subAddress, count);
 8001638:	2201      	movs	r2, #1
 800163a:	211a      	movs	r1, #26
 800163c:	4822      	ldr	r0, [pc, #136]	; (80016c8 <MPU9250_Init+0x11c>)
 800163e:	f7ff ff45 	bl	80014cc <MPU_SPI_Read>
 8001642:	2201      	movs	r2, #1
 8001644:	211b      	movs	r1, #27
 8001646:	4821      	ldr	r0, [pc, #132]	; (80016cc <MPU9250_Init+0x120>)
 8001648:	f7ff ff40 	bl	80014cc <MPU_SPI_Read>
 800164c:	2201      	movs	r2, #1
 800164e:	211d      	movs	r1, #29
 8001650:	481f      	ldr	r0, [pc, #124]	; (80016d0 <MPU9250_Init+0x124>)
 8001652:	f7ff ff3b 	bl	80014cc <MPU_SPI_Read>
	readAK8963Registers(AK8963_WHO_AM_I, 1, _buffer);
 8001656:	4622      	mov	r2, r4
 8001658:	2101      	movs	r1, #1
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff ff8a 	bl	8001574 <readAK8963Registers>
	readRegisters(CONFIG, 1, &config_register);
	readRegisters(GYRO_CONFIG, 1, &gyro_config_register);
	readRegisters(ACCEL_CONFIG2, 1, &accel_config_2_register);

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8001660:	7823      	ldrb	r3, [r4, #0]
 8001662:	2b48      	cmp	r3, #72	; 0x48
 8001664:	d12b      	bne.n	80016be <MPU9250_Init+0x112>
		return 1;
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001666:	2100      	movs	r1, #0
 8001668:	200a      	movs	r0, #10
 800166a:	f7ff ff6e 	bl	800154a <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 800166e:	2064      	movs	r0, #100	; 0x64
 8001670:	f001 f9b2 	bl	80029d8 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1, AK8963_FUSE_ROM);
 8001674:	210f      	movs	r1, #15
 8001676:	200a      	movs	r0, #10
 8001678:	f7ff ff67 	bl	800154a <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800167c:	2064      	movs	r0, #100	; 0x64
 800167e:	f001 f9ab 	bl	80029d8 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <MPU9250_Init+0x128>)
 8001684:	2103      	movs	r1, #3
 8001686:	2010      	movs	r0, #16
 8001688:	f7ff ff74 	bl	8001574 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 800168c:	2100      	movs	r1, #0
 800168e:	200a      	movs	r0, #10
 8001690:	f7ff ff5b 	bl	800154a <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	f001 f99f 	bl	80029d8 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1, AK8963_CNT_MEAS2);
 800169a:	2116      	movs	r1, #22
 800169c:	200a      	movs	r0, #10
 800169e:	f7ff ff54 	bl	800154a <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80016a2:	2064      	movs	r0, #100	; 0x64
 80016a4:	f001 f998 	bl	80029d8 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80016a8:	2101      	movs	r1, #1
 80016aa:	206b      	movs	r0, #107	; 0x6b
 80016ac:	f7ff ff3e 	bl	800152c <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL, 7 , _buffer);
 80016b0:	2003      	movs	r0, #3
 80016b2:	4622      	mov	r2, r4
 80016b4:	2107      	movs	r1, #7
 80016b6:	f7ff ff5d 	bl	8001574 <readAK8963Registers>
//	writeRegister(GYRO_CONFIG, 0x08);
//	//accel config 8g
//	writeRegister(ACCEL_CONFIG, 0x10);

	// successful init, return 0
	return 0;
 80016ba:	2000      	movs	r0, #0
}
 80016bc:	bd10      	pop	{r4, pc}
		return 1;
 80016be:	2001      	movs	r0, #1
 80016c0:	e7fc      	b.n	80016bc <MPU9250_Init+0x110>
 80016c2:	bf00      	nop
 80016c4:	20000250 	.word	0x20000250
 80016c8:	20000269 	.word	0x20000269
 80016cc:	20000284 	.word	0x20000284
 80016d0:	20000268 	.word	0x20000268
 80016d4:	20000265 	.word	0x20000265

080016d8 <MPU9250_calibrate>:
}

uint16_t ii, packet_count, fifo_count;

void MPU9250_calibrate()
{
 80016d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    //uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    writeRegister(PWR_MGMNT_1, PWR_RESET); // Write a one to bit 7 reset bit; toggle reset device
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	206b      	movs	r0, #107	; 0x6b
 80016e0:	f7ff ff24 	bl	800152c <writeRegister>
    HAL_Delay(100);
 80016e4:	2064      	movs	r0, #100	; 0x64
 80016e6:	f001 f977 	bl	80029d8 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80016ea:	2101      	movs	r1, #1
 80016ec:	206b      	movs	r0, #107	; 0x6b
 80016ee:	f7ff ff1d 	bl	800152c <writeRegister>
    writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 80016f2:	2100      	movs	r1, #0
 80016f4:	206c      	movs	r0, #108	; 0x6c
 80016f6:	f7ff ff19 	bl	800152c <writeRegister>
    HAL_Delay(200);
 80016fa:	20c8      	movs	r0, #200	; 0xc8
 80016fc:	f001 f96c 	bl	80029d8 <HAL_Delay>

    // Configure device for bias calculation
    writeRegister(INT_ENABLE, INT_DISABLE);   // Disable all interrupts
 8001700:	2100      	movs	r1, #0
 8001702:	2038      	movs	r0, #56	; 0x38
 8001704:	f7ff ff12 	bl	800152c <writeRegister>
    writeRegister(FIFO_EN, 0x00);      // Disable FIFO
 8001708:	2100      	movs	r1, #0
 800170a:	2023      	movs	r0, #35	; 0x23
 800170c:	f7ff ff0e 	bl	800152c <writeRegister>
    writeRegister(PWR_MGMNT_1, SEN_ENABLE);   // Turn on internal clock source
 8001710:	2100      	movs	r1, #0
 8001712:	206b      	movs	r0, #107	; 0x6b
 8001714:	f7ff ff0a 	bl	800152c <writeRegister>
    writeRegister(I2C_MST_CTRL, 0x00); // Disable I2C master
 8001718:	2100      	movs	r1, #0
 800171a:	2024      	movs	r0, #36	; 0x24
 800171c:	f7ff ff06 	bl	800152c <writeRegister>
    writeRegister(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001720:	2100      	movs	r1, #0
 8001722:	206a      	movs	r0, #106	; 0x6a
 8001724:	f7ff ff02 	bl	800152c <writeRegister>
    writeRegister(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001728:	210c      	movs	r1, #12
 800172a:	206a      	movs	r0, #106	; 0x6a
 800172c:	f7ff fefe 	bl	800152c <writeRegister>
    HAL_Delay(15);
 8001730:	200f      	movs	r0, #15
 8001732:	f001 f951 	bl	80029d8 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    writeRegister(CONFIG, DLPF_184);      // Set low-pass filter to 184 Hz
 8001736:	2101      	movs	r1, #1
 8001738:	201a      	movs	r0, #26
 800173a:	f7ff fef7 	bl	800152c <writeRegister>
    writeRegister(SMPDIV, 0x00);  // Set sample rate to 1 kHz
 800173e:	2100      	movs	r1, #0
 8001740:	2019      	movs	r0, #25
 8001742:	f7ff fef3 	bl	800152c <writeRegister>
    writeRegister(GYRO_CONFIG, GYRO_FS_SEL_250DPS);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001746:	2100      	movs	r1, #0
 8001748:	201b      	movs	r0, #27
 800174a:	f7ff feef 	bl	800152c <writeRegister>
    writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_2G); // Set accelerometer full-scale to 2 g, maximum sensitivity
 800174e:	2100      	movs	r1, #0
 8001750:	201c      	movs	r0, #28
 8001752:	f7ff feeb 	bl	800152c <writeRegister>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    writeRegister(USER_CTRL, 0x40);   // Enable FIFO
 8001756:	2140      	movs	r1, #64	; 0x40
 8001758:	206a      	movs	r0, #106	; 0x6a
 800175a:	f7ff fee7 	bl	800152c <writeRegister>
    writeRegister(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9250)
 800175e:	2178      	movs	r1, #120	; 0x78
 8001760:	2023      	movs	r0, #35	; 0x23
 8001762:	f7ff fee3 	bl	800152c <writeRegister>
    HAL_Delay(28); // accumulate 40 samples in 27 milliseconds = 480 bytes
 8001766:	201c      	movs	r0, #28
 8001768:	f001 f936 	bl	80029d8 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    writeRegister(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800176c:	2100      	movs	r1, #0
 800176e:	2023      	movs	r0, #35	; 0x23
 8001770:	f7ff fedc 	bl	800152c <writeRegister>
	MPU_SPI_Read(dest, subAddress, count);
 8001774:	2202      	movs	r2, #2
 8001776:	2172      	movs	r1, #114	; 0x72
 8001778:	4668      	mov	r0, sp
 800177a:	f7ff fea7 	bl	80014cc <MPU_SPI_Read>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    uint8_t fifoCount_buffer[2];
    readRegisters(FIFO_COUNT, 2, fifoCount_buffer);

    fifo_count = (fifoCount_buffer[0] << 8) | fifoCount_buffer[1];
 800177e:	f8bd 3000 	ldrh.w	r3, [sp]
 8001782:	4931      	ldr	r1, [pc, #196]	; (8001848 <MPU9250_calibrate+0x170>)
 8001784:	ba5b      	rev16	r3, r3
 8001786:	b29a      	uxth	r2, r3
 8001788:	800b      	strh	r3, [r1, #0]
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 800178a:	230c      	movs	r3, #12
 800178c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001790:	4f2e      	ldr	r7, [pc, #184]	; (800184c <MPU9250_calibrate+0x174>)

    for (ii = 0; ii < packet_count; ii++)
 8001792:	4e2f      	ldr	r6, [pc, #188]	; (8001850 <MPU9250_calibrate+0x178>)
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8001794:	803b      	strh	r3, [r7, #0]
    for (ii = 0; ii < packet_count; ii++)
 8001796:	2300      	movs	r3, #0
 8001798:	4c2e      	ldr	r4, [pc, #184]	; (8001854 <MPU9250_calibrate+0x17c>)
 800179a:	4d2f      	ldr	r5, [pc, #188]	; (8001858 <MPU9250_calibrate+0x180>)
 800179c:	8033      	strh	r3, [r6, #0]
 800179e:	883a      	ldrh	r2, [r7, #0]
 80017a0:	8833      	ldrh	r3, [r6, #0]
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d320      	bcc.n	80017e8 <MPU9250_calibrate+0x110>
        accel_bias[2] += (int32_t) accel_temp[2];
        gyro_bias[0]  += (int32_t) gyro_temp[0];
        gyro_bias[1]  += (int32_t) gyro_temp[1];
        gyro_bias[2]  += (int32_t) gyro_temp[2];
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80017a6:	6823      	ldr	r3, [r4, #0]
    accel_bias[1] /= (int32_t) packet_count;
    accel_bias[2] /= (int32_t) packet_count;
    gyro_bias[0]  /= (int32_t) packet_count;
 80017a8:	6829      	ldr	r1, [r5, #0]
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80017aa:	fb93 f3f2 	sdiv	r3, r3, r2
    gyro_bias[0]  /= (int32_t) packet_count;
 80017ae:	fb91 f1f2 	sdiv	r1, r1, r2
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80017b2:	6023      	str	r3, [r4, #0]
    accel_bias[1] /= (int32_t) packet_count;
 80017b4:	6863      	ldr	r3, [r4, #4]
    gyro_bias[0]  /= (int32_t) packet_count;
 80017b6:	6029      	str	r1, [r5, #0]
    accel_bias[1] /= (int32_t) packet_count;
 80017b8:	fb93 f3f2 	sdiv	r3, r3, r2
    gyro_bias[1]  /= (int32_t) packet_count;
 80017bc:	6869      	ldr	r1, [r5, #4]
    accel_bias[1] /= (int32_t) packet_count;
 80017be:	6063      	str	r3, [r4, #4]
    gyro_bias[1]  /= (int32_t) packet_count;
 80017c0:	fb91 f1f2 	sdiv	r1, r1, r2
    accel_bias[2] /= (int32_t) packet_count;
 80017c4:	68a3      	ldr	r3, [r4, #8]
    gyro_bias[1]  /= (int32_t) packet_count;
 80017c6:	6069      	str	r1, [r5, #4]
    accel_bias[2] /= (int32_t) packet_count;
 80017c8:	fb93 f3f2 	sdiv	r3, r3, r2
    gyro_bias[2]  /= (int32_t) packet_count;
 80017cc:	68a9      	ldr	r1, [r5, #8]
    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80017ce:	2b00      	cmp	r3, #0
    gyro_bias[2]  /= (int32_t) packet_count;
 80017d0:	fb91 f2f2 	sdiv	r2, r1, r2
    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80017d4:	bfcc      	ite	gt
 80017d6:	f5a3 4380 	subgt.w	r3, r3, #16384	; 0x4000
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 80017da:	f503 4380 	addle.w	r3, r3, #16384	; 0x4000
    gyro_bias[2]  /= (int32_t) packet_count;
 80017de:	60aa      	str	r2, [r5, #8]
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 80017e0:	60a3      	str	r3, [r4, #8]
//	acc_ofset_data_corrected[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
//	acc_ofset_data_corrected[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
//	acc_ofset_data_corrected[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
//	acc_ofset_data_corrected[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);

}
 80017e2:	b004      	add	sp, #16
 80017e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	MPU_SPI_Read(dest, subAddress, count);
 80017e8:	220c      	movs	r2, #12
 80017ea:	2174      	movs	r1, #116	; 0x74
 80017ec:	a801      	add	r0, sp, #4
 80017ee:	f7ff fe6d 	bl	80014cc <MPU_SPI_Read>
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80017f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80017f6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80017fa:	fa93 feb3 	revsh.w	lr, r3
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80017fe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001802:	fa90 f8b0 	revsh.w	r8, r0
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8001806:	fa93 fcb3 	revsh.w	ip, r3
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800180a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800180e:	6820      	ldr	r0, [r4, #0]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001810:	bad9      	revsh	r1, r3
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001812:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001816:	bada      	revsh	r2, r3
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001818:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800181c:	badb      	revsh	r3, r3
        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800181e:	4403      	add	r3, r0
 8001820:	6023      	str	r3, [r4, #0]
        accel_bias[2] += (int32_t) accel_temp[2];
 8001822:	68a3      	ldr	r3, [r4, #8]
        accel_bias[1] += (int32_t) accel_temp[1];
 8001824:	6860      	ldr	r0, [r4, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 8001826:	4473      	add	r3, lr
 8001828:	60a3      	str	r3, [r4, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 800182a:	682b      	ldr	r3, [r5, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 800182c:	4440      	add	r0, r8
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 800182e:	4463      	add	r3, ip
 8001830:	602b      	str	r3, [r5, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001832:	686b      	ldr	r3, [r5, #4]
        accel_bias[1] += (int32_t) accel_temp[1];
 8001834:	6060      	str	r0, [r4, #4]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001836:	440b      	add	r3, r1
 8001838:	606b      	str	r3, [r5, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 800183a:	68ab      	ldr	r3, [r5, #8]
 800183c:	4413      	add	r3, r2
 800183e:	60ab      	str	r3, [r5, #8]
    for (ii = 0; ii < packet_count; ii++)
 8001840:	8833      	ldrh	r3, [r6, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	8033      	strh	r3, [r6, #0]
 8001846:	e7aa      	b.n	800179e <MPU9250_calibrate+0xc6>
 8001848:	2000026a 	.word	0x2000026a
 800184c:	20000288 	.word	0x20000288
 8001850:	20000286 	.word	0x20000286
 8001854:	200002dc 	.word	0x200002dc
 8001858:	20000324 	.word	0x20000324
 800185c:	00000000 	.word	0x00000000

08001860 <MPU9250_GetData>:

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8001860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001864:	4606      	mov	r6, r0
 8001866:	4615      	mov	r5, r2
	MPU_SPI_Read(dest, subAddress, count);
 8001868:	4c8b      	ldr	r4, [pc, #556]	; (8001a98 <MPU9250_GetData+0x238>)
 800186a:	2215      	movs	r2, #21
 800186c:	213b      	movs	r1, #59	; 0x3b
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff fe2c 	bl	80014cc <MPU_SPI_Read>
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001874:	8823      	ldrh	r3, [r4, #0]
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 2048.0f * 9.8f;
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 2048.0f * 9.8f;
//	accelX=((((int16_t)((uint16_t)_buffer[6] << 8) + _buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])))/4096.0f*9.8f;
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 16.4f * 3.14f / 180.0f;
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 16.4f * 3.14f / 180.0f;
 8001876:	f8df a224 	ldr.w	sl, [pc, #548]	; 8001a9c <MPU9250_GetData+0x23c>
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 800187a:	ba5b      	rev16	r3, r3
 800187c:	8033      	strh	r3, [r6, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800187e:	8863      	ldrh	r3, [r4, #2]
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 16.4f * 3.14f / 180.0f;
 8001880:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8001aa0 <MPU9250_GetData+0x240>
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001884:	ba5b      	rev16	r3, r3
 8001886:	8073      	strh	r3, [r6, #2]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001888:	88a3      	ldrh	r3, [r4, #4]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 800188a:	f8df b218 	ldr.w	fp, [pc, #536]	; 8001aa4 <MPU9250_GetData+0x244>
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 800188e:	ba5b      	rev16	r3, r3
 8001890:	80b3      	strh	r3, [r6, #4]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) |_buffer[9];
 8001892:	8923      	ldrh	r3, [r4, #8]
 8001894:	ba5b      	rev16	r3, r3
 8001896:	802b      	strh	r3, [r5, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001898:	8963      	ldrh	r3, [r4, #10]
	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 2048.0f * 9.8f;
 800189a:	f994 0000 	ldrsb.w	r0, [r4]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 800189e:	ba5b      	rev16	r3, r3
 80018a0:	806b      	strh	r3, [r5, #2]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80018a2:	89a3      	ldrh	r3, [r4, #12]
 80018a4:	ba5b      	rev16	r3, r3
 80018a6:	80ab      	strh	r3, [r5, #4]
	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 2048.0f * 9.8f;
 80018a8:	7863      	ldrb	r3, [r4, #1]
 80018aa:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80018ae:	f7ff f9f5 	bl	8000c9c <__aeabi_i2f>
 80018b2:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
 80018b6:	f7ff fa45 	bl	8000d44 <__aeabi_fmul>
 80018ba:	497b      	ldr	r1, [pc, #492]	; (8001aa8 <MPU9250_GetData+0x248>)
 80018bc:	f7ff fa42 	bl	8000d44 <__aeabi_fmul>
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 2048.0f * 9.8f;
 80018c0:	78e3      	ldrb	r3, [r4, #3]
	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 2048.0f * 9.8f;
 80018c2:	4680      	mov	r8, r0
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 2048.0f * 9.8f;
 80018c4:	f994 0002 	ldrsb.w	r0, [r4, #2]
 80018c8:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80018cc:	f7ff f9e6 	bl	8000c9c <__aeabi_i2f>
 80018d0:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
 80018d4:	f7ff fa36 	bl	8000d44 <__aeabi_fmul>
 80018d8:	4973      	ldr	r1, [pc, #460]	; (8001aa8 <MPU9250_GetData+0x248>)
 80018da:	f7ff fa33 	bl	8000d44 <__aeabi_fmul>
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 2048.0f * 9.8f;
 80018de:	7963      	ldrb	r3, [r4, #5]
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 2048.0f * 9.8f;
 80018e0:	4607      	mov	r7, r0
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 2048.0f * 9.8f;
 80018e2:	f994 0004 	ldrsb.w	r0, [r4, #4]
 80018e6:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80018ea:	f7ff f9d7 	bl	8000c9c <__aeabi_i2f>
 80018ee:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
 80018f2:	f7ff fa27 	bl	8000d44 <__aeabi_fmul>
 80018f6:	496c      	ldr	r1, [pc, #432]	; (8001aa8 <MPU9250_GetData+0x248>)
 80018f8:	f7ff fa24 	bl	8000d44 <__aeabi_fmul>
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 16.4f * 3.14f / 180.0f;
 80018fc:	7a63      	ldrb	r3, [r4, #9]
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 2048.0f * 9.8f;
 80018fe:	4606      	mov	r6, r0
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 16.4f * 3.14f / 180.0f;
 8001900:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8001904:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001908:	f7ff f9c8 	bl	8000c9c <__aeabi_i2f>
 800190c:	4967      	ldr	r1, [pc, #412]	; (8001aac <MPU9250_GetData+0x24c>)
 800190e:	f7ff facd 	bl	8000eac <__aeabi_fdiv>
 8001912:	4967      	ldr	r1, [pc, #412]	; (8001ab0 <MPU9250_GetData+0x250>)
 8001914:	f7ff fa16 	bl	8000d44 <__aeabi_fmul>
 8001918:	4966      	ldr	r1, [pc, #408]	; (8001ab4 <MPU9250_GetData+0x254>)
 800191a:	f7ff fac7 	bl	8000eac <__aeabi_fdiv>
 800191e:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <MPU9250_GetData+0x258>)
 8001920:	4605      	mov	r5, r0
 8001922:	6018      	str	r0, [r3, #0]
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 16.4f * 3.14f / 180.0f;
 8001924:	7ae3      	ldrb	r3, [r4, #11]
 8001926:	f994 000a 	ldrsb.w	r0, [r4, #10]
 800192a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 800192e:	f7ff f9b5 	bl	8000c9c <__aeabi_i2f>
 8001932:	495e      	ldr	r1, [pc, #376]	; (8001aac <MPU9250_GetData+0x24c>)
 8001934:	f7ff faba 	bl	8000eac <__aeabi_fdiv>
 8001938:	495d      	ldr	r1, [pc, #372]	; (8001ab0 <MPU9250_GetData+0x250>)
 800193a:	f7ff fa03 	bl	8000d44 <__aeabi_fmul>
 800193e:	495d      	ldr	r1, [pc, #372]	; (8001ab4 <MPU9250_GetData+0x254>)
 8001940:	f7ff fab4 	bl	8000eac <__aeabi_fdiv>
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 16.4f * 3.14f / 180.0f;
 8001944:	7b63      	ldrb	r3, [r4, #13]
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 16.4f * 3.14f / 180.0f;
 8001946:	f8ca 0000 	str.w	r0, [sl]
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 16.4f * 3.14f / 180.0f;
 800194a:	f994 000c 	ldrsb.w	r0, [r4, #12]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 800194e:	4c5b      	ldr	r4, [pc, #364]	; (8001abc <MPU9250_GetData+0x25c>)
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 16.4f * 3.14f / 180.0f;
 8001950:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001954:	f7ff f9a2 	bl	8000c9c <__aeabi_i2f>
 8001958:	4954      	ldr	r1, [pc, #336]	; (8001aac <MPU9250_GetData+0x24c>)
 800195a:	f7ff faa7 	bl	8000eac <__aeabi_fdiv>
 800195e:	4954      	ldr	r1, [pc, #336]	; (8001ab0 <MPU9250_GetData+0x250>)
 8001960:	f7ff f9f0 	bl	8000d44 <__aeabi_fmul>
 8001964:	4953      	ldr	r1, [pc, #332]	; (8001ab4 <MPU9250_GetData+0x254>)
 8001966:	f7ff faa1 	bl	8000eac <__aeabi_fdiv>
 800196a:	f8c9 0000 	str.w	r0, [r9]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 800196e:	6820      	ldr	r0, [r4, #0]
 8001970:	f7ff f994 	bl	8000c9c <__aeabi_i2f>
 8001974:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8001978:	f7ff f9e4 	bl	8000d44 <__aeabi_fmul>
 800197c:	494a      	ldr	r1, [pc, #296]	; (8001aa8 <MPU9250_GetData+0x248>)
 800197e:	f7ff f9e1 	bl	8000d44 <__aeabi_fmul>
 8001982:	4601      	mov	r1, r0
 8001984:	4640      	mov	r0, r8
 8001986:	f7ff f8d3 	bl	8000b30 <__aeabi_fsub>
 800198a:	f8cb 0000 	str.w	r0, [fp]
	accelY = accelY - (accel_bias[1] / 16384.0f * 9.8f);
 800198e:	6860      	ldr	r0, [r4, #4]
 8001990:	f7ff f984 	bl	8000c9c <__aeabi_i2f>
 8001994:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8001998:	f7ff f9d4 	bl	8000d44 <__aeabi_fmul>
 800199c:	4942      	ldr	r1, [pc, #264]	; (8001aa8 <MPU9250_GetData+0x248>)
 800199e:	f7ff f9d1 	bl	8000d44 <__aeabi_fmul>
 80019a2:	4601      	mov	r1, r0
 80019a4:	4638      	mov	r0, r7
 80019a6:	f7ff f8c3 	bl	8000b30 <__aeabi_fsub>
 80019aa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001ac0 <MPU9250_GetData+0x260>
	accelZ = accelZ - (accel_bias[2] / 16384.0f * 9.8f);
 80019ae:	4f45      	ldr	r7, [pc, #276]	; (8001ac4 <MPU9250_GetData+0x264>)
	accelY = accelY - (accel_bias[1] / 16384.0f * 9.8f);
 80019b0:	f8c8 0000 	str.w	r0, [r8]
	accelZ = accelZ - (accel_bias[2] / 16384.0f * 9.8f);
 80019b4:	68a0      	ldr	r0, [r4, #8]
 80019b6:	f7ff f971 	bl	8000c9c <__aeabi_i2f>
 80019ba:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 80019be:	f7ff f9c1 	bl	8000d44 <__aeabi_fmul>
 80019c2:	4939      	ldr	r1, [pc, #228]	; (8001aa8 <MPU9250_GetData+0x248>)
 80019c4:	f7ff f9be 	bl	8000d44 <__aeabi_fmul>
 80019c8:	4601      	mov	r1, r0
 80019ca:	4630      	mov	r0, r6
 80019cc:	f7ff f8b0 	bl	8000b30 <__aeabi_fsub>
 80019d0:	6038      	str	r0, [r7, #0]
	gyroX_filtered = expRunningAverageGX(gyroX) - 0.0050;
 80019d2:	4628      	mov	r0, r5
 80019d4:	f7ff fcc4 	bl	8001360 <expRunningAverageGX>
 80019d8:	f7fe fd26 	bl	8000428 <__aeabi_f2d>
 80019dc:	a326      	add	r3, pc, #152	; (adr r3, 8001a78 <MPU9250_GetData+0x218>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe fbc1 	bl	8000168 <__aeabi_dsub>
 80019e6:	f7ff f84f 	bl	8000a88 <__aeabi_d2f>
 80019ea:	4b37      	ldr	r3, [pc, #220]	; (8001ac8 <MPU9250_GetData+0x268>)
 80019ec:	6018      	str	r0, [r3, #0]
	gyroY_filtered = expRunningAverageGY(gyroY) - 0.019;
 80019ee:	f8da 0000 	ldr.w	r0, [sl]
 80019f2:	f7ff fcc9 	bl	8001388 <expRunningAverageGY>
 80019f6:	f7fe fd17 	bl	8000428 <__aeabi_f2d>
 80019fa:	a321      	add	r3, pc, #132	; (adr r3, 8001a80 <MPU9250_GetData+0x220>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fbb2 	bl	8000168 <__aeabi_dsub>
 8001a04:	f7ff f840 	bl	8000a88 <__aeabi_d2f>
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <MPU9250_GetData+0x26c>)
 8001a0a:	6018      	str	r0, [r3, #0]
	gyroZ_filtered = expRunningAverageGZ(gyroZ) - 0.004;
 8001a0c:	f8d9 0000 	ldr.w	r0, [r9]
 8001a10:	f7ff fcce 	bl	80013b0 <expRunningAverageGZ>
 8001a14:	f7fe fd08 	bl	8000428 <__aeabi_f2d>
 8001a18:	a31b      	add	r3, pc, #108	; (adr r3, 8001a88 <MPU9250_GetData+0x228>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fba3 	bl	8000168 <__aeabi_dsub>
 8001a22:	f7ff f831 	bl	8000a88 <__aeabi_d2f>
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <MPU9250_GetData+0x270>)
 8001a28:	6018      	str	r0, [r3, #0]
	accelX_filtered = expRunningAverageAX(accelX) - 0.018;
 8001a2a:	f8db 0000 	ldr.w	r0, [fp]
 8001a2e:	f7ff fcd3 	bl	80013d8 <expRunningAverageAX>
 8001a32:	f7fe fcf9 	bl	8000428 <__aeabi_f2d>
 8001a36:	a316      	add	r3, pc, #88	; (adr r3, 8001a90 <MPU9250_GetData+0x230>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	f7fe fb94 	bl	8000168 <__aeabi_dsub>
 8001a40:	f7ff f822 	bl	8000a88 <__aeabi_d2f>
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <MPU9250_GetData+0x274>)
 8001a46:	6018      	str	r0, [r3, #0]
	accelY_filtered = expRunningAverageAY(accelY) - 0.004;
 8001a48:	f8d8 0000 	ldr.w	r0, [r8]
 8001a4c:	f7ff fcd8 	bl	8001400 <expRunningAverageAY>
 8001a50:	f7fe fcea 	bl	8000428 <__aeabi_f2d>
 8001a54:	a30c      	add	r3, pc, #48	; (adr r3, 8001a88 <MPU9250_GetData+0x228>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	f7fe fb85 	bl	8000168 <__aeabi_dsub>
 8001a5e:	f7ff f813 	bl	8000a88 <__aeabi_d2f>
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <MPU9250_GetData+0x278>)
 8001a64:	6018      	str	r0, [r3, #0]
	accelZ_filtered = expRunningAverageAZ(accelZ);
 8001a66:	6838      	ldr	r0, [r7, #0]
 8001a68:	f7ff fcde 	bl	8001428 <expRunningAverageAZ>
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MPU9250_GetData+0x27c>)
 8001a6e:	6018      	str	r0, [r3, #0]
}
 8001a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a74:	f3af 8000 	nop.w
 8001a78:	47ae147b 	.word	0x47ae147b
 8001a7c:	3f747ae1 	.word	0x3f747ae1
 8001a80:	6a7ef9db 	.word	0x6a7ef9db
 8001a84:	3f9374bc 	.word	0x3f9374bc
 8001a88:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a8c:	3f70624d 	.word	0x3f70624d
 8001a90:	8d4fdf3b 	.word	0x8d4fdf3b
 8001a94:	3f926e97 	.word	0x3f926e97
 8001a98:	20000250 	.word	0x20000250
 8001a9c:	2000030c 	.word	0x2000030c
 8001aa0:	20000318 	.word	0x20000318
 8001aa4:	200002b8 	.word	0x200002b8
 8001aa8:	411ccccd 	.word	0x411ccccd
 8001aac:	41833333 	.word	0x41833333
 8001ab0:	4048f5c3 	.word	0x4048f5c3
 8001ab4:	43340000 	.word	0x43340000
 8001ab8:	20000300 	.word	0x20000300
 8001abc:	200002dc 	.word	0x200002dc
 8001ac0:	200002c4 	.word	0x200002c4
 8001ac4:	200002d0 	.word	0x200002d0
 8001ac8:	20000308 	.word	0x20000308
 8001acc:	20000314 	.word	0x20000314
 8001ad0:	20000320 	.word	0x20000320
 8001ad4:	200002c0 	.word	0x200002c0
 8001ad8:	200002cc 	.word	0x200002cc
 8001adc:	200002d8 	.word	0x200002d8

08001ae0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001ae0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 8001ae2:	2310      	movs	r3, #16
  hcan.Instance = CAN1;
 8001ae4:	480a      	ldr	r0, [pc, #40]	; (8001b10 <MX_CAN_Init+0x30>)
  hcan.Init.Prescaler = 16;
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <MX_CAN_Init+0x34>)
 8001ae8:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001aec:	2300      	movs	r3, #0
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001aee:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001af2:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001af4:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001af6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001afa:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001afe:	f000 ff7d 	bl	80029fc <HAL_CAN_Init>
 8001b02:	b118      	cbz	r0, 8001b0c <MX_CAN_Init+0x2c>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001b08:	f000 bd22 	b.w	8002550 <Error_Handler>
}
 8001b0c:	bd08      	pop	{r3, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000028c 	.word	0x2000028c
 8001b14:	40006400 	.word	0x40006400

08001b18 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b18:	b510      	push	{r4, lr}
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	2210      	movs	r2, #16
 8001b20:	2100      	movs	r1, #0
 8001b22:	a802      	add	r0, sp, #8
 8001b24:	f005 fc17 	bl	8007356 <memset>
  if(canHandle->Instance==CAN1)
 8001b28:	6822      	ldr	r2, [r4, #0]
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_CAN_MspInit+0x88>)
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d135      	bne.n	8001b9c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b30:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001b34:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b38:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b3c:	61da      	str	r2, [r3, #28]
 8001b3e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b42:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001b46:	9200      	str	r2, [sp, #0]
 8001b48:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	f042 0204 	orr.w	r2, r2, #4
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b60:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f001 fa55 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b70:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <HAL_CAN_MspInit+0x8c>)
 8001b74:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b76:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f001 fa4a 	bl	8003010 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2105      	movs	r1, #5
 8001b80:	2013      	movs	r0, #19
 8001b82:	f001 f9bf 	bl	8002f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001b86:	2013      	movs	r0, #19
 8001b88:	f001 f9ee 	bl	8002f68 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001b8c:	2014      	movs	r0, #20
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2105      	movs	r1, #5
 8001b92:	f001 f9b7 	bl	8002f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001b96:	2014      	movs	r0, #20
 8001b98:	f001 f9e6 	bl	8002f68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b9c:	b006      	add	sp, #24
 8001b9e:	bd10      	pop	{r4, pc}
 8001ba0:	40006400 	.word	0x40006400
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ba8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN StartDefaultTask */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 50;
  xLastWakeTime = xTaskGetTickCount();
 8001baa:	f003 f94d 	bl	8004e48 <xTaskGetTickCount>
 8001bae:	4c0d      	ldr	r4, [pc, #52]	; (8001be4 <StartDefaultTask+0x3c>)
  /* Infinite loop */
  for(;;)
  {
	Barometer_calculate();
	memcpy(can_alt_data, &relativeAltitudeFiltered, 4);
 8001bb0:	4d0d      	ldr	r5, [pc, #52]	; (8001be8 <StartDefaultTask+0x40>)
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderAltitude, can_alt_data, &TxMailbox) == HAL_OK) {
 8001bb2:	4e0e      	ldr	r6, [pc, #56]	; (8001bec <StartDefaultTask+0x44>)
  xLastWakeTime = xTaskGetTickCount();
 8001bb4:	9001      	str	r0, [sp, #4]
	Barometer_calculate();
 8001bb6:	f7ff fb43 	bl	8001240 <Barometer_calculate>
	memcpy(can_alt_data, &relativeAltitudeFiltered, 4);
 8001bba:	6823      	ldr	r3, [r4, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderAltitude, can_alt_data, &TxMailbox) == HAL_OK) {
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <StartDefaultTask+0x40>)
	memcpy(can_alt_data, &relativeAltitudeFiltered, 4);
 8001bbe:	602b      	str	r3, [r5, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderAltitude, can_alt_data, &TxMailbox) == HAL_OK) {
 8001bc0:	490b      	ldr	r1, [pc, #44]	; (8001bf0 <StartDefaultTask+0x48>)
 8001bc2:	4633      	mov	r3, r6
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <StartDefaultTask+0x4c>)
 8001bc6:	f001 f831 	bl	8002c2c <HAL_CAN_AddTxMessage>
 8001bca:	b918      	cbnz	r0, 8001bd4 <StartDefaultTask+0x2c>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001bcc:	2108      	movs	r1, #8
 8001bce:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <StartDefaultTask+0x50>)
 8001bd0:	f001 fafd 	bl	80031ce <HAL_GPIO_TogglePin>
	}
	osDelay(1);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f002 fb93 	bl	8004300 <osDelay>
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001bda:	2132      	movs	r1, #50	; 0x32
 8001bdc:	a801      	add	r0, sp, #4
 8001bde:	f003 fa3d 	bl	800505c <vTaskDelayUntil>
	Barometer_calculate();
 8001be2:	e7e8      	b.n	8001bb6 <StartDefaultTask+0xe>
 8001be4:	20000248 	.word	0x20000248
 8001be8:	200002e8 	.word	0x200002e8
 8001bec:	200003cc 	.word	0x200003cc
 8001bf0:	20000354 	.word	0x20000354
 8001bf4:	2000028c 	.word	0x2000028c
 8001bf8:	40010c00 	.word	0x40010c00

08001bfc <StartMPUTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMPUTask */
void StartMPUTask(void *argument)
{
 8001bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c00:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN StartMPUTask */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 1;
  xLastWakeTime = xTaskGetTickCount();
 8001c02:	f003 f921 	bl	8004e48 <xTaskGetTickCount>
	accelY_average = accelY_filtered;
	accelZ_average = accelZ_filtered;
	gyroX_average = gyroX_filtered;
	gyroY_average = gyroY_filtered;
	gyroZ_average = gyroZ_filtered;
	imu_filter(accelX_average, accelY_average, accelZ_average, gyroX_average, gyroY_average, 0);
 8001c06:	2500      	movs	r5, #0
//	memcpy(can_data, &accelZ_average, 4);
//	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//	}

	memcpy(can_data, &roll, 4);
 8001c08:	4c31      	ldr	r4, [pc, #196]	; (8001cd0 <StartMPUTask+0xd4>)
	memcpy(&can_data[4], &pitch, 4);
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 8001c0a:	4f32      	ldr	r7, [pc, #200]	; (8001cd4 <StartMPUTask+0xd8>)
  xLastWakeTime = xTaskGetTickCount();
 8001c0c:	9005      	str	r0, [sp, #20]
	MPU9250_GetData(AccData, GyroData, MagData);
 8001c0e:	aa0a      	add	r2, sp, #40	; 0x28
 8001c10:	a908      	add	r1, sp, #32
 8001c12:	a806      	add	r0, sp, #24
 8001c14:	f7ff fe24 	bl	8001860 <MPU9250_GetData>
	accelX_average = accelX_filtered;
 8001c18:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <StartMPUTask+0xdc>)
	gyroX_average = gyroX_filtered;
 8001c1a:	4e30      	ldr	r6, [pc, #192]	; (8001cdc <StartMPUTask+0xe0>)
	accelX_average = accelX_filtered;
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <StartMPUTask+0xe4>)
	gyroY_average = gyroY_filtered;
 8001c20:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001ce4 <StartMPUTask+0xe8>
	accelX_average = accelX_filtered;
 8001c24:	6018      	str	r0, [r3, #0]
	accelY_average = accelY_filtered;
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <StartMPUTask+0xec>)
	eulerAngles(q_est, &roll, &pitch, &yaw);
 8001c28:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001cec <StartMPUTask+0xf0>
	accelY_average = accelY_filtered;
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <StartMPUTask+0xf4>)
	eulerAngles(q_est, &roll, &pitch, &yaw);
 8001c30:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001cf4 <StartMPUTask+0xf8>
	accelY_average = accelY_filtered;
 8001c34:	6019      	str	r1, [r3, #0]
	accelZ_average = accelZ_filtered;
 8001c36:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <StartMPUTask+0xfc>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <StartMPUTask+0x100>)
 8001c3c:	601a      	str	r2, [r3, #0]
	gyroX_average = gyroX_filtered;
 8001c3e:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <StartMPUTask+0x104>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6033      	str	r3, [r6, #0]
	gyroY_average = gyroY_filtered;
 8001c44:	4e2f      	ldr	r6, [pc, #188]	; (8001d04 <StartMPUTask+0x108>)
 8001c46:	6836      	ldr	r6, [r6, #0]
 8001c48:	f8cc 6000 	str.w	r6, [ip]
	gyroZ_average = gyroZ_filtered;
 8001c4c:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8001d08 <StartMPUTask+0x10c>
 8001c50:	f8dc e000 	ldr.w	lr, [ip]
 8001c54:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8001d0c <StartMPUTask+0x110>
 8001c58:	f8cc e000 	str.w	lr, [ip]
	imu_filter(accelX_average, accelY_average, accelZ_average, gyroX_average, gyroY_average, 0);
 8001c5c:	9600      	str	r6, [sp, #0]
 8001c5e:	9501      	str	r5, [sp, #4]
 8001c60:	f000 f9bc 	bl	8001fdc <imu_filter>
	yaw = 0;
 8001c64:	4e2a      	ldr	r6, [pc, #168]	; (8001d10 <StartMPUTask+0x114>)
	q_est.q4 = 0;
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <StartMPUTask+0x118>)
	yaw = 0;
 8001c68:	6035      	str	r5, [r6, #0]
	q_est.q4 = 0;
 8001c6a:	60dd      	str	r5, [r3, #12]
	eulerAngles(q_est, &roll, &pitch, &yaw);
 8001c6c:	9602      	str	r6, [sp, #8]
 8001c6e:	f8cd 8004 	str.w	r8, [sp, #4]
 8001c72:	f8cd 9000 	str.w	r9, [sp]
 8001c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c78:	f000 fb2e 	bl	80022d8 <eulerAngles>
	memcpy(can_data, &roll, 4);
 8001c7c:	f8d9 3000 	ldr.w	r3, [r9]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <StartMPUTask+0xd4>)
	memcpy(can_data, &roll, 4);
 8001c82:	6023      	str	r3, [r4, #0]
	memcpy(&can_data[4], &pitch, 4);
 8001c84:	f8d8 3000 	ldr.w	r3, [r8]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 8001c88:	4923      	ldr	r1, [pc, #140]	; (8001d18 <StartMPUTask+0x11c>)
	memcpy(&can_data[4], &pitch, 4);
 8001c8a:	6063      	str	r3, [r4, #4]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 8001c8c:	4823      	ldr	r0, [pc, #140]	; (8001d1c <StartMPUTask+0x120>)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	f000 ffcc 	bl	8002c2c <HAL_CAN_AddTxMessage>
 8001c94:	b918      	cbnz	r0, 8001c9e <StartMPUTask+0xa2>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001c96:	2108      	movs	r1, #8
 8001c98:	4821      	ldr	r0, [pc, #132]	; (8001d20 <StartMPUTask+0x124>)
 8001c9a:	f001 fa98 	bl	80031ce <HAL_GPIO_TogglePin>
	}
	osDelay(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f002 fb2e 	bl	8004300 <osDelay>
	memcpy(can_data, &yaw, 4);
 8001ca4:	6833      	ldr	r3, [r6, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
 8001ca6:	4622      	mov	r2, r4
	memcpy(can_data, &yaw, 4);
 8001ca8:	6023      	str	r3, [r4, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
 8001caa:	491e      	ldr	r1, [pc, #120]	; (8001d24 <StartMPUTask+0x128>)
 8001cac:	463b      	mov	r3, r7
 8001cae:	481b      	ldr	r0, [pc, #108]	; (8001d1c <StartMPUTask+0x120>)
 8001cb0:	f000 ffbc 	bl	8002c2c <HAL_CAN_AddTxMessage>
 8001cb4:	b918      	cbnz	r0, 8001cbe <StartMPUTask+0xc2>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	4819      	ldr	r0, [pc, #100]	; (8001d20 <StartMPUTask+0x124>)
 8001cba:	f001 fa88 	bl	80031ce <HAL_GPIO_TogglePin>
	}
	count = HAL_GetTick();
 8001cbe:	f000 fe85 	bl	80029cc <HAL_GetTick>
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <StartMPUTask+0x12c>)
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001cc4:	2101      	movs	r1, #1
	count = HAL_GetTick();
 8001cc6:	6018      	str	r0, [r3, #0]
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001cc8:	a805      	add	r0, sp, #20
 8001cca:	f003 f9c7 	bl	800505c <vTaskDelayUntil>
  {
 8001cce:	e79e      	b.n	8001c0e <StartMPUTask+0x12>
 8001cd0:	200002f0 	.word	0x200002f0
 8001cd4:	200003cc 	.word	0x200003cc
 8001cd8:	200002c0 	.word	0x200002c0
 8001cdc:	20000304 	.word	0x20000304
 8001ce0:	200002bc 	.word	0x200002bc
 8001ce4:	20000310 	.word	0x20000310
 8001ce8:	200002cc 	.word	0x200002cc
 8001cec:	20000330 	.word	0x20000330
 8001cf0:	200002c8 	.word	0x200002c8
 8001cf4:	20000334 	.word	0x20000334
 8001cf8:	200002d8 	.word	0x200002d8
 8001cfc:	200002d4 	.word	0x200002d4
 8001d00:	20000308 	.word	0x20000308
 8001d04:	20000314 	.word	0x20000314
 8001d08:	20000320 	.word	0x20000320
 8001d0c:	2000031c 	.word	0x2000031c
 8001d10:	20000338 	.word	0x20000338
 8001d14:	20000010 	.word	0x20000010
 8001d18:	2000039c 	.word	0x2000039c
 8001d1c:	2000028c 	.word	0x2000028c
 8001d20:	40010c00 	.word	0x40010c00
 8001d24:	200003b4 	.word	0x200003b4
 8001d28:	200002f8 	.word	0x200002f8

08001d2c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001d2c:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d2e:	2100      	movs	r1, #0
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <MX_FREERTOS_Init+0x20>)
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <MX_FREERTOS_Init+0x24>)
 8001d34:	f002 fa88 	bl	8004248 <osThreadNew>
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_FREERTOS_Init+0x28>)
  MPUTaskHandle = osThreadNew(StartMPUTask, NULL, &MPUTask_attributes);
 8001d3a:	2100      	movs	r1, #0
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d3c:	6018      	str	r0, [r3, #0]
  MPUTaskHandle = osThreadNew(StartMPUTask, NULL, &MPUTask_attributes);
 8001d3e:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <MX_FREERTOS_Init+0x2c>)
 8001d40:	4806      	ldr	r0, [pc, #24]	; (8001d5c <MX_FREERTOS_Init+0x30>)
 8001d42:	f002 fa81 	bl	8004248 <osThreadNew>
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_FREERTOS_Init+0x34>)
 8001d48:	6018      	str	r0, [r3, #0]
}
 8001d4a:	bd08      	pop	{r3, pc}
 8001d4c:	08009c98 	.word	0x08009c98
 8001d50:	08001ba9 	.word	0x08001ba9
 8001d54:	200002fc 	.word	0x200002fc
 8001d58:	08009c74 	.word	0x08009c74
 8001d5c:	08001bfd 	.word	0x08001bfd
 8001d60:	200002b4 	.word	0x200002b4

08001d64 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	2210      	movs	r2, #16
{
 8001d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d6a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	eb0d 0002 	add.w	r0, sp, r2
 8001d70:	2100      	movs	r1, #0
 8001d72:	f005 faf0 	bl	8007356 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001d78:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8001e00 <MX_GPIO_Init+0x9c>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7c:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001d7e:	4c21      	ldr	r4, [pc, #132]	; (8001e04 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d80:	f042 0220 	orr.w	r2, r2, #32
 8001d84:	619a      	str	r2, [r3, #24]
 8001d86:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001d88:	4640      	mov	r0, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8a:	f002 0220 	and.w	r2, r2, #32
 8001d8e:	9201      	str	r2, [sp, #4]
 8001d90:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001d94:	f248 3110 	movw	r1, #33552	; 0x8310
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	f042 0204 	orr.w	r2, r2, #4
 8001d9c:	619a      	str	r2, [r3, #24]
 8001d9e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	f002 0204 	and.w	r2, r2, #4
 8001da6:	9202      	str	r2, [sp, #8]
 8001da8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	f042 0208 	orr.w	r2, r2, #8
 8001db2:	619a      	str	r2, [r3, #24]
 8001db4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	9303      	str	r3, [sp, #12]
 8001dbe:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001dc0:	f001 fa00 	bl	80031c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	2118      	movs	r1, #24
 8001dca:	f001 f9fb 	bl	80031c4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	f248 3310 	movw	r3, #33552	; 0x8310
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	4640      	mov	r0, r8
 8001dd6:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f001 f916 	bl	8003010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001de4:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	4620      	mov	r0, r4
 8001de8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dea:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f001 f90d 	bl	8003010 <HAL_GPIO_Init>

}
 8001df6:	b008      	add	sp, #32
 8001df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40010c00 	.word	0x40010c00

08001e08 <quat_Normalization>:
// norm of a quaternion is the same as a complex number
// sqrt( q1^2 + q2^2 + q3^2 + q4^2)
// the norm is also the sqrt(q * conjugate(q)), but thats a lot of operations in the quaternion multiplication
static inline float quat_Norm (struct quaternion q)
{
    return sqrt(q.q1*q.q1 + q.q2*q.q2 + q.q3*q.q3 +q.q4*q.q4);
 8001e08:	6801      	ldr	r1, [r0, #0]
}

// Normalizes pointer q by calling quat_Norm(q),
static inline void quat_Normalization(struct quaternion * q){
 8001e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0e:	4604      	mov	r4, r0
 8001e10:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8001e14:	6887      	ldr	r7, [r0, #8]
 8001e16:	68c6      	ldr	r6, [r0, #12]
    return sqrt(q.q1*q.q1 + q.q2*q.q2 + q.q3*q.q3 +q.q4*q.q4);
 8001e18:	4608      	mov	r0, r1
 8001e1a:	f7fe ff93 	bl	8000d44 <__aeabi_fmul>
 8001e1e:	4641      	mov	r1, r8
 8001e20:	4605      	mov	r5, r0
 8001e22:	4640      	mov	r0, r8
 8001e24:	f7fe ff8e 	bl	8000d44 <__aeabi_fmul>
 8001e28:	4601      	mov	r1, r0
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	f7fe fe82 	bl	8000b34 <__addsf3>
 8001e30:	4639      	mov	r1, r7
 8001e32:	4605      	mov	r5, r0
 8001e34:	4638      	mov	r0, r7
 8001e36:	f7fe ff85 	bl	8000d44 <__aeabi_fmul>
 8001e3a:	4601      	mov	r1, r0
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	f7fe fe79 	bl	8000b34 <__addsf3>
 8001e42:	4631      	mov	r1, r6
 8001e44:	4605      	mov	r5, r0
 8001e46:	4630      	mov	r0, r6
 8001e48:	f7fe ff7c 	bl	8000d44 <__aeabi_fmul>
 8001e4c:	4601      	mov	r1, r0
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f7fe fe70 	bl	8000b34 <__addsf3>
 8001e54:	f7fe fae8 	bl	8000428 <__aeabi_f2d>
 8001e58:	f003 ff5a 	bl	8005d10 <sqrt>
 8001e5c:	f7fe fe14 	bl	8000a88 <__aeabi_d2f>
 8001e60:	4605      	mov	r5, r0
    float norm = quat_Norm(*q);
    q -> q1 /= norm;
 8001e62:	4601      	mov	r1, r0
 8001e64:	6820      	ldr	r0, [r4, #0]
 8001e66:	f7ff f821 	bl	8000eac <__aeabi_fdiv>
    q -> q2 /= norm;
 8001e6a:	4629      	mov	r1, r5
    q -> q1 /= norm;
 8001e6c:	6020      	str	r0, [r4, #0]
    q -> q2 /= norm;
 8001e6e:	6860      	ldr	r0, [r4, #4]
 8001e70:	f7ff f81c 	bl	8000eac <__aeabi_fdiv>
    q -> q3 /= norm;
 8001e74:	4629      	mov	r1, r5
    q -> q2 /= norm;
 8001e76:	6060      	str	r0, [r4, #4]
    q -> q3 /= norm;
 8001e78:	68a0      	ldr	r0, [r4, #8]
 8001e7a:	f7ff f817 	bl	8000eac <__aeabi_fdiv>
    q -> q4 /= norm;
 8001e7e:	4629      	mov	r1, r5
    q -> q3 /= norm;
 8001e80:	60a0      	str	r0, [r4, #8]
    q -> q4 /= norm;
 8001e82:	68e0      	ldr	r0, [r4, #12]
 8001e84:	f7ff f812 	bl	8000eac <__aeabi_fdiv>
 8001e88:	60e0      	str	r0, [r4, #12]
}
 8001e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e8e <quat_mult>:

#include "madgwickFilter.h"

struct quaternion q_est = { 1, 0, 0, 0};       // initialize with as unit vector with real component  = 1

struct quaternion quat_mult (struct quaternion L, struct quaternion R){
 8001e8e:	b084      	sub	sp, #16
 8001e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e94:	9000      	str	r0, [sp, #0]
 8001e96:	a80d      	add	r0, sp, #52	; 0x34
 8001e98:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001e9c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001e9e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    
    
    struct quaternion product;
    product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 8001ea2:	4631      	mov	r1, r6
 8001ea4:	4658      	mov	r0, fp
 8001ea6:	f7fe ff4d 	bl	8000d44 <__aeabi_fmul>
 8001eaa:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8001eae:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8001eb2:	9001      	str	r0, [sp, #4]
 8001eb4:	4641      	mov	r1, r8
 8001eb6:	4648      	mov	r0, r9
 8001eb8:	f7fe ff44 	bl	8000d44 <__aeabi_fmul>
 8001ebc:	9a01      	ldr	r2, [sp, #4]
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f7fe fe35 	bl	8000b30 <__aeabi_fsub>
 8001ec6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001ec8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8001ecc:	9001      	str	r0, [sp, #4]
 8001ece:	4651      	mov	r1, sl
 8001ed0:	4638      	mov	r0, r7
 8001ed2:	f7fe ff37 	bl	8000d44 <__aeabi_fmul>
 8001ed6:	9a01      	ldr	r2, [sp, #4]
 8001ed8:	4601      	mov	r1, r0
 8001eda:	4610      	mov	r0, r2
 8001edc:	f7fe fe28 	bl	8000b30 <__aeabi_fsub>
 8001ee0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001ee2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8001ee4:	9001      	str	r0, [sp, #4]
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	4628      	mov	r0, r5
 8001eea:	f7fe ff2b 	bl	8000d44 <__aeabi_fmul>
 8001eee:	9a01      	ldr	r2, [sp, #4]
 8001ef0:	4601      	mov	r1, r0
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f7fe fe1c 	bl	8000b30 <__aeabi_fsub>
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
    
    return product;
 8001ef8:	9b00      	ldr	r3, [sp, #0]
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 8001efa:	4641      	mov	r1, r8
    return product;
 8001efc:	6018      	str	r0, [r3, #0]
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 8001efe:	4658      	mov	r0, fp
 8001f00:	f7fe ff20 	bl	8000d44 <__aeabi_fmul>
 8001f04:	4631      	mov	r1, r6
 8001f06:	9001      	str	r0, [sp, #4]
 8001f08:	4648      	mov	r0, r9
 8001f0a:	f7fe ff1b 	bl	8000d44 <__aeabi_fmul>
 8001f0e:	9a01      	ldr	r2, [sp, #4]
 8001f10:	4601      	mov	r1, r0
 8001f12:	4610      	mov	r0, r2
 8001f14:	f7fe fe0e 	bl	8000b34 <__addsf3>
 8001f18:	4621      	mov	r1, r4
 8001f1a:	9001      	str	r0, [sp, #4]
 8001f1c:	4638      	mov	r0, r7
 8001f1e:	f7fe ff11 	bl	8000d44 <__aeabi_fmul>
 8001f22:	9a01      	ldr	r2, [sp, #4]
 8001f24:	4601      	mov	r1, r0
 8001f26:	4610      	mov	r0, r2
 8001f28:	f7fe fe04 	bl	8000b34 <__addsf3>
 8001f2c:	4651      	mov	r1, sl
 8001f2e:	9001      	str	r0, [sp, #4]
 8001f30:	4628      	mov	r0, r5
 8001f32:	f7fe ff07 	bl	8000d44 <__aeabi_fmul>
 8001f36:	9a01      	ldr	r2, [sp, #4]
 8001f38:	4601      	mov	r1, r0
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f7fe fdf8 	bl	8000b30 <__aeabi_fsub>
    return product;
 8001f40:	9b00      	ldr	r3, [sp, #0]
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 8001f42:	4651      	mov	r1, sl
    return product;
 8001f44:	6058      	str	r0, [r3, #4]
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 8001f46:	4658      	mov	r0, fp
 8001f48:	f7fe fefc 	bl	8000d44 <__aeabi_fmul>
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	9001      	str	r0, [sp, #4]
 8001f50:	4648      	mov	r0, r9
 8001f52:	f7fe fef7 	bl	8000d44 <__aeabi_fmul>
 8001f56:	9a01      	ldr	r2, [sp, #4]
 8001f58:	4601      	mov	r1, r0
 8001f5a:	4610      	mov	r0, r2
 8001f5c:	f7fe fde8 	bl	8000b30 <__aeabi_fsub>
 8001f60:	4631      	mov	r1, r6
 8001f62:	9001      	str	r0, [sp, #4]
 8001f64:	4638      	mov	r0, r7
 8001f66:	f7fe feed 	bl	8000d44 <__aeabi_fmul>
 8001f6a:	9a01      	ldr	r2, [sp, #4]
 8001f6c:	4601      	mov	r1, r0
 8001f6e:	4610      	mov	r0, r2
 8001f70:	f7fe fde0 	bl	8000b34 <__addsf3>
 8001f74:	4641      	mov	r1, r8
 8001f76:	9001      	str	r0, [sp, #4]
 8001f78:	4628      	mov	r0, r5
 8001f7a:	f7fe fee3 	bl	8000d44 <__aeabi_fmul>
 8001f7e:	9a01      	ldr	r2, [sp, #4]
 8001f80:	4601      	mov	r1, r0
 8001f82:	4610      	mov	r0, r2
 8001f84:	f7fe fdd6 	bl	8000b34 <__addsf3>
    return product;
 8001f88:	9b00      	ldr	r3, [sp, #0]
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 8001f8a:	4621      	mov	r1, r4
    return product;
 8001f8c:	6098      	str	r0, [r3, #8]
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 8001f8e:	4658      	mov	r0, fp
 8001f90:	f7fe fed8 	bl	8000d44 <__aeabi_fmul>
 8001f94:	4651      	mov	r1, sl
 8001f96:	4683      	mov	fp, r0
 8001f98:	4648      	mov	r0, r9
 8001f9a:	f7fe fed3 	bl	8000d44 <__aeabi_fmul>
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	4658      	mov	r0, fp
 8001fa2:	f7fe fdc7 	bl	8000b34 <__addsf3>
 8001fa6:	4641      	mov	r1, r8
 8001fa8:	4681      	mov	r9, r0
 8001faa:	4638      	mov	r0, r7
 8001fac:	f7fe feca 	bl	8000d44 <__aeabi_fmul>
 8001fb0:	4601      	mov	r1, r0
 8001fb2:	4648      	mov	r0, r9
 8001fb4:	f7fe fdbc 	bl	8000b30 <__aeabi_fsub>
 8001fb8:	4631      	mov	r1, r6
 8001fba:	4607      	mov	r7, r0
 8001fbc:	4628      	mov	r0, r5
 8001fbe:	f7fe fec1 	bl	8000d44 <__aeabi_fmul>
 8001fc2:	4601      	mov	r1, r0
 8001fc4:	4638      	mov	r0, r7
 8001fc6:	f7fe fdb5 	bl	8000b34 <__addsf3>
    return product;
 8001fca:	9b00      	ldr	r3, [sp, #0]
 8001fcc:	60d8      	str	r0, [r3, #12]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	b003      	add	sp, #12
 8001fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fd6:	b004      	add	sp, #16
 8001fd8:	4770      	bx	lr
	...

08001fdc <imu_filter>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void imu_filter(float ax, float ay, float az, float gx, float gy, float gz){
 8001fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe0:	4694      	mov	ip, r2
 8001fe2:	468e      	mov	lr, r1
    
    //Variables and constants
    struct quaternion q_est_prev = q_est;
    struct quaternion q_est_dot = {0};            // used as a place holder in equations 42 and 43
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8001fe4:	2700      	movs	r7, #0
void imu_filter(float ax, float ay, float az, float gx, float gy, float gz){
 8001fe6:	4683      	mov	fp, r0
 8001fe8:	4698      	mov	r8, r3
 8001fea:	b0a3      	sub	sp, #140	; 0x8c
    struct quaternion q_est_prev = q_est;
 8001fec:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 80022c4 <imu_filter+0x2e8>
 8001ff0:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8001ff4:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8001ff8:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8001ffc:	f8da 300c 	ldr.w	r3, [sl, #12]
    
    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
    float J_g [3][4] = {0};                     // jacobian matrix for gravity
    
    struct quaternion gradient = {0};
 8002000:	2210      	movs	r2, #16
 8002002:	2100      	movs	r1, #0
 8002004:	a81a      	add	r0, sp, #104	; 0x68
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8002006:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
    struct quaternion q_est_prev = q_est;
 800200a:	f8da 4008 	ldr.w	r4, [sl, #8]
 800200e:	f8da 5004 	ldr.w	r5, [sl, #4]
 8002012:	f8da 6000 	ldr.w	r6, [sl]
 8002016:	9306      	str	r3, [sp, #24]
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8002018:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800201c:	9716      	str	r7, [sp, #88]	; 0x58
 800201e:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
    struct quaternion gradient = {0};
 8002022:	f005 f998 	bl	8007356 <memset>
    q -> q2 *= scalar;
 8002026:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800202a:	4640      	mov	r0, r8
    q_w.q2 = gx;
    q_w.q3 = gy;
    q_w.q4 = gz;
    
    quat_scalar(&q_w, 0.5);                  // equation (12) dq/dt = (1/2)q*w
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 800202c:	971e      	str	r7, [sp, #120]	; 0x78
 800202e:	f7fe fe89 	bl	8000d44 <__aeabi_fmul>
    q -> q3 *= scalar;
 8002032:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002036:	901f      	str	r0, [sp, #124]	; 0x7c
 8002038:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800203a:	f7fe fe83 	bl	8000d44 <__aeabi_fmul>
    q -> q4 *= scalar;
 800203e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002042:	9020      	str	r0, [sp, #128]	; 0x80
 8002044:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8002046:	f7fe fe7d 	bl	8000d44 <__aeabi_fmul>
 800204a:	f10d 0878 	add.w	r8, sp, #120	; 0x78
 800204e:	f10d 0c04 	add.w	ip, sp, #4
 8002052:	9021      	str	r0, [sp, #132]	; 0x84
 8002054:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8002058:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800205c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800205e:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4658      	mov	r0, fp
 8002066:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 800206a:	f7ff ff10 	bl	8001e8e <quat_mult>
 800206e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8002072:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 8002076:	9b1e      	ldr	r3, [sp, #120]	; 0x78
     The matrix multiplcation can also be done hard coded to reduce code.
     
     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */
    
    quat_Normalization(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 8002078:	a816      	add	r0, sp, #88	; 0x58
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 800207a:	930b      	str	r3, [sp, #44]	; 0x2c
 800207c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800207e:	9308      	str	r3, [sp, #32]
 8002080:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002082:	9309      	str	r3, [sp, #36]	; 0x24
 8002084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002086:	930a      	str	r3, [sp, #40]	; 0x28
    quat_Normalization(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 8002088:	f7ff febe 	bl	8001e08 <quat_Normalization>
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 800208c:	9906      	ldr	r1, [sp, #24]
 800208e:	4628      	mov	r0, r5
 8002090:	f7fe fe58 	bl	8000d44 <__aeabi_fmul>
 8002094:	4621      	mov	r1, r4
 8002096:	4680      	mov	r8, r0
 8002098:	4630      	mov	r0, r6
 800209a:	f7fe fe53 	bl	8000d44 <__aeabi_fmul>
 800209e:	4601      	mov	r1, r0
 80020a0:	4640      	mov	r0, r8
 80020a2:	f7fe fd45 	bl	8000b30 <__aeabi_fsub>
 80020a6:	4601      	mov	r1, r0
 80020a8:	f7fe fd44 	bl	8000b34 <__addsf3>
 80020ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80020ae:	f7fe fd3f 	bl	8000b30 <__aeabi_fsub>
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 80020b2:	4629      	mov	r1, r5
    F_g[0] = 2*(q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 80020b4:	9007      	str	r0, [sp, #28]
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 80020b6:	4630      	mov	r0, r6
 80020b8:	f7fe fe44 	bl	8000d44 <__aeabi_fmul>
 80020bc:	9906      	ldr	r1, [sp, #24]
 80020be:	4680      	mov	r8, r0
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7fe fe3f 	bl	8000d44 <__aeabi_fmul>
 80020c6:	4601      	mov	r1, r0
 80020c8:	4640      	mov	r0, r8
 80020ca:	f7fe fd33 	bl	8000b34 <__addsf3>
 80020ce:	4601      	mov	r1, r0
 80020d0:	f7fe fd30 	bl	8000b34 <__addsf3>
 80020d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80020d6:	f7fe fd2b 	bl	8000b30 <__aeabi_fsub>
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 80020da:	4629      	mov	r1, r5
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 80020dc:	4683      	mov	fp, r0
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 80020de:	4628      	mov	r0, r5
 80020e0:	f7fe fe30 	bl	8000d44 <__aeabi_fmul>
 80020e4:	f7fe f9a0 	bl	8000428 <__aeabi_f2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	2000      	movs	r0, #0
 80020ee:	4976      	ldr	r1, [pc, #472]	; (80022c8 <imu_filter+0x2ec>)
 80020f0:	f7fe f83a 	bl	8000168 <__aeabi_dsub>
 80020f4:	4680      	mov	r8, r0
 80020f6:	4689      	mov	r9, r1
 80020f8:	4620      	mov	r0, r4
 80020fa:	4621      	mov	r1, r4
 80020fc:	f7fe fe22 	bl	8000d44 <__aeabi_fmul>
 8002100:	f7fe f992 	bl	8000428 <__aeabi_f2d>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4640      	mov	r0, r8
 800210a:	4649      	mov	r1, r9
 800210c:	f7fe f82c 	bl	8000168 <__aeabi_dsub>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	f7fe f82a 	bl	800016c <__adddf3>
 8002118:	4680      	mov	r8, r0
 800211a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800211c:	4689      	mov	r9, r1
 800211e:	f7fe f983 	bl	8000428 <__aeabi_f2d>
 8002122:	460b      	mov	r3, r1
 8002124:	4602      	mov	r2, r0
 8002126:	4649      	mov	r1, r9
 8002128:	4640      	mov	r0, r8
 800212a:	f7fe f81d 	bl	8000168 <__aeabi_dsub>
 800212e:	f7fe fcab 	bl	8000a88 <__aeabi_d2f>
    
    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
    J_g[0][1] =  2 * q_est_prev.q4;
 8002132:	9906      	ldr	r1, [sp, #24]
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8002134:	4680      	mov	r8, r0
    J_g[0][1] =  2 * q_est_prev.q4;
 8002136:	4608      	mov	r0, r1
 8002138:	f7fe fcfc 	bl	8000b34 <__addsf3>
    J_g[0][2] = -2 * q_est_prev.q1;
    J_g[0][3] =  2 * q_est_prev.q2;
 800213c:	4629      	mov	r1, r5
    J_g[0][1] =  2 * q_est_prev.q4;
 800213e:	4681      	mov	r9, r0
    J_g[0][3] =  2 * q_est_prev.q2;
 8002140:	4628      	mov	r0, r5
 8002142:	f7fe fcf7 	bl	8000b34 <__addsf3>
    J_g[2][1] = -4 * q_est_prev.q2;
    J_g[2][2] = -4 * q_est_prev.q3;
    J_g[2][3] = 0;
    
    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8002146:	4639      	mov	r1, r7
    J_g[0][3] =  2 * q_est_prev.q2;
 8002148:	900d      	str	r0, [sp, #52]	; 0x34
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 800214a:	4640      	mov	r0, r8
 800214c:	f7fe fdfa 	bl	8000d44 <__aeabi_fmul>
    J_g[0][0] = -2 * q_est_prev.q3;
 8002150:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8002154:	900c      	str	r0, [sp, #48]	; 0x30
    J_g[0][0] = -2 * q_est_prev.q3;
 8002156:	4620      	mov	r0, r4
 8002158:	f7fe fdf4 	bl	8000d44 <__aeabi_fmul>
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 800215c:	9907      	ldr	r1, [sp, #28]
 800215e:	f7fe fdf1 	bl	8000d44 <__aeabi_fmul>
 8002162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002164:	4607      	mov	r7, r0
 8002166:	4611      	mov	r1, r2
 8002168:	4658      	mov	r0, fp
 800216a:	f7fe fdeb 	bl	8000d44 <__aeabi_fmul>
 800216e:	4601      	mov	r1, r0
 8002170:	4638      	mov	r0, r7
 8002172:	f7fe fcdf 	bl	8000b34 <__addsf3>
 8002176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fcdb 	bl	8000b34 <__addsf3>
    J_g[1][1] = 2 * q_est_prev.q1;
 800217e:	4631      	mov	r1, r6
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8002180:	901a      	str	r0, [sp, #104]	; 0x68
    J_g[1][1] = 2 * q_est_prev.q1;
 8002182:	4630      	mov	r0, r6
 8002184:	f7fe fcd6 	bl	8000b34 <__addsf3>
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8002188:	4659      	mov	r1, fp
 800218a:	f7fe fddb 	bl	8000d44 <__aeabi_fmul>
 800218e:	4649      	mov	r1, r9
 8002190:	4607      	mov	r7, r0
 8002192:	9807      	ldr	r0, [sp, #28]
 8002194:	f7fe fdd6 	bl	8000d44 <__aeabi_fmul>
 8002198:	4601      	mov	r1, r0
 800219a:	4638      	mov	r0, r7
 800219c:	f7fe fcca 	bl	8000b34 <__addsf3>
    J_g[2][1] = -4 * q_est_prev.q2;
 80021a0:	494a      	ldr	r1, [pc, #296]	; (80022cc <imu_filter+0x2f0>)
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 80021a2:	4607      	mov	r7, r0
    J_g[2][1] = -4 * q_est_prev.q2;
 80021a4:	4628      	mov	r0, r5
 80021a6:	f7fe fdcd 	bl	8000d44 <__aeabi_fmul>
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 80021aa:	4641      	mov	r1, r8
 80021ac:	f7fe fdca 	bl	8000d44 <__aeabi_fmul>
 80021b0:	4601      	mov	r1, r0
 80021b2:	4638      	mov	r0, r7
 80021b4:	f7fe fcbe 	bl	8000b34 <__addsf3>
    J_g[0][2] = -2 * q_est_prev.q1;
 80021b8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 80021bc:	901b      	str	r0, [sp, #108]	; 0x6c
    J_g[0][2] = -2 * q_est_prev.q1;
 80021be:	4630      	mov	r0, r6
 80021c0:	f7fe fdc0 	bl	8000d44 <__aeabi_fmul>
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 80021c4:	9907      	ldr	r1, [sp, #28]
 80021c6:	f7fe fdbd 	bl	8000d44 <__aeabi_fmul>
 80021ca:	4649      	mov	r1, r9
 80021cc:	4607      	mov	r7, r0
 80021ce:	4658      	mov	r0, fp
 80021d0:	f7fe fdb8 	bl	8000d44 <__aeabi_fmul>
 80021d4:	4601      	mov	r1, r0
 80021d6:	4638      	mov	r0, r7
 80021d8:	f7fe fcac 	bl	8000b34 <__addsf3>
    J_g[2][2] = -4 * q_est_prev.q3;
 80021dc:	493b      	ldr	r1, [pc, #236]	; (80022cc <imu_filter+0x2f0>)
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 80021de:	4607      	mov	r7, r0
    J_g[2][2] = -4 * q_est_prev.q3;
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7fe fdaf 	bl	8000d44 <__aeabi_fmul>
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 80021e6:	4641      	mov	r1, r8
 80021e8:	f7fe fdac 	bl	8000d44 <__aeabi_fmul>
 80021ec:	4601      	mov	r1, r0
 80021ee:	4638      	mov	r0, r7
 80021f0:	f7fe fca0 	bl	8000b34 <__addsf3>
    J_g[1][3] = 2 * q_est_prev.q3;
 80021f4:	4621      	mov	r1, r4
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 80021f6:	901c      	str	r0, [sp, #112]	; 0x70
    J_g[1][3] = 2 * q_est_prev.q3;
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7fe fc9b 	bl	8000b34 <__addsf3>
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 80021fe:	4659      	mov	r1, fp
 8002200:	f7fe fda0 	bl	8000d44 <__aeabi_fmul>
 8002204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002206:	4607      	mov	r7, r0
 8002208:	4611      	mov	r1, r2
 800220a:	9807      	ldr	r0, [sp, #28]
 800220c:	f7fe fd9a 	bl	8000d44 <__aeabi_fmul>
 8002210:	4601      	mov	r1, r0
 8002212:	4638      	mov	r0, r7
 8002214:	f7fe fc8e 	bl	8000b34 <__addsf3>
 8002218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fc8a 	bl	8000b34 <__addsf3>
 8002220:	901d      	str	r0, [sp, #116]	; 0x74
    
    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 8002222:	a81a      	add	r0, sp, #104	; 0x68
 8002224:	f7ff fdf0 	bl	8001e08 <quat_Normalization>
    q -> q1 *= scalar;
 8002228:	981a      	ldr	r0, [sp, #104]	; 0x68
 800222a:	4929      	ldr	r1, [pc, #164]	; (80022d0 <imu_filter+0x2f4>)
 800222c:	f7fe fd8a 	bl	8000d44 <__aeabi_fmul>
    q -> q2 *= scalar;
 8002230:	4927      	ldr	r1, [pc, #156]	; (80022d0 <imu_filter+0x2f4>)
    q -> q1 *= scalar;
 8002232:	4683      	mov	fp, r0
 8002234:	901a      	str	r0, [sp, #104]	; 0x68
    q -> q2 *= scalar;
 8002236:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002238:	f7fe fd84 	bl	8000d44 <__aeabi_fmul>
    q -> q3 *= scalar;
 800223c:	4924      	ldr	r1, [pc, #144]	; (80022d0 <imu_filter+0x2f4>)
    q -> q2 *= scalar;
 800223e:	4681      	mov	r9, r0
 8002240:	901b      	str	r0, [sp, #108]	; 0x6c
    q -> q3 *= scalar;
 8002242:	981c      	ldr	r0, [sp, #112]	; 0x70
 8002244:	f7fe fd7e 	bl	8000d44 <__aeabi_fmul>
    q -> q4 *= scalar;
 8002248:	4921      	ldr	r1, [pc, #132]	; (80022d0 <imu_filter+0x2f4>)
    q -> q3 *= scalar;
 800224a:	4680      	mov	r8, r0
 800224c:	901c      	str	r0, [sp, #112]	; 0x70
    q -> q4 *= scalar;
 800224e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8002250:	f7fe fd78 	bl	8000d44 <__aeabi_fmul>
    Sum -> q1 = L.q1 - R.q1;
 8002254:	4659      	mov	r1, fp
    q -> q4 *= scalar;
 8002256:	4607      	mov	r7, r0
 8002258:	901d      	str	r0, [sp, #116]	; 0x74
    Sum -> q1 = L.q1 - R.q1;
 800225a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800225c:	f7fe fc68 	bl	8000b30 <__aeabi_fsub>
    q -> q1 *= scalar;
 8002260:	491c      	ldr	r1, [pc, #112]	; (80022d4 <imu_filter+0x2f8>)
 8002262:	f7fe fd6f 	bl	8000d44 <__aeabi_fmul>
    Sum -> q1 = L.q1 + R.q1;
 8002266:	4631      	mov	r1, r6
 8002268:	f7fe fc64 	bl	8000b34 <__addsf3>
    Sum -> q2 = L.q2 - R.q2;
 800226c:	4649      	mov	r1, r9
    Sum -> q1 = L.q1 + R.q1;
 800226e:	f8ca 0000 	str.w	r0, [sl]
    Sum -> q2 = L.q2 - R.q2;
 8002272:	9808      	ldr	r0, [sp, #32]
 8002274:	f7fe fc5c 	bl	8000b30 <__aeabi_fsub>
    q -> q2 *= scalar;
 8002278:	4916      	ldr	r1, [pc, #88]	; (80022d4 <imu_filter+0x2f8>)
 800227a:	f7fe fd63 	bl	8000d44 <__aeabi_fmul>
    Sum -> q2 = L.q2 + R.q2;
 800227e:	4629      	mov	r1, r5
 8002280:	f7fe fc58 	bl	8000b34 <__addsf3>
    Sum -> q3 = L.q3 - R.q3;
 8002284:	4641      	mov	r1, r8
    Sum -> q2 = L.q2 + R.q2;
 8002286:	f8ca 0004 	str.w	r0, [sl, #4]
    Sum -> q3 = L.q3 - R.q3;
 800228a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800228c:	f7fe fc50 	bl	8000b30 <__aeabi_fsub>
    q -> q3 *= scalar;
 8002290:	4910      	ldr	r1, [pc, #64]	; (80022d4 <imu_filter+0x2f8>)
 8002292:	f7fe fd57 	bl	8000d44 <__aeabi_fmul>
    Sum -> q3 = L.q3 + R.q3;
 8002296:	4621      	mov	r1, r4
 8002298:	f7fe fc4c 	bl	8000b34 <__addsf3>
    Sum -> q4 = L.q4 - R.q4;
 800229c:	4639      	mov	r1, r7
    Sum -> q3 = L.q3 + R.q3;
 800229e:	f8ca 0008 	str.w	r0, [sl, #8]
    Sum -> q4 = L.q4 - R.q4;
 80022a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022a4:	f7fe fc44 	bl	8000b30 <__aeabi_fsub>
    q -> q4 *= scalar;
 80022a8:	490a      	ldr	r1, [pc, #40]	; (80022d4 <imu_filter+0x2f8>)
 80022aa:	f7fe fd4b 	bl	8000d44 <__aeabi_fmul>
    Sum -> q4 = L.q4 + R.q4;
 80022ae:	9906      	ldr	r1, [sp, #24]
 80022b0:	f7fe fc40 	bl	8000b34 <__addsf3>
 80022b4:	f8ca 000c 	str.w	r0, [sl, #12]
    */
    quat_scalar(&gradient, BETA);             // multiply normalized gradient by beta
    quat_sub(&q_est_dot, q_w, gradient);        // subtract above from q_w, the integrated gyro quaternion
    quat_scalar(&q_est_dot, DELTA_T);
    quat_add(&q_est, q_est_prev, q_est_dot);     // Integrate orientation rate to find position
    quat_Normalization(&q_est);                 // normalize the orientation of the estimate
 80022b8:	4650      	mov	r0, sl
 80022ba:	f7ff fda5 	bl	8001e08 <quat_Normalization>
                                                //(shown in diagram, plus always use unit quaternions for orientation)
   
}
 80022be:	b023      	add	sp, #140	; 0x8c
 80022c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022c4:	20000010 	.word	0x20000010
 80022c8:	3fe00000 	.word	0x3fe00000
 80022cc:	c0800000 	.word	0xc0800000
 80022d0:	3d9ac70e 	.word	0x3d9ac70e
 80022d4:	3a83126f 	.word	0x3a83126f

080022d8 <eulerAngles>:
 Assume right hand system
 Roll is about the x axis, represented as phi
 Pitch is about the y axis, represented as theta
 Yaw is about the z axis, represented as psi (trident looking greek symbol)
 */
void eulerAngles(struct quaternion q, float* roll, float* pitch, float* yaw){
 80022d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022dc:	b085      	sub	sp, #20
 80022de:	ac04      	add	r4, sp, #16
 80022e0:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80022e4:	9f01      	ldr	r7, [sp, #4]
 80022e6:	f8dd 8000 	ldr.w	r8, [sp]
    
    *yaw = atan2f((2*q.q2*q.q3 - 2*q.q1*q.q4), (2*q.q1*q.q1 + 2*q.q2*q.q2 -1));  // equation (7)
 80022ea:	4639      	mov	r1, r7
 80022ec:	4638      	mov	r0, r7
 80022ee:	f7fe fc21 	bl	8000b34 <__addsf3>
 80022f2:	4641      	mov	r1, r8
 80022f4:	4606      	mov	r6, r0
 80022f6:	4640      	mov	r0, r8
 80022f8:	f7fe fc1c 	bl	8000b34 <__addsf3>
 80022fc:	4641      	mov	r1, r8
 80022fe:	4605      	mov	r5, r0
 8002300:	f7fe fd20 	bl	8000d44 <__aeabi_fmul>
 8002304:	4680      	mov	r8, r0
 8002306:	4639      	mov	r1, r7
 8002308:	4630      	mov	r0, r6
 800230a:	f7fe fd1b 	bl	8000d44 <__aeabi_fmul>
 800230e:	4641      	mov	r1, r8
 8002310:	f7fe fc10 	bl	8000b34 <__addsf3>
 8002314:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002318:	f7fe fc0a 	bl	8000b30 <__aeabi_fsub>
 800231c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002320:	4681      	mov	r9, r0
 8002322:	4659      	mov	r1, fp
 8002324:	4630      	mov	r0, r6
 8002326:	f7fe fd0d 	bl	8000d44 <__aeabi_fmul>
 800232a:	9c03      	ldr	r4, [sp, #12]
 800232c:	4682      	mov	sl, r0
 800232e:	4621      	mov	r1, r4
 8002330:	4628      	mov	r0, r5
 8002332:	f7fe fd07 	bl	8000d44 <__aeabi_fmul>
 8002336:	4601      	mov	r1, r0
 8002338:	4650      	mov	r0, sl
 800233a:	f7fe fbf9 	bl	8000b30 <__aeabi_fsub>
 800233e:	4649      	mov	r1, r9
 8002340:	f003 fd2a 	bl	8005d98 <atan2f>
 8002344:	9b10      	ldr	r3, [sp, #64]	; 0x40
    *pitch = -asinf(2*q.q2*q.q4 + 2*q.q1*q.q3);                                  // equatino (8)
 8002346:	4621      	mov	r1, r4
    *yaw = atan2f((2*q.q2*q.q3 - 2*q.q1*q.q4), (2*q.q1*q.q1 + 2*q.q2*q.q2 -1));  // equation (7)
 8002348:	6018      	str	r0, [r3, #0]
    *pitch = -asinf(2*q.q2*q.q4 + 2*q.q1*q.q3);                                  // equatino (8)
 800234a:	4630      	mov	r0, r6
 800234c:	f7fe fcfa 	bl	8000d44 <__aeabi_fmul>
 8002350:	4659      	mov	r1, fp
 8002352:	4606      	mov	r6, r0
 8002354:	4628      	mov	r0, r5
 8002356:	f7fe fcf5 	bl	8000d44 <__aeabi_fmul>
 800235a:	4601      	mov	r1, r0
 800235c:	4630      	mov	r0, r6
 800235e:	f7fe fbe9 	bl	8000b34 <__addsf3>
 8002362:	f003 fcf9 	bl	8005d58 <asinf>
 8002366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002368:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800236c:	6018      	str	r0, [r3, #0]
    *roll  = atan2f((2*q.q3*q.q4 - 2*q.q1*q.q2), (2*q.q1*q.q1 + 2*q.q4*q.q4 -1));
 800236e:	4621      	mov	r1, r4
 8002370:	4620      	mov	r0, r4
 8002372:	f7fe fbdf 	bl	8000b34 <__addsf3>
 8002376:	4621      	mov	r1, r4
 8002378:	f7fe fce4 	bl	8000d44 <__aeabi_fmul>
 800237c:	4641      	mov	r1, r8
 800237e:	f7fe fbd9 	bl	8000b34 <__addsf3>
 8002382:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002386:	f7fe fbd3 	bl	8000b30 <__aeabi_fsub>
 800238a:	4659      	mov	r1, fp
 800238c:	4606      	mov	r6, r0
 800238e:	4658      	mov	r0, fp
 8002390:	f7fe fbd0 	bl	8000b34 <__addsf3>
 8002394:	4621      	mov	r1, r4
 8002396:	f7fe fcd5 	bl	8000d44 <__aeabi_fmul>
 800239a:	4639      	mov	r1, r7
 800239c:	4604      	mov	r4, r0
 800239e:	4628      	mov	r0, r5
 80023a0:	f7fe fcd0 	bl	8000d44 <__aeabi_fmul>
 80023a4:	4601      	mov	r1, r0
 80023a6:	4620      	mov	r0, r4
 80023a8:	f7fe fbc2 	bl	8000b30 <__aeabi_fsub>
 80023ac:	4631      	mov	r1, r6
 80023ae:	f003 fcf3 	bl	8005d98 <atan2f>
 80023b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    *yaw *= (180.0f / PI);
 80023b4:	490c      	ldr	r1, [pc, #48]	; (80023e8 <eulerAngles+0x110>)
    *roll  = atan2f((2*q.q3*q.q4 - 2*q.q1*q.q2), (2*q.q1*q.q1 + 2*q.q4*q.q4 -1));
 80023b6:	6018      	str	r0, [r3, #0]
    *yaw *= (180.0f / PI);
 80023b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	f7fe fcc2 	bl	8000d44 <__aeabi_fmul>
 80023c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    *pitch *= (180.0f / PI);
 80023c2:	4909      	ldr	r1, [pc, #36]	; (80023e8 <eulerAngles+0x110>)
    *yaw *= (180.0f / PI);
 80023c4:	6018      	str	r0, [r3, #0]
    *pitch *= (180.0f / PI);
 80023c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	f7fe fcbb 	bl	8000d44 <__aeabi_fmul>
 80023ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    *roll *= (180.0f / PI);
 80023d0:	4905      	ldr	r1, [pc, #20]	; (80023e8 <eulerAngles+0x110>)
    *pitch *= (180.0f / PI);
 80023d2:	6018      	str	r0, [r3, #0]
    *roll *= (180.0f / PI);
 80023d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	f7fe fcb4 	bl	8000d44 <__aeabi_fmul>
 80023dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023de:	6018      	str	r0, [r3, #0]

}
 80023e0:	b005      	add	sp, #20
 80023e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023e6:	bf00      	nop
 80023e8:	42652ee0 	.word	0x42652ee0

080023ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023ec:	b530      	push	{r4, r5, lr}
 80023ee:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023f0:	2220      	movs	r2, #32
 80023f2:	2100      	movs	r1, #0
 80023f4:	a807      	add	r0, sp, #28
 80023f6:	f004 ffae 	bl	8007356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fa:	2214      	movs	r2, #20
 80023fc:	2100      	movs	r1, #0
 80023fe:	a801      	add	r0, sp, #4
 8002400:	f004 ffa9 	bl	8007356 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002404:	2501      	movs	r5, #1
 8002406:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002408:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800240a:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800240e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002412:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002414:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002416:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002418:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800241a:	f000 fee1 	bl	80031e0 <HAL_RCC_OscConfig>
 800241e:	b108      	cbz	r0, 8002424 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002422:	e7fe      	b.n	8002422 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002424:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002426:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800242a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002430:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002434:	4629      	mov	r1, r5
 8002436:	a801      	add	r0, sp, #4
 8002438:	f001 f8a8 	bl	800358c <HAL_RCC_ClockConfig>
 800243c:	b108      	cbz	r0, 8002442 <SystemClock_Config+0x56>
 800243e:	b672      	cpsid	i
  while (1)
 8002440:	e7fe      	b.n	8002440 <SystemClock_Config+0x54>
}
 8002442:	b011      	add	sp, #68	; 0x44
 8002444:	bd30      	pop	{r4, r5, pc}
	...

08002448 <main>:
{
 8002448:	b510      	push	{r4, lr}
  HAL_Init();
 800244a:	f000 faa1 	bl	8002990 <HAL_Init>
  SystemClock_Config();
 800244e:	f7ff ffcd 	bl	80023ec <SystemClock_Config>
  MX_GPIO_Init();
 8002452:	f7ff fc87 	bl	8001d64 <MX_GPIO_Init>
  MX_CAN_Init();
 8002456:	f7ff fb43 	bl	8001ae0 <MX_CAN_Init>
  MX_SPI1_Init();
 800245a:	f000 f87b 	bl	8002554 <MX_SPI1_Init>
  MX_SPI2_Init();
 800245e:	f000 f89b 	bl	8002598 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8002462:	f000 fa19 	bl	8002898 <MX_USART2_UART_Init>
  MPU9250_calibrate();
 8002466:	f7ff f937 	bl	80016d8 <MPU9250_calibrate>
  HAL_Delay(2000);
 800246a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800246e:	f000 fab3 	bl	80029d8 <HAL_Delay>
  MPU9250_Init();
 8002472:	f7ff f89b 	bl	80015ac <MPU9250_Init>
  HAL_Delay(500);
 8002476:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800247a:	f000 faad 	bl	80029d8 <HAL_Delay>
  TxHeaderRoll.ExtId = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	2111      	movs	r1, #17
  TxHeaderRoll.StdId = headerIdRoll;
 8002482:	4a26      	ldr	r2, [pc, #152]	; (800251c <main+0xd4>)
  TxHeaderYaw.StdId = headerIdYaw;
 8002484:	2013      	movs	r0, #19
  TxHeaderRoll.ExtId = 0;
 8002486:	e9c2 1300 	strd	r1, r3, [r2]
  TxHeaderRoll.DLC = 8;
 800248a:	2108      	movs	r1, #8
 800248c:	6111      	str	r1, [r2, #16]
  TxHeaderPitch.StdId = headerIdPitch;
 800248e:	2112      	movs	r1, #18
  TxHeaderRoll.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002490:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderRoll.TransmitGlobalTime = 0;
 8002494:	7513      	strb	r3, [r2, #20]
  TxHeaderPitch.StdId = headerIdPitch;
 8002496:	4a22      	ldr	r2, [pc, #136]	; (8002520 <main+0xd8>)
  TxHeaderGyro.StdId = headerIdGyro;
 8002498:	2415      	movs	r4, #21
  TxHeaderPitch.ExtId = 0;
 800249a:	e9c2 1300 	strd	r1, r3, [r2]
  TxHeaderPitch.DLC = 4;
 800249e:	2104      	movs	r1, #4
  TxHeaderPitch.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80024a0:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderPitch.DLC = 4;
 80024a4:	6111      	str	r1, [r2, #16]
  TxHeaderPitch.TransmitGlobalTime = 0;
 80024a6:	7513      	strb	r3, [r2, #20]
  TxHeaderYaw.StdId = headerIdYaw;
 80024a8:	4a1e      	ldr	r2, [pc, #120]	; (8002524 <main+0xdc>)
  TxHeaderYaw.ExtId = 0;
 80024aa:	e9c2 0300 	strd	r0, r3, [r2]
  TxHeaderAccel.StdId = headerIdAccel;
 80024ae:	2014      	movs	r0, #20
  TxHeaderYaw.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80024b0:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderYaw.DLC = 4;
 80024b4:	6111      	str	r1, [r2, #16]
  TxHeaderYaw.TransmitGlobalTime = 0;
 80024b6:	7513      	strb	r3, [r2, #20]
  TxHeaderAccel.StdId = headerIdAccel;
 80024b8:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <main+0xe0>)
  TxHeaderAccel.ExtId = 0;
 80024ba:	e9c2 0300 	strd	r0, r3, [r2]
  TxHeaderAccel.DLC = 6;
 80024be:	2006      	movs	r0, #6
  TxHeaderAccel.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80024c0:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderAccel.DLC = 6;
 80024c4:	6110      	str	r0, [r2, #16]
  TxHeaderAccel.TransmitGlobalTime = 0;
 80024c6:	7513      	strb	r3, [r2, #20]
  TxHeaderGyro.StdId = headerIdGyro;
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <main+0xe4>)
  TxHeaderGyro.DLC = 6;
 80024ca:	6110      	str	r0, [r2, #16]
  TxHeaderAltitude.StdId = headerIdAltitude;
 80024cc:	2016      	movs	r0, #22
  TxHeaderGyro.ExtId = 0;
 80024ce:	e9c2 4300 	strd	r4, r3, [r2]
  TxHeaderGyro.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80024d2:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderGyro.TransmitGlobalTime = 0;
 80024d6:	7513      	strb	r3, [r2, #20]
  TxHeaderAltitude.StdId = headerIdAltitude;
 80024d8:	4a15      	ldr	r2, [pc, #84]	; (8002530 <main+0xe8>)
  TxHeaderAltitude.ExtId = 0;
 80024da:	e9c2 0300 	strd	r0, r3, [r2]
  TxHeaderAltitude.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80024de:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderAltitude.DLC = 4;
 80024e2:	6111      	str	r1, [r2, #16]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024e4:	4913      	ldr	r1, [pc, #76]	; (8002534 <main+0xec>)
  TxHeaderAltitude.TransmitGlobalTime = 0;
 80024e6:	7513      	strb	r3, [r2, #20]
  sFilterConfig.FilterIdLow = 0;
 80024e8:	e9c1 3300 	strd	r3, r3, [r1]
  sFilterConfig.FilterMaskIdLow = 0;
 80024ec:	e9c1 3302 	strd	r3, r3, [r1, #8]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024f0:	610b      	str	r3, [r1, #16]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80024f2:	2301      	movs	r3, #1
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80024f4:	4810      	ldr	r0, [pc, #64]	; (8002538 <main+0xf0>)
  sFilterConfig.FilterActivation = ENABLE;
 80024f6:	e9c1 3307 	strd	r3, r3, [r1, #28]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 80024fa:	f000 fafa 	bl	8002af2 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 80024fe:	480e      	ldr	r0, [pc, #56]	; (8002538 <main+0xf0>)
 8002500:	f000 fb66 	bl	8002bd0 <HAL_CAN_Start>
  HAL_Delay(500);
 8002504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002508:	f000 fa66 	bl	80029d8 <HAL_Delay>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800250c:	f001 fe60 	bl	80041d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002510:	f7ff fc0c 	bl	8001d2c <MX_FREERTOS_Init>
  osKernelStart();
 8002514:	f001 fe78 	bl	8004208 <osKernelStart>
  while (1)
 8002518:	e7fe      	b.n	8002518 <main+0xd0>
 800251a:	bf00      	nop
 800251c:	2000039c 	.word	0x2000039c
 8002520:	20000384 	.word	0x20000384
 8002524:	200003b4 	.word	0x200003b4
 8002528:	2000033c 	.word	0x2000033c
 800252c:	2000036c 	.word	0x2000036c
 8002530:	20000354 	.word	0x20000354
 8002534:	200003d0 	.word	0x200003d0
 8002538:	2000028c 	.word	0x2000028c

0800253c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM4) {
 800253c:	6802      	ldr	r2, [r0, #0]
 800253e:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002540:	429a      	cmp	r2, r3
 8002542:	d101      	bne.n	8002548 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002544:	f000 ba36 	b.w	80029b4 <HAL_IncTick>
}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40000800 	.word	0x40000800

08002550 <Error_Handler>:
 8002550:	b672      	cpsid	i
  while (1)
 8002552:	e7fe      	b.n	8002552 <Error_Handler+0x2>

08002554 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002554:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002556:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800255a:	480d      	ldr	r0, [pc, #52]	; (8002590 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800255c:	4a0d      	ldr	r2, [pc, #52]	; (8002594 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800255e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002562:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002566:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002568:	2220      	movs	r2, #32
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800256a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800256e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002572:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002576:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002578:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800257a:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800257e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002580:	f001 f969 	bl	8003856 <HAL_SPI_Init>
 8002584:	b118      	cbz	r0, 800258e <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002586:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800258a:	f7ff bfe1 	b.w	8002550 <Error_Handler>
}
 800258e:	bd08      	pop	{r3, pc}
 8002590:	200003f8 	.word	0x200003f8
 8002594:	40013000 	.word	0x40013000

08002598 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002598:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800259a:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Instance = SPI2;
 800259e:	480d      	ldr	r0, [pc, #52]	; (80025d4 <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <MX_SPI2_Init+0x40>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025a2:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025a6:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025aa:	2300      	movs	r3, #0
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025ac:	2218      	movs	r2, #24
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025b6:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ba:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025bc:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80025be:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 80025c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025c4:	f001 f947 	bl	8003856 <HAL_SPI_Init>
 80025c8:	b118      	cbz	r0, 80025d2 <MX_SPI2_Init+0x3a>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80025ce:	f7ff bfbf 	b.w	8002550 <Error_Handler>
}
 80025d2:	bd08      	pop	{r3, pc}
 80025d4:	20000450 	.word	0x20000450
 80025d8:	40003800 	.word	0x40003800

080025dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	2210      	movs	r2, #16
{
 80025de:	b510      	push	{r4, lr}
 80025e0:	4604      	mov	r4, r0
 80025e2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	eb0d 0002 	add.w	r0, sp, r2
 80025e8:	2100      	movs	r1, #0
 80025ea:	f004 feb4 	bl	8007356 <memset>
  if(spiHandle->Instance==SPI1)
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	4a2f      	ldr	r2, [pc, #188]	; (80026b0 <HAL_SPI_MspInit+0xd4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d127      	bne.n	8002646 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <HAL_SPI_MspInit+0xd8>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	21a0      	movs	r1, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025fa:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	482e      	ldr	r0, [pc, #184]	; (80026b8 <HAL_SPI_MspInit+0xdc>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002602:	619a      	str	r2, [r3, #24]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800260a:	9200      	str	r2, [sp, #0]
 800260c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260e:	699a      	ldr	r2, [r3, #24]
 8002610:	f042 0204 	orr.w	r2, r2, #4
 8002614:	619a      	str	r2, [r3, #24]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002626:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f000 fcf0 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002630:	2040      	movs	r0, #64	; 0x40
 8002632:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002636:	e9cd 0304 	strd	r0, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	481f      	ldr	r0, [pc, #124]	; (80026b8 <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263e:	f000 fce7 	bl	8003010 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002642:	b008      	add	sp, #32
 8002644:	bd10      	pop	{r4, pc}
  else if(spiHandle->Instance==SPI2)
 8002646:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <HAL_SPI_MspInit+0xe0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d1fa      	bne.n	8002642 <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_SPI_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800264e:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002650:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002652:	481b      	ldr	r0, [pc, #108]	; (80026c0 <HAL_SPI_MspInit+0xe4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002654:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002658:	61da      	str	r2, [r3, #28]
 800265a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265c:	2400      	movs	r4, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 800265e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002662:	9202      	str	r2, [sp, #8]
 8002664:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	699a      	ldr	r2, [r3, #24]
 8002668:	f042 0208 	orr.w	r2, r2, #8
 800266c:	619a      	str	r2, [r3, #24]
 800266e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	9303      	str	r3, [sp, #12]
 800267a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002686:	f000 fcc3 	bl	8003010 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268e:	a904      	add	r1, sp, #16
 8002690:	480b      	ldr	r0, [pc, #44]	; (80026c0 <HAL_SPI_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002692:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002698:	f000 fcba 	bl	8003010 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 800269c:	4622      	mov	r2, r4
 800269e:	2105      	movs	r1, #5
 80026a0:	2024      	movs	r0, #36	; 0x24
 80026a2:	f000 fc2f 	bl	8002f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80026a6:	2024      	movs	r0, #36	; 0x24
 80026a8:	f000 fc5e 	bl	8002f68 <HAL_NVIC_EnableIRQ>
}
 80026ac:	e7c9      	b.n	8002642 <HAL_SPI_MspInit+0x66>
 80026ae:	bf00      	nop
 80026b0:	40013000 	.word	0x40013000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010800 	.word	0x40010800
 80026bc:	40003800 	.word	0x40003800
 80026c0:	40010c00 	.word	0x40010c00

080026c4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_MspInit+0x48>)
{
 80026c6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026c8:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ca:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	619a      	str	r2, [r3, #24]
 80026d2:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026d4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026d8:	f002 0201 	and.w	r2, r2, #1
 80026dc:	9200      	str	r2, [sp, #0]
 80026de:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026e6:	61da      	str	r2, [r3, #28]
 80026e8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ea:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026f4:	f000 fc06 	bl	8002f04 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <HAL_MspInit+0x4c>)
 80026fa:	6853      	ldr	r3, [r2, #4]
 80026fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002704:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002706:	b003      	add	sp, #12
 8002708:	f85d fb04 	ldr.w	pc, [sp], #4
 800270c:	40021000 	.word	0x40021000
 8002710:	40010000 	.word	0x40010000

08002714 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_InitTick+0x88>)
{
 8002716:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002718:	69da      	ldr	r2, [r3, #28]
{
 800271a:	b088      	sub	sp, #32
  __HAL_RCC_TIM4_CLK_ENABLE();
 800271c:	f042 0204 	orr.w	r2, r2, #4
 8002720:	61da      	str	r2, [r3, #28]
 8002722:	69db      	ldr	r3, [r3, #28]
{
 8002724:	4605      	mov	r5, r0
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	9302      	str	r3, [sp, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800272c:	a901      	add	r1, sp, #4
 800272e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002730:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002732:	f000 ffe7 	bl	8003704 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002736:	9b06      	ldr	r3, [sp, #24]
 8002738:	bb4b      	cbnz	r3, 800278e <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800273a:	f000 ffc3 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800273e:	4e18      	ldr	r6, [pc, #96]	; (80027a0 <HAL_InitTick+0x8c>)
 8002740:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_InitTick+0x90>)
 8002742:	6033      	str	r3, [r6, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002744:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002748:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800274a:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_InitTick+0x94>)
 800274c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002750:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 8002752:	6073      	str	r3, [r6, #4]
  htim4.Init.ClockDivision = 0;
 8002754:	2300      	movs	r3, #0
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim4);
 8002756:	4630      	mov	r0, r6
  htim4.Init.ClockDivision = 0;
 8002758:	6133      	str	r3, [r6, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275a:	60b3      	str	r3, [r6, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275c:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim4);
 800275e:	f001 fca1 	bl	80040a4 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8002762:	4604      	mov	r4, r0
 8002764:	b980      	cbnz	r0, 8002788 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002766:	4630      	mov	r0, r6
 8002768:	f001 fb94 	bl	8003e94 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800276c:	4604      	mov	r4, r0
 800276e:	b958      	cbnz	r0, 8002788 <HAL_InitTick+0x74>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002770:	201e      	movs	r0, #30
 8002772:	f000 fbf9 	bl	8002f68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002776:	2d0f      	cmp	r5, #15
 8002778:	d80d      	bhi.n	8002796 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800277a:	4622      	mov	r2, r4
 800277c:	4629      	mov	r1, r5
 800277e:	201e      	movs	r0, #30
 8002780:	f000 fbc0 	bl	8002f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_InitTick+0x98>)
 8002786:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8002788:	4620      	mov	r0, r4
 800278a:	b008      	add	sp, #32
 800278c:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800278e:	f000 ff99 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 8002792:	0040      	lsls	r0, r0, #1
 8002794:	e7d3      	b.n	800273e <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8002796:	2401      	movs	r4, #1
 8002798:	e7f6      	b.n	8002788 <HAL_InitTick+0x74>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
 80027a0:	200004a8 	.word	0x200004a8
 80027a4:	40000800 	.word	0x40000800
 80027a8:	000f4240 	.word	0x000f4240
 80027ac:	20000028 	.word	0x20000028

080027b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <NMI_Handler>

080027b2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <HardFault_Handler>

080027b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <MemManage_Handler>

080027b6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <BusFault_Handler>

080027b8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <UsageFault_Handler>

080027ba <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ba:	4770      	bx	lr

080027bc <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80027bc:	4801      	ldr	r0, [pc, #4]	; (80027c4 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 80027be:	f000 ba90 	b.w	8002ce2 <HAL_CAN_IRQHandler>
 80027c2:	bf00      	nop
 80027c4:	2000028c 	.word	0x2000028c

080027c8 <USB_LP_CAN1_RX0_IRQHandler>:
 80027c8:	f7ff bff8 	b.w	80027bc <USB_HP_CAN1_TX_IRQHandler>

080027cc <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027cc:	4801      	ldr	r0, [pc, #4]	; (80027d4 <TIM4_IRQHandler+0x8>)
 80027ce:	f001 bb8f 	b.w	8003ef0 <HAL_TIM_IRQHandler>
 80027d2:	bf00      	nop
 80027d4:	200004a8 	.word	0x200004a8

080027d8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80027d8:	4801      	ldr	r0, [pc, #4]	; (80027e0 <SPI2_IRQHandler+0x8>)
 80027da:	f001 badb 	b.w	8003d94 <HAL_SPI_IRQHandler>
 80027de:	bf00      	nop
 80027e0:	20000450 	.word	0x20000450

080027e4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80027e4:	2001      	movs	r0, #1
 80027e6:	4770      	bx	lr

080027e8 <_kill>:

int _kill(int pid, int sig)
{
 80027e8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80027ea:	f004 fc83 	bl	80070f4 <__errno>
 80027ee:	2316      	movs	r3, #22
 80027f0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80027f2:	f04f 30ff 	mov.w	r0, #4294967295
 80027f6:	bd08      	pop	{r3, pc}

080027f8 <_exit>:

void _exit (int status)
{
 80027f8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80027fa:	f004 fc7b 	bl	80070f4 <__errno>
 80027fe:	2316      	movs	r3, #22
 8002800:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002802:	e7fe      	b.n	8002802 <_exit+0xa>

08002804 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002804:	b570      	push	{r4, r5, r6, lr}
 8002806:	460d      	mov	r5, r1
 8002808:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280a:	460e      	mov	r6, r1
 800280c:	1b73      	subs	r3, r6, r5
 800280e:	429c      	cmp	r4, r3
 8002810:	dc01      	bgt.n	8002816 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002812:	4620      	mov	r0, r4
 8002814:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002816:	f3af 8000 	nop.w
 800281a:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281e:	e7f5      	b.n	800280c <_read+0x8>

08002820 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	460d      	mov	r5, r1
 8002824:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002826:	460e      	mov	r6, r1
 8002828:	1b73      	subs	r3, r6, r5
 800282a:	429c      	cmp	r4, r3
 800282c:	dc01      	bgt.n	8002832 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800282e:	4620      	mov	r0, r4
 8002830:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002832:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002836:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283a:	e7f5      	b.n	8002828 <_write+0x8>

0800283c <_close>:

int _close(int file)
{
	return -1;
}
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	4770      	bx	lr

08002842 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002846:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002848:	604b      	str	r3, [r1, #4]
}
 800284a:	4770      	bx	lr

0800284c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800284c:	2001      	movs	r0, #1
 800284e:	4770      	bx	lr

08002850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002850:	2000      	movs	r0, #0
 8002852:	4770      	bx	lr

08002854 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <_sbrk+0x30>)
{
 8002856:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002858:	6811      	ldr	r1, [r2, #0]
{
 800285a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800285c:	b909      	cbnz	r1, 8002862 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <_sbrk+0x34>)
 8002860:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	6810      	ldr	r0, [r2, #0]
 8002864:	4909      	ldr	r1, [pc, #36]	; (800288c <_sbrk+0x38>)
 8002866:	4c0a      	ldr	r4, [pc, #40]	; (8002890 <_sbrk+0x3c>)
 8002868:	4403      	add	r3, r0
 800286a:	1b09      	subs	r1, r1, r4
 800286c:	428b      	cmp	r3, r1
 800286e:	d906      	bls.n	800287e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002870:	f004 fc40 	bl	80070f4 <__errno>
 8002874:	230c      	movs	r3, #12
 8002876:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002878:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800287c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800287e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002880:	e7fc      	b.n	800287c <_sbrk+0x28>
 8002882:	bf00      	nop
 8002884:	200004f0 	.word	0x200004f0
 8002888:	20001f50 	.word	0x20001f50
 800288c:	20005000 	.word	0x20005000
 8002890:	00000400 	.word	0x00000400

08002894 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002894:	4770      	bx	lr
	...

08002898 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002898:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 800289a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 800289e:	480a      	ldr	r0, [pc, #40]	; (80028c8 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80028a0:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <MX_USART2_UART_Init+0x34>)
 80028a2:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028a6:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a8:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ae:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028b2:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028b6:	f001 fc5d 	bl	8004174 <HAL_UART_Init>
 80028ba:	b118      	cbz	r0, 80028c4 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80028c0:	f7ff be46 	b.w	8002550 <Error_Handler>
}
 80028c4:	bd08      	pop	{r3, pc}
 80028c6:	bf00      	nop
 80028c8:	200004f4 	.word	0x200004f4
 80028cc:	40004400 	.word	0x40004400

080028d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028d0:	b510      	push	{r4, lr}
 80028d2:	4604      	mov	r4, r0
 80028d4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d6:	2210      	movs	r2, #16
 80028d8:	2100      	movs	r1, #0
 80028da:	a802      	add	r0, sp, #8
 80028dc:	f004 fd3b 	bl	8007356 <memset>
  if(uartHandle->Instance==USART2)
 80028e0:	6822      	ldr	r2, [r4, #0]
 80028e2:	4b16      	ldr	r3, [pc, #88]	; (800293c <HAL_UART_MspInit+0x6c>)
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d126      	bne.n	8002936 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80028ec:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	4814      	ldr	r0, [pc, #80]	; (8002940 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028f4:	61da      	str	r2, [r3, #28]
 80028f6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80028fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80028fe:	9200      	str	r2, [sp, #0]
 8002900:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	f042 0204 	orr.w	r2, r2, #4
 8002908:	619a      	str	r2, [r3, #24]
 800290a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002916:	2302      	movs	r3, #2
 8002918:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f000 fb76 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002924:	2108      	movs	r1, #8
 8002926:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002928:	4805      	ldr	r0, [pc, #20]	; (8002940 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800292a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f000 fb6d 	bl	8003010 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002936:	b006      	add	sp, #24
 8002938:	bd10      	pop	{r4, pc}
 800293a:	bf00      	nop
 800293c:	40004400 	.word	0x40004400
 8002940:	40010800 	.word	0x40010800

08002944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002944:	480c      	ldr	r0, [pc, #48]	; (8002978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002946:	490d      	ldr	r1, [pc, #52]	; (800297c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800294a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800294c:	e002      	b.n	8002954 <LoopCopyDataInit>

0800294e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002952:	3304      	adds	r3, #4

08002954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002958:	d3f9      	bcc.n	800294e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800295c:	4c0a      	ldr	r4, [pc, #40]	; (8002988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800295e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002960:	e001      	b.n	8002966 <LoopFillZerobss>

08002962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002964:	3204      	adds	r2, #4

08002966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002968:	d3fb      	bcc.n	8002962 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800296a:	f7ff ff93 	bl	8002894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296e:	f004 fcbd 	bl	80072ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002972:	f7ff fd69 	bl	8002448 <main>
  bx lr
 8002976:	4770      	bx	lr
  ldr r0, =_sdata
 8002978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800297c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002980:	0800a144 	.word	0x0800a144
  ldr r2, =_sbss
 8002984:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002988:	20001f50 	.word	0x20001f50

0800298c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800298c:	e7fe      	b.n	800298c <ADC1_2_IRQHandler>
	...

08002990 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_Init+0x20>)
{
 8002992:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002994:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002996:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002998:	f043 0310 	orr.w	r3, r3, #16
 800299c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299e:	f000 fa9f 	bl	8002ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029a2:	200f      	movs	r0, #15
 80029a4:	f7ff feb6 	bl	8002714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a8:	f7ff fe8c 	bl	80026c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80029ac:	2000      	movs	r0, #0
 80029ae:	bd08      	pop	{r3, pc}
 80029b0:	40022000 	.word	0x40022000

080029b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80029b4:	4a03      	ldr	r2, [pc, #12]	; (80029c4 <HAL_IncTick+0x10>)
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HAL_IncTick+0x14>)
 80029b8:	6811      	ldr	r1, [r2, #0]
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	440b      	add	r3, r1
 80029be:	6013      	str	r3, [r2, #0]
}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000538 	.word	0x20000538
 80029c8:	20000024 	.word	0x20000024

080029cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80029cc:	4b01      	ldr	r3, [pc, #4]	; (80029d4 <HAL_GetTick+0x8>)
 80029ce:	6818      	ldr	r0, [r3, #0]
}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000538 	.word	0x20000538

080029d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff fff6 	bl	80029cc <HAL_GetTick>
 80029e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80029e4:	bf1e      	ittt	ne
 80029e6:	4b04      	ldrne	r3, [pc, #16]	; (80029f8 <HAL_Delay+0x20>)
 80029e8:	781b      	ldrbne	r3, [r3, #0]
 80029ea:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ec:	f7ff ffee 	bl	80029cc <HAL_GetTick>
 80029f0:	1b43      	subs	r3, r0, r5
 80029f2:	42a3      	cmp	r3, r4
 80029f4:	d3fa      	bcc.n	80029ec <HAL_Delay+0x14>
  {
  }
}
 80029f6:	bd38      	pop	{r3, r4, r5, pc}
 80029f8:	20000024 	.word	0x20000024

080029fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029fc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029fe:	4604      	mov	r4, r0
 8002a00:	2800      	cmp	r0, #0
 8002a02:	d06e      	beq.n	8002ae2 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a04:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002a08:	b90b      	cbnz	r3, 8002a0e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a0a:	f7ff f885 	bl	8001b18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a0e:	6822      	ldr	r2, [r4, #0]
 8002a10:	6813      	ldr	r3, [r2, #0]
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a18:	f7ff ffd8 	bl	80029cc <HAL_GetTick>
 8002a1c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	07d1      	lsls	r1, r2, #31
 8002a24:	d551      	bpl.n	8002aca <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f022 0202 	bic.w	r2, r2, #2
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2e:	f7ff ffcd 	bl	80029cc <HAL_GetTick>
 8002a32:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	0792      	lsls	r2, r2, #30
 8002a3a:	d454      	bmi.n	8002ae6 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a3c:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a3e:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a40:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	bf0c      	ite	eq
 8002a46:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a4a:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8002a4e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a50:	7e62      	ldrb	r2, [r4, #25]
 8002a52:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	bf0c      	ite	eq
 8002a58:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a5c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8002a60:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a62:	7ea2      	ldrb	r2, [r4, #26]
 8002a64:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	bf0c      	ite	eq
 8002a6a:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a6e:	f022 0220 	bicne.w	r2, r2, #32
 8002a72:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a74:	7ee2      	ldrb	r2, [r4, #27]
 8002a76:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	bf0c      	ite	eq
 8002a7c:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a80:	f042 0210 	orrne.w	r2, r2, #16
 8002a84:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002a86:	7f22      	ldrb	r2, [r4, #28]
 8002a88:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	bf0c      	ite	eq
 8002a8e:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002a92:	f022 0208 	bicne.w	r2, r2, #8
 8002a96:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002a98:	7f62      	ldrb	r2, [r4, #29]
 8002a9a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	bf0c      	ite	eq
 8002aa0:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002aa4:	f022 0204 	bicne.w	r2, r2, #4
 8002aa8:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002aaa:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	6921      	ldr	r1, [r4, #16]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	6961      	ldr	r1, [r4, #20]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	6861      	ldr	r1, [r4, #4]
 8002aba:	3901      	subs	r1, #1
 8002abc:	430a      	orrs	r2, r1
 8002abe:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ac0:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ac2:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002ac4:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8002ac8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002aca:	f7ff ff7f 	bl	80029cc <HAL_GetTick>
 8002ace:	1b40      	subs	r0, r0, r5
 8002ad0:	280a      	cmp	r0, #10
 8002ad2:	d9a4      	bls.n	8002a1e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ada:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002adc:	2305      	movs	r3, #5
 8002ade:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	e7f0      	b.n	8002ac8 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ae6:	f7ff ff71 	bl	80029cc <HAL_GetTick>
 8002aea:	1b40      	subs	r0, r0, r5
 8002aec:	280a      	cmp	r0, #10
 8002aee:	d9a1      	bls.n	8002a34 <HAL_CAN_Init+0x38>
 8002af0:	e7f0      	b.n	8002ad4 <HAL_CAN_Init+0xd8>

08002af2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002af2:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002af4:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002af8:	3b01      	subs	r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d862      	bhi.n	8002bc4 <HAL_CAN_ConfigFilter+0xd2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002afe:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b00:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b02:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b0e:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b10:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b14:	f002 001f 	and.w	r0, r2, #31
 8002b18:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b1c:	ea25 0500 	bic.w	r5, r5, r0
 8002b20:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b24:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b26:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b28:	bb85      	cbnz	r5, 8002b8c <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b2a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b2e:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b30:	4025      	ands	r5, r4
 8002b32:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b36:	888d      	ldrh	r5, [r1, #4]
 8002b38:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002b3c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002b40:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b44:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002b46:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002b48:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002b4c:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002b50:	698a      	ldr	r2, [r1, #24]
 8002b52:	bb6a      	cbnz	r2, 8002bb0 <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002b54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002b58:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002b5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002b5e:	690a      	ldr	r2, [r1, #16]
 8002b60:	bb52      	cbnz	r2, 8002bb8 <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002b62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002b66:	4014      	ands	r4, r2
 8002b68:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002b6c:	6a0a      	ldr	r2, [r1, #32]
 8002b6e:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002b70:	bf02      	ittt	eq
 8002b72:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 8002b76:	4310      	orreq	r0, r2
 8002b78:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8002b7c:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002b8c:	2d01      	cmp	r5, #1
 8002b8e:	d1df      	bne.n	8002b50 <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b90:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002b94:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002b96:	4305      	orrs	r5, r0
 8002b98:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002b9c:	888d      	ldrh	r5, [r1, #4]
 8002b9e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ba2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ba6:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002baa:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002bac:	898d      	ldrh	r5, [r1, #12]
 8002bae:	e7cb      	b.n	8002b48 <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002bb4:	4302      	orrs	r2, r0
 8002bb6:	e7d0      	b.n	8002b5a <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002bb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002bbc:	4302      	orrs	r2, r0
 8002bbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002bc2:	e7d3      	b.n	8002b6c <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002bc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bca:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002bcc:	2001      	movs	r0, #1
 8002bce:	e7dc      	b.n	8002b8a <HAL_CAN_ConfigFilter+0x98>

08002bd0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002bd2:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8002bd6:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	b2dd      	uxtb	r5, r3
 8002bdc:	d120      	bne.n	8002c20 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bde:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002be0:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002be2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002be6:	6813      	ldr	r3, [r2, #0]
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bee:	f7ff feed 	bl	80029cc <HAL_GetTick>
 8002bf2:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f013 0301 	ands.w	r3, r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 8002bfe:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c00:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 8002c02:	e00b      	b.n	8002c1c <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c04:	f7ff fee2 	bl	80029cc <HAL_GetTick>
 8002c08:	1b80      	subs	r0, r0, r6
 8002c0a:	280a      	cmp	r0, #10
 8002c0c:	d9f2      	bls.n	8002bf4 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c14:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c16:	2305      	movs	r3, #5
 8002c18:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c20:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002c22:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c28:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002c2a:	e7f7      	b.n	8002c1c <HAL_CAN_Start+0x4c>

08002c2c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c2e:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c32:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c34:	3d01      	subs	r5, #1
 8002c36:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c38:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8002c3a:	d841      	bhi.n	8002cc0 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c3c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8002c40:	d03a      	beq.n	8002cb8 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c42:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002c46:	2c03      	cmp	r4, #3
 8002c48:	f04f 0501 	mov.w	r5, #1
 8002c4c:	d105      	bne.n	8002c5a <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002c4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c54:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002c56:	2001      	movs	r0, #1
 8002c58:	e028      	b.n	8002cac <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c5a:	40a5      	lsls	r5, r4
 8002c5c:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8002c5e:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8002c62:	f104 0318 	add.w	r3, r4, #24
 8002c66:	bb10      	cbnz	r0, 8002cae <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c68:	6808      	ldr	r0, [r1, #0]
 8002c6a:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c72:	0120      	lsls	r0, r4, #4
 8002c74:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c78:	4406      	add	r6, r0
      return HAL_OK;
 8002c7a:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c7c:	690d      	ldr	r5, [r1, #16]
 8002c7e:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c82:	7d09      	ldrb	r1, [r1, #20]
 8002c84:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c86:	bf02      	ittt	eq
 8002c88:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8002c8c:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8002c90:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002c94:	6851      	ldr	r1, [r2, #4]
 8002c96:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ca0:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8002cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cae:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8002cb0:	4338      	orrs	r0, r7
 8002cb2:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8002cb6:	e7da      	b.n	8002c6e <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cbe:	e7c9      	b.n	8002c54 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc6:	e7c5      	b.n	8002c54 <HAL_CAN_AddTxMessage+0x28>

08002cc8 <HAL_CAN_TxMailbox0CompleteCallback>:
 8002cc8:	4770      	bx	lr

08002cca <HAL_CAN_TxMailbox1CompleteCallback>:
 8002cca:	4770      	bx	lr

08002ccc <HAL_CAN_TxMailbox2CompleteCallback>:
 8002ccc:	4770      	bx	lr

08002cce <HAL_CAN_TxMailbox0AbortCallback>:
 8002cce:	4770      	bx	lr

08002cd0 <HAL_CAN_TxMailbox1AbortCallback>:
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_CAN_TxMailbox2AbortCallback>:
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_CAN_RxFifo0FullCallback>:
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002cd8:	4770      	bx	lr

08002cda <HAL_CAN_RxFifo1FullCallback>:
 8002cda:	4770      	bx	lr

08002cdc <HAL_CAN_SleepCallback>:
 8002cdc:	4770      	bx	lr

08002cde <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002cde:	4770      	bx	lr

08002ce0 <HAL_CAN_ErrorCallback>:
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ce2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ce6:	6803      	ldr	r3, [r0, #0]
{
 8002ce8:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cea:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002cec:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002cf0:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002cf4:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cf6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002cfa:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cfe:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d02:	d022      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d04:	f017 0401 	ands.w	r4, r7, #1
 8002d08:	d007      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d0a:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d0c:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d0e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d10:	f140 80a5 	bpl.w	8002e5e <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d14:	f7ff ffd8 	bl	8002cc8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d18:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d1a:	05fb      	lsls	r3, r7, #23
 8002d1c:	d509      	bpl.n	8002d32 <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d22:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d24:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d26:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d28:	f140 80a7 	bpl.w	8002e7a <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	f7ff ffcc 	bl	8002cca <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d32:	03fb      	lsls	r3, r7, #15
 8002d34:	d509      	bpl.n	8002d4a <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d3a:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d3c:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d3e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d40:	f140 80a9 	bpl.w	8002e96 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d44:	4628      	mov	r0, r5
 8002d46:	f7ff ffc1 	bl	8002ccc <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d4a:	0733      	lsls	r3, r6, #28
 8002d4c:	d507      	bpl.n	8002d5e <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d4e:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d52:	bf1f      	itttt	ne
 8002d54:	2210      	movne	r2, #16
 8002d56:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d58:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d5c:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d5e:	0777      	lsls	r7, r6, #29
 8002d60:	d508      	bpl.n	8002d74 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d62:	f01b 0f08 	tst.w	fp, #8
 8002d66:	d005      	beq.n	8002d74 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d68:	2208      	movs	r2, #8
 8002d6a:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d6c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d6e:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d70:	f7ff ffb1 	bl	8002cd6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d74:	07b0      	lsls	r0, r6, #30
 8002d76:	d506      	bpl.n	8002d86 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0799      	lsls	r1, r3, #30
 8002d7e:	d002      	beq.n	8002d86 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d80:	4628      	mov	r0, r5
 8002d82:	f7ff ffa7 	bl	8002cd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d86:	0672      	lsls	r2, r6, #25
 8002d88:	d507      	bpl.n	8002d9a <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d8a:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d8e:	bf1f      	itttt	ne
 8002d90:	2210      	movne	r2, #16
 8002d92:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d94:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d98:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d9a:	06b3      	lsls	r3, r6, #26
 8002d9c:	d508      	bpl.n	8002db0 <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d9e:	f01a 0f08 	tst.w	sl, #8
 8002da2:	d005      	beq.n	8002db0 <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002da4:	2208      	movs	r2, #8
 8002da6:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002da8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002daa:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002dac:	f7ff ff95 	bl	8002cda <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002db0:	06f7      	lsls	r7, r6, #27
 8002db2:	d506      	bpl.n	8002dc2 <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	0798      	lsls	r0, r3, #30
 8002dba:	d002      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f7ff ff8b 	bl	8002cd8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dc2:	03b1      	lsls	r1, r6, #14
 8002dc4:	d508      	bpl.n	8002dd8 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002dc6:	f019 0f10 	tst.w	r9, #16
 8002dca:	d005      	beq.n	8002dd8 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dcc:	2210      	movs	r2, #16
 8002dce:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002dd0:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002dd2:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8002dd4:	f7ff ff82 	bl	8002cdc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dd8:	03f2      	lsls	r2, r6, #15
 8002dda:	d508      	bpl.n	8002dee <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ddc:	f019 0f08 	tst.w	r9, #8
 8002de0:	d005      	beq.n	8002dee <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002de2:	2208      	movs	r2, #8
 8002de4:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002de6:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002de8:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002dea:	f7ff ff78 	bl	8002cde <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002dee:	0433      	lsls	r3, r6, #16
 8002df0:	d52c      	bpl.n	8002e4c <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002df2:	f019 0f04 	tst.w	r9, #4
 8002df6:	682a      	ldr	r2, [r5, #0]
 8002df8:	d026      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002dfa:	05f7      	lsls	r7, r6, #23
 8002dfc:	d504      	bpl.n	8002e08 <HAL_CAN_IRQHandler+0x126>
 8002dfe:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e02:	bf18      	it	ne
 8002e04:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e08:	05b0      	lsls	r0, r6, #22
 8002e0a:	d504      	bpl.n	8002e16 <HAL_CAN_IRQHandler+0x134>
 8002e0c:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e10:	bf18      	it	ne
 8002e12:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e16:	0571      	lsls	r1, r6, #21
 8002e18:	d504      	bpl.n	8002e24 <HAL_CAN_IRQHandler+0x142>
 8002e1a:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e1e:	bf18      	it	ne
 8002e20:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e24:	0533      	lsls	r3, r6, #20
 8002e26:	d50f      	bpl.n	8002e48 <HAL_CAN_IRQHandler+0x166>
 8002e28:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8002e2c:	d00c      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d04f      	beq.n	8002ed2 <HAL_CAN_IRQHandler+0x1f0>
 8002e32:	d83e      	bhi.n	8002eb2 <HAL_CAN_IRQHandler+0x1d0>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d046      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0x1e4>
 8002e38:	2b30      	cmp	r3, #48	; 0x30
 8002e3a:	d047      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x1ea>
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d03f      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e40:	6993      	ldr	r3, [r2, #24]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e48:	2304      	movs	r3, #4
 8002e4a:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e4c:	b12c      	cbz	r4, 8002e5a <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e50:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8002e52:	431c      	orrs	r4, r3
 8002e54:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8002e56:	f7ff ff43 	bl	8002ce0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e5e:	077a      	lsls	r2, r7, #29
 8002e60:	d405      	bmi.n	8002e6e <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e62:	f017 0408 	ands.w	r4, r7, #8
 8002e66:	d105      	bne.n	8002e74 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e68:	f7ff ff31 	bl	8002cce <HAL_CAN_TxMailbox0AbortCallback>
 8002e6c:	e755      	b.n	8002d1a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e6e:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8002e72:	e752      	b.n	8002d1a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e74:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002e78:	e74f      	b.n	8002d1a <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e7a:	0579      	lsls	r1, r7, #21
 8002e7c:	d502      	bpl.n	8002e84 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e7e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8002e82:	e756      	b.n	8002d32 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e84:	053a      	lsls	r2, r7, #20
 8002e86:	d502      	bpl.n	8002e8e <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e88:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002e8c:	e751      	b.n	8002d32 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e8e:	4628      	mov	r0, r5
 8002e90:	f7ff ff1e 	bl	8002cd0 <HAL_CAN_TxMailbox1AbortCallback>
 8002e94:	e74d      	b.n	8002d32 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e96:	0379      	lsls	r1, r7, #13
 8002e98:	d502      	bpl.n	8002ea0 <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e9a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002e9e:	e754      	b.n	8002d4a <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ea0:	033a      	lsls	r2, r7, #12
 8002ea2:	d502      	bpl.n	8002eaa <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ea4:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8002ea8:	e74f      	b.n	8002d4a <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002eaa:	4628      	mov	r0, r5
 8002eac:	f7ff ff11 	bl	8002cd2 <HAL_CAN_TxMailbox2AbortCallback>
 8002eb0:	e74b      	b.n	8002d4a <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8002eb2:	2b50      	cmp	r3, #80	; 0x50
 8002eb4:	d010      	beq.n	8002ed8 <HAL_CAN_IRQHandler+0x1f6>
 8002eb6:	2b60      	cmp	r3, #96	; 0x60
 8002eb8:	d1c2      	bne.n	8002e40 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002eba:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8002ebe:	e7bf      	b.n	8002e40 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ec0:	f044 0408 	orr.w	r4, r4, #8
            break;
 8002ec4:	e7bc      	b.n	8002e40 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ec6:	f044 0410 	orr.w	r4, r4, #16
            break;
 8002eca:	e7b9      	b.n	8002e40 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ecc:	f044 0420 	orr.w	r4, r4, #32
            break;
 8002ed0:	e7b6      	b.n	8002e40 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ed2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8002ed6:	e7b3      	b.n	8002e40 <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ed8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8002edc:	e7b0      	b.n	8002e40 <HAL_CAN_IRQHandler+0x15e>
	...

08002ee0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4907      	ldr	r1, [pc, #28]	; (8002f00 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ee2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eee:	0412      	lsls	r2, r2, #16
 8002ef0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002efc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f06:	b530      	push	{r4, r5, lr}
 8002f08:	68dc      	ldr	r4, [r3, #12]
 8002f0a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f0e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f12:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	bf28      	it	cs
 8002f18:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f20:	bf98      	it	ls
 8002f22:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f24:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f28:	bf88      	it	hi
 8002f2a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f2c:	ea21 0303 	bic.w	r3, r1, r3
 8002f30:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f32:	fa05 f404 	lsl.w	r4, r5, r4
 8002f36:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002f3a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	bfac      	ite	ge
 8002f42:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f46:	4a07      	ldrlt	r2, [pc, #28]	; (8002f64 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f48:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	bfab      	itete	ge
 8002f50:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f54:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f5e:	bd30      	pop	{r4, r5, pc}
 8002f60:	e000ed00 	.word	0xe000ed00
 8002f64:	e000ed14 	.word	0xe000ed14

08002f68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	db08      	blt.n	8002f7e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	0942      	lsrs	r2, r0, #5
 8002f70:	f000 001f 	and.w	r0, r0, #31
 8002f74:	fa03 f000 	lsl.w	r0, r3, r0
 8002f78:	4b01      	ldr	r3, [pc, #4]	; (8002f80 <HAL_NVIC_EnableIRQ+0x18>)
 8002f7a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f84:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f86:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d003      	beq.n	8002f96 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8e:	2304      	movs	r3, #4
 8002f90:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f92:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002f94:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f96:	6803      	ldr	r3, [r0, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	f022 020e 	bic.w	r2, r2, #14
 8002f9e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fa8:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_DMA_Abort_IT+0x84>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01c      	beq.n	8002fe8 <HAL_DMA_Abort_IT+0x64>
 8002fae:	3214      	adds	r2, #20
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d01b      	beq.n	8002fec <HAL_DMA_Abort_IT+0x68>
 8002fb4:	3214      	adds	r2, #20
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01a      	beq.n	8002ff0 <HAL_DMA_Abort_IT+0x6c>
 8002fba:	3214      	adds	r2, #20
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01a      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x72>
 8002fc0:	3214      	adds	r2, #20
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01a      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x78>
 8002fc6:	3214      	adds	r2, #20
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	bf0c      	ite	eq
 8002fcc:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002fd0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002fd4:	4a0d      	ldr	r2, [pc, #52]	; (800300c <HAL_DMA_Abort_IT+0x88>)
 8002fd6:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fdc:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002fde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002fe0:	b17b      	cbz	r3, 8003002 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8002fe2:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	e7d5      	b.n	8002f94 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e7f3      	b.n	8002fd4 <HAL_DMA_Abort_IT+0x50>
 8002fec:	2310      	movs	r3, #16
 8002fee:	e7f1      	b.n	8002fd4 <HAL_DMA_Abort_IT+0x50>
 8002ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff4:	e7ee      	b.n	8002fd4 <HAL_DMA_Abort_IT+0x50>
 8002ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ffa:	e7eb      	b.n	8002fd4 <HAL_DMA_Abort_IT+0x50>
 8002ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003000:	e7e8      	b.n	8002fd4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8003002:	4618      	mov	r0, r3
 8003004:	e7c6      	b.n	8002f94 <HAL_DMA_Abort_IT+0x10>
 8003006:	bf00      	nop
 8003008:	40020008 	.word	0x40020008
 800300c:	40020000 	.word	0x40020000

08003010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003014:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003016:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003018:	4f64      	ldr	r7, [pc, #400]	; (80031ac <HAL_GPIO_Init+0x19c>)
 800301a:	4b65      	ldr	r3, [pc, #404]	; (80031b0 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 800301c:	f8df c194 	ldr.w	ip, [pc, #404]	; 80031b4 <HAL_GPIO_Init+0x1a4>
 8003020:	f8df e194 	ldr.w	lr, [pc, #404]	; 80031b8 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003024:	680d      	ldr	r5, [r1, #0]
 8003026:	fa35 f406 	lsrs.w	r4, r5, r6
 800302a:	d102      	bne.n	8003032 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800302c:	b003      	add	sp, #12
 800302e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003032:	f04f 0801 	mov.w	r8, #1
 8003036:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800303a:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800303e:	ea38 0505 	bics.w	r5, r8, r5
 8003042:	d17b      	bne.n	800313c <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8003044:	684d      	ldr	r5, [r1, #4]
 8003046:	2d03      	cmp	r5, #3
 8003048:	d807      	bhi.n	800305a <HAL_GPIO_Init+0x4a>
 800304a:	3d01      	subs	r5, #1
 800304c:	2d02      	cmp	r5, #2
 800304e:	f200 8088 	bhi.w	8003162 <HAL_GPIO_Init+0x152>
 8003052:	e8df f005 	tbb	[pc, r5]
 8003056:	9b96      	.short	0x9b96
 8003058:	a1          	.byte	0xa1
 8003059:	00          	.byte	0x00
 800305a:	2d12      	cmp	r5, #18
 800305c:	f000 8099 	beq.w	8003192 <HAL_GPIO_Init+0x182>
 8003060:	d86e      	bhi.n	8003140 <HAL_GPIO_Init+0x130>
 8003062:	2d11      	cmp	r5, #17
 8003064:	f000 808f 	beq.w	8003186 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003068:	2cff      	cmp	r4, #255	; 0xff
 800306a:	bf98      	it	ls
 800306c:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800306e:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003072:	bf88      	it	hi
 8003074:	f100 0a04 	addhi.w	sl, r0, #4
 8003078:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800307c:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003080:	bf88      	it	hi
 8003082:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003084:	fa09 fb05 	lsl.w	fp, r9, r5
 8003088:	ea28 080b 	bic.w	r8, r8, fp
 800308c:	fa02 f505 	lsl.w	r5, r2, r5
 8003090:	ea48 0505 	orr.w	r5, r8, r5
 8003094:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003098:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800309c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80030a0:	d04c      	beq.n	800313c <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030a2:	69bd      	ldr	r5, [r7, #24]
 80030a4:	f026 0803 	bic.w	r8, r6, #3
 80030a8:	f045 0501 	orr.w	r5, r5, #1
 80030ac:	61bd      	str	r5, [r7, #24]
 80030ae:	69bd      	ldr	r5, [r7, #24]
 80030b0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80030b4:	f005 0501 	and.w	r5, r5, #1
 80030b8:	9501      	str	r5, [sp, #4]
 80030ba:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030be:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030c2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80030c8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030cc:	fa09 f90b 	lsl.w	r9, r9, fp
 80030d0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030d4:	4d39      	ldr	r5, [pc, #228]	; (80031bc <HAL_GPIO_Init+0x1ac>)
 80030d6:	42a8      	cmp	r0, r5
 80030d8:	d062      	beq.n	80031a0 <HAL_GPIO_Init+0x190>
 80030da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030de:	42a8      	cmp	r0, r5
 80030e0:	d060      	beq.n	80031a4 <HAL_GPIO_Init+0x194>
 80030e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030e6:	42a8      	cmp	r0, r5
 80030e8:	d05e      	beq.n	80031a8 <HAL_GPIO_Init+0x198>
 80030ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030ee:	42a8      	cmp	r0, r5
 80030f0:	bf0c      	ite	eq
 80030f2:	2503      	moveq	r5, #3
 80030f4:	2504      	movne	r5, #4
 80030f6:	fa05 f50b 	lsl.w	r5, r5, fp
 80030fa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80030fe:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8003102:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003104:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003108:	bf14      	ite	ne
 800310a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800310c:	43a5      	biceq	r5, r4
 800310e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8003110:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003112:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003116:	bf14      	ite	ne
 8003118:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800311a:	43a5      	biceq	r5, r4
 800311c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800311e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003120:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003124:	bf14      	ite	ne
 8003126:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003128:	43a5      	biceq	r5, r4
 800312a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800312c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800312e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003132:	bf14      	ite	ne
 8003134:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003136:	ea25 0404 	biceq.w	r4, r5, r4
 800313a:	60dc      	str	r4, [r3, #12]
	position++;
 800313c:	3601      	adds	r6, #1
 800313e:	e771      	b.n	8003024 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8003140:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80031c0 <HAL_GPIO_Init+0x1b0>
 8003144:	454d      	cmp	r5, r9
 8003146:	d00c      	beq.n	8003162 <HAL_GPIO_Init+0x152>
 8003148:	d817      	bhi.n	800317a <HAL_GPIO_Init+0x16a>
 800314a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800314e:	454d      	cmp	r5, r9
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x152>
 8003152:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8003156:	454d      	cmp	r5, r9
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x152>
 800315a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800315e:	454d      	cmp	r5, r9
 8003160:	d182      	bne.n	8003068 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003162:	688a      	ldr	r2, [r1, #8]
 8003164:	b1d2      	cbz	r2, 800319c <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003166:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8003168:	bf08      	it	eq
 800316a:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800316e:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8003172:	bf18      	it	ne
 8003174:	f8c0 8014 	strne.w	r8, [r0, #20]
 8003178:	e776      	b.n	8003068 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800317a:	4565      	cmp	r5, ip
 800317c:	d0f1      	beq.n	8003162 <HAL_GPIO_Init+0x152>
 800317e:	4575      	cmp	r5, lr
 8003180:	e7ee      	b.n	8003160 <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003182:	68ca      	ldr	r2, [r1, #12]
          break;
 8003184:	e770      	b.n	8003068 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003186:	68ca      	ldr	r2, [r1, #12]
 8003188:	3204      	adds	r2, #4
          break;
 800318a:	e76d      	b.n	8003068 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800318c:	68ca      	ldr	r2, [r1, #12]
 800318e:	3208      	adds	r2, #8
          break;
 8003190:	e76a      	b.n	8003068 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003192:	68ca      	ldr	r2, [r1, #12]
 8003194:	320c      	adds	r2, #12
          break;
 8003196:	e767      	b.n	8003068 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003198:	2200      	movs	r2, #0
 800319a:	e765      	b.n	8003068 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800319c:	2204      	movs	r2, #4
 800319e:	e763      	b.n	8003068 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031a0:	2500      	movs	r5, #0
 80031a2:	e7a8      	b.n	80030f6 <HAL_GPIO_Init+0xe6>
 80031a4:	2501      	movs	r5, #1
 80031a6:	e7a6      	b.n	80030f6 <HAL_GPIO_Init+0xe6>
 80031a8:	2502      	movs	r5, #2
 80031aa:	e7a4      	b.n	80030f6 <HAL_GPIO_Init+0xe6>
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40010400 	.word	0x40010400
 80031b4:	10310000 	.word	0x10310000
 80031b8:	10320000 	.word	0x10320000
 80031bc:	40010800 	.word	0x40010800
 80031c0:	10220000 	.word	0x10220000

080031c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031c4:	b10a      	cbz	r2, 80031ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031c6:	6101      	str	r1, [r0, #16]
  }
}
 80031c8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031ca:	0409      	lsls	r1, r1, #16
 80031cc:	e7fb      	b.n	80031c6 <HAL_GPIO_WritePin+0x2>

080031ce <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80031ce:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031d0:	ea01 0203 	and.w	r2, r1, r3
 80031d4:	ea21 0103 	bic.w	r1, r1, r3
 80031d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80031dc:	6101      	str	r1, [r0, #16]
}
 80031de:	4770      	bx	lr

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e4:	4605      	mov	r5, r0
 80031e6:	b338      	cbz	r0, 8003238 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e8:	6803      	ldr	r3, [r0, #0]
 80031ea:	07db      	lsls	r3, r3, #31
 80031ec:	d410      	bmi.n	8003210 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	079f      	lsls	r7, r3, #30
 80031f2:	d45e      	bmi.n	80032b2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f4:	682b      	ldr	r3, [r5, #0]
 80031f6:	0719      	lsls	r1, r3, #28
 80031f8:	f100 8095 	bmi.w	8003326 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	075a      	lsls	r2, r3, #29
 8003200:	f100 80c1 	bmi.w	8003386 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003204:	69e8      	ldr	r0, [r5, #28]
 8003206:	2800      	cmp	r0, #0
 8003208:	f040 812c 	bne.w	8003464 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800320c:	2000      	movs	r0, #0
 800320e:	e029      	b.n	8003264 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003210:	4c90      	ldr	r4, [pc, #576]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 8003212:	6863      	ldr	r3, [r4, #4]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b04      	cmp	r3, #4
 800321a:	d007      	beq.n	800322c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d10a      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
 8003226:	6863      	ldr	r3, [r4, #4]
 8003228:	03de      	lsls	r6, r3, #15
 800322a:	d507      	bpl.n	800323c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	039c      	lsls	r4, r3, #14
 8003230:	d5dd      	bpl.n	80031ee <HAL_RCC_OscConfig+0xe>
 8003232:	686b      	ldr	r3, [r5, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1da      	bne.n	80031ee <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003238:	2001      	movs	r0, #1
 800323a:	e013      	b.n	8003264 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	686b      	ldr	r3, [r5, #4]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d112      	bne.n	800326a <HAL_RCC_OscConfig+0x8a>
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800324c:	f7ff fbbe 	bl	80029cc <HAL_GetTick>
 8003250:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	0398      	lsls	r0, r3, #14
 8003256:	d4ca      	bmi.n	80031ee <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003258:	f7ff fbb8 	bl	80029cc <HAL_GetTick>
 800325c:	1b80      	subs	r0, r0, r6
 800325e:	2864      	cmp	r0, #100	; 0x64
 8003260:	d9f7      	bls.n	8003252 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8003262:	2003      	movs	r0, #3
}
 8003264:	b002      	add	sp, #8
 8003266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326a:	b99b      	cbnz	r3, 8003294 <HAL_RCC_OscConfig+0xb4>
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800327c:	f7ff fba6 	bl	80029cc <HAL_GetTick>
 8003280:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	0399      	lsls	r1, r3, #14
 8003286:	d5b2      	bpl.n	80031ee <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003288:	f7ff fba0 	bl	80029cc <HAL_GetTick>
 800328c:	1b80      	subs	r0, r0, r6
 800328e:	2864      	cmp	r0, #100	; 0x64
 8003290:	d9f7      	bls.n	8003282 <HAL_RCC_OscConfig+0xa2>
 8003292:	e7e6      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	d103      	bne.n	80032a4 <HAL_RCC_OscConfig+0xc4>
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	e7cf      	b.n	8003244 <HAL_RCC_OscConfig+0x64>
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b0:	e7cb      	b.n	800324a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b2:	4c68      	ldr	r4, [pc, #416]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	f013 0f0c 	tst.w	r3, #12
 80032ba:	d007      	beq.n	80032cc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032bc:	6863      	ldr	r3, [r4, #4]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d110      	bne.n	80032e8 <HAL_RCC_OscConfig+0x108>
 80032c6:	6863      	ldr	r3, [r4, #4]
 80032c8:	03da      	lsls	r2, r3, #15
 80032ca:	d40d      	bmi.n	80032e8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	079b      	lsls	r3, r3, #30
 80032d0:	d502      	bpl.n	80032d8 <HAL_RCC_OscConfig+0xf8>
 80032d2:	692b      	ldr	r3, [r5, #16]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d1af      	bne.n	8003238 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	696a      	ldr	r2, [r5, #20]
 80032dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80032e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	e785      	b.n	80031f4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032e8:	692a      	ldr	r2, [r5, #16]
 80032ea:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 80032ec:	b16a      	cbz	r2, 800330a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80032f2:	f7ff fb6b 	bl	80029cc <HAL_GetTick>
 80032f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f8:	6823      	ldr	r3, [r4, #0]
 80032fa:	079f      	lsls	r7, r3, #30
 80032fc:	d4ec      	bmi.n	80032d8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032fe:	f7ff fb65 	bl	80029cc <HAL_GetTick>
 8003302:	1b80      	subs	r0, r0, r6
 8003304:	2802      	cmp	r0, #2
 8003306:	d9f7      	bls.n	80032f8 <HAL_RCC_OscConfig+0x118>
 8003308:	e7ab      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800330a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800330c:	f7ff fb5e 	bl	80029cc <HAL_GetTick>
 8003310:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	0798      	lsls	r0, r3, #30
 8003316:	f57f af6d 	bpl.w	80031f4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331a:	f7ff fb57 	bl	80029cc <HAL_GetTick>
 800331e:	1b80      	subs	r0, r0, r6
 8003320:	2802      	cmp	r0, #2
 8003322:	d9f6      	bls.n	8003312 <HAL_RCC_OscConfig+0x132>
 8003324:	e79d      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003326:	69aa      	ldr	r2, [r5, #24]
 8003328:	4e4a      	ldr	r6, [pc, #296]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 800332a:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_RCC_OscConfig+0x278>)
 800332c:	b1e2      	cbz	r2, 8003368 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800332e:	2201      	movs	r2, #1
 8003330:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003334:	f7ff fb4a 	bl	80029cc <HAL_GetTick>
 8003338:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800333c:	079b      	lsls	r3, r3, #30
 800333e:	d50d      	bpl.n	800335c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003340:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003344:	4b45      	ldr	r3, [pc, #276]	; (800345c <HAL_RCC_OscConfig+0x27c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	fbb3 f3f2 	udiv	r3, r3, r2
 800334c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800334e:	bf00      	nop
  }
  while (Delay --);
 8003350:	9b01      	ldr	r3, [sp, #4]
 8003352:	1e5a      	subs	r2, r3, #1
 8003354:	9201      	str	r2, [sp, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f9      	bne.n	800334e <HAL_RCC_OscConfig+0x16e>
 800335a:	e74f      	b.n	80031fc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800335c:	f7ff fb36 	bl	80029cc <HAL_GetTick>
 8003360:	1b00      	subs	r0, r0, r4
 8003362:	2802      	cmp	r0, #2
 8003364:	d9e9      	bls.n	800333a <HAL_RCC_OscConfig+0x15a>
 8003366:	e77c      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003368:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800336c:	f7ff fb2e 	bl	80029cc <HAL_GetTick>
 8003370:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003372:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003374:	079f      	lsls	r7, r3, #30
 8003376:	f57f af41 	bpl.w	80031fc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800337a:	f7ff fb27 	bl	80029cc <HAL_GetTick>
 800337e:	1b00      	subs	r0, r0, r4
 8003380:	2802      	cmp	r0, #2
 8003382:	d9f6      	bls.n	8003372 <HAL_RCC_OscConfig+0x192>
 8003384:	e76d      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4c33      	ldr	r4, [pc, #204]	; (8003454 <HAL_RCC_OscConfig+0x274>)
 8003388:	69e3      	ldr	r3, [r4, #28]
 800338a:	00d8      	lsls	r0, r3, #3
 800338c:	d424      	bmi.n	80033d8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800338e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	69e3      	ldr	r3, [r4, #28]
 8003392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003396:	61e3      	str	r3, [r4, #28]
 8003398:	69e3      	ldr	r3, [r4, #28]
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4e2f      	ldr	r6, [pc, #188]	; (8003460 <HAL_RCC_OscConfig+0x280>)
 80033a4:	6833      	ldr	r3, [r6, #0]
 80033a6:	05d9      	lsls	r1, r3, #23
 80033a8:	d518      	bpl.n	80033dc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033aa:	68eb      	ldr	r3, [r5, #12]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d126      	bne.n	80033fe <HAL_RCC_OscConfig+0x21e>
 80033b0:	6a23      	ldr	r3, [r4, #32]
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80033b8:	f7ff fb08 	bl	80029cc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80033c0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	6a23      	ldr	r3, [r4, #32]
 80033c4:	079b      	lsls	r3, r3, #30
 80033c6:	d53f      	bpl.n	8003448 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80033c8:	2f00      	cmp	r7, #0
 80033ca:	f43f af1b 	beq.w	8003204 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ce:	69e3      	ldr	r3, [r4, #28]
 80033d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d4:	61e3      	str	r3, [r4, #28]
 80033d6:	e715      	b.n	8003204 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80033d8:	2700      	movs	r7, #0
 80033da:	e7e2      	b.n	80033a2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033dc:	6833      	ldr	r3, [r6, #0]
 80033de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80033e4:	f7ff faf2 	bl	80029cc <HAL_GetTick>
 80033e8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	6833      	ldr	r3, [r6, #0]
 80033ec:	05da      	lsls	r2, r3, #23
 80033ee:	d4dc      	bmi.n	80033aa <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f0:	f7ff faec 	bl	80029cc <HAL_GetTick>
 80033f4:	eba0 0008 	sub.w	r0, r0, r8
 80033f8:	2864      	cmp	r0, #100	; 0x64
 80033fa:	d9f6      	bls.n	80033ea <HAL_RCC_OscConfig+0x20a>
 80033fc:	e731      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fe:	b9ab      	cbnz	r3, 800342c <HAL_RCC_OscConfig+0x24c>
 8003400:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6223      	str	r3, [r4, #32]
 800340c:	6a23      	ldr	r3, [r4, #32]
 800340e:	f023 0304 	bic.w	r3, r3, #4
 8003412:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003414:	f7ff fada 	bl	80029cc <HAL_GetTick>
 8003418:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	6a23      	ldr	r3, [r4, #32]
 800341c:	0798      	lsls	r0, r3, #30
 800341e:	d5d3      	bpl.n	80033c8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7ff fad4 	bl	80029cc <HAL_GetTick>
 8003424:	1b80      	subs	r0, r0, r6
 8003426:	4540      	cmp	r0, r8
 8003428:	d9f7      	bls.n	800341a <HAL_RCC_OscConfig+0x23a>
 800342a:	e71a      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342c:	2b05      	cmp	r3, #5
 800342e:	6a23      	ldr	r3, [r4, #32]
 8003430:	d103      	bne.n	800343a <HAL_RCC_OscConfig+0x25a>
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	6223      	str	r3, [r4, #32]
 8003438:	e7ba      	b.n	80033b0 <HAL_RCC_OscConfig+0x1d0>
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	6223      	str	r3, [r4, #32]
 8003440:	6a23      	ldr	r3, [r4, #32]
 8003442:	f023 0304 	bic.w	r3, r3, #4
 8003446:	e7b6      	b.n	80033b6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003448:	f7ff fac0 	bl	80029cc <HAL_GetTick>
 800344c:	1b80      	subs	r0, r0, r6
 800344e:	4540      	cmp	r0, r8
 8003450:	d9b7      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1e2>
 8003452:	e706      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
 8003454:	40021000 	.word	0x40021000
 8003458:	42420000 	.word	0x42420000
 800345c:	20000020 	.word	0x20000020
 8003460:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003464:	4c2a      	ldr	r4, [pc, #168]	; (8003510 <HAL_RCC_OscConfig+0x330>)
 8003466:	6863      	ldr	r3, [r4, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d03e      	beq.n	80034ee <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003470:	2200      	movs	r2, #0
 8003472:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_RCC_OscConfig+0x334>)
 8003474:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003476:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003478:	d12c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800347a:	f7ff faa7 	bl	80029cc <HAL_GetTick>
 800347e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	0199      	lsls	r1, r3, #6
 8003484:	d420      	bmi.n	80034c8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003486:	6a2b      	ldr	r3, [r5, #32]
 8003488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800348c:	d105      	bne.n	800349a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800348e:	6862      	ldr	r2, [r4, #4]
 8003490:	68a9      	ldr	r1, [r5, #8]
 8003492:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003496:	430a      	orrs	r2, r1
 8003498:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800349c:	6862      	ldr	r2, [r4, #4]
 800349e:	430b      	orrs	r3, r1
 80034a0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80034a4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80034a6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <HAL_RCC_OscConfig+0x334>)
 80034ac:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80034ae:	f7ff fa8d 	bl	80029cc <HAL_GetTick>
 80034b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	019a      	lsls	r2, r3, #6
 80034b8:	f53f aea8 	bmi.w	800320c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034bc:	f7ff fa86 	bl	80029cc <HAL_GetTick>
 80034c0:	1b40      	subs	r0, r0, r5
 80034c2:	2802      	cmp	r0, #2
 80034c4:	d9f6      	bls.n	80034b4 <HAL_RCC_OscConfig+0x2d4>
 80034c6:	e6cc      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7ff fa80 	bl	80029cc <HAL_GetTick>
 80034cc:	1b80      	subs	r0, r0, r6
 80034ce:	2802      	cmp	r0, #2
 80034d0:	d9d6      	bls.n	8003480 <HAL_RCC_OscConfig+0x2a0>
 80034d2:	e6c6      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80034d4:	f7ff fa7a 	bl	80029cc <HAL_GetTick>
 80034d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	6823      	ldr	r3, [r4, #0]
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	f57f ae95 	bpl.w	800320c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7ff fa73 	bl	80029cc <HAL_GetTick>
 80034e6:	1b40      	subs	r0, r0, r5
 80034e8:	2802      	cmp	r0, #2
 80034ea:	d9f6      	bls.n	80034da <HAL_RCC_OscConfig+0x2fa>
 80034ec:	e6b9      	b.n	8003262 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ee:	2801      	cmp	r0, #1
 80034f0:	f43f aeb8 	beq.w	8003264 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80034f4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	6a2a      	ldr	r2, [r5, #32]
 80034f8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80034fc:	4291      	cmp	r1, r2
 80034fe:	f47f ae9b 	bne.w	8003238 <HAL_RCC_OscConfig+0x58>
 8003502:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003504:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003508:	4293      	cmp	r3, r2
 800350a:	f43f ae7f 	beq.w	800320c <HAL_RCC_OscConfig+0x2c>
 800350e:	e693      	b.n	8003238 <HAL_RCC_OscConfig+0x58>
 8003510:	40021000 	.word	0x40021000
 8003514:	42420000 	.word	0x42420000

08003518 <HAL_RCC_GetSysClockFreq>:
{
 8003518:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_RCC_GetSysClockFreq+0x64>)
{
 800351c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800351e:	ac02      	add	r4, sp, #8
 8003520:	f103 0510 	add.w	r5, r3, #16
 8003524:	4622      	mov	r2, r4
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	3308      	adds	r3, #8
 800352c:	c203      	stmia	r2!, {r0, r1}
 800352e:	42ab      	cmp	r3, r5
 8003530:	4614      	mov	r4, r2
 8003532:	d1f7      	bne.n	8003524 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003534:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003538:	4911      	ldr	r1, [pc, #68]	; (8003580 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800353a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800353e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003540:	f003 020c 	and.w	r2, r3, #12
 8003544:	2a08      	cmp	r2, #8
 8003546:	d117      	bne.n	8003578 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003548:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800354c:	3218      	adds	r2, #24
 800354e:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003550:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003552:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003556:	d50c      	bpl.n	8003572 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003558:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800355c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003560:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003562:	3318      	adds	r3, #24
 8003564:	446b      	add	r3, sp
 8003566:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800356a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800356e:	b007      	add	sp, #28
 8003570:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCC_GetSysClockFreq+0x70>)
 8003574:	4358      	muls	r0, r3
 8003576:	e7fa      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8003578:	4802      	ldr	r0, [pc, #8]	; (8003584 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800357a:	e7f8      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x56>
 800357c:	08009cd4 	.word	0x08009cd4
 8003580:	40021000 	.word	0x40021000
 8003584:	007a1200 	.word	0x007a1200
 8003588:	003d0900 	.word	0x003d0900

0800358c <HAL_RCC_ClockConfig>:
{
 800358c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003590:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003592:	4604      	mov	r4, r0
 8003594:	b910      	cbnz	r0, 800359c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003596:	2001      	movs	r0, #1
}
 8003598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <HAL_RCC_ClockConfig+0x124>)
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	428b      	cmp	r3, r1
 80035a6:	d328      	bcc.n	80035fa <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	6821      	ldr	r1, [r4, #0]
 80035aa:	078e      	lsls	r6, r1, #30
 80035ac:	d430      	bmi.n	8003610 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ae:	07ca      	lsls	r2, r1, #31
 80035b0:	d443      	bmi.n	800363a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035b2:	4a3f      	ldr	r2, [pc, #252]	; (80036b0 <HAL_RCC_ClockConfig+0x124>)
 80035b4:	6813      	ldr	r3, [r2, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	42ab      	cmp	r3, r5
 80035bc:	d865      	bhi.n	800368a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035be:	6822      	ldr	r2, [r4, #0]
 80035c0:	4d3c      	ldr	r5, [pc, #240]	; (80036b4 <HAL_RCC_ClockConfig+0x128>)
 80035c2:	f012 0f04 	tst.w	r2, #4
 80035c6:	d16c      	bne.n	80036a2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c8:	0713      	lsls	r3, r2, #28
 80035ca:	d506      	bpl.n	80035da <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035cc:	686b      	ldr	r3, [r5, #4]
 80035ce:	6922      	ldr	r2, [r4, #16]
 80035d0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80035d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80035d8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035da:	f7ff ff9d 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80035de:	686b      	ldr	r3, [r5, #4]
 80035e0:	4a35      	ldr	r2, [pc, #212]	; (80036b8 <HAL_RCC_ClockConfig+0x12c>)
 80035e2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	40d8      	lsrs	r0, r3
 80035ea:	4b34      	ldr	r3, [pc, #208]	; (80036bc <HAL_RCC_ClockConfig+0x130>)
 80035ec:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <HAL_RCC_ClockConfig+0x134>)
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	f7ff f88f 	bl	8002714 <HAL_InitTick>
  return HAL_OK;
 80035f6:	2000      	movs	r0, #0
 80035f8:	e7ce      	b.n	8003598 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	6813      	ldr	r3, [r2, #0]
 80035fc:	f023 0307 	bic.w	r3, r3, #7
 8003600:	430b      	orrs	r3, r1
 8003602:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003604:	6813      	ldr	r3, [r2, #0]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	428b      	cmp	r3, r1
 800360c:	d1c3      	bne.n	8003596 <HAL_RCC_ClockConfig+0xa>
 800360e:	e7cb      	b.n	80035a8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <HAL_RCC_ClockConfig+0x128>)
 8003612:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003616:	bf1e      	ittt	ne
 8003618:	685a      	ldrne	r2, [r3, #4]
 800361a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800361e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003620:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003622:	bf42      	ittt	mi
 8003624:	685a      	ldrmi	r2, [r3, #4]
 8003626:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800362a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	68a0      	ldr	r0, [r4, #8]
 8003630:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003634:	4302      	orrs	r2, r0
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	e7b9      	b.n	80035ae <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363a:	6862      	ldr	r2, [r4, #4]
 800363c:	4e1d      	ldr	r6, [pc, #116]	; (80036b4 <HAL_RCC_ClockConfig+0x128>)
 800363e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003640:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003642:	d11a      	bne.n	800367a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003644:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	d0a5      	beq.n	8003596 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800364a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003650:	f023 0303 	bic.w	r3, r3, #3
 8003654:	4313      	orrs	r3, r2
 8003656:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003658:	f7ff f9b8 	bl	80029cc <HAL_GetTick>
 800365c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	6873      	ldr	r3, [r6, #4]
 8003660:	6862      	ldr	r2, [r4, #4]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800366a:	d0a2      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366c:	f7ff f9ae 	bl	80029cc <HAL_GetTick>
 8003670:	1bc0      	subs	r0, r0, r7
 8003672:	4540      	cmp	r0, r8
 8003674:	d9f3      	bls.n	800365e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003676:	2003      	movs	r0, #3
 8003678:	e78e      	b.n	8003598 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800367a:	2a02      	cmp	r2, #2
 800367c:	d102      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003682:	e7e1      	b.n	8003648 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	f013 0f02 	tst.w	r3, #2
 8003688:	e7de      	b.n	8003648 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	f023 0307 	bic.w	r3, r3, #7
 8003690:	432b      	orrs	r3, r5
 8003692:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003694:	6813      	ldr	r3, [r2, #0]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	42ab      	cmp	r3, r5
 800369c:	f47f af7b 	bne.w	8003596 <HAL_RCC_ClockConfig+0xa>
 80036a0:	e78d      	b.n	80035be <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a2:	686b      	ldr	r3, [r5, #4]
 80036a4:	68e1      	ldr	r1, [r4, #12]
 80036a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036aa:	430b      	orrs	r3, r1
 80036ac:	606b      	str	r3, [r5, #4]
 80036ae:	e78b      	b.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
 80036b0:	40022000 	.word	0x40022000
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08009cbc 	.word	0x08009cbc
 80036bc:	20000020 	.word	0x20000020
 80036c0:	20000028 	.word	0x20000028

080036c4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	4a03      	ldr	r2, [pc, #12]	; (80036e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80036d2:	6810      	ldr	r0, [r2, #0]
}
 80036d4:	40d8      	lsrs	r0, r3
 80036d6:	4770      	bx	lr
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08009ccc 	.word	0x08009ccc
 80036e0:	20000020 	.word	0x20000020

080036e4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x18>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80036ee:	5cd3      	ldrb	r3, [r2, r3]
 80036f0:	4a03      	ldr	r2, [pc, #12]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80036f2:	6810      	ldr	r0, [r2, #0]
}
 80036f4:	40d8      	lsrs	r0, r3
 80036f6:	4770      	bx	lr
 80036f8:	40021000 	.word	0x40021000
 80036fc:	08009ccc 	.word	0x08009ccc
 8003700:	20000020 	.word	0x20000020

08003704 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003704:	230f      	movs	r3, #15
 8003706:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_GetClockConfig+0x34>)
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	f002 0203 	and.w	r2, r2, #3
 8003710:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003718:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003720:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	08db      	lsrs	r3, r3, #3
 8003726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800372a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCC_GetClockConfig+0x38>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	600b      	str	r3, [r1, #0]
}
 8003736:	4770      	bx	lr
 8003738:	40021000 	.word	0x40021000
 800373c:	40022000 	.word	0x40022000

08003740 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003740:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003744:	461c      	mov	r4, r3
 8003746:	4616      	mov	r6, r2
 8003748:	460f      	mov	r7, r1
 800374a:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800374c:	f7ff f93e 	bl	80029cc <HAL_GetTick>
 8003750:	4434      	add	r4, r6
 8003752:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8003754:	f7ff f93a 	bl	80029cc <HAL_GetTick>
 8003758:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003762:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003764:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8003766:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003768:	6893      	ldr	r3, [r2, #8]
 800376a:	ea37 0303 	bics.w	r3, r7, r3
 800376e:	d001      	beq.n	8003774 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8003770:	2000      	movs	r0, #0
 8003772:	e02e      	b.n	80037d2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8003774:	1c73      	adds	r3, r6, #1
 8003776:	d0f7      	beq.n	8003768 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003778:	f7ff f928 	bl	80029cc <HAL_GetTick>
 800377c:	eba0 0008 	sub.w	r0, r0, r8
 8003780:	42a0      	cmp	r0, r4
 8003782:	d329      	bcc.n	80037d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800378c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800378e:	686a      	ldr	r2, [r5, #4]
 8003790:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003794:	d10a      	bne.n	80037ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8003796:	68aa      	ldr	r2, [r5, #8]
 8003798:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800379c:	d002      	beq.n	80037a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800379e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80037a2:	d103      	bne.n	80037ac <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037aa:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037ac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80037ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80037b2:	d107      	bne.n	80037c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037c2:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80037ca:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80037cc:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80037ce:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80037d2:	b002      	add	sp, #8
 80037d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 80037d8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80037da:	2b00      	cmp	r3, #0
      count--;
 80037dc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80037de:	bf08      	it	eq
 80037e0:	2400      	moveq	r4, #0
      count--;
 80037e2:	3b01      	subs	r3, #1
 80037e4:	e7be      	b.n	8003764 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80037e6:	bf00      	nop
 80037e8:	20000020 	.word	0x20000020

080037ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f0:	6842      	ldr	r2, [r0, #4]
{
 80037f2:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80037f8:	d116      	bne.n	8003828 <SPI_EndRxTransaction+0x3c>
 80037fa:	6882      	ldr	r2, [r0, #8]
 80037fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003800:	d002      	beq.n	8003808 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003802:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003806:	d10f      	bne.n	8003828 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003808:	6825      	ldr	r5, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800380a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 800380e:	6828      	ldr	r0, [r5, #0]
 8003810:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8003814:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003816:	d107      	bne.n	8003828 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003818:	460a      	mov	r2, r1
 800381a:	2101      	movs	r1, #1
 800381c:	4620      	mov	r0, r4
 800381e:	f7ff ff8f 	bl	8003740 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003822:	b920      	cbnz	r0, 800382e <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003824:	2000      	movs	r0, #0
}
 8003826:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003828:	460a      	mov	r2, r1
 800382a:	2180      	movs	r1, #128	; 0x80
 800382c:	e7f6      	b.n	800381c <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800382e:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003830:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003832:	f043 0320 	orr.w	r3, r3, #32
 8003836:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003838:	e7f5      	b.n	8003826 <SPI_EndRxTransaction+0x3a>

0800383a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800383a:	b510      	push	{r4, lr}
 800383c:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800383e:	460a      	mov	r2, r1
 8003840:	2180      	movs	r1, #128	; 0x80
{
 8003842:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003844:	f7ff ff7c 	bl	8003740 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003848:	b120      	cbz	r0, 8003854 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800384a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800384c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800384e:	f043 0320 	orr.w	r3, r3, #32
 8003852:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8003854:	bd10      	pop	{r4, pc}

08003856 <HAL_SPI_Init>:
{
 8003856:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003858:	4604      	mov	r4, r0
 800385a:	2800      	cmp	r0, #0
 800385c:	d051      	beq.n	8003902 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800385e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003860:	2b00      	cmp	r3, #0
 8003862:	d14a      	bne.n	80038fa <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003864:	6842      	ldr	r2, [r0, #4]
 8003866:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800386a:	d000      	beq.n	800386e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800386c:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800386e:	2300      	movs	r3, #0
 8003870:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003872:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003876:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800387a:	b923      	cbnz	r3, 8003886 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800387c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800387e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003882:	f7fe feab 	bl	80025dc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003886:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003888:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800388a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800388e:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003890:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003896:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800389e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80038a2:	4303      	orrs	r3, r0
 80038a4:	68e0      	ldr	r0, [r4, #12]
 80038a6:	69a1      	ldr	r1, [r4, #24]
 80038a8:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80038ac:	4303      	orrs	r3, r0
 80038ae:	6920      	ldr	r0, [r4, #16]
 80038b0:	f000 0002 	and.w	r0, r0, #2
 80038b4:	4303      	orrs	r3, r0
 80038b6:	6960      	ldr	r0, [r4, #20]
 80038b8:	f000 0001 	and.w	r0, r0, #1
 80038bc:	4303      	orrs	r3, r0
 80038be:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80038c2:	4303      	orrs	r3, r0
 80038c4:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038c6:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038c8:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80038cc:	4303      	orrs	r3, r0
 80038ce:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038d0:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d4:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80038d8:	4303      	orrs	r3, r0
 80038da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80038dc:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80038e0:	4303      	orrs	r3, r0
 80038e2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80038e4:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038e6:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038e8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ee:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80038f0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038f2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80038f8:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038fa:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038fc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003900:	e7b5      	b.n	800386e <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003902:	2001      	movs	r0, #1
 8003904:	e7f8      	b.n	80038f8 <HAL_SPI_Init+0xa2>

08003906 <HAL_SPI_Transmit>:
{
 8003906:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800390a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800390c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8003910:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003912:	2b01      	cmp	r3, #1
{
 8003914:	460d      	mov	r5, r1
 8003916:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8003918:	f000 80a0 	beq.w	8003a5c <HAL_SPI_Transmit+0x156>
 800391c:	2301      	movs	r3, #1
 800391e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003922:	f7ff f853 	bl	80029cc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003926:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800392a:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800392c:	2b01      	cmp	r3, #1
 800392e:	b2d8      	uxtb	r0, r3
 8003930:	f040 8092 	bne.w	8003a58 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8003934:	2d00      	cmp	r5, #0
 8003936:	d05d      	beq.n	80039f4 <HAL_SPI_Transmit+0xee>
 8003938:	2f00      	cmp	r7, #0
 800393a:	d05b      	beq.n	80039f4 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800393c:	2303      	movs	r3, #3
 800393e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003942:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003944:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003946:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003948:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 800394c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003950:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003952:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003954:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003956:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003958:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 800395a:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 800395c:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395e:	d107      	bne.n	8003970 <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003966:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800396e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003970:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003972:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003974:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003976:	bf5e      	ittt	pl
 8003978:	681a      	ldrpl	r2, [r3, #0]
 800397a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800397e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003980:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003984:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003986:	d141      	bne.n	8003a0c <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003988:	b10a      	cbz	r2, 800398e <HAL_SPI_Transmit+0x88>
 800398a:	2f01      	cmp	r7, #1
 800398c:	d107      	bne.n	800399e <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800398e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003992:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003994:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003996:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003998:	3b01      	subs	r3, #1
 800399a:	b29b      	uxth	r3, r3
 800399c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800399e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	b9a3      	cbnz	r3, 80039ce <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039a4:	4642      	mov	r2, r8
 80039a6:	4631      	mov	r1, r6
 80039a8:	4620      	mov	r0, r4
 80039aa:	f7ff ff46 	bl	800383a <SPI_EndRxTxTransaction>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d14f      	bne.n	8003a52 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039b2:	68a3      	ldr	r3, [r4, #8]
 80039b4:	b933      	cbnz	r3, 80039c4 <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	9201      	str	r2, [sp, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80039c6:	3800      	subs	r0, #0
 80039c8:	bf18      	it	ne
 80039ca:	2001      	movne	r0, #1
error:
 80039cc:	e012      	b.n	80039f4 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ce:	6822      	ldr	r2, [r4, #0]
 80039d0:	6893      	ldr	r3, [r2, #8]
 80039d2:	0798      	lsls	r0, r3, #30
 80039d4:	d505      	bpl.n	80039e2 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039d8:	f833 1b02 	ldrh.w	r1, [r3], #2
 80039dc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039de:	6323      	str	r3, [r4, #48]	; 0x30
 80039e0:	e7d9      	b.n	8003996 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e2:	f7fe fff3 	bl	80029cc <HAL_GetTick>
 80039e6:	eba0 0008 	sub.w	r0, r0, r8
 80039ea:	42b0      	cmp	r0, r6
 80039ec:	d30b      	bcc.n	8003a06 <HAL_SPI_Transmit+0x100>
 80039ee:	1c71      	adds	r1, r6, #1
 80039f0:	d0d5      	beq.n	800399e <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 80039f2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80039fa:	2300      	movs	r3, #0
 80039fc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003a00:	b002      	add	sp, #8
 8003a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a06:	2e00      	cmp	r6, #0
 8003a08:	d1c9      	bne.n	800399e <HAL_SPI_Transmit+0x98>
 8003a0a:	e7f2      	b.n	80039f2 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a0c:	b10a      	cbz	r2, 8003a12 <HAL_SPI_Transmit+0x10c>
 8003a0e:	2f01      	cmp	r7, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a12:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a14:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a18:	3301      	adds	r3, #1
 8003a1a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003a1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003a24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0bb      	beq.n	80039a4 <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	0792      	lsls	r2, r2, #30
 8003a32:	d502      	bpl.n	8003a3a <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	e7ec      	b.n	8003a14 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a3a:	f7fe ffc7 	bl	80029cc <HAL_GetTick>
 8003a3e:	eba0 0008 	sub.w	r0, r0, r8
 8003a42:	42b0      	cmp	r0, r6
 8003a44:	d302      	bcc.n	8003a4c <HAL_SPI_Transmit+0x146>
 8003a46:	1c73      	adds	r3, r6, #1
 8003a48:	d0ec      	beq.n	8003a24 <HAL_SPI_Transmit+0x11e>
 8003a4a:	e7d2      	b.n	80039f2 <HAL_SPI_Transmit+0xec>
 8003a4c:	2e00      	cmp	r6, #0
 8003a4e:	d1e9      	bne.n	8003a24 <HAL_SPI_Transmit+0x11e>
 8003a50:	e7cf      	b.n	80039f2 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a52:	2320      	movs	r3, #32
 8003a54:	6563      	str	r3, [r4, #84]	; 0x54
 8003a56:	e7ac      	b.n	80039b2 <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8003a58:	2002      	movs	r0, #2
 8003a5a:	e7cb      	b.n	80039f4 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	e7cf      	b.n	8003a00 <HAL_SPI_Transmit+0xfa>

08003a60 <HAL_SPI_TransmitReceive>:
{
 8003a60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003a64:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003a66:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8003a6a:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003a6c:	2b01      	cmp	r3, #1
{
 8003a6e:	460d      	mov	r5, r1
 8003a70:	4691      	mov	r9, r2
 8003a72:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8003a74:	f000 80e6 	beq.w	8003c44 <HAL_SPI_TransmitReceive+0x1e4>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003a7e:	f7fe ffa5 	bl	80029cc <HAL_GetTick>
  tmp_state           = hspi->State;
 8003a82:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8003a86:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a88:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8003a8a:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8003a8c:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_SPI_TransmitReceive+0x46>
 8003a90:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003a94:	f040 80d4 	bne.w	8003c40 <HAL_SPI_TransmitReceive+0x1e0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a98:	68a3      	ldr	r3, [r4, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f040 80d0 	bne.w	8003c40 <HAL_SPI_TransmitReceive+0x1e0>
 8003aa0:	2904      	cmp	r1, #4
 8003aa2:	f040 80cd 	bne.w	8003c40 <HAL_SPI_TransmitReceive+0x1e0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003aa6:	2d00      	cmp	r5, #0
 8003aa8:	d040      	beq.n	8003b2c <HAL_SPI_TransmitReceive+0xcc>
 8003aaa:	f1b9 0f00 	cmp.w	r9, #0
 8003aae:	d03d      	beq.n	8003b2c <HAL_SPI_TransmitReceive+0xcc>
 8003ab0:	2e00      	cmp	r6, #0
 8003ab2:	d03b      	beq.n	8003b2c <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ab4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ab8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003abc:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003abe:	bf1c      	itt	ne
 8003ac0:	2305      	movne	r3, #5
 8003ac2:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003aca:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ace:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8003ad0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003ad2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad4:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8003ad6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad8:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8003ada:	bf58      	it	pl
 8003adc:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ade:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8003ae0:	bf58      	it	pl
 8003ae2:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8003ae6:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8003ae8:	bf58      	it	pl
 8003aea:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003aec:	68e1      	ldr	r1, [r4, #12]
 8003aee:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003af2:	d152      	bne.n	8003b9a <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af4:	b10a      	cbz	r2, 8003afa <HAL_SPI_TransmitReceive+0x9a>
 8003af6:	2e01      	cmp	r6, #1
 8003af8:	d107      	bne.n	8003b0a <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003afa:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003afe:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003b00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b02:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003b0a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	b973      	cbnz	r3, 8003b30 <HAL_SPI_TransmitReceive+0xd0>
 8003b12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	b95b      	cbnz	r3, 8003b30 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b18:	4642      	mov	r2, r8
 8003b1a:	4639      	mov	r1, r7
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fe8c 	bl	800383a <SPI_EndRxTxTransaction>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	f000 8081 	beq.w	8003c2a <HAL_SPI_TransmitReceive+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b28:	2320      	movs	r3, #32
 8003b2a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	e02b      	b.n	8003b88 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b30:	6821      	ldr	r1, [r4, #0]
 8003b32:	688b      	ldr	r3, [r1, #8]
 8003b34:	079e      	lsls	r6, r3, #30
 8003b36:	d50d      	bpl.n	8003b54 <HAL_SPI_TransmitReceive+0xf4>
 8003b38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	b153      	cbz	r3, 8003b54 <HAL_SPI_TransmitReceive+0xf4>
 8003b3e:	b14d      	cbz	r5, 8003b54 <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8003b40:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b44:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003b48:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b4a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003b4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b54:	688a      	ldr	r2, [r1, #8]
 8003b56:	f012 0201 	ands.w	r2, r2, #1
 8003b5a:	d00c      	beq.n	8003b76 <HAL_SPI_TransmitReceive+0x116>
 8003b5c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	b14b      	cbz	r3, 8003b76 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8003b62:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b64:	68c9      	ldr	r1, [r1, #12]
 8003b66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b68:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b6c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003b6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b76:	f7fe ff29 	bl	80029cc <HAL_GetTick>
 8003b7a:	eba0 0008 	sub.w	r0, r0, r8
 8003b7e:	42b8      	cmp	r0, r7
 8003b80:	d3c4      	bcc.n	8003b0c <HAL_SPI_TransmitReceive+0xac>
 8003b82:	1c78      	adds	r0, r7, #1
 8003b84:	d0c2      	beq.n	8003b0c <HAL_SPI_TransmitReceive+0xac>
        errorcode = HAL_TIMEOUT;
 8003b86:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003b94:	b003      	add	sp, #12
 8003b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b9a:	b10a      	cbz	r2, 8003ba0 <HAL_SPI_TransmitReceive+0x140>
 8003b9c:	2e01      	cmp	r6, #1
 8003b9e:	d108      	bne.n	8003bb2 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ba0:	782a      	ldrb	r2, [r5, #0]
 8003ba2:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ba4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003baa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003bb2:	2501      	movs	r5, #1
 8003bb4:	e02d      	b.n	8003c12 <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb6:	6822      	ldr	r2, [r4, #0]
 8003bb8:	6893      	ldr	r3, [r2, #8]
 8003bba:	0799      	lsls	r1, r3, #30
 8003bbc:	d50e      	bpl.n	8003bdc <HAL_SPI_TransmitReceive+0x17c>
 8003bbe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	b15b      	cbz	r3, 8003bdc <HAL_SPI_TransmitReceive+0x17c>
 8003bc4:	b155      	cbz	r5, 8003bdc <HAL_SPI_TransmitReceive+0x17c>
        txallowed = 0U;
 8003bc6:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bc8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8003bce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003bd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bdc:	6822      	ldr	r2, [r4, #0]
 8003bde:	6891      	ldr	r1, [r2, #8]
 8003be0:	f011 0101 	ands.w	r1, r1, #1
 8003be4:	d00d      	beq.n	8003c02 <HAL_SPI_TransmitReceive+0x1a2>
 8003be6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	b153      	cbz	r3, 8003c02 <HAL_SPI_TransmitReceive+0x1a2>
        txallowed = 1U;
 8003bec:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bee:	68d2      	ldr	r2, [r2, #12]
 8003bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003bf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003bfa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c02:	f7fe fee3 	bl	80029cc <HAL_GetTick>
 8003c06:	eba0 0008 	sub.w	r0, r0, r8
 8003c0a:	42b8      	cmp	r0, r7
 8003c0c:	d30a      	bcc.n	8003c24 <HAL_SPI_TransmitReceive+0x1c4>
 8003c0e:	1c7b      	adds	r3, r7, #1
 8003c10:	d1b9      	bne.n	8003b86 <HAL_SPI_TransmitReceive+0x126>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1cd      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x156>
 8003c1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1c9      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x156>
 8003c22:	e779      	b.n	8003b18 <HAL_SPI_TransmitReceive+0xb8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c24:	2f00      	cmp	r7, #0
 8003c26:	d1f4      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x1b2>
 8003c28:	e7ad      	b.n	8003b86 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c2a:	68a3      	ldr	r3, [r4, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ab      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	9001      	str	r0, [sp, #4]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	9201      	str	r2, [sp, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	9b01      	ldr	r3, [sp, #4]
 8003c3e:	e7a3      	b.n	8003b88 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8003c40:	2002      	movs	r0, #2
 8003c42:	e7a1      	b.n	8003b88 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8003c44:	2002      	movs	r0, #2
 8003c46:	e7a5      	b.n	8003b94 <HAL_SPI_TransmitReceive+0x134>

08003c48 <HAL_SPI_Receive>:
{
 8003c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c4c:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c4e:	6843      	ldr	r3, [r0, #4]
{
 8003c50:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8003c56:	4689      	mov	r9, r1
 8003c58:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c5a:	d10c      	bne.n	8003c76 <HAL_SPI_Receive+0x2e>
 8003c5c:	6883      	ldr	r3, [r0, #8]
 8003c5e:	b953      	cbnz	r3, 8003c76 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c60:	2304      	movs	r3, #4
 8003c62:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c66:	4613      	mov	r3, r2
 8003c68:	9500      	str	r5, [sp, #0]
 8003c6a:	460a      	mov	r2, r1
 8003c6c:	f7ff fef8 	bl	8003a60 <HAL_SPI_TransmitReceive>
}
 8003c70:	b003      	add	sp, #12
 8003c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8003c76:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	f000 8086 	beq.w	8003d8c <HAL_SPI_Receive+0x144>
 8003c80:	2301      	movs	r3, #1
 8003c82:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003c86:	f7fe fea1 	bl	80029cc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c8a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8003c8e:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	b2d8      	uxtb	r0, r3
 8003c94:	d178      	bne.n	8003d88 <HAL_SPI_Receive+0x140>
  if ((pData == NULL) || (Size == 0U))
 8003c96:	f1b9 0f00 	cmp.w	r9, #0
 8003c9a:	d05c      	beq.n	8003d56 <HAL_SPI_Receive+0x10e>
 8003c9c:	2f00      	cmp	r7, #0
 8003c9e:	d05a      	beq.n	8003d56 <HAL_SPI_Receive+0x10e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ca0:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ca2:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca4:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ca6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003caa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cae:	6566      	str	r6, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003cb0:	e9c4 6610 	strd	r6, r6, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003cb4:	87e7      	strh	r7, [r4, #62]	; 0x3e
    __HAL_SPI_DISABLE(hspi);
 8003cb6:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003cb8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003cbc:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cbe:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003cc0:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003cc2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc4:	d107      	bne.n	8003cd6 <HAL_SPI_Receive+0x8e>
    __HAL_SPI_DISABLE(hspi);
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cd4:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003cda:	bf5e      	ittt	pl
 8003cdc:	681a      	ldrpl	r2, [r3, #0]
 8003cde:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003ce2:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ce4:	68e3      	ldr	r3, [r4, #12]
 8003ce6:	b1f3      	cbz	r3, 8003d26 <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 8003ce8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	b1fb      	cbz	r3, 8003d2e <HAL_SPI_Receive+0xe6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	07d2      	lsls	r2, r2, #31
 8003cf4:	d539      	bpl.n	8003d6a <HAL_SPI_Receive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cfa:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cfe:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003d00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003d08:	e7ee      	b.n	8003ce8 <HAL_SPI_Receive+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	07d0      	lsls	r0, r2, #31
 8003d10:	d518      	bpl.n	8003d44 <HAL_SPI_Receive+0xfc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d12:	7b1b      	ldrb	r3, [r3, #12]
 8003d14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d16:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003d1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003d26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1ed      	bne.n	8003d0a <HAL_SPI_Receive+0xc2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d2e:	4642      	mov	r2, r8
 8003d30:	4629      	mov	r1, r5
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff fd5a 	bl	80037ec <SPI_EndRxTransaction>
 8003d38:	bb18      	cbnz	r0, 8003d82 <HAL_SPI_Receive+0x13a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003d3c:	3800      	subs	r0, #0
 8003d3e:	bf18      	it	ne
 8003d40:	2001      	movne	r0, #1
error :
 8003d42:	e008      	b.n	8003d56 <HAL_SPI_Receive+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d44:	f7fe fe42 	bl	80029cc <HAL_GetTick>
 8003d48:	eba0 0008 	sub.w	r0, r0, r8
 8003d4c:	42a8      	cmp	r0, r5
 8003d4e:	d309      	bcc.n	8003d64 <HAL_SPI_Receive+0x11c>
 8003d50:	1c69      	adds	r1, r5, #1
 8003d52:	d0e8      	beq.n	8003d26 <HAL_SPI_Receive+0xde>
          errorcode = HAL_TIMEOUT;
 8003d54:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8003d62:	e785      	b.n	8003c70 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d64:	2d00      	cmp	r5, #0
 8003d66:	d1de      	bne.n	8003d26 <HAL_SPI_Receive+0xde>
 8003d68:	e7f4      	b.n	8003d54 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d6a:	f7fe fe2f 	bl	80029cc <HAL_GetTick>
 8003d6e:	eba0 0008 	sub.w	r0, r0, r8
 8003d72:	42a8      	cmp	r0, r5
 8003d74:	d302      	bcc.n	8003d7c <HAL_SPI_Receive+0x134>
 8003d76:	1c6b      	adds	r3, r5, #1
 8003d78:	d0b6      	beq.n	8003ce8 <HAL_SPI_Receive+0xa0>
 8003d7a:	e7eb      	b.n	8003d54 <HAL_SPI_Receive+0x10c>
 8003d7c:	2d00      	cmp	r5, #0
 8003d7e:	d1b3      	bne.n	8003ce8 <HAL_SPI_Receive+0xa0>
 8003d80:	e7e8      	b.n	8003d54 <HAL_SPI_Receive+0x10c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d82:	2320      	movs	r3, #32
 8003d84:	6563      	str	r3, [r4, #84]	; 0x54
 8003d86:	e7d8      	b.n	8003d3a <HAL_SPI_Receive+0xf2>
    errorcode = HAL_BUSY;
 8003d88:	2002      	movs	r0, #2
 8003d8a:	e7e4      	b.n	8003d56 <HAL_SPI_Receive+0x10e>
  __HAL_LOCK(hspi);
 8003d8c:	2002      	movs	r0, #2
 8003d8e:	e76f      	b.n	8003c70 <HAL_SPI_Receive+0x28>

08003d90 <HAL_SPI_ErrorCallback>:
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_SPI_IRQHandler>:
{
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003d96:	6803      	ldr	r3, [r0, #0]
{
 8003d98:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003d9a:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003d9c:	689a      	ldr	r2, [r3, #8]
{
 8003d9e:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003da0:	0656      	lsls	r6, r2, #25
 8003da2:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8003da6:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8003daa:	d408      	bmi.n	8003dbe <HAL_SPI_IRQHandler+0x2a>
 8003dac:	07d6      	lsls	r6, r2, #31
 8003dae:	d506      	bpl.n	8003dbe <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003db0:	064e      	lsls	r6, r1, #25
 8003db2:	d504      	bpl.n	8003dbe <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8003db4:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8003db6:	b005      	add	sp, #20
 8003db8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8003dbc:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003dbe:	0796      	lsls	r6, r2, #30
 8003dc0:	d504      	bpl.n	8003dcc <HAL_SPI_IRQHandler+0x38>
 8003dc2:	0608      	lsls	r0, r1, #24
 8003dc4:	d502      	bpl.n	8003dcc <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003dca:	e7f4      	b.n	8003db6 <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003dcc:	0956      	lsrs	r6, r2, #5
 8003dce:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 8003dd2:	07d2      	lsls	r2, r2, #31
 8003dd4:	d54c      	bpl.n	8003e70 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003dd6:	068d      	lsls	r5, r1, #26
 8003dd8:	d54a      	bpl.n	8003e70 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003dda:	b177      	cbz	r7, 8003dfa <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003ddc:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8003de0:	2000      	movs	r0, #0
 8003de2:	2a03      	cmp	r2, #3
 8003de4:	d03e      	beq.n	8003e64 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003de6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003de8:	f042 0204 	orr.w	r2, r2, #4
 8003dec:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003dee:	9001      	str	r0, [sp, #4]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	9201      	str	r2, [sp, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	9201      	str	r2, [sp, #4]
 8003df8:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003dfa:	07f0      	lsls	r0, r6, #31
 8003dfc:	d50c      	bpl.n	8003e18 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003dfe:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003e06:	2200      	movs	r2, #0
 8003e08:	9203      	str	r2, [sp, #12]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	9203      	str	r2, [sp, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e18:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003e1a:	b34a      	cbz	r2, 8003e70 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e22:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003e24:	2201      	movs	r2, #1
 8003e26:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003e2a:	078a      	lsls	r2, r1, #30
 8003e2c:	d022      	beq.n	8003e74 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e2e:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003e30:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003e32:	f022 0203 	bic.w	r2, r2, #3
 8003e36:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003e38:	b140      	cbz	r0, 8003e4c <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_SPI_IRQHandler+0xe8>)
 8003e3c:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003e3e:	f7ff f8a1 	bl	8002f84 <HAL_DMA_Abort_IT>
 8003e42:	b118      	cbz	r0, 8003e4c <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e4a:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003e4c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003e4e:	b178      	cbz	r0, 8003e70 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003e50:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_SPI_IRQHandler+0xe8>)
 8003e52:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003e54:	f7ff f896 	bl	8002f84 <HAL_DMA_Abort_IT>
 8003e58:	b150      	cbz	r0, 8003e70 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003e5a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e60:	6563      	str	r3, [r4, #84]	; 0x54
 8003e62:	e005      	b.n	8003e70 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e64:	9002      	str	r0, [sp, #8]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	9202      	str	r2, [sp, #8]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	9302      	str	r3, [sp, #8]
 8003e6e:	9b02      	ldr	r3, [sp, #8]
}
 8003e70:	b005      	add	sp, #20
 8003e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8003e74:	4620      	mov	r0, r4
 8003e76:	f7ff ff8b 	bl	8003d90 <HAL_SPI_ErrorCallback>
 8003e7a:	e7f9      	b.n	8003e70 <HAL_SPI_IRQHandler+0xdc>
 8003e7c:	08003e81 	.word	0x08003e81

08003e80 <SPI_DMAAbortOnError>:
{
 8003e80:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 8003e82:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e84:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003e86:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e88:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8003e8a:	f7ff ff81 	bl	8003d90 <HAL_SPI_ErrorCallback>
}
 8003e8e:	bd08      	pop	{r3, pc}

08003e90 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e90:	4770      	bx	lr
	...

08003e94 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d120      	bne.n	8003ede <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea2:	6803      	ldr	r3, [r0, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eac:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <HAL_TIM_Base_Start_IT+0x50>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x34>
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d007      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x34>
 8003eb8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <HAL_TIM_Base_Start_IT+0x34>
 8003ec0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ece:	2a06      	cmp	r2, #6
 8003ed0:	d003      	beq.n	8003eda <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	f042 0201 	orr.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eda:	2000      	movs	r0, #0
}
 8003edc:	4770      	bx	lr
    return HAL_ERROR;
 8003ede:	2001      	movs	r0, #1
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00

08003ee8 <HAL_TIM_OC_DelayElapsedCallback>:
 8003ee8:	4770      	bx	lr

08003eea <HAL_TIM_IC_CaptureCallback>:
 8003eea:	4770      	bx	lr

08003eec <HAL_TIM_PWM_PulseFinishedCallback>:
 8003eec:	4770      	bx	lr

08003eee <HAL_TIM_TriggerCallback>:
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef0:	6803      	ldr	r3, [r0, #0]
{
 8003ef2:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef4:	691a      	ldr	r2, [r3, #16]
{
 8003ef6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ef8:	0791      	lsls	r1, r2, #30
 8003efa:	d50e      	bpl.n	8003f1a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	0792      	lsls	r2, r2, #30
 8003f00:	d50b      	bpl.n	8003f1a <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f02:	f06f 0202 	mvn.w	r2, #2
 8003f06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	079b      	lsls	r3, r3, #30
 8003f10:	d077      	beq.n	8004002 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f12:	f7ff ffea 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f16:	2300      	movs	r3, #0
 8003f18:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	0750      	lsls	r0, r2, #29
 8003f20:	d510      	bpl.n	8003f44 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	0751      	lsls	r1, r2, #29
 8003f26:	d50d      	bpl.n	8003f44 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f28:	f06f 0204 	mvn.w	r2, #4
 8003f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f2e:	2202      	movs	r2, #2
 8003f30:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f32:	699b      	ldr	r3, [r3, #24]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f36:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f3a:	d068      	beq.n	800400e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3c:	f7ff ffd5 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f40:	2300      	movs	r3, #0
 8003f42:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	0712      	lsls	r2, r2, #28
 8003f4a:	d50f      	bpl.n	8003f6c <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	0710      	lsls	r0, r2, #28
 8003f50:	d50c      	bpl.n	8003f6c <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f52:	f06f 0208 	mvn.w	r2, #8
 8003f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f58:	2204      	movs	r2, #4
 8003f5a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f5c:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f60:	0799      	lsls	r1, r3, #30
 8003f62:	d05a      	beq.n	800401a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f64:	f7ff ffc1 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	06d2      	lsls	r2, r2, #27
 8003f72:	d510      	bpl.n	8003f96 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	06d0      	lsls	r0, r2, #27
 8003f78:	d50d      	bpl.n	8003f96 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f7a:	f06f 0210 	mvn.w	r2, #16
 8003f7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f80:	2208      	movs	r2, #8
 8003f82:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f84:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f88:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003f8c:	d04b      	beq.n	8004026 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	f7ff ffac 	bl	8003eea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	2300      	movs	r3, #0
 8003f94:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	07d1      	lsls	r1, r2, #31
 8003f9c:	d508      	bpl.n	8003fb0 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	07d2      	lsls	r2, r2, #31
 8003fa2:	d505      	bpl.n	8003fb0 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa4:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fa8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003faa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fac:	f7fe fac6 	bl	800253c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	0610      	lsls	r0, r2, #24
 8003fb6:	d508      	bpl.n	8003fca <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	0611      	lsls	r1, r2, #24
 8003fbc:	d505      	bpl.n	8003fca <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fbe:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003fc6:	f000 f89a 	bl	80040fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	0652      	lsls	r2, r2, #25
 8003fd0:	d508      	bpl.n	8003fe4 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	0650      	lsls	r0, r2, #25
 8003fd6:	d505      	bpl.n	8003fe4 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fdc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fde:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003fe0:	f7ff ff85 	bl	8003eee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	0691      	lsls	r1, r2, #26
 8003fea:	d522      	bpl.n	8004032 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	0692      	lsls	r2, r2, #26
 8003ff0:	d51f      	bpl.n	8004032 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ff2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ff6:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ffc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003ffe:	f000 b87d 	b.w	80040fc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	f7ff ff71 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004006:	4620      	mov	r0, r4
 8004008:	f7ff ff70 	bl	8003eec <HAL_TIM_PWM_PulseFinishedCallback>
 800400c:	e783      	b.n	8003f16 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400e:	f7ff ff6b 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004012:	4620      	mov	r0, r4
 8004014:	f7ff ff6a 	bl	8003eec <HAL_TIM_PWM_PulseFinishedCallback>
 8004018:	e792      	b.n	8003f40 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	f7ff ff65 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401e:	4620      	mov	r0, r4
 8004020:	f7ff ff64 	bl	8003eec <HAL_TIM_PWM_PulseFinishedCallback>
 8004024:	e7a0      	b.n	8003f68 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	f7ff ff5f 	bl	8003ee8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402a:	4620      	mov	r0, r4
 800402c:	f7ff ff5e 	bl	8003eec <HAL_TIM_PWM_PulseFinishedCallback>
 8004030:	e7af      	b.n	8003f92 <HAL_TIM_IRQHandler+0xa2>
}
 8004032:	bd10      	pop	{r4, pc}

08004034 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004034:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8004036:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004038:	4290      	cmp	r0, r2
 800403a:	d00a      	beq.n	8004052 <TIM_Base_SetConfig+0x1e>
 800403c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004040:	d007      	beq.n	8004052 <TIM_Base_SetConfig+0x1e>
 8004042:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004046:	4290      	cmp	r0, r2
 8004048:	d003      	beq.n	8004052 <TIM_Base_SetConfig+0x1e>
 800404a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800404e:	4290      	cmp	r0, r2
 8004050:	d115      	bne.n	800407e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004052:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004058:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405a:	4a11      	ldr	r2, [pc, #68]	; (80040a0 <TIM_Base_SetConfig+0x6c>)
 800405c:	4290      	cmp	r0, r2
 800405e:	d00a      	beq.n	8004076 <TIM_Base_SetConfig+0x42>
 8004060:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0x42>
 8004066:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800406a:	4290      	cmp	r0, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0x42>
 800406e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004072:	4290      	cmp	r0, r2
 8004074:	d103      	bne.n	800407e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004076:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800407e:	694a      	ldr	r2, [r1, #20]
 8004080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004084:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004086:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004088:	688b      	ldr	r3, [r1, #8]
 800408a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800408c:	680b      	ldr	r3, [r1, #0]
 800408e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <TIM_Base_SetConfig+0x6c>)
 8004092:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004094:	bf04      	itt	eq
 8004096:	690b      	ldreq	r3, [r1, #16]
 8004098:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800409a:	2301      	movs	r3, #1
 800409c:	6143      	str	r3, [r0, #20]
}
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00

080040a4 <HAL_TIM_Base_Init>:
{
 80040a4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80040a6:	4604      	mov	r4, r0
 80040a8:	b330      	cbz	r0, 80040f8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80040aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040b2:	b91b      	cbnz	r3, 80040bc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80040b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80040b8:	f7ff feea 	bl	8003e90 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040be:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c4:	1d21      	adds	r1, r4, #4
 80040c6:	f7ff ffb5 	bl	8004034 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ca:	2301      	movs	r3, #1
  return HAL_OK;
 80040cc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ce:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80040d6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80040da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80040de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80040ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80040f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80040f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80040f8:	2001      	movs	r0, #1
 80040fa:	e7fc      	b.n	80040f6 <HAL_TIM_Base_Init+0x52>

080040fc <HAL_TIMEx_CommutCallback>:
 80040fc:	4770      	bx	lr

080040fe <HAL_TIMEx_BreakCallback>:
 80040fe:	4770      	bx	lr

08004100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004100:	b510      	push	{r4, lr}
 8004102:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004104:	6803      	ldr	r3, [r0, #0]
 8004106:	68c1      	ldr	r1, [r0, #12]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800410e:	430a      	orrs	r2, r1
 8004110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004112:	6882      	ldr	r2, [r0, #8]
 8004114:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004116:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004118:	4302      	orrs	r2, r0
 800411a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800411c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8004120:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004124:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004126:	430a      	orrs	r2, r1
 8004128:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	69a1      	ldr	r1, [r4, #24]
 800412e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004132:	430a      	orrs	r2, r1
 8004134:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004136:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <UART_SetConfig+0x70>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d115      	bne.n	8004168 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800413c:	f7ff fad2 	bl	80036e4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004140:	2319      	movs	r3, #25
 8004142:	4343      	muls	r3, r0
 8004144:	6862      	ldr	r2, [r4, #4]
 8004146:	6820      	ldr	r0, [r4, #0]
 8004148:	0092      	lsls	r2, r2, #2
 800414a:	fbb3 f3f2 	udiv	r3, r3, r2
 800414e:	2264      	movs	r2, #100	; 0x64
 8004150:	fbb3 f1f2 	udiv	r1, r3, r2
 8004154:	fb02 3311 	mls	r3, r2, r1, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	; 0x32
 800415c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004160:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004164:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8004166:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8004168:	f7ff faac 	bl	80036c4 <HAL_RCC_GetPCLK1Freq>
 800416c:	e7e8      	b.n	8004140 <UART_SetConfig+0x40>
 800416e:	bf00      	nop
 8004170:	40013800 	.word	0x40013800

08004174 <HAL_UART_Init>:
{
 8004174:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004176:	4604      	mov	r4, r0
 8004178:	b340      	cbz	r0, 80041cc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800417a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800417e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004182:	b91b      	cbnz	r3, 800418c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004184:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004188:	f7fe fba2 	bl	80028d0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800418e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004190:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004194:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8004196:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8004198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800419c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800419e:	f7ff ffaf 	bl	8004100 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a6:	691a      	ldr	r2, [r3, #16]
 80041a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ae:	695a      	ldr	r2, [r3, #20]
 80041b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041b4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041bc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80041be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80041ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80041cc:	2001      	movs	r0, #1
 80041ce:	e7fc      	b.n	80041ca <HAL_UART_Init+0x56>

080041d0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041d0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80041d4:	b113      	cbz	r3, 80041dc <osKernelInitialize+0xc>
    stat = osErrorISR;
 80041d6:	f06f 0005 	mvn.w	r0, #5
 80041da:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041dc:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f8      	bne.n	80041d6 <osKernelInitialize+0x6>
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <osKernelInitialize+0x34>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	2802      	cmp	r0, #2
 80041ea:	d106      	bne.n	80041fa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041ec:	f3ef 8311 	mrs	r3, BASEPRI
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80041f8:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d1fa      	bne.n	80041f4 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 80041fe:	2201      	movs	r2, #1
 8004200:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004202:	4770      	bx	lr
 8004204:	200007f8 	.word	0x200007f8

08004208 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004208:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800420a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800420e:	b113      	cbz	r3, 8004216 <osKernelStart+0xe>
    stat = osErrorISR;
 8004210:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8004214:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004216:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800421a:	2c00      	cmp	r4, #0
 800421c:	d1f8      	bne.n	8004210 <osKernelStart+0x8>
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <osKernelStart+0x3c>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	2a02      	cmp	r2, #2
 8004224:	d106      	bne.n	8004234 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004226:	f3ef 8311 	mrs	r3, BASEPRI
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <osKernelStart+0x8>
      stat = osError;
 800422e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8004232:	e7ef      	b.n	8004214 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8004234:	2a01      	cmp	r2, #1
 8004236:	d1fa      	bne.n	800422e <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8004238:	2202      	movs	r2, #2
 800423a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800423c:	f000 fdac 	bl	8004d98 <vTaskStartScheduler>
      stat = osOK;
 8004240:	4620      	mov	r0, r4
 8004242:	e7e7      	b.n	8004214 <osKernelStart+0xc>
 8004244:	200007f8 	.word	0x200007f8

08004248 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800424a:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800424c:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800424e:	b087      	sub	sp, #28
 8004250:	460b      	mov	r3, r1
  hTask = NULL;
 8004252:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004254:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004258:	bb52      	cbnz	r2, 80042b0 <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425a:	f3ef 8210 	mrs	r2, PRIMASK
 800425e:	bb3a      	cbnz	r2, 80042b0 <osThreadNew+0x68>
 8004260:	4a26      	ldr	r2, [pc, #152]	; (80042fc <osThreadNew+0xb4>)
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	2a02      	cmp	r2, #2
 8004266:	d102      	bne.n	800426e <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004268:	f3ef 8211 	mrs	r2, BASEPRI
 800426c:	bb02      	cbnz	r2, 80042b0 <osThreadNew+0x68>
 800426e:	b1f8      	cbz	r0, 80042b0 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8004270:	2200      	movs	r2, #0
 8004272:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8004276:	2c00      	cmp	r4, #0
 8004278:	d030      	beq.n	80042dc <osThreadNew+0x94>
      if (attr->name != NULL) {
 800427a:	6821      	ldr	r1, [r4, #0]
 800427c:	b909      	cbnz	r1, 8004282 <osThreadNew+0x3a>
    name  = &empty;
 800427e:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004282:	69a5      	ldr	r5, [r4, #24]
 8004284:	2d00      	cmp	r5, #0
 8004286:	bf08      	it	eq
 8004288:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800428a:	1e6a      	subs	r2, r5, #1
 800428c:	2a37      	cmp	r2, #55	; 0x37
 800428e:	46ac      	mov	ip, r5
 8004290:	d82a      	bhi.n	80042e8 <osThreadNew+0xa0>
 8004292:	6862      	ldr	r2, [r4, #4]
 8004294:	07d2      	lsls	r2, r2, #31
 8004296:	d427      	bmi.n	80042e8 <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004298:	6966      	ldr	r6, [r4, #20]
 800429a:	b166      	cbz	r6, 80042b6 <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800429c:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800429e:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80042a2:	b157      	cbz	r7, 80042ba <osThreadNew+0x72>
 80042a4:	f1be 0fbb 	cmp.w	lr, #187	; 0xbb
 80042a8:	d902      	bls.n	80042b0 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042aa:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042ac:	b104      	cbz	r4, 80042b0 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042ae:	b9ee      	cbnz	r6, 80042ec <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042b0:	9805      	ldr	r0, [sp, #20]
}
 80042b2:	b007      	add	sp, #28
 80042b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80042b6:	2280      	movs	r2, #128	; 0x80
 80042b8:	e7f1      	b.n	800429e <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042ba:	f1be 0f00 	cmp.w	lr, #0
 80042be:	d1f7      	bne.n	80042b0 <osThreadNew+0x68>
      if (mem == 0) {
 80042c0:	6924      	ldr	r4, [r4, #16]
 80042c2:	2c00      	cmp	r4, #0
 80042c4:	d1f4      	bne.n	80042b0 <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042c6:	ac05      	add	r4, sp, #20
 80042c8:	e9cd c400 	strd	ip, r4, [sp]
 80042cc:	b292      	uxth	r2, r2
 80042ce:	f000 fd36 	bl	8004d3e <xTaskCreate>
 80042d2:	2801      	cmp	r0, #1
          hTask = NULL;
 80042d4:	bf1c      	itt	ne
 80042d6:	2300      	movne	r3, #0
 80042d8:	9305      	strne	r3, [sp, #20]
 80042da:	e7e9      	b.n	80042b0 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 80042dc:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 80042e0:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 80042e2:	f10d 0113 	add.w	r1, sp, #19
 80042e6:	e7ee      	b.n	80042c6 <osThreadNew+0x7e>
        return (NULL);
 80042e8:	2000      	movs	r0, #0
 80042ea:	e7e2      	b.n	80042b2 <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042ec:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80042f0:	9500      	str	r5, [sp, #0]
 80042f2:	f000 fced 	bl	8004cd0 <xTaskCreateStatic>
 80042f6:	9005      	str	r0, [sp, #20]
 80042f8:	e7da      	b.n	80042b0 <osThreadNew+0x68>
 80042fa:	bf00      	nop
 80042fc:	200007f8 	.word	0x200007f8

08004300 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004300:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004302:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004306:	b113      	cbz	r3, 800430e <osDelay+0xe>
    stat = osErrorISR;
 8004308:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800430c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f8      	bne.n	8004308 <osDelay+0x8>
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <osDelay+0x34>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d103      	bne.n	8004326 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800431e:	f3ef 8311 	mrs	r3, BASEPRI
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <osDelay+0x8>
    if (ticks != 0U) {
 8004326:	2800      	cmp	r0, #0
 8004328:	d0f0      	beq.n	800430c <osDelay+0xc>
      vTaskDelay(ticks);
 800432a:	f000 fedf 	bl	80050ec <vTaskDelay>
    stat = osOK;
 800432e:	2000      	movs	r0, #0
 8004330:	e7ec      	b.n	800430c <osDelay+0xc>
 8004332:	bf00      	nop
 8004334:	200007f8 	.word	0x200007f8

08004338 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <vApplicationGetIdleTaskMemory+0x10>)
 800433a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800433c:	4b03      	ldr	r3, [pc, #12]	; (800434c <vApplicationGetIdleTaskMemory+0x14>)
 800433e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	6013      	str	r3, [r2, #0]
}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	2000073c 	.word	0x2000073c
 800434c:	2000053c 	.word	0x2000053c

08004350 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004350:	4b03      	ldr	r3, [pc, #12]	; (8004360 <vApplicationGetTimerTaskMemory+0x10>)
 8004352:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <vApplicationGetTimerTaskMemory+0x14>)
 8004356:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800435c:	6013      	str	r3, [r2, #0]
}
 800435e:	4770      	bx	lr
 8004360:	20000bfc 	.word	0x20000bfc
 8004364:	200007fc 	.word	0x200007fc

08004368 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800436c:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004370:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004374:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004376:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800437c:	4770      	bx	lr

0800437e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004382:	4770      	bx	lr

08004384 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004384:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004386:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8004388:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800438a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800438c:	689a      	ldr	r2, [r3, #8]
 800438e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004390:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8004392:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004394:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004396:	3301      	adds	r3, #1
 8004398:	6003      	str	r3, [r0, #0]
}
 800439a:	4770      	bx	lr

0800439c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800439c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800439e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043a0:	1c63      	adds	r3, r4, #1
 80043a2:	d10a      	bne.n	80043ba <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043a4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043aa:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043ac:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80043ae:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80043b0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80043b2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80043b4:	3301      	adds	r3, #1
 80043b6:	6003      	str	r3, [r0, #0]
}
 80043b8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ba:	f100 0208 	add.w	r2, r0, #8
 80043be:	4613      	mov	r3, r2
 80043c0:	6852      	ldr	r2, [r2, #4]
 80043c2:	6815      	ldr	r5, [r2, #0]
 80043c4:	42a5      	cmp	r5, r4
 80043c6:	d9fa      	bls.n	80043be <vListInsert+0x22>
 80043c8:	e7ed      	b.n	80043a6 <vListInsert+0xa>

080043ca <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80043ca:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043cc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80043d0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043d2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043d4:	6859      	ldr	r1, [r3, #4]
 80043d6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043d8:	bf08      	it	eq
 80043da:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80043dc:	2200      	movs	r2, #0
 80043de:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	3a01      	subs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043e6:	6818      	ldr	r0, [r3, #0]
}
 80043e8:	4770      	bx	lr

080043ea <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043ea:	b510      	push	{r4, lr}
 80043ec:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043ee:	f001 fa31 	bl	8005854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043f2:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80043f4:	f001 fa4e 	bl	8005894 <vPortExitCritical>

	return xReturn;
}
 80043f8:	fab4 f084 	clz	r0, r4
 80043fc:	0940      	lsrs	r0, r0, #5
 80043fe:	bd10      	pop	{r4, pc}

08004400 <prvCopyDataToQueue>:
{
 8004400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004402:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004404:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004406:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004408:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800440a:	b952      	cbnz	r2, 8004422 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800440c:	6807      	ldr	r7, [r0, #0]
 800440e:	bb47      	cbnz	r7, 8004462 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004410:	6840      	ldr	r0, [r0, #4]
 8004412:	f000 ffa9 	bl	8005368 <xTaskPriorityDisinherit>
 8004416:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 8004418:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800441a:	3601      	adds	r6, #1
}
 800441c:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800441e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004422:	b965      	cbnz	r5, 800443e <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004424:	6880      	ldr	r0, [r0, #8]
 8004426:	f002 ff88 	bl	800733a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800442a:	68a3      	ldr	r3, [r4, #8]
 800442c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800442e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004430:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004432:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004434:	4293      	cmp	r3, r2
 8004436:	d3f0      	bcc.n	800441a <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	60a3      	str	r3, [r4, #8]
 800443c:	e7ed      	b.n	800441a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800443e:	68c0      	ldr	r0, [r0, #12]
 8004440:	f002 ff7b 	bl	800733a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004444:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004446:	68e3      	ldr	r3, [r4, #12]
 8004448:	4251      	negs	r1, r2
 800444a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800444c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800444e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004450:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004452:	bf3e      	ittt	cc
 8004454:	6863      	ldrcc	r3, [r4, #4]
 8004456:	185b      	addcc	r3, r3, r1
 8004458:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800445a:	2d02      	cmp	r5, #2
 800445c:	d101      	bne.n	8004462 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800445e:	b116      	cbz	r6, 8004466 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8004460:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8004462:	2500      	movs	r5, #0
 8004464:	e7d9      	b.n	800441a <prvCopyDataToQueue+0x1a>
 8004466:	4635      	mov	r5, r6
 8004468:	e7d7      	b.n	800441a <prvCopyDataToQueue+0x1a>

0800446a <prvCopyDataFromQueue>:
{
 800446a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800446c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800446e:	4608      	mov	r0, r1
 8004470:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004472:	b162      	cbz	r2, 800448e <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004474:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004476:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004478:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800447a:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800447c:	bf28      	it	cs
 800447e:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004480:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004482:	bf28      	it	cs
 8004484:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004486:	68d9      	ldr	r1, [r3, #12]
}
 8004488:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800448a:	f002 bf56 	b.w	800733a <memcpy>
}
 800448e:	bc10      	pop	{r4}
 8004490:	4770      	bx	lr

08004492 <prvUnlockQueue>:
{
 8004492:	b570      	push	{r4, r5, r6, lr}
 8004494:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004496:	f001 f9dd 	bl	8005854 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800449a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800449e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80044a2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	dc14      	bgt.n	80044d2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80044a8:	23ff      	movs	r3, #255	; 0xff
 80044aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80044ae:	f001 f9f1 	bl	8005894 <vPortExitCritical>
	taskENTER_CRITICAL();
 80044b2:	f001 f9cf 	bl	8005854 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80044b6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ba:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80044be:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044c0:	2d00      	cmp	r5, #0
 80044c2:	dc12      	bgt.n	80044ea <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80044c4:	23ff      	movs	r3, #255	; 0xff
 80044c6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80044ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80044ce:	f001 b9e1 	b.w	8005894 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0e7      	beq.n	80044a8 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044d8:	4630      	mov	r0, r6
 80044da:	f000 fea7 	bl	800522c <xTaskRemoveFromEventList>
 80044de:	b108      	cbz	r0, 80044e4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80044e0:	f000 ff2c 	bl	800533c <vTaskMissedYield>
			--cTxLock;
 80044e4:	3d01      	subs	r5, #1
 80044e6:	b26d      	sxtb	r5, r5
 80044e8:	e7dc      	b.n	80044a4 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0e9      	beq.n	80044c4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f0:	4630      	mov	r0, r6
 80044f2:	f000 fe9b 	bl	800522c <xTaskRemoveFromEventList>
 80044f6:	b108      	cbz	r0, 80044fc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80044f8:	f000 ff20 	bl	800533c <vTaskMissedYield>
				--cRxLock;
 80044fc:	3d01      	subs	r5, #1
 80044fe:	b26d      	sxtb	r5, r5
 8004500:	e7de      	b.n	80044c0 <prvUnlockQueue+0x2e>

08004502 <xQueueGenericReset>:
{
 8004502:	b538      	push	{r3, r4, r5, lr}
 8004504:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004506:	4604      	mov	r4, r0
 8004508:	b940      	cbnz	r0, 800451c <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	e7fe      	b.n	800451a <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800451c:	f001 f99a 	bl	8005854 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004520:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8004524:	434b      	muls	r3, r1
 8004526:	6822      	ldr	r2, [r4, #0]
 8004528:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800452a:	1a5b      	subs	r3, r3, r1
 800452c:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800452e:	6060      	str	r0, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004530:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004532:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004534:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004536:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004538:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800453a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800453e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004542:	b9a5      	cbnz	r5, 800456e <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004544:	6923      	ldr	r3, [r4, #16]
 8004546:	b173      	cbz	r3, 8004566 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004548:	f104 0010 	add.w	r0, r4, #16
 800454c:	f000 fe6e 	bl	800522c <xTaskRemoveFromEventList>
 8004550:	b148      	cbz	r0, 8004566 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004552:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800455a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004566:	f001 f995 	bl	8005894 <vPortExitCritical>
}
 800456a:	2001      	movs	r0, #1
 800456c:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800456e:	f104 0010 	add.w	r0, r4, #16
 8004572:	f7ff fef9 	bl	8004368 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004576:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800457a:	f7ff fef5 	bl	8004368 <vListInitialise>
 800457e:	e7f2      	b.n	8004566 <xQueueGenericReset+0x64>

08004580 <xQueueGenericCreateStatic>:
	{
 8004580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004582:	460d      	mov	r5, r1
 8004584:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004586:	b940      	cbnz	r0, 800459a <xQueueGenericCreateStatic+0x1a>
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	e7fe      	b.n	8004598 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800459a:	b943      	cbnz	r3, 80045ae <xQueueGenericCreateStatic+0x2e>
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	e7fe      	b.n	80045ac <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80045ae:	b14a      	cbz	r2, 80045c4 <xQueueGenericCreateStatic+0x44>
 80045b0:	b991      	cbnz	r1, 80045d8 <xQueueGenericCreateStatic+0x58>
 80045b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b6:	f383 8811 	msr	BASEPRI, r3
 80045ba:	f3bf 8f6f 	isb	sy
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	e7fe      	b.n	80045c2 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045c4:	b141      	cbz	r1, 80045d8 <xQueueGenericCreateStatic+0x58>
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	e7fe      	b.n	80045d6 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045d8:	2350      	movs	r3, #80	; 0x50
 80045da:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045dc:	9b01      	ldr	r3, [sp, #4]
 80045de:	2b50      	cmp	r3, #80	; 0x50
 80045e0:	d008      	beq.n	80045f4 <xQueueGenericCreateStatic+0x74>
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	e7fe      	b.n	80045f2 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045f4:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 80045f6:	2d00      	cmp	r5, #0
 80045f8:	bf08      	it	eq
 80045fa:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80045fc:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004600:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004604:	4620      	mov	r0, r4
 8004606:	6022      	str	r2, [r4, #0]
 8004608:	f7ff ff7b 	bl	8004502 <xQueueGenericReset>
	}
 800460c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800460e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004612:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8004616:	b003      	add	sp, #12
 8004618:	bd30      	pop	{r4, r5, pc}

0800461a <xQueueGenericSend>:
{
 800461a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800461e:	b085      	sub	sp, #20
 8004620:	4688      	mov	r8, r1
 8004622:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004624:	4604      	mov	r4, r0
{
 8004626:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004628:	b940      	cbnz	r0, 800463c <xQueueGenericSend+0x22>
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	e7fe      	b.n	800463a <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800463c:	b951      	cbnz	r1, 8004654 <xQueueGenericSend+0x3a>
 800463e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004640:	b143      	cbz	r3, 8004654 <xQueueGenericSend+0x3a>
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	e7fe      	b.n	8004652 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004654:	2f02      	cmp	r7, #2
 8004656:	d10b      	bne.n	8004670 <xQueueGenericSend+0x56>
 8004658:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800465a:	2b01      	cmp	r3, #1
 800465c:	d008      	beq.n	8004670 <xQueueGenericSend+0x56>
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	e7fe      	b.n	800466e <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004670:	f000 fe6a 	bl	8005348 <xTaskGetSchedulerState>
 8004674:	4606      	mov	r6, r0
 8004676:	b950      	cbnz	r0, 800468e <xQueueGenericSend+0x74>
 8004678:	9b01      	ldr	r3, [sp, #4]
 800467a:	b14b      	cbz	r3, 8004690 <xQueueGenericSend+0x76>
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	e7fe      	b.n	800468c <xQueueGenericSend+0x72>
 800468e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004690:	f04f 0900 	mov.w	r9, #0
 8004694:	e037      	b.n	8004706 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004696:	9d01      	ldr	r5, [sp, #4]
 8004698:	b91d      	cbnz	r5, 80046a2 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800469a:	f001 f8fb 	bl	8005894 <vPortExitCritical>
			return errQUEUE_FULL;
 800469e:	2000      	movs	r0, #0
 80046a0:	e052      	b.n	8004748 <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 80046a2:	b916      	cbnz	r6, 80046aa <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046a4:	a802      	add	r0, sp, #8
 80046a6:	f000 fe01 	bl	80052ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80046aa:	f001 f8f3 	bl	8005894 <vPortExitCritical>
		vTaskSuspendAll();
 80046ae:	f000 fbc3 	bl	8004e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046b2:	f001 f8cf 	bl	8005854 <vPortEnterCritical>
 80046b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80046ba:	2bff      	cmp	r3, #255	; 0xff
 80046bc:	bf08      	it	eq
 80046be:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80046c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80046c6:	2bff      	cmp	r3, #255	; 0xff
 80046c8:	bf08      	it	eq
 80046ca:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80046ce:	f001 f8e1 	bl	8005894 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046d2:	a901      	add	r1, sp, #4
 80046d4:	a802      	add	r0, sp, #8
 80046d6:	f000 fdf5 	bl	80052c4 <xTaskCheckForTimeOut>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d14a      	bne.n	8004774 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046de:	f001 f8b9 	bl	8005854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d131      	bne.n	800474e <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80046ea:	f001 f8d3 	bl	8005894 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046ee:	9901      	ldr	r1, [sp, #4]
 80046f0:	f104 0010 	add.w	r0, r4, #16
 80046f4:	f000 fd60 	bl	80051b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046f8:	4620      	mov	r0, r4
 80046fa:	f7ff feca 	bl	8004492 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046fe:	f000 fc39 	bl	8004f74 <xTaskResumeAll>
 8004702:	b360      	cbz	r0, 800475e <xQueueGenericSend+0x144>
 8004704:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004706:	f001 f8a5 	bl	8005854 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800470a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800470c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800470e:	429a      	cmp	r2, r3
 8004710:	d301      	bcc.n	8004716 <xQueueGenericSend+0xfc>
 8004712:	2f02      	cmp	r7, #2
 8004714:	d1bf      	bne.n	8004696 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004716:	463a      	mov	r2, r7
 8004718:	4641      	mov	r1, r8
 800471a:	4620      	mov	r0, r4
 800471c:	f7ff fe70 	bl	8004400 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004722:	b11b      	cbz	r3, 800472c <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004724:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004728:	f000 fd80 	bl	800522c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800472c:	b148      	cbz	r0, 8004742 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800472e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004742:	f001 f8a7 	bl	8005894 <vPortExitCritical>
				return pdPASS;
 8004746:	2001      	movs	r0, #1
}
 8004748:	b005      	add	sp, #20
 800474a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800474e:	f001 f8a1 	bl	8005894 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004752:	4620      	mov	r0, r4
 8004754:	f7ff fe9d 	bl	8004492 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004758:	f000 fc0c 	bl	8004f74 <xTaskResumeAll>
 800475c:	e7d2      	b.n	8004704 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800475e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	e7c7      	b.n	8004704 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8004774:	4620      	mov	r0, r4
 8004776:	f7ff fe8c 	bl	8004492 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800477a:	f000 fbfb 	bl	8004f74 <xTaskResumeAll>
 800477e:	e78e      	b.n	800469e <xQueueGenericSend+0x84>

08004780 <xQueueGenericSendFromISR>:
{
 8004780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004784:	4689      	mov	r9, r1
 8004786:	4690      	mov	r8, r2
 8004788:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800478a:	4604      	mov	r4, r0
 800478c:	b940      	cbnz	r0, 80047a0 <xQueueGenericSendFromISR+0x20>
 800478e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	e7fe      	b.n	800479e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047a0:	b951      	cbnz	r1, 80047b8 <xQueueGenericSendFromISR+0x38>
 80047a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80047a4:	b143      	cbz	r3, 80047b8 <xQueueGenericSendFromISR+0x38>
 80047a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	e7fe      	b.n	80047b6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047b8:	2f02      	cmp	r7, #2
 80047ba:	d10b      	bne.n	80047d4 <xQueueGenericSendFromISR+0x54>
 80047bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d008      	beq.n	80047d4 <xQueueGenericSendFromISR+0x54>
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	e7fe      	b.n	80047d2 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047d4:	f001 f91a 	bl	8005a0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047d8:	f3ef 8611 	mrs	r6, BASEPRI
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d301      	bcc.n	80047f8 <xQueueGenericSendFromISR+0x78>
 80047f4:	2f02      	cmp	r7, #2
 80047f6:	d122      	bne.n	800483e <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80047f8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047fc:	463a      	mov	r2, r7
 80047fe:	4649      	mov	r1, r9
 8004800:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004802:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004804:	f7ff fdfc 	bl	8004400 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004808:	1c6b      	adds	r3, r5, #1
 800480a:	d113      	bne.n	8004834 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800480c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800480e:	b90b      	cbnz	r3, 8004814 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8004810:	2001      	movs	r0, #1
 8004812:	e00b      	b.n	800482c <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004814:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004818:	f000 fd08 	bl	800522c <xTaskRemoveFromEventList>
 800481c:	2800      	cmp	r0, #0
 800481e:	d0f7      	beq.n	8004810 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8004820:	f1b8 0f00 	cmp.w	r8, #0
 8004824:	d0f4      	beq.n	8004810 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004826:	2001      	movs	r0, #1
 8004828:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800482c:	f386 8811 	msr	BASEPRI, r6
}
 8004830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004834:	3501      	adds	r5, #1
 8004836:	b26d      	sxtb	r5, r5
 8004838:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800483c:	e7e8      	b.n	8004810 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 800483e:	2000      	movs	r0, #0
 8004840:	e7f4      	b.n	800482c <xQueueGenericSendFromISR+0xac>

08004842 <xQueueReceive>:
{
 8004842:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004846:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8004848:	4604      	mov	r4, r0
{
 800484a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800484c:	b940      	cbnz	r0, 8004860 <xQueueReceive+0x1e>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	e7fe      	b.n	800485e <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004860:	b951      	cbnz	r1, 8004878 <xQueueReceive+0x36>
 8004862:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004864:	b143      	cbz	r3, 8004878 <xQueueReceive+0x36>
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	e7fe      	b.n	8004876 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004878:	f000 fd66 	bl	8005348 <xTaskGetSchedulerState>
 800487c:	4606      	mov	r6, r0
 800487e:	b950      	cbnz	r0, 8004896 <xQueueReceive+0x54>
 8004880:	9b01      	ldr	r3, [sp, #4]
 8004882:	b14b      	cbz	r3, 8004898 <xQueueReceive+0x56>
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	e7fe      	b.n	8004894 <xQueueReceive+0x52>
 8004896:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004898:	f04f 0800 	mov.w	r8, #0
 800489c:	e03d      	b.n	800491a <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800489e:	9d01      	ldr	r5, [sp, #4]
 80048a0:	b91d      	cbnz	r5, 80048aa <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 80048a2:	f000 fff7 	bl	8005894 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80048a6:	2000      	movs	r0, #0
 80048a8:	e056      	b.n	8004958 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 80048aa:	b916      	cbnz	r6, 80048b2 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048ac:	a802      	add	r0, sp, #8
 80048ae:	f000 fcfd 	bl	80052ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80048b2:	f000 ffef 	bl	8005894 <vPortExitCritical>
		vTaskSuspendAll();
 80048b6:	f000 fabf 	bl	8004e38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ba:	f000 ffcb 	bl	8005854 <vPortEnterCritical>
 80048be:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80048c2:	2bff      	cmp	r3, #255	; 0xff
 80048c4:	bf08      	it	eq
 80048c6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80048ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80048ce:	2bff      	cmp	r3, #255	; 0xff
 80048d0:	bf08      	it	eq
 80048d2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80048d6:	f000 ffdd 	bl	8005894 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048da:	a901      	add	r1, sp, #4
 80048dc:	a802      	add	r0, sp, #8
 80048de:	f000 fcf1 	bl	80052c4 <xTaskCheckForTimeOut>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d141      	bne.n	800496a <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048e6:	4620      	mov	r0, r4
 80048e8:	f7ff fd7f 	bl	80043ea <prvIsQueueEmpty>
 80048ec:	b3b8      	cbz	r0, 800495e <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048ee:	9901      	ldr	r1, [sp, #4]
 80048f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80048f4:	f000 fc60 	bl	80051b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7ff fdca 	bl	8004492 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048fe:	f000 fb39 	bl	8004f74 <xTaskResumeAll>
 8004902:	b948      	cbnz	r0, 8004918 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8004904:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800491a:	f000 ff9b 	bl	8005854 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800491e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004920:	2d00      	cmp	r5, #0
 8004922:	d0bc      	beq.n	800489e <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004924:	4639      	mov	r1, r7
 8004926:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004928:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800492a:	f7ff fd9e 	bl	800446a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800492e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004930:	6923      	ldr	r3, [r4, #16]
 8004932:	b173      	cbz	r3, 8004952 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004934:	f104 0010 	add.w	r0, r4, #16
 8004938:	f000 fc78 	bl	800522c <xTaskRemoveFromEventList>
 800493c:	b148      	cbz	r0, 8004952 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800493e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004952:	f000 ff9f 	bl	8005894 <vPortExitCritical>
				return pdPASS;
 8004956:	2001      	movs	r0, #1
}
 8004958:	b004      	add	sp, #16
 800495a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800495e:	4620      	mov	r0, r4
 8004960:	f7ff fd97 	bl	8004492 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004964:	f000 fb06 	bl	8004f74 <xTaskResumeAll>
 8004968:	e7d6      	b.n	8004918 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800496a:	4620      	mov	r0, r4
 800496c:	f7ff fd91 	bl	8004492 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004970:	f000 fb00 	bl	8004f74 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004974:	4620      	mov	r0, r4
 8004976:	f7ff fd38 	bl	80043ea <prvIsQueueEmpty>
 800497a:	2800      	cmp	r0, #0
 800497c:	d0cc      	beq.n	8004918 <xQueueReceive+0xd6>
 800497e:	e792      	b.n	80048a6 <xQueueReceive+0x64>

08004980 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004980:	2300      	movs	r3, #0
	{
 8004982:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004984:	4a06      	ldr	r2, [pc, #24]	; (80049a0 <vQueueAddToRegistry+0x20>)
 8004986:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800498a:	b92c      	cbnz	r4, 8004998 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800498c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004994:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004996:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004998:	3301      	adds	r3, #1
 800499a:	2b08      	cmp	r3, #8
 800499c:	d1f3      	bne.n	8004986 <vQueueAddToRegistry+0x6>
 800499e:	e7fa      	b.n	8004996 <vQueueAddToRegistry+0x16>
 80049a0:	20000cb8 	.word	0x20000cb8

080049a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4604      	mov	r4, r0
 80049a8:	460d      	mov	r5, r1
 80049aa:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80049ac:	f000 ff52 	bl	8005854 <vPortEnterCritical>
 80049b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80049b4:	2bff      	cmp	r3, #255	; 0xff
 80049b6:	bf04      	itt	eq
 80049b8:	2300      	moveq	r3, #0
 80049ba:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80049be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80049c2:	2bff      	cmp	r3, #255	; 0xff
 80049c4:	bf04      	itt	eq
 80049c6:	2300      	moveq	r3, #0
 80049c8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80049cc:	f000 ff62 	bl	8005894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049d2:	b92b      	cbnz	r3, 80049e0 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049d4:	4632      	mov	r2, r6
 80049d6:	4629      	mov	r1, r5
 80049d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80049dc:	f000 fc06 	bl	80051ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049e0:	4620      	mov	r0, r4
	}
 80049e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80049e6:	f7ff bd54 	b.w	8004492 <prvUnlockQueue>
	...

080049ec <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049f2:	f000 ff2f 	bl	8005854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049f6:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 80049f8:	4e30      	ldr	r6, [pc, #192]	; (8004abc <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4f30      	ldr	r7, [pc, #192]	; (8004ac0 <prvAddNewTaskToReadyList+0xd4>)
 80049fe:	3201      	adds	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004a02:	6835      	ldr	r5, [r6, #0]
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	d14b      	bne.n	8004aa0 <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a08:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d11f      	bne.n	8004a50 <prvAddNewTaskToReadyList+0x64>
 8004a10:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a12:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a14:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a16:	f7ff fca7 	bl	8004368 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a1a:	2d38      	cmp	r5, #56	; 0x38
 8004a1c:	f108 0814 	add.w	r8, r8, #20
 8004a20:	d1f7      	bne.n	8004a12 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a22:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004ac4 <prvAddNewTaskToReadyList+0xd8>
	vListInitialise( &xDelayedTaskList2 );
 8004a26:	4d28      	ldr	r5, [pc, #160]	; (8004ac8 <prvAddNewTaskToReadyList+0xdc>)
	vListInitialise( &xDelayedTaskList1 );
 8004a28:	4640      	mov	r0, r8
 8004a2a:	f7ff fc9d 	bl	8004368 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f7ff fc9a 	bl	8004368 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a34:	4825      	ldr	r0, [pc, #148]	; (8004acc <prvAddNewTaskToReadyList+0xe0>)
 8004a36:	f7ff fc97 	bl	8004368 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a3a:	4825      	ldr	r0, [pc, #148]	; (8004ad0 <prvAddNewTaskToReadyList+0xe4>)
 8004a3c:	f7ff fc94 	bl	8004368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a40:	4824      	ldr	r0, [pc, #144]	; (8004ad4 <prvAddNewTaskToReadyList+0xe8>)
 8004a42:	f7ff fc91 	bl	8004368 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a46:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <prvAddNewTaskToReadyList+0xec>)
 8004a48:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a4c:	4b23      	ldr	r3, [pc, #140]	; (8004adc <prvAddNewTaskToReadyList+0xf0>)
 8004a4e:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004a50:	2014      	movs	r0, #20
		uxTaskNumber++;
 8004a52:	4a23      	ldr	r2, [pc, #140]	; (8004ae0 <prvAddNewTaskToReadyList+0xf4>)
 8004a54:	6813      	ldr	r3, [r2, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004a5a:	4a22      	ldr	r2, [pc, #136]	; (8004ae4 <prvAddNewTaskToReadyList+0xf8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a5c:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004a5e:	6811      	ldr	r1, [r2, #0]
 8004a60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a62:	428b      	cmp	r3, r1
 8004a64:	fb00 7003 	mla	r0, r0, r3, r7
 8004a68:	f104 0104 	add.w	r1, r4, #4
 8004a6c:	bf88      	it	hi
 8004a6e:	6013      	strhi	r3, [r2, #0]
 8004a70:	f7ff fc88 	bl	8004384 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004a74:	f000 ff0e 	bl	8005894 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004a78:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <prvAddNewTaskToReadyList+0xfc>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	b173      	cbz	r3, 8004a9c <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a7e:	6833      	ldr	r3, [r6, #0]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d209      	bcs.n	8004a9c <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8004a88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a90:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	f3bf 8f6f 	isb	sy
}
 8004a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8004aa0:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <prvAddNewTaskToReadyList+0xfc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1d3      	bne.n	8004a50 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004aa8:	6833      	ldr	r3, [r6, #0]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004aae:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004ab0:	bf98      	it	ls
 8004ab2:	6034      	strls	r4, [r6, #0]
 8004ab4:	e7cc      	b.n	8004a50 <prvAddNewTaskToReadyList+0x64>
 8004ab6:	bf00      	nop
 8004ab8:	20001164 	.word	0x20001164
 8004abc:	20000cf8 	.word	0x20000cf8
 8004ac0:	20000d04 	.word	0x20000d04
 8004ac4:	2000117c 	.word	0x2000117c
 8004ac8:	20001190 	.word	0x20001190
 8004acc:	200011ac 	.word	0x200011ac
 8004ad0:	200011d8 	.word	0x200011d8
 8004ad4:	200011c4 	.word	0x200011c4
 8004ad8:	20000cfc 	.word	0x20000cfc
 8004adc:	20000d00 	.word	0x20000d00
 8004ae0:	20001174 	.word	0x20001174
 8004ae4:	20001178 	.word	0x20001178
 8004ae8:	200011c0 	.word	0x200011c0

08004aec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	4606      	mov	r6, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004af0:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004af2:	4d15      	ldr	r5, [pc, #84]	; (8004b48 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8004af4:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004af6:	6828      	ldr	r0, [r5, #0]
{
 8004af8:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004afa:	3004      	adds	r0, #4
 8004afc:	f7ff fc65 	bl	80043ca <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b00:	1c73      	adds	r3, r6, #1
 8004b02:	d107      	bne.n	8004b14 <prvAddCurrentTaskToDelayedList+0x28>
 8004b04:	b137      	cbz	r7, 8004b14 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b06:	6829      	ldr	r1, [r5, #0]
 8004b08:	4810      	ldr	r0, [pc, #64]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x60>)
 8004b0a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b10:	f7ff bc38 	b.w	8004384 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	19a4      	adds	r4, r4, r6
 8004b18:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b1a:	d307      	bcc.n	8004b2c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x64>)
 8004b1e:	6818      	ldr	r0, [r3, #0]
 8004b20:	6829      	ldr	r1, [r5, #0]
}
 8004b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b26:	3104      	adds	r1, #4
 8004b28:	f7ff bc38 	b.w	800439c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <prvAddCurrentTaskToDelayedList+0x68>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	6829      	ldr	r1, [r5, #0]
 8004b32:	3104      	adds	r1, #4
 8004b34:	f7ff fc32 	bl	800439c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004b3e:	bf88      	it	hi
 8004b40:	601c      	strhi	r4, [r3, #0]
}
 8004b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b44:	200011ec 	.word	0x200011ec
 8004b48:	20000cf8 	.word	0x20000cf8
 8004b4c:	200011c4 	.word	0x200011c4
 8004b50:	20000d00 	.word	0x20000d00
 8004b54:	20000cfc 	.word	0x20000cfc
 8004b58:	200011a4 	.word	0x200011a4

08004b5c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b5c:	4a06      	ldr	r2, [pc, #24]	; (8004b78 <prvResetNextTaskUnblockTime+0x1c>)
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	6819      	ldr	r1, [r3, #0]
 8004b62:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <prvResetNextTaskUnblockTime+0x20>)
 8004b64:	b919      	cbnz	r1, 8004b6e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b66:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b6a:	601a      	str	r2, [r3, #0]
}
 8004b6c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b72:	68d2      	ldr	r2, [r2, #12]
 8004b74:	6852      	ldr	r2, [r2, #4]
 8004b76:	e7f8      	b.n	8004b6a <prvResetNextTaskUnblockTime+0xe>
 8004b78:	20000cfc 	.word	0x20000cfc
 8004b7c:	200011a4 	.word	0x200011a4

08004b80 <prvDeleteTCB>:
	{
 8004b80:	b510      	push	{r4, lr}
 8004b82:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b84:	3054      	adds	r0, #84	; 0x54
 8004b86:	f003 f8f1 	bl	8007d6c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b8a:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8004b8e:	b93b      	cbnz	r3, 8004ba0 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 8004b90:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b92:	f001 f81d 	bl	8005bd0 <vPortFree>
				vPortFree( pxTCB );
 8004b96:	4620      	mov	r0, r4
	}
 8004b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004b9c:	f001 b818 	b.w	8005bd0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d0f8      	beq.n	8004b96 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d008      	beq.n	8004bba <prvDeleteTCB+0x3a>
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	e7fe      	b.n	8004bb8 <prvDeleteTCB+0x38>
	}
 8004bba:	bd10      	pop	{r4, pc}

08004bbc <prvIdleTask>:
{
 8004bbc:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bbe:	4c13      	ldr	r4, [pc, #76]	; (8004c0c <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004bc0:	4f13      	ldr	r7, [pc, #76]	; (8004c10 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8004bc2:	4d14      	ldr	r5, [pc, #80]	; (8004c14 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	b973      	cbnz	r3, 8004be6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bc8:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <prvIdleTask+0x5c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d9f8      	bls.n	8004bc2 <prvIdleTask+0x6>
				taskYIELD();
 8004bd0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	e7ed      	b.n	8004bc2 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8004be6:	f000 fe35 	bl	8005854 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bee:	1d30      	adds	r0, r6, #4
 8004bf0:	f7ff fbeb 	bl	80043ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004c00:	f000 fe48 	bl	8005894 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004c04:	4630      	mov	r0, r6
 8004c06:	f7ff ffbb 	bl	8004b80 <prvDeleteTCB>
 8004c0a:	e7db      	b.n	8004bc4 <prvIdleTask+0x8>
 8004c0c:	20001168 	.word	0x20001168
 8004c10:	200011d8 	.word	0x200011d8
 8004c14:	20001164 	.word	0x20001164
 8004c18:	20000d04 	.word	0x20000d04

08004c1c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c20:	460d      	mov	r5, r1
 8004c22:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c26:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8004c2a:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004c2c:	4606      	mov	r6, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c2e:	21a5      	movs	r1, #165	; 0xa5
 8004c30:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004c32:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c34:	f002 fb8f 	bl	8007356 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004c38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c3a:	f1a9 0904 	sub.w	r9, r9, #4
 8004c3e:	4491      	add	r9, r2
 8004c40:	1e6b      	subs	r3, r5, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004c42:	f029 0907 	bic.w	r9, r9, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c46:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8004c4a:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c4c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004c50:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004c54:	b109      	cbz	r1, 8004c5a <prvInitialiseNewTask.constprop.0+0x3e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c56:	42ab      	cmp	r3, r5
 8004c58:	d1f8      	bne.n	8004c4c <prvInitialiseNewTask.constprop.0+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c5a:	9d08      	ldr	r5, [sp, #32]
 8004c5c:	f04f 0a00 	mov.w	sl, #0
 8004c60:	2d37      	cmp	r5, #55	; 0x37
 8004c62:	bf28      	it	cs
 8004c64:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c66:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8004c68:	e9c4 5a13 	strd	r5, sl, [r4, #76]	; 0x4c
	pxNewTCB->uxPriority = uxPriority;
 8004c6c:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c6e:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c72:	f7ff fb84 	bl	800437e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c76:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c7a:	f104 0018 	add.w	r0, r4, #24
 8004c7e:	f7ff fb7e 	bl	800437e <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c82:	2260      	movs	r2, #96	; 0x60
 8004c84:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 8004c86:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c8a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c8e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c90:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c94:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8004c98:	f002 fb5d 	bl	8007356 <memset>
 8004c9c:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <prvInitialiseNewTask.constprop.0+0xa8>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c9e:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ca0:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ca2:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <prvInitialiseNewTask.constprop.0+0xac>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ca4:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004ca6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004ca8:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <prvInitialiseNewTask.constprop.0+0xb0>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004caa:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004cac:	6623      	str	r3, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cae:	f000 fdad 	bl	800580c <pxPortInitialiseStack>
 8004cb2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8004cb4:	f1b8 0f00 	cmp.w	r8, #0
 8004cb8:	d001      	beq.n	8004cbe <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cba:	f8c8 4000 	str.w	r4, [r8]
}
 8004cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08009d80 	.word	0x08009d80
 8004cc8:	08009da0 	.word	0x08009da0
 8004ccc:	08009d60 	.word	0x08009d60

08004cd0 <xTaskCreateStatic>:
	{
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004cd8:	b945      	cbnz	r5, 8004cec <xTaskCreateStatic+0x1c>
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	e7fe      	b.n	8004cea <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004cec:	b944      	cbnz	r4, 8004d00 <xTaskCreateStatic+0x30>
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	e7fe      	b.n	8004cfe <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d00:	26bc      	movs	r6, #188	; 0xbc
 8004d02:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d04:	9e05      	ldr	r6, [sp, #20]
 8004d06:	2ebc      	cmp	r6, #188	; 0xbc
 8004d08:	d008      	beq.n	8004d1c <xTaskCreateStatic+0x4c>
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	e7fe      	b.n	8004d1a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d1c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d1e:	2502      	movs	r5, #2
 8004d20:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d24:	ad04      	add	r5, sp, #16
 8004d26:	9501      	str	r5, [sp, #4]
 8004d28:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004d2a:	9402      	str	r4, [sp, #8]
 8004d2c:	9500      	str	r5, [sp, #0]
 8004d2e:	f7ff ff75 	bl	8004c1c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7ff fe5a 	bl	80049ec <prvAddNewTaskToReadyList>
	}
 8004d38:	9804      	ldr	r0, [sp, #16]
 8004d3a:	b006      	add	sp, #24
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}

08004d3e <xTaskCreate>:
	{
 8004d3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d42:	4607      	mov	r7, r0
 8004d44:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d46:	0090      	lsls	r0, r2, #2
	{
 8004d48:	4688      	mov	r8, r1
 8004d4a:	4616      	mov	r6, r2
 8004d4c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4e:	f000 feaf 	bl	8005ab0 <pvPortMalloc>
			if( pxStack != NULL )
 8004d52:	4605      	mov	r5, r0
 8004d54:	b1e8      	cbz	r0, 8004d92 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d56:	20bc      	movs	r0, #188	; 0xbc
 8004d58:	f000 feaa 	bl	8005ab0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	b1a8      	cbz	r0, 8004d8c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d60:	2300      	movs	r3, #0
 8004d62:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8004d68:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d6e:	4632      	mov	r2, r6
 8004d70:	4641      	mov	r1, r8
 8004d72:	9002      	str	r0, [sp, #8]
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	4638      	mov	r0, r7
 8004d78:	464b      	mov	r3, r9
 8004d7a:	f7ff ff4f 	bl	8004c1c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7ff fe34 	bl	80049ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d84:	2001      	movs	r0, #1
	}
 8004d86:	b005      	add	sp, #20
 8004d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f000 ff1f 	bl	8005bd0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d92:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004d96:	e7f6      	b.n	8004d86 <xTaskCreate+0x48>

08004d98 <vTaskStartScheduler>:
{
 8004d98:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d9a:	2400      	movs	r4, #0
{
 8004d9c:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d9e:	aa07      	add	r2, sp, #28
 8004da0:	a906      	add	r1, sp, #24
 8004da2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004da4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004da8:	f7ff fac6 	bl	8004338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004dac:	9b05      	ldr	r3, [sp, #20]
 8004dae:	9a07      	ldr	r2, [sp, #28]
 8004db0:	9302      	str	r3, [sp, #8]
 8004db2:	9b06      	ldr	r3, [sp, #24]
 8004db4:	4919      	ldr	r1, [pc, #100]	; (8004e1c <vTaskStartScheduler+0x84>)
 8004db6:	e9cd 4300 	strd	r4, r3, [sp]
 8004dba:	4819      	ldr	r0, [pc, #100]	; (8004e20 <vTaskStartScheduler+0x88>)
 8004dbc:	4623      	mov	r3, r4
 8004dbe:	f7ff ff87 	bl	8004cd0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004dc2:	b340      	cbz	r0, 8004e16 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8004dc4:	f000 fb64 	bl	8005490 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004dc8:	2801      	cmp	r0, #1
 8004dca:	d119      	bne.n	8004e00 <vTaskStartScheduler+0x68>
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ddc:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <vTaskStartScheduler+0x8c>)
 8004dde:	4a12      	ldr	r2, [pc, #72]	; (8004e28 <vTaskStartScheduler+0x90>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3354      	adds	r3, #84	; 0x54
 8004de4:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <vTaskStartScheduler+0x94>)
 8004dec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <vTaskStartScheduler+0x98>)
 8004df0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <vTaskStartScheduler+0x9c>)
 8004df4:	601c      	str	r4, [r3, #0]
}
 8004df6:	b008      	add	sp, #32
 8004df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004dfc:	f000 bdaa 	b.w	8005954 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e00:	3001      	adds	r0, #1
 8004e02:	d108      	bne.n	8004e16 <vTaskStartScheduler+0x7e>
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	e7fe      	b.n	8004e14 <vTaskStartScheduler+0x7c>
}
 8004e16:	b008      	add	sp, #32
 8004e18:	bd10      	pop	{r4, pc}
 8004e1a:	bf00      	nop
 8004e1c:	08009ce5 	.word	0x08009ce5
 8004e20:	08004bbd 	.word	0x08004bbd
 8004e24:	20000cf8 	.word	0x20000cf8
 8004e28:	20000030 	.word	0x20000030
 8004e2c:	200011a4 	.word	0x200011a4
 8004e30:	200011c0 	.word	0x200011c0
 8004e34:	200011ec 	.word	0x200011ec

08004e38 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004e38:	4a02      	ldr	r2, [pc, #8]	; (8004e44 <vTaskSuspendAll+0xc>)
 8004e3a:	6813      	ldr	r3, [r2, #0]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	6013      	str	r3, [r2, #0]
}
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20001170 	.word	0x20001170

08004e48 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004e48:	4b01      	ldr	r3, [pc, #4]	; (8004e50 <xTaskGetTickCount+0x8>)
 8004e4a:	6818      	ldr	r0, [r3, #0]
}
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	200011ec 	.word	0x200011ec

08004e54 <xTaskIncrementTick>:
{
 8004e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e58:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <xTaskIncrementTick+0xf4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d16d      	bne.n	8004f3c <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e60:	4b3a      	ldr	r3, [pc, #232]	; (8004f4c <xTaskIncrementTick+0xf8>)
 8004e62:	681d      	ldr	r5, [r3, #0]
 8004e64:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004e66:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e68:	b9bd      	cbnz	r5, 8004e9a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004e6a:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <xTaskIncrementTick+0xfc>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	b142      	cbz	r2, 8004e84 <xTaskIncrementTick+0x30>
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	e7fe      	b.n	8004e82 <xTaskIncrementTick+0x2e>
 8004e84:	4a33      	ldr	r2, [pc, #204]	; (8004f54 <xTaskIncrementTick+0x100>)
 8004e86:	6819      	ldr	r1, [r3, #0]
 8004e88:	6810      	ldr	r0, [r2, #0]
 8004e8a:	6018      	str	r0, [r3, #0]
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	4a32      	ldr	r2, [pc, #200]	; (8004f58 <xTaskIncrementTick+0x104>)
 8004e90:	6813      	ldr	r3, [r2, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	f7ff fe61 	bl	8004b5c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e9a:	4e30      	ldr	r6, [pc, #192]	; (8004f5c <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 8004e9c:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e9e:	6833      	ldr	r3, [r6, #0]
 8004ea0:	4f2f      	ldr	r7, [pc, #188]	; (8004f60 <xTaskIncrementTick+0x10c>)
 8004ea2:	42ab      	cmp	r3, r5
 8004ea4:	d910      	bls.n	8004ec8 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ea6:	2214      	movs	r2, #20
 8004ea8:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <xTaskIncrementTick+0x110>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	4353      	muls	r3, r2
 8004eb0:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	bf28      	it	cs
 8004eb6:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <xTaskIncrementTick+0x114>)
 8004eba:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8004ebc:	2b00      	cmp	r3, #0
}
 8004ebe:	bf0c      	ite	eq
 8004ec0:	4620      	moveq	r0, r4
 8004ec2:	2001      	movne	r0, #1
 8004ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004f50 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8004ecc:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8004f6c <xTaskIncrementTick+0x118>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ed0:	f8d9 3000 	ldr.w	r3, [r9]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	b91b      	cbnz	r3, 8004ee0 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8004edc:	6033      	str	r3, [r6, #0]
					break;
 8004ede:	e7e2      	b.n	8004ea6 <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ee0:	f8d9 3000 	ldr.w	r3, [r9]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eea:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8004eee:	4295      	cmp	r5, r2
 8004ef0:	d201      	bcs.n	8004ef6 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8004ef2:	6032      	str	r2, [r6, #0]
						break;
 8004ef4:	e7d7      	b.n	8004ea6 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ef6:	f10b 0804 	add.w	r8, fp, #4
 8004efa:	4640      	mov	r0, r8
 8004efc:	f7ff fa65 	bl	80043ca <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f00:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8004f04:	b11a      	cbz	r2, 8004f0e <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f06:	f10b 0018 	add.w	r0, fp, #24
 8004f0a:	f7ff fa5e 	bl	80043ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f0e:	2314      	movs	r3, #20
 8004f10:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8004f14:	f8da 2000 	ldr.w	r2, [sl]
 8004f18:	4641      	mov	r1, r8
 8004f1a:	4290      	cmp	r0, r2
 8004f1c:	bf88      	it	hi
 8004f1e:	f8ca 0000 	strhi.w	r0, [sl]
 8004f22:	fb03 7000 	mla	r0, r3, r0, r7
 8004f26:	f7ff fa2d 	bl	8004384 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <xTaskIncrementTick+0x110>)
 8004f2c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8004f30:	6819      	ldr	r1, [r3, #0]
 8004f32:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004f34:	429a      	cmp	r2, r3
 8004f36:	bf28      	it	cs
 8004f38:	2401      	movcs	r4, #1
 8004f3a:	e7c9      	b.n	8004ed0 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8004f3c:	4a0c      	ldr	r2, [pc, #48]	; (8004f70 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8004f3e:	2400      	movs	r4, #0
		++uxPendedTicks;
 8004f40:	6813      	ldr	r3, [r2, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	e7b7      	b.n	8004eb8 <xTaskIncrementTick+0x64>
 8004f48:	20001170 	.word	0x20001170
 8004f4c:	200011ec 	.word	0x200011ec
 8004f50:	20000cfc 	.word	0x20000cfc
 8004f54:	20000d00 	.word	0x20000d00
 8004f58:	200011a8 	.word	0x200011a8
 8004f5c:	200011a4 	.word	0x200011a4
 8004f60:	20000d04 	.word	0x20000d04
 8004f64:	20000cf8 	.word	0x20000cf8
 8004f68:	200011f0 	.word	0x200011f0
 8004f6c:	20001178 	.word	0x20001178
 8004f70:	2000116c 	.word	0x2000116c

08004f74 <xTaskResumeAll>:
{
 8004f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004f78:	4c30      	ldr	r4, [pc, #192]	; (800503c <xTaskResumeAll+0xc8>)
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	b943      	cbnz	r3, 8004f90 <xTaskResumeAll+0x1c>
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	e7fe      	b.n	8004f8e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004f90:	f000 fc60 	bl	8005854 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f9a:	6824      	ldr	r4, [r4, #0]
 8004f9c:	b12c      	cbz	r4, 8004faa <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004f9e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004fa0:	f000 fc78 	bl	8005894 <vPortExitCritical>
}
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004faa:	4b25      	ldr	r3, [pc, #148]	; (8005040 <xTaskResumeAll+0xcc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0f5      	beq.n	8004f9e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fb2:	4d24      	ldr	r5, [pc, #144]	; (8005044 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8004fb4:	4e24      	ldr	r6, [pc, #144]	; (8005048 <xTaskResumeAll+0xd4>)
 8004fb6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800504c <xTaskResumeAll+0xd8>
 8004fba:	e01d      	b.n	8004ff8 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004fbc:	68eb      	ldr	r3, [r5, #12]
 8004fbe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fc0:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fc2:	f104 0018 	add.w	r0, r4, #24
 8004fc6:	f7ff fa00 	bl	80043ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fca:	4638      	mov	r0, r7
 8004fcc:	f7ff f9fd 	bl	80043ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fd0:	2014      	movs	r0, #20
 8004fd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fd4:	6832      	ldr	r2, [r6, #0]
 8004fd6:	fb00 8003 	mla	r0, r0, r3, r8
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	4639      	mov	r1, r7
 8004fde:	bf88      	it	hi
 8004fe0:	6033      	strhi	r3, [r6, #0]
 8004fe2:	f7ff f9cf 	bl	8004384 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <xTaskResumeAll+0xdc>)
 8004fe8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4b17      	ldr	r3, [pc, #92]	; (8005054 <xTaskResumeAll+0xe0>)
 8004ff6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1de      	bne.n	8004fbc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8004ffe:	b10c      	cbz	r4, 8005004 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8005000:	f7ff fdac 	bl	8004b5c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005004:	4d14      	ldr	r5, [pc, #80]	; (8005058 <xTaskResumeAll+0xe4>)
 8005006:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005008:	b144      	cbz	r4, 800501c <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800500a:	2701      	movs	r7, #1
 800500c:	4e11      	ldr	r6, [pc, #68]	; (8005054 <xTaskResumeAll+0xe0>)
							if( xTaskIncrementTick() != pdFALSE )
 800500e:	f7ff ff21 	bl	8004e54 <xTaskIncrementTick>
 8005012:	b100      	cbz	r0, 8005016 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8005014:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005016:	3c01      	subs	r4, #1
 8005018:	d1f9      	bne.n	800500e <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 800501a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <xTaskResumeAll+0xe0>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0bc      	beq.n	8004f9e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8005024:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005038:	2401      	movs	r4, #1
 800503a:	e7b1      	b.n	8004fa0 <xTaskResumeAll+0x2c>
 800503c:	20001170 	.word	0x20001170
 8005040:	20001164 	.word	0x20001164
 8005044:	200011ac 	.word	0x200011ac
 8005048:	20001178 	.word	0x20001178
 800504c:	20000d04 	.word	0x20000d04
 8005050:	20000cf8 	.word	0x20000cf8
 8005054:	200011f0 	.word	0x200011f0
 8005058:	2000116c 	.word	0x2000116c

0800505c <vTaskDelayUntil>:
	{
 800505c:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 800505e:	b940      	cbnz	r0, 8005072 <vTaskDelayUntil+0x16>
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	e7fe      	b.n	8005070 <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005072:	b941      	cbnz	r1, 8005086 <vTaskDelayUntil+0x2a>
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	e7fe      	b.n	8005084 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <vTaskDelayUntil+0x88>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	b143      	cbz	r3, 800509e <vTaskDelayUntil+0x42>
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	e7fe      	b.n	800509c <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 800509e:	f7ff fecb 	bl	8004e38 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 80050a2:	4b11      	ldr	r3, [pc, #68]	; (80050e8 <vTaskDelayUntil+0x8c>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80050a4:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 80050a6:	681a      	ldr	r2, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80050a8:	1863      	adds	r3, r4, r1
 80050aa:	bf2c      	ite	cs
 80050ac:	2101      	movcs	r1, #1
 80050ae:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 80050b0:	4294      	cmp	r4, r2
			*pxPreviousWakeTime = xTimeToWake;
 80050b2:	6003      	str	r3, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 80050b4:	d90e      	bls.n	80050d4 <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80050b6:	b971      	cbnz	r1, 80050d6 <vTaskDelayUntil+0x7a>
		xAlreadyYielded = xTaskResumeAll();
 80050b8:	f7ff ff5c 	bl	8004f74 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80050bc:	b948      	cbnz	r0, 80050d2 <vTaskDelayUntil+0x76>
			portYIELD_WITHIN_API();
 80050be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80050c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
	}
 80050d2:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80050d4:	b909      	cbnz	r1, 80050da <vTaskDelayUntil+0x7e>
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d2ee      	bcs.n	80050b8 <vTaskDelayUntil+0x5c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80050da:	2100      	movs	r1, #0
 80050dc:	1a98      	subs	r0, r3, r2
 80050de:	f7ff fd05 	bl	8004aec <prvAddCurrentTaskToDelayedList>
 80050e2:	e7e9      	b.n	80050b8 <vTaskDelayUntil+0x5c>
 80050e4:	20001170 	.word	0x20001170
 80050e8:	200011ec 	.word	0x200011ec

080050ec <vTaskDelay>:
	{
 80050ec:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050ee:	b950      	cbnz	r0, 8005106 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80050f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80050f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	f3bf 8f6f 	isb	sy
	}
 8005104:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <vTaskDelay+0x44>)
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	b141      	cbz	r1, 800511e <vTaskDelay+0x32>
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	e7fe      	b.n	800511c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800511e:	f7ff fe8b 	bl	8004e38 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005122:	f7ff fce3 	bl	8004aec <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005126:	f7ff ff25 	bl	8004f74 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800512a:	2800      	cmp	r0, #0
 800512c:	d0e0      	beq.n	80050f0 <vTaskDelay+0x4>
 800512e:	e7e9      	b.n	8005104 <vTaskDelay+0x18>
 8005130:	20001170 	.word	0x20001170

08005134 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005134:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <vTaskSwitchContext+0x6c>)
{
 8005136:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <vTaskSwitchContext+0x70>)
 800513c:	b112      	cbz	r2, 8005144 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
}
 8005142:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005144:	2614      	movs	r6, #20
 8005146:	4d18      	ldr	r5, [pc, #96]	; (80051a8 <vTaskSwitchContext+0x74>)
		xYieldPending = pdFALSE;
 8005148:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800514a:	682a      	ldr	r2, [r5, #0]
 800514c:	4917      	ldr	r1, [pc, #92]	; (80051ac <vTaskSwitchContext+0x78>)
 800514e:	fb06 f302 	mul.w	r3, r6, r2
 8005152:	58cc      	ldr	r4, [r1, r3]
 8005154:	18c8      	adds	r0, r1, r3
 8005156:	b1b4      	cbz	r4, 8005186 <vTaskSwitchContext+0x52>
 8005158:	6844      	ldr	r4, [r0, #4]
 800515a:	3308      	adds	r3, #8
 800515c:	6864      	ldr	r4, [r4, #4]
 800515e:	440b      	add	r3, r1
 8005160:	429c      	cmp	r4, r3
 8005162:	bf08      	it	eq
 8005164:	6863      	ldreq	r3, [r4, #4]
 8005166:	6044      	str	r4, [r0, #4]
 8005168:	bf08      	it	eq
 800516a:	6043      	streq	r3, [r0, #4]
 800516c:	2314      	movs	r3, #20
 800516e:	fb03 1102 	mla	r1, r3, r2, r1
 8005172:	684b      	ldr	r3, [r1, #4]
 8005174:	68d9      	ldr	r1, [r3, #12]
 8005176:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <vTaskSwitchContext+0x7c>)
 8005178:	6019      	str	r1, [r3, #0]
 800517a:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a0d      	ldr	r2, [pc, #52]	; (80051b4 <vTaskSwitchContext+0x80>)
 8005180:	3354      	adds	r3, #84	; 0x54
 8005182:	6013      	str	r3, [r2, #0]
}
 8005184:	e7dd      	b.n	8005142 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005186:	b942      	cbnz	r2, 800519a <vTaskSwitchContext+0x66>
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	e7fe      	b.n	8005198 <vTaskSwitchContext+0x64>
 800519a:	3a01      	subs	r2, #1
 800519c:	e7d7      	b.n	800514e <vTaskSwitchContext+0x1a>
 800519e:	bf00      	nop
 80051a0:	20001170 	.word	0x20001170
 80051a4:	200011f0 	.word	0x200011f0
 80051a8:	20001178 	.word	0x20001178
 80051ac:	20000d04 	.word	0x20000d04
 80051b0:	20000cf8 	.word	0x20000cf8
 80051b4:	20000030 	.word	0x20000030

080051b8 <vTaskPlaceOnEventList>:
{
 80051b8:	b510      	push	{r4, lr}
 80051ba:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80051bc:	b940      	cbnz	r0, 80051d0 <vTaskPlaceOnEventList+0x18>
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	e7fe      	b.n	80051ce <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051d0:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <vTaskPlaceOnEventList+0x30>)
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	3118      	adds	r1, #24
 80051d6:	f7ff f8e1 	bl	800439c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051da:	4620      	mov	r0, r4
}
 80051dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051e0:	2101      	movs	r1, #1
 80051e2:	f7ff bc83 	b.w	8004aec <prvAddCurrentTaskToDelayedList>
 80051e6:	bf00      	nop
 80051e8:	20000cf8 	.word	0x20000cf8

080051ec <vTaskPlaceOnEventListRestricted>:
	{
 80051ec:	b538      	push	{r3, r4, r5, lr}
 80051ee:	460d      	mov	r5, r1
 80051f0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80051f2:	b940      	cbnz	r0, 8005206 <vTaskPlaceOnEventListRestricted+0x1a>
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	e7fe      	b.n	8005204 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005206:	4b08      	ldr	r3, [pc, #32]	; (8005228 <vTaskPlaceOnEventListRestricted+0x3c>)
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	3118      	adds	r1, #24
 800520c:	f7ff f8ba 	bl	8004384 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8005210:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005212:	4621      	mov	r1, r4
 8005214:	bf08      	it	eq
 8005216:	4628      	moveq	r0, r5
	}
 8005218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800521c:	bf18      	it	ne
 800521e:	f04f 30ff 	movne.w	r0, #4294967295
 8005222:	f7ff bc63 	b.w	8004aec <prvAddCurrentTaskToDelayedList>
 8005226:	bf00      	nop
 8005228:	20000cf8 	.word	0x20000cf8

0800522c <xTaskRemoveFromEventList>:
{
 800522c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800522e:	68c3      	ldr	r3, [r0, #12]
 8005230:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005232:	b944      	cbnz	r4, 8005246 <xTaskRemoveFromEventList+0x1a>
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	e7fe      	b.n	8005244 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005246:	f104 0518 	add.w	r5, r4, #24
 800524a:	4628      	mov	r0, r5
 800524c:	f7ff f8bd 	bl	80043ca <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <xTaskRemoveFromEventList+0x68>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	b9db      	cbnz	r3, 800528e <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005256:	1d25      	adds	r5, r4, #4
 8005258:	4628      	mov	r0, r5
 800525a:	f7ff f8b6 	bl	80043ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800525e:	4a0e      	ldr	r2, [pc, #56]	; (8005298 <xTaskRemoveFromEventList+0x6c>)
 8005260:	2014      	movs	r0, #20
 8005262:	6811      	ldr	r1, [r2, #0]
 8005264:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005266:	428b      	cmp	r3, r1
 8005268:	4629      	mov	r1, r5
 800526a:	bf88      	it	hi
 800526c:	6013      	strhi	r3, [r2, #0]
 800526e:	4a0b      	ldr	r2, [pc, #44]	; (800529c <xTaskRemoveFromEventList+0x70>)
 8005270:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005274:	f7ff f886 	bl	8004384 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005278:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <xTaskRemoveFromEventList+0x74>)
 800527a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8005282:	bf85      	ittet	hi
 8005284:	2001      	movhi	r0, #1
 8005286:	4b07      	ldrhi	r3, [pc, #28]	; (80052a4 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8005288:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800528a:	6018      	strhi	r0, [r3, #0]
}
 800528c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800528e:	4629      	mov	r1, r5
 8005290:	4805      	ldr	r0, [pc, #20]	; (80052a8 <xTaskRemoveFromEventList+0x7c>)
 8005292:	e7ef      	b.n	8005274 <xTaskRemoveFromEventList+0x48>
 8005294:	20001170 	.word	0x20001170
 8005298:	20001178 	.word	0x20001178
 800529c:	20000d04 	.word	0x20000d04
 80052a0:	20000cf8 	.word	0x20000cf8
 80052a4:	200011f0 	.word	0x200011f0
 80052a8:	200011ac 	.word	0x200011ac

080052ac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052ac:	4b03      	ldr	r3, [pc, #12]	; (80052bc <vTaskInternalSetTimeOutState+0x10>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052b2:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <vTaskInternalSetTimeOutState+0x14>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6043      	str	r3, [r0, #4]
}
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	200011a8 	.word	0x200011a8
 80052c0:	200011ec 	.word	0x200011ec

080052c4 <xTaskCheckForTimeOut>:
{
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80052c8:	4605      	mov	r5, r0
 80052ca:	b940      	cbnz	r0, 80052de <xTaskCheckForTimeOut+0x1a>
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	e7fe      	b.n	80052dc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80052de:	b941      	cbnz	r1, 80052f2 <xTaskCheckForTimeOut+0x2e>
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	e7fe      	b.n	80052f0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80052f2:	f000 faaf 	bl	8005854 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <xTaskCheckForTimeOut+0x70>)
 80052f8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	d010      	beq.n	8005322 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005300:	480d      	ldr	r0, [pc, #52]	; (8005338 <xTaskCheckForTimeOut+0x74>)
 8005302:	682e      	ldr	r6, [r5, #0]
 8005304:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005306:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005308:	4286      	cmp	r6, r0
 800530a:	d001      	beq.n	8005310 <xTaskCheckForTimeOut+0x4c>
 800530c:	428a      	cmp	r2, r1
 800530e:	d90f      	bls.n	8005330 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005310:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005312:	4283      	cmp	r3, r0
 8005314:	d90a      	bls.n	800532c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8005316:	1a5b      	subs	r3, r3, r1
 8005318:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800531a:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800531c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800531e:	f7ff ffc5 	bl	80052ac <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8005322:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005324:	f000 fab6 	bl	8005894 <vPortExitCritical>
}
 8005328:	4620      	mov	r0, r4
 800532a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005330:	2401      	movs	r4, #1
 8005332:	e7f7      	b.n	8005324 <xTaskCheckForTimeOut+0x60>
 8005334:	200011ec 	.word	0x200011ec
 8005338:	200011a8 	.word	0x200011a8

0800533c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800533c:	2201      	movs	r2, #1
 800533e:	4b01      	ldr	r3, [pc, #4]	; (8005344 <vTaskMissedYield+0x8>)
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	4770      	bx	lr
 8005344:	200011f0 	.word	0x200011f0

08005348 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <xTaskGetSchedulerState+0x18>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	b133      	cbz	r3, 800535c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <xTaskGetSchedulerState+0x1c>)
 8005350:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf0c      	ite	eq
 8005356:	2002      	moveq	r0, #2
 8005358:	2000      	movne	r0, #0
 800535a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800535c:	2001      	movs	r0, #1
	}
 800535e:	4770      	bx	lr
 8005360:	200011c0 	.word	0x200011c0
 8005364:	20001170 	.word	0x20001170

08005368 <xTaskPriorityDisinherit>:
	{
 8005368:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800536a:	b908      	cbnz	r0, 8005370 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800536c:	2000      	movs	r0, #0
	}
 800536e:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005370:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <xTaskPriorityDisinherit+0x78>)
 8005372:	681c      	ldr	r4, [r3, #0]
 8005374:	4284      	cmp	r4, r0
 8005376:	d008      	beq.n	800538a <xTaskPriorityDisinherit+0x22>
 8005378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	e7fe      	b.n	8005388 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800538a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800538c:	b943      	cbnz	r3, 80053a0 <xTaskPriorityDisinherit+0x38>
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	e7fe      	b.n	800539e <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80053a2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80053a4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053a6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80053a8:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053aa:	d0df      	beq.n	800536c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1dd      	bne.n	800536c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053b0:	1d25      	adds	r5, r4, #4
 80053b2:	4628      	mov	r0, r5
 80053b4:	f7ff f809 	bl	80043ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053b8:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053c0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80053c2:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053c4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80053c6:	6811      	ldr	r1, [r2, #0]
 80053c8:	428b      	cmp	r3, r1
 80053ca:	bf88      	it	hi
 80053cc:	6013      	strhi	r3, [r2, #0]
 80053ce:	4a06      	ldr	r2, [pc, #24]	; (80053e8 <xTaskPriorityDisinherit+0x80>)
 80053d0:	4629      	mov	r1, r5
 80053d2:	fb00 2003 	mla	r0, r0, r3, r2
 80053d6:	f7fe ffd5 	bl	8004384 <vListInsertEnd>
					xReturn = pdTRUE;
 80053da:	2001      	movs	r0, #1
		return xReturn;
 80053dc:	e7c7      	b.n	800536e <xTaskPriorityDisinherit+0x6>
 80053de:	bf00      	nop
 80053e0:	20000cf8 	.word	0x20000cf8
 80053e4:	20001178 	.word	0x20001178
 80053e8:	20000d04 	.word	0x20000d04

080053ec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80053ee:	4c11      	ldr	r4, [pc, #68]	; (8005434 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80053f0:	f000 fa30 	bl	8005854 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80053f4:	6825      	ldr	r5, [r4, #0]
 80053f6:	b9bd      	cbnz	r5, 8005428 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80053f8:	4f0f      	ldr	r7, [pc, #60]	; (8005438 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80053fa:	4e10      	ldr	r6, [pc, #64]	; (800543c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80053fc:	4638      	mov	r0, r7
 80053fe:	f7fe ffb3 	bl	8004368 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005402:	4630      	mov	r0, r6
 8005404:	f7fe ffb0 	bl	8004368 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005408:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800540a:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800540c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800540e:	4b0d      	ldr	r3, [pc, #52]	; (8005444 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005410:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8005412:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005414:	4a0c      	ldr	r2, [pc, #48]	; (8005448 <prvCheckForValidListAndQueue+0x5c>)
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <prvCheckForValidListAndQueue+0x60>)
 8005418:	9500      	str	r5, [sp, #0]
 800541a:	f7ff f8b1 	bl	8004580 <xQueueGenericCreateStatic>
 800541e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005420:	b110      	cbz	r0, 8005428 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005422:	490b      	ldr	r1, [pc, #44]	; (8005450 <prvCheckForValidListAndQueue+0x64>)
 8005424:	f7ff faac 	bl	8004980 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8005428:	b003      	add	sp, #12
 800542a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800542e:	f000 ba31 	b.w	8005894 <vPortExitCritical>
 8005432:	bf00      	nop
 8005434:	20001318 	.word	0x20001318
 8005438:	2000129c 	.word	0x2000129c
 800543c:	200012b0 	.word	0x200012b0
 8005440:	200011f4 	.word	0x200011f4
 8005444:	200011f8 	.word	0x200011f8
 8005448:	200011fc 	.word	0x200011fc
 800544c:	200012c8 	.word	0x200012c8
 8005450:	08009cea 	.word	0x08009cea

08005454 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8005454:	4291      	cmp	r1, r2
{
 8005456:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005458:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800545a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800545c:	d80a      	bhi.n	8005474 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	6983      	ldr	r3, [r0, #24]
 8005462:	429a      	cmp	r2, r3
 8005464:	d20d      	bcs.n	8005482 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <prvInsertTimerInActiveList+0x34>)
 8005468:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	f7fe ff96 	bl	800439c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005470:	2000      	movs	r0, #0
}
 8005472:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005474:	429a      	cmp	r2, r3
 8005476:	d201      	bcs.n	800547c <prvInsertTimerInActiveList+0x28>
 8005478:	4299      	cmp	r1, r3
 800547a:	d202      	bcs.n	8005482 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800547c:	4b03      	ldr	r3, [pc, #12]	; (800548c <prvInsertTimerInActiveList+0x38>)
 800547e:	1d01      	adds	r1, r0, #4
 8005480:	e7f3      	b.n	800546a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8005482:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005484:	e7f5      	b.n	8005472 <prvInsertTimerInActiveList+0x1e>
 8005486:	bf00      	nop
 8005488:	200011f8 	.word	0x200011f8
 800548c:	200011f4 	.word	0x200011f4

08005490 <xTimerCreateTimerTask>:
{
 8005490:	b510      	push	{r4, lr}
 8005492:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005494:	f7ff ffaa 	bl	80053ec <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005498:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <xTimerCreateTimerTask+0x54>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	b1b3      	cbz	r3, 80054cc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800549e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054a0:	aa07      	add	r2, sp, #28
 80054a2:	a906      	add	r1, sp, #24
 80054a4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054aa:	f7fe ff51 	bl	8004350 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054ae:	9b05      	ldr	r3, [sp, #20]
 80054b0:	9a07      	ldr	r2, [sp, #28]
 80054b2:	9302      	str	r3, [sp, #8]
 80054b4:	9b06      	ldr	r3, [sp, #24]
 80054b6:	490c      	ldr	r1, [pc, #48]	; (80054e8 <xTimerCreateTimerTask+0x58>)
 80054b8:	9301      	str	r3, [sp, #4]
 80054ba:	2302      	movs	r3, #2
 80054bc:	480b      	ldr	r0, [pc, #44]	; (80054ec <xTimerCreateTimerTask+0x5c>)
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	4623      	mov	r3, r4
 80054c2:	f7ff fc05 	bl	8004cd0 <xTaskCreateStatic>
 80054c6:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <xTimerCreateTimerTask+0x60>)
 80054c8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80054ca:	b940      	cbnz	r0, 80054de <xTimerCreateTimerTask+0x4e>
 80054cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d0:	f383 8811 	msr	BASEPRI, r3
 80054d4:	f3bf 8f6f 	isb	sy
 80054d8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80054dc:	e7fe      	b.n	80054dc <xTimerCreateTimerTask+0x4c>
}
 80054de:	2001      	movs	r0, #1
 80054e0:	b008      	add	sp, #32
 80054e2:	bd10      	pop	{r4, pc}
 80054e4:	20001318 	.word	0x20001318
 80054e8:	08009cef 	.word	0x08009cef
 80054ec:	080055f5 	.word	0x080055f5
 80054f0:	2000131c 	.word	0x2000131c

080054f4 <xTimerGenericCommand>:
{
 80054f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80054f6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 80054f8:	4604      	mov	r4, r0
{
 80054fa:	461a      	mov	r2, r3
	configASSERT( xTimer );
 80054fc:	b940      	cbnz	r0, 8005510 <xTimerGenericCommand+0x1c>
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	e7fe      	b.n	800550e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8005510:	4d0d      	ldr	r5, [pc, #52]	; (8005548 <xTimerGenericCommand+0x54>)
 8005512:	6828      	ldr	r0, [r5, #0]
 8005514:	b180      	cbz	r0, 8005538 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005516:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005518:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800551c:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800551e:	dc0d      	bgt.n	800553c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005520:	f7ff ff12 	bl	8005348 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005524:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005526:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005528:	bf18      	it	ne
 800552a:	461a      	movne	r2, r3
 800552c:	4669      	mov	r1, sp
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800552e:	bf08      	it	eq
 8005530:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005532:	6828      	ldr	r0, [r5, #0]
 8005534:	f7ff f871 	bl	800461a <xQueueGenericSend>
}
 8005538:	b004      	add	sp, #16
 800553a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800553c:	2300      	movs	r3, #0
 800553e:	4669      	mov	r1, sp
 8005540:	f7ff f91e 	bl	8004780 <xQueueGenericSendFromISR>
 8005544:	e7f8      	b.n	8005538 <xTimerGenericCommand+0x44>
 8005546:	bf00      	nop
 8005548:	20001318 	.word	0x20001318

0800554c <prvSampleTimeNow>:
{
 800554c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005550:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8005552:	f7ff fc79 	bl	8004e48 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005556:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80055e8 <prvSampleTimeNow+0x9c>
	xTimeNow = xTaskGetTickCount();
 800555a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800555c:	f8d8 3000 	ldr.w	r3, [r8]
 8005560:	4283      	cmp	r3, r0
 8005562:	d93e      	bls.n	80055e2 <prvSampleTimeNow+0x96>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005564:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005568:	4f20      	ldr	r7, [pc, #128]	; (80055ec <prvSampleTimeNow+0xa0>)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	b95a      	cbnz	r2, 8005588 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8005570:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <prvSampleTimeNow+0xa4>)
 8005572:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005574:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8005576:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 8005578:	6039      	str	r1, [r7, #0]
}
 800557a:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800557c:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800557e:	f8c8 5000 	str.w	r5, [r8]
}
 8005582:	b003      	add	sp, #12
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005588:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800558a:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800558c:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005590:	f104 0b04 	add.w	fp, r4, #4
 8005594:	4658      	mov	r0, fp
 8005596:	f7fe ff18 	bl	80043ca <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800559a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800559c:	4620      	mov	r0, r4
 800559e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80055a0:	69e3      	ldr	r3, [r4, #28]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d1e1      	bne.n	800556a <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80055a6:	69a3      	ldr	r3, [r4, #24]
 80055a8:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80055aa:	459a      	cmp	sl, r3
 80055ac:	d206      	bcs.n	80055bc <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055ae:	4659      	mov	r1, fp
 80055b0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80055b2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80055b4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055b6:	f7fe fef1 	bl	800439c <vListInsert>
 80055ba:	e7d6      	b.n	800556a <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055bc:	2300      	movs	r3, #0
 80055be:	4652      	mov	r2, sl
 80055c0:	4619      	mov	r1, r3
 80055c2:	4620      	mov	r0, r4
 80055c4:	f8cd 9000 	str.w	r9, [sp]
 80055c8:	f7ff ff94 	bl	80054f4 <xTimerGenericCommand>
				configASSERT( xResult );
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d1cc      	bne.n	800556a <prvSampleTimeNow+0x1e>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	e7fe      	b.n	80055e0 <prvSampleTimeNow+0x94>
		*pxTimerListsWereSwitched = pdFALSE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e7c9      	b.n	800557a <prvSampleTimeNow+0x2e>
 80055e6:	bf00      	nop
 80055e8:	200012c4 	.word	0x200012c4
 80055ec:	200011f4 	.word	0x200011f4
 80055f0:	200011f8 	.word	0x200011f8

080055f4 <prvTimerTask>:
{
 80055f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055f8:	4e69      	ldr	r6, [pc, #420]	; (80057a0 <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055fa:	4f6a      	ldr	r7, [pc, #424]	; (80057a4 <prvTimerTask+0x1b0>)
{
 80055fc:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055fe:	6833      	ldr	r3, [r6, #0]
 8005600:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005602:	2d00      	cmp	r5, #0
 8005604:	d033      	beq.n	800566e <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800560c:	f7ff fc14 	bl	8004e38 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005610:	a804      	add	r0, sp, #16
 8005612:	f7ff ff9b 	bl	800554c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005616:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005618:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800561a:	2c00      	cmp	r4, #0
 800561c:	d175      	bne.n	800570a <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800561e:	2d00      	cmp	r5, #0
 8005620:	d058      	beq.n	80056d4 <prvTimerTask+0xe0>
 8005622:	4540      	cmp	r0, r8
 8005624:	d35c      	bcc.n	80056e0 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8005626:	f7ff fca5 	bl	8004f74 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800562a:	6833      	ldr	r3, [r6, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005630:	1d28      	adds	r0, r5, #4
 8005632:	f7fe feca 	bl	80043ca <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005636:	69eb      	ldr	r3, [r5, #28]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d11a      	bne.n	8005672 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800563c:	69a9      	ldr	r1, [r5, #24]
 800563e:	4643      	mov	r3, r8
 8005640:	464a      	mov	r2, r9
 8005642:	4628      	mov	r0, r5
 8005644:	4441      	add	r1, r8
 8005646:	f7ff ff05 	bl	8005454 <prvInsertTimerInActiveList>
 800564a:	b190      	cbz	r0, 8005672 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800564c:	4623      	mov	r3, r4
 800564e:	4642      	mov	r2, r8
 8005650:	4621      	mov	r1, r4
 8005652:	4628      	mov	r0, r5
 8005654:	9400      	str	r4, [sp, #0]
 8005656:	f7ff ff4d 	bl	80054f4 <xTimerGenericCommand>
			configASSERT( xResult );
 800565a:	b950      	cbnz	r0, 8005672 <prvTimerTask+0x7e>
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	e7fe      	b.n	800566c <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 800566e:	46a8      	mov	r8, r5
 8005670:	e7cc      	b.n	800560c <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005672:	4628      	mov	r0, r5
 8005674:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005676:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005678:	2500      	movs	r5, #0
 800567a:	2200      	movs	r2, #0
 800567c:	6838      	ldr	r0, [r7, #0]
 800567e:	a904      	add	r1, sp, #16
 8005680:	f7ff f8df 	bl	8004842 <xQueueReceive>
 8005684:	2800      	cmp	r0, #0
 8005686:	d0ba      	beq.n	80055fe <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005688:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800568a:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800568c:	2b00      	cmp	r3, #0
 800568e:	db3f      	blt.n	8005710 <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005690:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005692:	6963      	ldr	r3, [r4, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d142      	bne.n	800571e <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005698:	a803      	add	r0, sp, #12
 800569a:	f7ff ff57 	bl	800554c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800569e:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056a0:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80056a2:	2b09      	cmp	r3, #9
 80056a4:	d8e9      	bhi.n	800567a <prvTimerTask+0x86>
 80056a6:	a101      	add	r1, pc, #4	; (adr r1, 80056ac <prvTimerTask+0xb8>)
 80056a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056ac:	08005727 	.word	0x08005727
 80056b0:	08005727 	.word	0x08005727
 80056b4:	08005727 	.word	0x08005727
 80056b8:	0800567b 	.word	0x0800567b
 80056bc:	0800576b 	.word	0x0800576b
 80056c0:	0800578f 	.word	0x0800578f
 80056c4:	08005727 	.word	0x08005727
 80056c8:	08005727 	.word	0x08005727
 80056cc:	0800567b 	.word	0x0800567b
 80056d0:	0800576b 	.word	0x0800576b
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056d4:	4b34      	ldr	r3, [pc, #208]	; (80057a8 <prvTimerTask+0x1b4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681c      	ldr	r4, [r3, #0]
 80056da:	fab4 f484 	clz	r4, r4
 80056de:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056e0:	4622      	mov	r2, r4
 80056e2:	6838      	ldr	r0, [r7, #0]
 80056e4:	eba8 0109 	sub.w	r1, r8, r9
 80056e8:	f7ff f95c 	bl	80049a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056ec:	f7ff fc42 	bl	8004f74 <xTaskResumeAll>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d1c1      	bne.n	8005678 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 80056f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy
 8005708:	e7b6      	b.n	8005678 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 800570a:	f7ff fc33 	bl	8004f74 <xTaskResumeAll>
 800570e:	e7b3      	b.n	8005678 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005710:	9b05      	ldr	r3, [sp, #20]
 8005712:	9907      	ldr	r1, [sp, #28]
 8005714:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005716:	9b04      	ldr	r3, [sp, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	dbae      	blt.n	800567a <prvTimerTask+0x86>
 800571c:	e7b8      	b.n	8005690 <prvTimerTask+0x9c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800571e:	1d20      	adds	r0, r4, #4
 8005720:	f7fe fe53 	bl	80043ca <uxListRemove>
 8005724:	e7b8      	b.n	8005698 <prvTimerTask+0xa4>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005726:	69a1      	ldr	r1, [r4, #24]
 8005728:	9b05      	ldr	r3, [sp, #20]
 800572a:	4620      	mov	r0, r4
 800572c:	4419      	add	r1, r3
 800572e:	f7ff fe91 	bl	8005454 <prvInsertTimerInActiveList>
 8005732:	2800      	cmp	r0, #0
 8005734:	d0a1      	beq.n	800567a <prvTimerTask+0x86>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005738:	4620      	mov	r0, r4
 800573a:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800573c:	69e3      	ldr	r3, [r4, #28]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d19b      	bne.n	800567a <prvTimerTask+0x86>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005742:	2300      	movs	r3, #0
 8005744:	69a2      	ldr	r2, [r4, #24]
 8005746:	9905      	ldr	r1, [sp, #20]
 8005748:	4620      	mov	r0, r4
 800574a:	440a      	add	r2, r1
 800574c:	9500      	str	r5, [sp, #0]
 800574e:	4619      	mov	r1, r3
 8005750:	f7ff fed0 	bl	80054f4 <xTimerGenericCommand>
							configASSERT( xResult );
 8005754:	2800      	cmp	r0, #0
 8005756:	d190      	bne.n	800567a <prvTimerTask+0x86>
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	e7fe      	b.n	8005768 <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800576a:	9905      	ldr	r1, [sp, #20]
 800576c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800576e:	b941      	cbnz	r1, 8005782 <prvTimerTask+0x18e>
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	e7fe      	b.n	8005780 <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005782:	4603      	mov	r3, r0
 8005784:	4401      	add	r1, r0
 8005786:	4620      	mov	r0, r4
 8005788:	f7ff fe64 	bl	8005454 <prvInsertTimerInActiveList>
					break;
 800578c:	e775      	b.n	800567a <prvTimerTask+0x86>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800578e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005792:	2b00      	cmp	r3, #0
 8005794:	f47f af71 	bne.w	800567a <prvTimerTask+0x86>
							vPortFree( pxTimer );
 8005798:	4620      	mov	r0, r4
 800579a:	f000 fa19 	bl	8005bd0 <vPortFree>
 800579e:	e76c      	b.n	800567a <prvTimerTask+0x86>
 80057a0:	200011f4 	.word	0x200011f4
 80057a4:	20001318 	.word	0x20001318
 80057a8:	200011f8 	.word	0x200011f8

080057ac <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80057ac:	4806      	ldr	r0, [pc, #24]	; (80057c8 <prvPortStartFirstTask+0x1c>)
 80057ae:	6800      	ldr	r0, [r0, #0]
 80057b0:	6800      	ldr	r0, [r0, #0]
 80057b2:	f380 8808 	msr	MSP, r0
 80057b6:	b662      	cpsie	i
 80057b8:	b661      	cpsie	f
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	df00      	svc	0
 80057c4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80057c6:	0000      	.short	0x0000
 80057c8:	e000ed08 	.word	0xe000ed08

080057cc <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 80057cc:	2300      	movs	r3, #0
{
 80057ce:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80057d0:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80057d2:	4b0d      	ldr	r3, [pc, #52]	; (8005808 <prvTaskExitError+0x3c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3301      	adds	r3, #1
 80057d8:	d008      	beq.n	80057ec <prvTaskExitError+0x20>
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	e7fe      	b.n	80057ea <prvTaskExitError+0x1e>
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80057fc:	9b01      	ldr	r3, [sp, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0fc      	beq.n	80057fc <prvTaskExitError+0x30>
}
 8005802:	b002      	add	sp, #8
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	2000002c 	.word	0x2000002c

0800580c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800580c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005810:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005816:	f021 0101 	bic.w	r1, r1, #1
 800581a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800581e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005822:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005826:	3840      	subs	r0, #64	; 0x40
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	080057cd 	.word	0x080057cd

08005830 <SVC_Handler>:
	__asm volatile (
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <pxCurrentTCBConst2>)
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	6808      	ldr	r0, [r1, #0]
 8005836:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800583a:	f380 8809 	msr	PSP, r0
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f04f 0000 	mov.w	r0, #0
 8005846:	f380 8811 	msr	BASEPRI, r0
 800584a:	f04e 0e0d 	orr.w	lr, lr, #13
 800584e:	4770      	bx	lr

08005850 <pxCurrentTCBConst2>:
 8005850:	20000cf8 	.word	0x20000cf8

08005854 <vPortEnterCritical>:
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <vPortEnterCritical+0x3c>)
 8005866:	6813      	ldr	r3, [r2, #0]
 8005868:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800586a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800586c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800586e:	d10e      	bne.n	800588e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005870:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005874:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8005878:	b2db      	uxtb	r3, r3
 800587a:	b143      	cbz	r3, 800588e <vPortEnterCritical+0x3a>
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	e7fe      	b.n	800588c <vPortEnterCritical+0x38>
	}
}
 800588e:	4770      	bx	lr
 8005890:	2000002c 	.word	0x2000002c

08005894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8005894:	4a08      	ldr	r2, [pc, #32]	; (80058b8 <vPortExitCritical+0x24>)
 8005896:	6813      	ldr	r3, [r2, #0]
 8005898:	b943      	cbnz	r3, 80058ac <vPortExitCritical+0x18>
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	e7fe      	b.n	80058aa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80058ac:	3b01      	subs	r3, #1
 80058ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058b0:	b90b      	cbnz	r3, 80058b6 <vPortExitCritical+0x22>
	__asm volatile
 80058b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80058b6:	4770      	bx	lr
 80058b8:	2000002c 	.word	0x2000002c
 80058bc:	00000000 	.word	0x00000000

080058c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058c0:	f3ef 8009 	mrs	r0, PSP
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <pxCurrentTCBConst>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80058d0:	6010      	str	r0, [r2, #0]
 80058d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80058d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058da:	f380 8811 	msr	BASEPRI, r0
 80058de:	f7ff fc29 	bl	8005134 <vTaskSwitchContext>
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f380 8811 	msr	BASEPRI, r0
 80058ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80058ee:	6819      	ldr	r1, [r3, #0]
 80058f0:	6808      	ldr	r0, [r1, #0]
 80058f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80058f6:	f380 8809 	msr	PSP, r0
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	4770      	bx	lr

08005900 <pxCurrentTCBConst>:
 8005900:	20000cf8 	.word	0x20000cf8

08005904 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005904:	b508      	push	{r3, lr}
	__asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005916:	f7ff fa9d 	bl	8004e54 <xTaskIncrementTick>
 800591a:	b128      	cbz	r0, 8005928 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800591c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005924:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005928:	2300      	movs	r3, #0
 800592a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800592e:	bd08      	pop	{r3, pc}

08005930 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005930:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005934:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005936:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800593a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800593c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <vPortSetupTimerInterrupt+0x20>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	fbb3 f3f1 	udiv	r3, r3, r1
 8005946:	3b01      	subs	r3, #1
 8005948:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800594a:	2307      	movs	r3, #7
 800594c:	6113      	str	r3, [r2, #16]
}
 800594e:	4770      	bx	lr
 8005950:	20000020 	.word	0x20000020

08005954 <xPortStartScheduler>:
{
 8005954:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005956:	4b29      	ldr	r3, [pc, #164]	; (80059fc <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005958:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800595a:	781a      	ldrb	r2, [r3, #0]
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005960:	22ff      	movs	r2, #255	; 0xff
 8005962:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005964:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005966:	4a26      	ldr	r2, [pc, #152]	; (8005a00 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005968:	b2db      	uxtb	r3, r3
 800596a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800596e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005972:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005976:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005978:	2307      	movs	r3, #7
 800597a:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <xPortStartScheduler+0xb0>)
 800597c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800597e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8005982:	1e5c      	subs	r4, r3, #1
 8005984:	0600      	lsls	r0, r0, #24
 8005986:	d40c      	bmi.n	80059a2 <xPortStartScheduler+0x4e>
 8005988:	b111      	cbz	r1, 8005990 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800598a:	2b03      	cmp	r3, #3
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	d011      	beq.n	80059b4 <xPortStartScheduler+0x60>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	e7fe      	b.n	80059a0 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80059a6:	2101      	movs	r1, #1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f88d 3003 	strb.w	r3, [sp, #3]
 80059b0:	4623      	mov	r3, r4
 80059b2:	e7e4      	b.n	800597e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80059b8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059ba:	9b01      	ldr	r3, [sp, #4]
 80059bc:	4a0f      	ldr	r2, [pc, #60]	; (80059fc <xPortStartScheduler+0xa8>)
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 80059c6:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059c8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80059cc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80059d0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059d4:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 80059d8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80059dc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80059e0:	f7ff ffa6 	bl	8005930 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <xPortStartScheduler+0xb4>)
 80059e6:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80059e8:	f7ff fee0 	bl	80057ac <prvPortStartFirstTask>
	vTaskSwitchContext();
 80059ec:	f7ff fba2 	bl	8005134 <vTaskSwitchContext>
}
 80059f0:	4620      	mov	r0, r4
	prvTaskExitError();
 80059f2:	f7ff feeb 	bl	80057cc <prvTaskExitError>
}
 80059f6:	b002      	add	sp, #8
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	bf00      	nop
 80059fc:	e000e400 	.word	0xe000e400
 8005a00:	20001320 	.word	0x20001320
 8005a04:	20001324 	.word	0x20001324
 8005a08:	2000002c 	.word	0x2000002c

08005a0c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a0c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a10:	2b0f      	cmp	r3, #15
 8005a12:	d90e      	bls.n	8005a32 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a14:	4a11      	ldr	r2, [pc, #68]	; (8005a5c <vPortValidateInterruptPriority+0x50>)
 8005a16:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a18:	4a11      	ldr	r2, [pc, #68]	; (8005a60 <vPortValidateInterruptPriority+0x54>)
 8005a1a:	7812      	ldrb	r2, [r2, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d908      	bls.n	8005a32 <vPortValidateInterruptPriority+0x26>
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	e7fe      	b.n	8005a30 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a32:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a36:	4a0b      	ldr	r2, [pc, #44]	; (8005a64 <vPortValidateInterruptPriority+0x58>)
 8005a38:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d908      	bls.n	8005a58 <vPortValidateInterruptPriority+0x4c>
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	e7fe      	b.n	8005a56 <vPortValidateInterruptPriority+0x4a>
	}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	e000e3f0 	.word	0xe000e3f0
 8005a60:	20001320 	.word	0x20001320
 8005a64:	20001324 	.word	0x20001324

08005a68 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a68:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a6a:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <prvInsertBlockIntoFreeList+0x40>)
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4283      	cmp	r3, r0
 8005a72:	d3fb      	bcc.n	8005a6c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a74:	6854      	ldr	r4, [r2, #4]
 8005a76:	1911      	adds	r1, r2, r4
 8005a78:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a7a:	bf01      	itttt	eq
 8005a7c:	6841      	ldreq	r1, [r0, #4]
 8005a7e:	4610      	moveq	r0, r2
 8005a80:	1909      	addeq	r1, r1, r4
 8005a82:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a84:	6844      	ldr	r4, [r0, #4]
 8005a86:	1901      	adds	r1, r0, r4
 8005a88:	428b      	cmp	r3, r1
 8005a8a:	d107      	bne.n	8005a9c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a8c:	4907      	ldr	r1, [pc, #28]	; (8005aac <prvInsertBlockIntoFreeList+0x44>)
 8005a8e:	6809      	ldr	r1, [r1, #0]
 8005a90:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a92:	bf1f      	itttt	ne
 8005a94:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a96:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a98:	1909      	addne	r1, r1, r4
 8005a9a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a9c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a9e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005aa0:	bf18      	it	ne
 8005aa2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa4:	bd10      	pop	{r4, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20001f38 	.word	0x20001f38
 8005aac:	20001328 	.word	0x20001328

08005ab0 <pvPortMalloc>:
{
 8005ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005ab6:	f7ff f9bf 	bl	8004e38 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005aba:	483f      	ldr	r0, [pc, #252]	; (8005bb8 <pvPortMalloc+0x108>)
 8005abc:	4d3f      	ldr	r5, [pc, #252]	; (8005bbc <pvPortMalloc+0x10c>)
 8005abe:	6803      	ldr	r3, [r0, #0]
 8005ac0:	bb0b      	cbnz	r3, 8005b06 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8005ac2:	493f      	ldr	r1, [pc, #252]	; (8005bc0 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ac4:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ac6:	bf1d      	ittte	ne
 8005ac8:	1dcb      	addne	r3, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005aca:	f023 0307 	bicne.w	r3, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ace:	f501 6240 	addne.w	r2, r1, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ad2:	f44f 6240 	moveq.w	r2, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ad6:	bf1c      	itt	ne
 8005ad8:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ada:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8005adc:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ade:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ae0:	4e38      	ldr	r6, [pc, #224]	; (8005bc4 <pvPortMalloc+0x114>)
	uxAddress -= xHeapStructSize;
 8005ae2:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae4:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8005ae8:	6073      	str	r3, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005aea:	6031      	str	r1, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8005aec:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005af0:	1a53      	subs	r3, r2, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005af2:	e9c1 2300 	strd	r2, r3, [r1]
	pxEnd = ( void * ) uxAddress;
 8005af6:	6002      	str	r2, [r0, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005af8:	4a33      	ldr	r2, [pc, #204]	; (8005bc8 <pvPortMalloc+0x118>)
 8005afa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005afc:	4a33      	ldr	r2, [pc, #204]	; (8005bcc <pvPortMalloc+0x11c>)
 8005afe:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b04:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b06:	682f      	ldr	r7, [r5, #0]
 8005b08:	4227      	tst	r7, r4
 8005b0a:	d150      	bne.n	8005bae <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 8005b0c:	2c00      	cmp	r4, #0
 8005b0e:	d041      	beq.n	8005b94 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8005b10:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b14:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b16:	bf1c      	itt	ne
 8005b18:	f023 0307 	bicne.w	r3, r3, #7
 8005b1c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d045      	beq.n	8005bae <pvPortMalloc+0xfe>
 8005b22:	4c2a      	ldr	r4, [pc, #168]	; (8005bcc <pvPortMalloc+0x11c>)
 8005b24:	6826      	ldr	r6, [r4, #0]
 8005b26:	429e      	cmp	r6, r3
 8005b28:	d341      	bcc.n	8005bae <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 8005b2a:	4a26      	ldr	r2, [pc, #152]	; (8005bc4 <pvPortMalloc+0x114>)
 8005b2c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b2e:	6869      	ldr	r1, [r5, #4]
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d204      	bcs.n	8005b3e <pvPortMalloc+0x8e>
 8005b34:	f8d5 c000 	ldr.w	ip, [r5]
 8005b38:	f1bc 0f00 	cmp.w	ip, #0
 8005b3c:	d115      	bne.n	8005b6a <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8005b3e:	6800      	ldr	r0, [r0, #0]
 8005b40:	42a8      	cmp	r0, r5
 8005b42:	d034      	beq.n	8005bae <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b44:	6828      	ldr	r0, [r5, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b46:	1ac9      	subs	r1, r1, r3
 8005b48:	2910      	cmp	r1, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b4a:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b4e:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b50:	d912      	bls.n	8005b78 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b52:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b54:	0742      	lsls	r2, r0, #29
 8005b56:	d00b      	beq.n	8005b70 <pvPortMalloc+0xc0>
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	e7fe      	b.n	8005b68 <pvPortMalloc+0xb8>
 8005b6a:	462a      	mov	r2, r5
 8005b6c:	4665      	mov	r5, ip
 8005b6e:	e7de      	b.n	8005b2e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b70:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b72:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b74:	f7ff ff78 	bl	8005a68 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b78:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b7a:	4913      	ldr	r1, [pc, #76]	; (8005bc8 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b7c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b7e:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8005b80:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b82:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b84:	6026      	str	r6, [r4, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b86:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b88:	bf38      	it	cc
 8005b8a:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b8c:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b90:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b92:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8005b94:	f7ff f9ee 	bl	8004f74 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b98:	0763      	lsls	r3, r4, #29
 8005b9a:	d00a      	beq.n	8005bb2 <pvPortMalloc+0x102>
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	e7fe      	b.n	8005bac <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 8005bae:	2400      	movs	r4, #0
 8005bb0:	e7f0      	b.n	8005b94 <pvPortMalloc+0xe4>
}
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb8:	20001328 	.word	0x20001328
 8005bbc:	20001f2c 	.word	0x20001f2c
 8005bc0:	2000132c 	.word	0x2000132c
 8005bc4:	20001f38 	.word	0x20001f38
 8005bc8:	20001f34 	.word	0x20001f34
 8005bcc:	20001f30 	.word	0x20001f30

08005bd0 <vPortFree>:
{
 8005bd0:	b510      	push	{r4, lr}
	if( pv != NULL )
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	b370      	cbz	r0, 8005c34 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005bd6:	4a18      	ldr	r2, [pc, #96]	; (8005c38 <vPortFree+0x68>)
 8005bd8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005bdc:	6812      	ldr	r2, [r2, #0]
 8005bde:	4213      	tst	r3, r2
 8005be0:	d108      	bne.n	8005bf4 <vPortFree+0x24>
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	e7fe      	b.n	8005bf2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bf4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005bf8:	b141      	cbz	r1, 8005c0c <vPortFree+0x3c>
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	e7fe      	b.n	8005c0a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c0c:	ea23 0302 	bic.w	r3, r3, r2
 8005c10:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005c14:	f7ff f910 	bl	8004e38 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c18:	4a08      	ldr	r2, [pc, #32]	; (8005c3c <vPortFree+0x6c>)
 8005c1a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005c1e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c20:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c24:	440b      	add	r3, r1
 8005c26:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c28:	f7ff ff1e 	bl	8005a68 <prvInsertBlockIntoFreeList>
}
 8005c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005c30:	f7ff b9a0 	b.w	8004f74 <xTaskResumeAll>
}
 8005c34:	bd10      	pop	{r4, pc}
 8005c36:	bf00      	nop
 8005c38:	20001f2c 	.word	0x20001f2c
 8005c3c:	20001f30 	.word	0x20001f30

08005c40 <pow>:
 8005c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c44:	4614      	mov	r4, r2
 8005c46:	461d      	mov	r5, r3
 8005c48:	4680      	mov	r8, r0
 8005c4a:	4689      	mov	r9, r1
 8005c4c:	f000 f8a8 	bl	8005da0 <__ieee754_pow>
 8005c50:	4622      	mov	r2, r4
 8005c52:	4606      	mov	r6, r0
 8005c54:	460f      	mov	r7, r1
 8005c56:	462b      	mov	r3, r5
 8005c58:	4620      	mov	r0, r4
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	f7fa fed6 	bl	8000a0c <__aeabi_dcmpun>
 8005c60:	bbc8      	cbnz	r0, 8005cd6 <pow+0x96>
 8005c62:	2200      	movs	r2, #0
 8005c64:	2300      	movs	r3, #0
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f7fa fe9d 	bl	80009a8 <__aeabi_dcmpeq>
 8005c6e:	b1b8      	cbz	r0, 8005ca0 <pow+0x60>
 8005c70:	2200      	movs	r2, #0
 8005c72:	2300      	movs	r3, #0
 8005c74:	4620      	mov	r0, r4
 8005c76:	4629      	mov	r1, r5
 8005c78:	f7fa fe96 	bl	80009a8 <__aeabi_dcmpeq>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d141      	bne.n	8005d04 <pow+0xc4>
 8005c80:	4620      	mov	r0, r4
 8005c82:	4629      	mov	r1, r5
 8005c84:	f001 f89c 	bl	8006dc0 <finite>
 8005c88:	b328      	cbz	r0, 8005cd6 <pow+0x96>
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa fe93 	bl	80009bc <__aeabi_dcmplt>
 8005c96:	b1f0      	cbz	r0, 8005cd6 <pow+0x96>
 8005c98:	f001 fa2c 	bl	80070f4 <__errno>
 8005c9c:	2322      	movs	r3, #34	; 0x22
 8005c9e:	e019      	b.n	8005cd4 <pow+0x94>
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f001 f88c 	bl	8006dc0 <finite>
 8005ca8:	b9c8      	cbnz	r0, 8005cde <pow+0x9e>
 8005caa:	4640      	mov	r0, r8
 8005cac:	4649      	mov	r1, r9
 8005cae:	f001 f887 	bl	8006dc0 <finite>
 8005cb2:	b1a0      	cbz	r0, 8005cde <pow+0x9e>
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	f001 f882 	bl	8006dc0 <finite>
 8005cbc:	b178      	cbz	r0, 8005cde <pow+0x9e>
 8005cbe:	4632      	mov	r2, r6
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	4639      	mov	r1, r7
 8005cc6:	f7fa fea1 	bl	8000a0c <__aeabi_dcmpun>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d0e4      	beq.n	8005c98 <pow+0x58>
 8005cce:	f001 fa11 	bl	80070f4 <__errno>
 8005cd2:	2321      	movs	r3, #33	; 0x21
 8005cd4:	6003      	str	r3, [r0, #0]
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	f7fa fe5f 	bl	80009a8 <__aeabi_dcmpeq>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d0f3      	beq.n	8005cd6 <pow+0x96>
 8005cee:	4640      	mov	r0, r8
 8005cf0:	4649      	mov	r1, r9
 8005cf2:	f001 f865 	bl	8006dc0 <finite>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d0ed      	beq.n	8005cd6 <pow+0x96>
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	f001 f85f 	bl	8006dc0 <finite>
 8005d02:	e7c8      	b.n	8005c96 <pow+0x56>
 8005d04:	2600      	movs	r6, #0
 8005d06:	4f01      	ldr	r7, [pc, #4]	; (8005d0c <pow+0xcc>)
 8005d08:	e7e5      	b.n	8005cd6 <pow+0x96>
 8005d0a:	bf00      	nop
 8005d0c:	3ff00000 	.word	0x3ff00000

08005d10 <sqrt>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	4606      	mov	r6, r0
 8005d14:	460f      	mov	r7, r1
 8005d16:	f000 fd59 	bl	80067cc <__ieee754_sqrt>
 8005d1a:	4632      	mov	r2, r6
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	460d      	mov	r5, r1
 8005d20:	463b      	mov	r3, r7
 8005d22:	4630      	mov	r0, r6
 8005d24:	4639      	mov	r1, r7
 8005d26:	f7fa fe71 	bl	8000a0c <__aeabi_dcmpun>
 8005d2a:	b990      	cbnz	r0, 8005d52 <sqrt+0x42>
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2300      	movs	r3, #0
 8005d30:	4630      	mov	r0, r6
 8005d32:	4639      	mov	r1, r7
 8005d34:	f7fa fe42 	bl	80009bc <__aeabi_dcmplt>
 8005d38:	b158      	cbz	r0, 8005d52 <sqrt+0x42>
 8005d3a:	f001 f9db 	bl	80070f4 <__errno>
 8005d3e:	2321      	movs	r3, #33	; 0x21
 8005d40:	2200      	movs	r2, #0
 8005d42:	6003      	str	r3, [r0, #0]
 8005d44:	2300      	movs	r3, #0
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	f7fa fcef 	bl	800072c <__aeabi_ddiv>
 8005d4e:	4604      	mov	r4, r0
 8005d50:	460d      	mov	r5, r1
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d58 <asinf>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	f000 fde6 	bl	800692c <__ieee754_asinf>
 8005d60:	4621      	mov	r1, r4
 8005d62:	4605      	mov	r5, r0
 8005d64:	4620      	mov	r0, r4
 8005d66:	f7fb f9b3 	bl	80010d0 <__aeabi_fcmpun>
 8005d6a:	b980      	cbnz	r0, 8005d8e <asinf+0x36>
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f001 f9b9 	bl	80070e4 <fabsf>
 8005d72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d76:	f7fb f9a1 	bl	80010bc <__aeabi_fcmpgt>
 8005d7a:	b140      	cbz	r0, 8005d8e <asinf+0x36>
 8005d7c:	f001 f9ba 	bl	80070f4 <__errno>
 8005d80:	2321      	movs	r3, #33	; 0x21
 8005d82:	6003      	str	r3, [r0, #0]
 8005d84:	4803      	ldr	r0, [pc, #12]	; (8005d94 <asinf+0x3c>)
 8005d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d8a:	f001 b9af 	b.w	80070ec <nanf>
 8005d8e:	4628      	mov	r0, r5
 8005d90:	bd38      	pop	{r3, r4, r5, pc}
 8005d92:	bf00      	nop
 8005d94:	0800a01f 	.word	0x0800a01f

08005d98 <atan2f>:
 8005d98:	f000 bf0c 	b.w	8006bb4 <__ieee754_atan2f>
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <__ieee754_pow>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	b093      	sub	sp, #76	; 0x4c
 8005da6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005daa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8005dae:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005db2:	4689      	mov	r9, r1
 8005db4:	ea56 0102 	orrs.w	r1, r6, r2
 8005db8:	4680      	mov	r8, r0
 8005dba:	d111      	bne.n	8005de0 <__ieee754_pow+0x40>
 8005dbc:	1803      	adds	r3, r0, r0
 8005dbe:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8005dc2:	4152      	adcs	r2, r2
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	4b82      	ldr	r3, [pc, #520]	; (8005fd0 <__ieee754_pow+0x230>)
 8005dc8:	4193      	sbcs	r3, r2
 8005dca:	f080 84b9 	bcs.w	8006740 <__ieee754_pow+0x9a0>
 8005dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	f7fa f9c9 	bl	800016c <__adddf3>
 8005dda:	4683      	mov	fp, r0
 8005ddc:	468c      	mov	ip, r1
 8005dde:	e06f      	b.n	8005ec0 <__ieee754_pow+0x120>
 8005de0:	4b7c      	ldr	r3, [pc, #496]	; (8005fd4 <__ieee754_pow+0x234>)
 8005de2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8005de6:	429c      	cmp	r4, r3
 8005de8:	464d      	mov	r5, r9
 8005dea:	4682      	mov	sl, r0
 8005dec:	dc06      	bgt.n	8005dfc <__ieee754_pow+0x5c>
 8005dee:	d101      	bne.n	8005df4 <__ieee754_pow+0x54>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d1ec      	bne.n	8005dce <__ieee754_pow+0x2e>
 8005df4:	429e      	cmp	r6, r3
 8005df6:	dc01      	bgt.n	8005dfc <__ieee754_pow+0x5c>
 8005df8:	d10f      	bne.n	8005e1a <__ieee754_pow+0x7a>
 8005dfa:	b172      	cbz	r2, 8005e1a <__ieee754_pow+0x7a>
 8005dfc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8005e00:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005e04:	ea55 050a 	orrs.w	r5, r5, sl
 8005e08:	d1e1      	bne.n	8005dce <__ieee754_pow+0x2e>
 8005e0a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005e0e:	18db      	adds	r3, r3, r3
 8005e10:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005e14:	4152      	adcs	r2, r2
 8005e16:	429d      	cmp	r5, r3
 8005e18:	e7d5      	b.n	8005dc6 <__ieee754_pow+0x26>
 8005e1a:	2d00      	cmp	r5, #0
 8005e1c:	da39      	bge.n	8005e92 <__ieee754_pow+0xf2>
 8005e1e:	4b6e      	ldr	r3, [pc, #440]	; (8005fd8 <__ieee754_pow+0x238>)
 8005e20:	429e      	cmp	r6, r3
 8005e22:	dc52      	bgt.n	8005eca <__ieee754_pow+0x12a>
 8005e24:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005e28:	429e      	cmp	r6, r3
 8005e2a:	f340 849c 	ble.w	8006766 <__ieee754_pow+0x9c6>
 8005e2e:	1533      	asrs	r3, r6, #20
 8005e30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005e34:	2b14      	cmp	r3, #20
 8005e36:	dd0f      	ble.n	8005e58 <__ieee754_pow+0xb8>
 8005e38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005e3c:	fa22 f103 	lsr.w	r1, r2, r3
 8005e40:	fa01 f303 	lsl.w	r3, r1, r3
 8005e44:	4293      	cmp	r3, r2
 8005e46:	f040 848e 	bne.w	8006766 <__ieee754_pow+0x9c6>
 8005e4a:	f001 0101 	and.w	r1, r1, #1
 8005e4e:	f1c1 0302 	rsb	r3, r1, #2
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	b182      	cbz	r2, 8005e78 <__ieee754_pow+0xd8>
 8005e56:	e05d      	b.n	8005f14 <__ieee754_pow+0x174>
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	d159      	bne.n	8005f10 <__ieee754_pow+0x170>
 8005e5c:	f1c3 0314 	rsb	r3, r3, #20
 8005e60:	fa46 f103 	asr.w	r1, r6, r3
 8005e64:	fa01 f303 	lsl.w	r3, r1, r3
 8005e68:	42b3      	cmp	r3, r6
 8005e6a:	f040 8479 	bne.w	8006760 <__ieee754_pow+0x9c0>
 8005e6e:	f001 0101 	and.w	r1, r1, #1
 8005e72:	f1c1 0302 	rsb	r3, r1, #2
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	4b58      	ldr	r3, [pc, #352]	; (8005fdc <__ieee754_pow+0x23c>)
 8005e7a:	429e      	cmp	r6, r3
 8005e7c:	d132      	bne.n	8005ee4 <__ieee754_pow+0x144>
 8005e7e:	2f00      	cmp	r7, #0
 8005e80:	f280 846a 	bge.w	8006758 <__ieee754_pow+0x9b8>
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	2000      	movs	r0, #0
 8005e8a:	4954      	ldr	r1, [pc, #336]	; (8005fdc <__ieee754_pow+0x23c>)
 8005e8c:	f7fa fc4e 	bl	800072c <__aeabi_ddiv>
 8005e90:	e7a3      	b.n	8005dda <__ieee754_pow+0x3a>
 8005e92:	2300      	movs	r3, #0
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	2a00      	cmp	r2, #0
 8005e98:	d13c      	bne.n	8005f14 <__ieee754_pow+0x174>
 8005e9a:	4b4e      	ldr	r3, [pc, #312]	; (8005fd4 <__ieee754_pow+0x234>)
 8005e9c:	429e      	cmp	r6, r3
 8005e9e:	d1eb      	bne.n	8005e78 <__ieee754_pow+0xd8>
 8005ea0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005ea4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005ea8:	ea53 030a 	orrs.w	r3, r3, sl
 8005eac:	f000 8448 	beq.w	8006740 <__ieee754_pow+0x9a0>
 8005eb0:	4b4b      	ldr	r3, [pc, #300]	; (8005fe0 <__ieee754_pow+0x240>)
 8005eb2:	429c      	cmp	r4, r3
 8005eb4:	dd0b      	ble.n	8005ece <__ieee754_pow+0x12e>
 8005eb6:	2f00      	cmp	r7, #0
 8005eb8:	f2c0 8448 	blt.w	800674c <__ieee754_pow+0x9ac>
 8005ebc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005ec0:	4658      	mov	r0, fp
 8005ec2:	4661      	mov	r1, ip
 8005ec4:	b013      	add	sp, #76	; 0x4c
 8005ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e7e2      	b.n	8005e94 <__ieee754_pow+0xf4>
 8005ece:	2f00      	cmp	r7, #0
 8005ed0:	f04f 0b00 	mov.w	fp, #0
 8005ed4:	f04f 0c00 	mov.w	ip, #0
 8005ed8:	daf2      	bge.n	8005ec0 <__ieee754_pow+0x120>
 8005eda:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005ede:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005ee2:	e7ed      	b.n	8005ec0 <__ieee754_pow+0x120>
 8005ee4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005ee8:	d106      	bne.n	8005ef8 <__ieee754_pow+0x158>
 8005eea:	4642      	mov	r2, r8
 8005eec:	464b      	mov	r3, r9
 8005eee:	4640      	mov	r0, r8
 8005ef0:	4649      	mov	r1, r9
 8005ef2:	f7fa faf1 	bl	80004d8 <__aeabi_dmul>
 8005ef6:	e770      	b.n	8005dda <__ieee754_pow+0x3a>
 8005ef8:	4b3a      	ldr	r3, [pc, #232]	; (8005fe4 <__ieee754_pow+0x244>)
 8005efa:	429f      	cmp	r7, r3
 8005efc:	d10a      	bne.n	8005f14 <__ieee754_pow+0x174>
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	db08      	blt.n	8005f14 <__ieee754_pow+0x174>
 8005f02:	4640      	mov	r0, r8
 8005f04:	4649      	mov	r1, r9
 8005f06:	b013      	add	sp, #76	; 0x4c
 8005f08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	f000 bc5e 	b.w	80067cc <__ieee754_sqrt>
 8005f10:	2300      	movs	r3, #0
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	4640      	mov	r0, r8
 8005f16:	4649      	mov	r1, r9
 8005f18:	f000 ff4f 	bl	8006dba <fabs>
 8005f1c:	4683      	mov	fp, r0
 8005f1e:	468c      	mov	ip, r1
 8005f20:	f1ba 0f00 	cmp.w	sl, #0
 8005f24:	d128      	bne.n	8005f78 <__ieee754_pow+0x1d8>
 8005f26:	b124      	cbz	r4, 8005f32 <__ieee754_pow+0x192>
 8005f28:	4b2c      	ldr	r3, [pc, #176]	; (8005fdc <__ieee754_pow+0x23c>)
 8005f2a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d122      	bne.n	8005f78 <__ieee754_pow+0x1d8>
 8005f32:	2f00      	cmp	r7, #0
 8005f34:	da07      	bge.n	8005f46 <__ieee754_pow+0x1a6>
 8005f36:	465a      	mov	r2, fp
 8005f38:	4663      	mov	r3, ip
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	4927      	ldr	r1, [pc, #156]	; (8005fdc <__ieee754_pow+0x23c>)
 8005f3e:	f7fa fbf5 	bl	800072c <__aeabi_ddiv>
 8005f42:	4683      	mov	fp, r0
 8005f44:	468c      	mov	ip, r1
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	daba      	bge.n	8005ec0 <__ieee754_pow+0x120>
 8005f4a:	9b00      	ldr	r3, [sp, #0]
 8005f4c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005f50:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005f54:	4323      	orrs	r3, r4
 8005f56:	d108      	bne.n	8005f6a <__ieee754_pow+0x1ca>
 8005f58:	465a      	mov	r2, fp
 8005f5a:	4663      	mov	r3, ip
 8005f5c:	4658      	mov	r0, fp
 8005f5e:	4661      	mov	r1, ip
 8005f60:	f7fa f902 	bl	8000168 <__aeabi_dsub>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	e790      	b.n	8005e8c <__ieee754_pow+0xec>
 8005f6a:	9b00      	ldr	r3, [sp, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d1a7      	bne.n	8005ec0 <__ieee754_pow+0x120>
 8005f70:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8005f74:	469c      	mov	ip, r3
 8005f76:	e7a3      	b.n	8005ec0 <__ieee754_pow+0x120>
 8005f78:	0feb      	lsrs	r3, r5, #31
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	930c      	str	r3, [sp, #48]	; 0x30
 8005f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f80:	9b00      	ldr	r3, [sp, #0]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	d104      	bne.n	8005f90 <__ieee754_pow+0x1f0>
 8005f86:	4642      	mov	r2, r8
 8005f88:	464b      	mov	r3, r9
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	4649      	mov	r1, r9
 8005f8e:	e7e7      	b.n	8005f60 <__ieee754_pow+0x1c0>
 8005f90:	4b15      	ldr	r3, [pc, #84]	; (8005fe8 <__ieee754_pow+0x248>)
 8005f92:	429e      	cmp	r6, r3
 8005f94:	f340 80f6 	ble.w	8006184 <__ieee754_pow+0x3e4>
 8005f98:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005f9c:	429e      	cmp	r6, r3
 8005f9e:	4b10      	ldr	r3, [pc, #64]	; (8005fe0 <__ieee754_pow+0x240>)
 8005fa0:	dd09      	ble.n	8005fb6 <__ieee754_pow+0x216>
 8005fa2:	429c      	cmp	r4, r3
 8005fa4:	dc0c      	bgt.n	8005fc0 <__ieee754_pow+0x220>
 8005fa6:	2f00      	cmp	r7, #0
 8005fa8:	da0c      	bge.n	8005fc4 <__ieee754_pow+0x224>
 8005faa:	2000      	movs	r0, #0
 8005fac:	b013      	add	sp, #76	; 0x4c
 8005fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb2:	f000 befd 	b.w	8006db0 <__math_oflow>
 8005fb6:	429c      	cmp	r4, r3
 8005fb8:	dbf5      	blt.n	8005fa6 <__ieee754_pow+0x206>
 8005fba:	4b08      	ldr	r3, [pc, #32]	; (8005fdc <__ieee754_pow+0x23c>)
 8005fbc:	429c      	cmp	r4, r3
 8005fbe:	dd15      	ble.n	8005fec <__ieee754_pow+0x24c>
 8005fc0:	2f00      	cmp	r7, #0
 8005fc2:	dcf2      	bgt.n	8005faa <__ieee754_pow+0x20a>
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	b013      	add	sp, #76	; 0x4c
 8005fc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fcc:	f000 beeb 	b.w	8006da6 <__math_uflow>
 8005fd0:	fff00000 	.word	0xfff00000
 8005fd4:	7ff00000 	.word	0x7ff00000
 8005fd8:	433fffff 	.word	0x433fffff
 8005fdc:	3ff00000 	.word	0x3ff00000
 8005fe0:	3fefffff 	.word	0x3fefffff
 8005fe4:	3fe00000 	.word	0x3fe00000
 8005fe8:	41e00000 	.word	0x41e00000
 8005fec:	4661      	mov	r1, ip
 8005fee:	2200      	movs	r2, #0
 8005ff0:	4658      	mov	r0, fp
 8005ff2:	4b5f      	ldr	r3, [pc, #380]	; (8006170 <__ieee754_pow+0x3d0>)
 8005ff4:	f7fa f8b8 	bl	8000168 <__aeabi_dsub>
 8005ff8:	a355      	add	r3, pc, #340	; (adr r3, 8006150 <__ieee754_pow+0x3b0>)
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	4604      	mov	r4, r0
 8006000:	460d      	mov	r5, r1
 8006002:	f7fa fa69 	bl	80004d8 <__aeabi_dmul>
 8006006:	a354      	add	r3, pc, #336	; (adr r3, 8006158 <__ieee754_pow+0x3b8>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	4606      	mov	r6, r0
 800600e:	460f      	mov	r7, r1
 8006010:	4620      	mov	r0, r4
 8006012:	4629      	mov	r1, r5
 8006014:	f7fa fa60 	bl	80004d8 <__aeabi_dmul>
 8006018:	2200      	movs	r2, #0
 800601a:	4682      	mov	sl, r0
 800601c:	468b      	mov	fp, r1
 800601e:	4620      	mov	r0, r4
 8006020:	4629      	mov	r1, r5
 8006022:	4b54      	ldr	r3, [pc, #336]	; (8006174 <__ieee754_pow+0x3d4>)
 8006024:	f7fa fa58 	bl	80004d8 <__aeabi_dmul>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	a14c      	add	r1, pc, #304	; (adr r1, 8006160 <__ieee754_pow+0x3c0>)
 800602e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006032:	f7fa f899 	bl	8000168 <__aeabi_dsub>
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	f7fa fa4d 	bl	80004d8 <__aeabi_dmul>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	2000      	movs	r0, #0
 8006044:	494c      	ldr	r1, [pc, #304]	; (8006178 <__ieee754_pow+0x3d8>)
 8006046:	f7fa f88f 	bl	8000168 <__aeabi_dsub>
 800604a:	4622      	mov	r2, r4
 800604c:	462b      	mov	r3, r5
 800604e:	4680      	mov	r8, r0
 8006050:	4689      	mov	r9, r1
 8006052:	4620      	mov	r0, r4
 8006054:	4629      	mov	r1, r5
 8006056:	f7fa fa3f 	bl	80004d8 <__aeabi_dmul>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4640      	mov	r0, r8
 8006060:	4649      	mov	r1, r9
 8006062:	f7fa fa39 	bl	80004d8 <__aeabi_dmul>
 8006066:	a340      	add	r3, pc, #256	; (adr r3, 8006168 <__ieee754_pow+0x3c8>)
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f7fa fa34 	bl	80004d8 <__aeabi_dmul>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4650      	mov	r0, sl
 8006076:	4659      	mov	r1, fp
 8006078:	f7fa f876 	bl	8000168 <__aeabi_dsub>
 800607c:	f04f 0a00 	mov.w	sl, #0
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4604      	mov	r4, r0
 8006086:	460d      	mov	r5, r1
 8006088:	4630      	mov	r0, r6
 800608a:	4639      	mov	r1, r7
 800608c:	f7fa f86e 	bl	800016c <__adddf3>
 8006090:	4632      	mov	r2, r6
 8006092:	463b      	mov	r3, r7
 8006094:	4650      	mov	r0, sl
 8006096:	468b      	mov	fp, r1
 8006098:	f7fa f866 	bl	8000168 <__aeabi_dsub>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4620      	mov	r0, r4
 80060a2:	4629      	mov	r1, r5
 80060a4:	f7fa f860 	bl	8000168 <__aeabi_dsub>
 80060a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060ac:	9b00      	ldr	r3, [sp, #0]
 80060ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060b0:	3b01      	subs	r3, #1
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f04f 0600 	mov.w	r6, #0
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	bf0c      	ite	eq
 80060be:	4b2f      	ldreq	r3, [pc, #188]	; (800617c <__ieee754_pow+0x3dc>)
 80060c0:	4b2b      	ldrne	r3, [pc, #172]	; (8006170 <__ieee754_pow+0x3d0>)
 80060c2:	4604      	mov	r4, r0
 80060c4:	460d      	mov	r5, r1
 80060c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ca:	e9cd 2300 	strd	r2, r3, [sp]
 80060ce:	4632      	mov	r2, r6
 80060d0:	463b      	mov	r3, r7
 80060d2:	f7fa f849 	bl	8000168 <__aeabi_dsub>
 80060d6:	4652      	mov	r2, sl
 80060d8:	465b      	mov	r3, fp
 80060da:	f7fa f9fd 	bl	80004d8 <__aeabi_dmul>
 80060de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060e2:	4680      	mov	r8, r0
 80060e4:	4689      	mov	r9, r1
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa f9f5 	bl	80004d8 <__aeabi_dmul>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa f839 	bl	800016c <__adddf3>
 80060fa:	4632      	mov	r2, r6
 80060fc:	463b      	mov	r3, r7
 80060fe:	4680      	mov	r8, r0
 8006100:	4689      	mov	r9, r1
 8006102:	4650      	mov	r0, sl
 8006104:	4659      	mov	r1, fp
 8006106:	f7fa f9e7 	bl	80004d8 <__aeabi_dmul>
 800610a:	4604      	mov	r4, r0
 800610c:	460d      	mov	r5, r1
 800610e:	460b      	mov	r3, r1
 8006110:	4602      	mov	r2, r0
 8006112:	4649      	mov	r1, r9
 8006114:	4640      	mov	r0, r8
 8006116:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800611a:	f7fa f827 	bl	800016c <__adddf3>
 800611e:	4b18      	ldr	r3, [pc, #96]	; (8006180 <__ieee754_pow+0x3e0>)
 8006120:	4682      	mov	sl, r0
 8006122:	4299      	cmp	r1, r3
 8006124:	460f      	mov	r7, r1
 8006126:	460e      	mov	r6, r1
 8006128:	f340 82e5 	ble.w	80066f6 <__ieee754_pow+0x956>
 800612c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006130:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006134:	4303      	orrs	r3, r0
 8006136:	f000 81df 	beq.w	80064f8 <__ieee754_pow+0x758>
 800613a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800613e:	2200      	movs	r2, #0
 8006140:	2300      	movs	r3, #0
 8006142:	f7fa fc3b 	bl	80009bc <__aeabi_dcmplt>
 8006146:	3800      	subs	r0, #0
 8006148:	bf18      	it	ne
 800614a:	2001      	movne	r0, #1
 800614c:	e72e      	b.n	8005fac <__ieee754_pow+0x20c>
 800614e:	bf00      	nop
 8006150:	60000000 	.word	0x60000000
 8006154:	3ff71547 	.word	0x3ff71547
 8006158:	f85ddf44 	.word	0xf85ddf44
 800615c:	3e54ae0b 	.word	0x3e54ae0b
 8006160:	55555555 	.word	0x55555555
 8006164:	3fd55555 	.word	0x3fd55555
 8006168:	652b82fe 	.word	0x652b82fe
 800616c:	3ff71547 	.word	0x3ff71547
 8006170:	3ff00000 	.word	0x3ff00000
 8006174:	3fd00000 	.word	0x3fd00000
 8006178:	3fe00000 	.word	0x3fe00000
 800617c:	bff00000 	.word	0xbff00000
 8006180:	408fffff 	.word	0x408fffff
 8006184:	4bd2      	ldr	r3, [pc, #840]	; (80064d0 <__ieee754_pow+0x730>)
 8006186:	2200      	movs	r2, #0
 8006188:	402b      	ands	r3, r5
 800618a:	b943      	cbnz	r3, 800619e <__ieee754_pow+0x3fe>
 800618c:	4658      	mov	r0, fp
 800618e:	4661      	mov	r1, ip
 8006190:	4bd0      	ldr	r3, [pc, #832]	; (80064d4 <__ieee754_pow+0x734>)
 8006192:	f7fa f9a1 	bl	80004d8 <__aeabi_dmul>
 8006196:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800619a:	4683      	mov	fp, r0
 800619c:	460c      	mov	r4, r1
 800619e:	1523      	asrs	r3, r4, #20
 80061a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80061a4:	4413      	add	r3, r2
 80061a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a8:	4bcb      	ldr	r3, [pc, #812]	; (80064d8 <__ieee754_pow+0x738>)
 80061aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80061ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80061b2:	429c      	cmp	r4, r3
 80061b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80061b8:	dd08      	ble.n	80061cc <__ieee754_pow+0x42c>
 80061ba:	4bc8      	ldr	r3, [pc, #800]	; (80064dc <__ieee754_pow+0x73c>)
 80061bc:	429c      	cmp	r4, r3
 80061be:	f340 8199 	ble.w	80064f4 <__ieee754_pow+0x754>
 80061c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061c4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80061c8:	3301      	adds	r3, #1
 80061ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80061cc:	2600      	movs	r6, #0
 80061ce:	00f3      	lsls	r3, r6, #3
 80061d0:	930d      	str	r3, [sp, #52]	; 0x34
 80061d2:	4bc3      	ldr	r3, [pc, #780]	; (80064e0 <__ieee754_pow+0x740>)
 80061d4:	4658      	mov	r0, fp
 80061d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061de:	4629      	mov	r1, r5
 80061e0:	461a      	mov	r2, r3
 80061e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80061e6:	4623      	mov	r3, r4
 80061e8:	f7f9 ffbe 	bl	8000168 <__aeabi_dsub>
 80061ec:	46da      	mov	sl, fp
 80061ee:	462b      	mov	r3, r5
 80061f0:	4652      	mov	r2, sl
 80061f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80061f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061fa:	f7f9 ffb7 	bl	800016c <__adddf3>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	2000      	movs	r0, #0
 8006204:	49b7      	ldr	r1, [pc, #732]	; (80064e4 <__ieee754_pow+0x744>)
 8006206:	f7fa fa91 	bl	800072c <__aeabi_ddiv>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006212:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006216:	f7fa f95f 	bl	80004d8 <__aeabi_dmul>
 800621a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800621e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006222:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006226:	2300      	movs	r3, #0
 8006228:	2200      	movs	r2, #0
 800622a:	46ab      	mov	fp, r5
 800622c:	106d      	asrs	r5, r5, #1
 800622e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006232:	9304      	str	r3, [sp, #16]
 8006234:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006238:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800623c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006240:	4640      	mov	r0, r8
 8006242:	4649      	mov	r1, r9
 8006244:	4614      	mov	r4, r2
 8006246:	461d      	mov	r5, r3
 8006248:	f7fa f946 	bl	80004d8 <__aeabi_dmul>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006254:	f7f9 ff88 	bl	8000168 <__aeabi_dsub>
 8006258:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800625c:	4606      	mov	r6, r0
 800625e:	460f      	mov	r7, r1
 8006260:	4620      	mov	r0, r4
 8006262:	4629      	mov	r1, r5
 8006264:	f7f9 ff80 	bl	8000168 <__aeabi_dsub>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4650      	mov	r0, sl
 800626e:	4659      	mov	r1, fp
 8006270:	f7f9 ff7a 	bl	8000168 <__aeabi_dsub>
 8006274:	4642      	mov	r2, r8
 8006276:	464b      	mov	r3, r9
 8006278:	f7fa f92e 	bl	80004d8 <__aeabi_dmul>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4630      	mov	r0, r6
 8006282:	4639      	mov	r1, r7
 8006284:	f7f9 ff70 	bl	8000168 <__aeabi_dsub>
 8006288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800628c:	f7fa f924 	bl	80004d8 <__aeabi_dmul>
 8006290:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006294:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	f7fa f91c 	bl	80004d8 <__aeabi_dmul>
 80062a0:	a379      	add	r3, pc, #484	; (adr r3, 8006488 <__ieee754_pow+0x6e8>)
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	4604      	mov	r4, r0
 80062a8:	460d      	mov	r5, r1
 80062aa:	f7fa f915 	bl	80004d8 <__aeabi_dmul>
 80062ae:	a378      	add	r3, pc, #480	; (adr r3, 8006490 <__ieee754_pow+0x6f0>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f7f9 ff5a 	bl	800016c <__adddf3>
 80062b8:	4622      	mov	r2, r4
 80062ba:	462b      	mov	r3, r5
 80062bc:	f7fa f90c 	bl	80004d8 <__aeabi_dmul>
 80062c0:	a375      	add	r3, pc, #468	; (adr r3, 8006498 <__ieee754_pow+0x6f8>)
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f7f9 ff51 	bl	800016c <__adddf3>
 80062ca:	4622      	mov	r2, r4
 80062cc:	462b      	mov	r3, r5
 80062ce:	f7fa f903 	bl	80004d8 <__aeabi_dmul>
 80062d2:	a373      	add	r3, pc, #460	; (adr r3, 80064a0 <__ieee754_pow+0x700>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f7f9 ff48 	bl	800016c <__adddf3>
 80062dc:	4622      	mov	r2, r4
 80062de:	462b      	mov	r3, r5
 80062e0:	f7fa f8fa 	bl	80004d8 <__aeabi_dmul>
 80062e4:	a370      	add	r3, pc, #448	; (adr r3, 80064a8 <__ieee754_pow+0x708>)
 80062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ea:	f7f9 ff3f 	bl	800016c <__adddf3>
 80062ee:	4622      	mov	r2, r4
 80062f0:	462b      	mov	r3, r5
 80062f2:	f7fa f8f1 	bl	80004d8 <__aeabi_dmul>
 80062f6:	a36e      	add	r3, pc, #440	; (adr r3, 80064b0 <__ieee754_pow+0x710>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7f9 ff36 	bl	800016c <__adddf3>
 8006300:	4622      	mov	r2, r4
 8006302:	4606      	mov	r6, r0
 8006304:	460f      	mov	r7, r1
 8006306:	462b      	mov	r3, r5
 8006308:	4620      	mov	r0, r4
 800630a:	4629      	mov	r1, r5
 800630c:	f7fa f8e4 	bl	80004d8 <__aeabi_dmul>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4630      	mov	r0, r6
 8006316:	4639      	mov	r1, r7
 8006318:	f7fa f8de 	bl	80004d8 <__aeabi_dmul>
 800631c:	4604      	mov	r4, r0
 800631e:	460d      	mov	r5, r1
 8006320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	f7f9 ff20 	bl	800016c <__adddf3>
 800632c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006330:	f7fa f8d2 	bl	80004d8 <__aeabi_dmul>
 8006334:	4622      	mov	r2, r4
 8006336:	462b      	mov	r3, r5
 8006338:	f7f9 ff18 	bl	800016c <__adddf3>
 800633c:	4642      	mov	r2, r8
 800633e:	4606      	mov	r6, r0
 8006340:	460f      	mov	r7, r1
 8006342:	464b      	mov	r3, r9
 8006344:	4640      	mov	r0, r8
 8006346:	4649      	mov	r1, r9
 8006348:	f7fa f8c6 	bl	80004d8 <__aeabi_dmul>
 800634c:	2200      	movs	r2, #0
 800634e:	4b66      	ldr	r3, [pc, #408]	; (80064e8 <__ieee754_pow+0x748>)
 8006350:	4682      	mov	sl, r0
 8006352:	468b      	mov	fp, r1
 8006354:	f7f9 ff0a 	bl	800016c <__adddf3>
 8006358:	4632      	mov	r2, r6
 800635a:	463b      	mov	r3, r7
 800635c:	f7f9 ff06 	bl	800016c <__adddf3>
 8006360:	2400      	movs	r4, #0
 8006362:	460d      	mov	r5, r1
 8006364:	4622      	mov	r2, r4
 8006366:	460b      	mov	r3, r1
 8006368:	4640      	mov	r0, r8
 800636a:	4649      	mov	r1, r9
 800636c:	f7fa f8b4 	bl	80004d8 <__aeabi_dmul>
 8006370:	2200      	movs	r2, #0
 8006372:	4680      	mov	r8, r0
 8006374:	4689      	mov	r9, r1
 8006376:	4620      	mov	r0, r4
 8006378:	4629      	mov	r1, r5
 800637a:	4b5b      	ldr	r3, [pc, #364]	; (80064e8 <__ieee754_pow+0x748>)
 800637c:	f7f9 fef4 	bl	8000168 <__aeabi_dsub>
 8006380:	4652      	mov	r2, sl
 8006382:	465b      	mov	r3, fp
 8006384:	f7f9 fef0 	bl	8000168 <__aeabi_dsub>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4630      	mov	r0, r6
 800638e:	4639      	mov	r1, r7
 8006390:	f7f9 feea 	bl	8000168 <__aeabi_dsub>
 8006394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006398:	f7fa f89e 	bl	80004d8 <__aeabi_dmul>
 800639c:	4622      	mov	r2, r4
 800639e:	4606      	mov	r6, r0
 80063a0:	460f      	mov	r7, r1
 80063a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80063a6:	462b      	mov	r3, r5
 80063a8:	f7fa f896 	bl	80004d8 <__aeabi_dmul>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4630      	mov	r0, r6
 80063b2:	4639      	mov	r1, r7
 80063b4:	f7f9 feda 	bl	800016c <__adddf3>
 80063b8:	2400      	movs	r4, #0
 80063ba:	4606      	mov	r6, r0
 80063bc:	460f      	mov	r7, r1
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7f9 fed1 	bl	800016c <__adddf3>
 80063ca:	a33b      	add	r3, pc, #236	; (adr r3, 80064b8 <__ieee754_pow+0x718>)
 80063cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d0:	4620      	mov	r0, r4
 80063d2:	460d      	mov	r5, r1
 80063d4:	f7fa f880 	bl	80004d8 <__aeabi_dmul>
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063e0:	4620      	mov	r0, r4
 80063e2:	4629      	mov	r1, r5
 80063e4:	f7f9 fec0 	bl	8000168 <__aeabi_dsub>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4630      	mov	r0, r6
 80063ee:	4639      	mov	r1, r7
 80063f0:	f7f9 feba 	bl	8000168 <__aeabi_dsub>
 80063f4:	a332      	add	r3, pc, #200	; (adr r3, 80064c0 <__ieee754_pow+0x720>)
 80063f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fa:	f7fa f86d 	bl	80004d8 <__aeabi_dmul>
 80063fe:	a332      	add	r3, pc, #200	; (adr r3, 80064c8 <__ieee754_pow+0x728>)
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	4606      	mov	r6, r0
 8006406:	460f      	mov	r7, r1
 8006408:	4620      	mov	r0, r4
 800640a:	4629      	mov	r1, r5
 800640c:	f7fa f864 	bl	80004d8 <__aeabi_dmul>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7f9 fea8 	bl	800016c <__adddf3>
 800641c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800641e:	4b33      	ldr	r3, [pc, #204]	; (80064ec <__ieee754_pow+0x74c>)
 8006420:	f04f 0a00 	mov.w	sl, #0
 8006424:	4413      	add	r3, r2
 8006426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642a:	f7f9 fe9f 	bl	800016c <__adddf3>
 800642e:	4680      	mov	r8, r0
 8006430:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006432:	4689      	mov	r9, r1
 8006434:	f7f9 ffe6 	bl	8000404 <__aeabi_i2d>
 8006438:	4604      	mov	r4, r0
 800643a:	460d      	mov	r5, r1
 800643c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800643e:	4b2c      	ldr	r3, [pc, #176]	; (80064f0 <__ieee754_pow+0x750>)
 8006440:	4413      	add	r3, r2
 8006442:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006446:	4642      	mov	r2, r8
 8006448:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800644c:	464b      	mov	r3, r9
 800644e:	f7f9 fe8d 	bl	800016c <__adddf3>
 8006452:	4632      	mov	r2, r6
 8006454:	463b      	mov	r3, r7
 8006456:	f7f9 fe89 	bl	800016c <__adddf3>
 800645a:	4622      	mov	r2, r4
 800645c:	462b      	mov	r3, r5
 800645e:	f7f9 fe85 	bl	800016c <__adddf3>
 8006462:	4622      	mov	r2, r4
 8006464:	462b      	mov	r3, r5
 8006466:	4650      	mov	r0, sl
 8006468:	468b      	mov	fp, r1
 800646a:	f7f9 fe7d 	bl	8000168 <__aeabi_dsub>
 800646e:	4632      	mov	r2, r6
 8006470:	463b      	mov	r3, r7
 8006472:	f7f9 fe79 	bl	8000168 <__aeabi_dsub>
 8006476:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800647a:	f7f9 fe75 	bl	8000168 <__aeabi_dsub>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4640      	mov	r0, r8
 8006484:	4649      	mov	r1, r9
 8006486:	e60d      	b.n	80060a4 <__ieee754_pow+0x304>
 8006488:	4a454eef 	.word	0x4a454eef
 800648c:	3fca7e28 	.word	0x3fca7e28
 8006490:	93c9db65 	.word	0x93c9db65
 8006494:	3fcd864a 	.word	0x3fcd864a
 8006498:	a91d4101 	.word	0xa91d4101
 800649c:	3fd17460 	.word	0x3fd17460
 80064a0:	518f264d 	.word	0x518f264d
 80064a4:	3fd55555 	.word	0x3fd55555
 80064a8:	db6fabff 	.word	0xdb6fabff
 80064ac:	3fdb6db6 	.word	0x3fdb6db6
 80064b0:	33333303 	.word	0x33333303
 80064b4:	3fe33333 	.word	0x3fe33333
 80064b8:	e0000000 	.word	0xe0000000
 80064bc:	3feec709 	.word	0x3feec709
 80064c0:	dc3a03fd 	.word	0xdc3a03fd
 80064c4:	3feec709 	.word	0x3feec709
 80064c8:	145b01f5 	.word	0x145b01f5
 80064cc:	be3e2fe0 	.word	0xbe3e2fe0
 80064d0:	7ff00000 	.word	0x7ff00000
 80064d4:	43400000 	.word	0x43400000
 80064d8:	0003988e 	.word	0x0003988e
 80064dc:	000bb679 	.word	0x000bb679
 80064e0:	08009cf8 	.word	0x08009cf8
 80064e4:	3ff00000 	.word	0x3ff00000
 80064e8:	40080000 	.word	0x40080000
 80064ec:	08009d18 	.word	0x08009d18
 80064f0:	08009d08 	.word	0x08009d08
 80064f4:	2601      	movs	r6, #1
 80064f6:	e66a      	b.n	80061ce <__ieee754_pow+0x42e>
 80064f8:	a39d      	add	r3, pc, #628	; (adr r3, 8006770 <__ieee754_pow+0x9d0>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	4640      	mov	r0, r8
 8006500:	4649      	mov	r1, r9
 8006502:	f7f9 fe33 	bl	800016c <__adddf3>
 8006506:	4622      	mov	r2, r4
 8006508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800650c:	462b      	mov	r3, r5
 800650e:	4650      	mov	r0, sl
 8006510:	4639      	mov	r1, r7
 8006512:	f7f9 fe29 	bl	8000168 <__aeabi_dsub>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800651e:	f7fa fa6b 	bl	80009f8 <__aeabi_dcmpgt>
 8006522:	2800      	cmp	r0, #0
 8006524:	f47f ae09 	bne.w	800613a <__ieee754_pow+0x39a>
 8006528:	4aa3      	ldr	r2, [pc, #652]	; (80067b8 <__ieee754_pow+0xa18>)
 800652a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800652e:	4293      	cmp	r3, r2
 8006530:	f340 8101 	ble.w	8006736 <__ieee754_pow+0x996>
 8006534:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006538:	2000      	movs	r0, #0
 800653a:	151b      	asrs	r3, r3, #20
 800653c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006540:	fa4a f303 	asr.w	r3, sl, r3
 8006544:	4433      	add	r3, r6
 8006546:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800654a:	4f9c      	ldr	r7, [pc, #624]	; (80067bc <__ieee754_pow+0xa1c>)
 800654c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006550:	4117      	asrs	r7, r2
 8006552:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006556:	ea23 0107 	bic.w	r1, r3, r7
 800655a:	f1c2 0214 	rsb	r2, r2, #20
 800655e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006562:	460b      	mov	r3, r1
 8006564:	fa4a fa02 	asr.w	sl, sl, r2
 8006568:	2e00      	cmp	r6, #0
 800656a:	4602      	mov	r2, r0
 800656c:	4629      	mov	r1, r5
 800656e:	4620      	mov	r0, r4
 8006570:	bfb8      	it	lt
 8006572:	f1ca 0a00 	rsblt	sl, sl, #0
 8006576:	f7f9 fdf7 	bl	8000168 <__aeabi_dsub>
 800657a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800657e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006582:	2400      	movs	r4, #0
 8006584:	4642      	mov	r2, r8
 8006586:	464b      	mov	r3, r9
 8006588:	f7f9 fdf0 	bl	800016c <__adddf3>
 800658c:	a37a      	add	r3, pc, #488	; (adr r3, 8006778 <__ieee754_pow+0x9d8>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	4620      	mov	r0, r4
 8006594:	460d      	mov	r5, r1
 8006596:	f7f9 ff9f 	bl	80004d8 <__aeabi_dmul>
 800659a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800659e:	4606      	mov	r6, r0
 80065a0:	460f      	mov	r7, r1
 80065a2:	4620      	mov	r0, r4
 80065a4:	4629      	mov	r1, r5
 80065a6:	f7f9 fddf 	bl	8000168 <__aeabi_dsub>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4640      	mov	r0, r8
 80065b0:	4649      	mov	r1, r9
 80065b2:	f7f9 fdd9 	bl	8000168 <__aeabi_dsub>
 80065b6:	a372      	add	r3, pc, #456	; (adr r3, 8006780 <__ieee754_pow+0x9e0>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f7f9 ff8c 	bl	80004d8 <__aeabi_dmul>
 80065c0:	a371      	add	r3, pc, #452	; (adr r3, 8006788 <__ieee754_pow+0x9e8>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	4680      	mov	r8, r0
 80065c8:	4689      	mov	r9, r1
 80065ca:	4620      	mov	r0, r4
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7f9 ff83 	bl	80004d8 <__aeabi_dmul>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4640      	mov	r0, r8
 80065d8:	4649      	mov	r1, r9
 80065da:	f7f9 fdc7 	bl	800016c <__adddf3>
 80065de:	4604      	mov	r4, r0
 80065e0:	460d      	mov	r5, r1
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4630      	mov	r0, r6
 80065e8:	4639      	mov	r1, r7
 80065ea:	f7f9 fdbf 	bl	800016c <__adddf3>
 80065ee:	4632      	mov	r2, r6
 80065f0:	463b      	mov	r3, r7
 80065f2:	4680      	mov	r8, r0
 80065f4:	4689      	mov	r9, r1
 80065f6:	f7f9 fdb7 	bl	8000168 <__aeabi_dsub>
 80065fa:	4602      	mov	r2, r0
 80065fc:	460b      	mov	r3, r1
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	f7f9 fdb1 	bl	8000168 <__aeabi_dsub>
 8006606:	4642      	mov	r2, r8
 8006608:	4606      	mov	r6, r0
 800660a:	460f      	mov	r7, r1
 800660c:	464b      	mov	r3, r9
 800660e:	4640      	mov	r0, r8
 8006610:	4649      	mov	r1, r9
 8006612:	f7f9 ff61 	bl	80004d8 <__aeabi_dmul>
 8006616:	a35e      	add	r3, pc, #376	; (adr r3, 8006790 <__ieee754_pow+0x9f0>)
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	4604      	mov	r4, r0
 800661e:	460d      	mov	r5, r1
 8006620:	f7f9 ff5a 	bl	80004d8 <__aeabi_dmul>
 8006624:	a35c      	add	r3, pc, #368	; (adr r3, 8006798 <__ieee754_pow+0x9f8>)
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f7f9 fd9d 	bl	8000168 <__aeabi_dsub>
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	f7f9 ff51 	bl	80004d8 <__aeabi_dmul>
 8006636:	a35a      	add	r3, pc, #360	; (adr r3, 80067a0 <__ieee754_pow+0xa00>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	f7f9 fd96 	bl	800016c <__adddf3>
 8006640:	4622      	mov	r2, r4
 8006642:	462b      	mov	r3, r5
 8006644:	f7f9 ff48 	bl	80004d8 <__aeabi_dmul>
 8006648:	a357      	add	r3, pc, #348	; (adr r3, 80067a8 <__ieee754_pow+0xa08>)
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f7f9 fd8b 	bl	8000168 <__aeabi_dsub>
 8006652:	4622      	mov	r2, r4
 8006654:	462b      	mov	r3, r5
 8006656:	f7f9 ff3f 	bl	80004d8 <__aeabi_dmul>
 800665a:	a355      	add	r3, pc, #340	; (adr r3, 80067b0 <__ieee754_pow+0xa10>)
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	f7f9 fd84 	bl	800016c <__adddf3>
 8006664:	4622      	mov	r2, r4
 8006666:	462b      	mov	r3, r5
 8006668:	f7f9 ff36 	bl	80004d8 <__aeabi_dmul>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4640      	mov	r0, r8
 8006672:	4649      	mov	r1, r9
 8006674:	f7f9 fd78 	bl	8000168 <__aeabi_dsub>
 8006678:	4604      	mov	r4, r0
 800667a:	460d      	mov	r5, r1
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4640      	mov	r0, r8
 8006682:	4649      	mov	r1, r9
 8006684:	f7f9 ff28 	bl	80004d8 <__aeabi_dmul>
 8006688:	2200      	movs	r2, #0
 800668a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800668e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006692:	4620      	mov	r0, r4
 8006694:	4629      	mov	r1, r5
 8006696:	f7f9 fd67 	bl	8000168 <__aeabi_dsub>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a2:	f7fa f843 	bl	800072c <__aeabi_ddiv>
 80066a6:	4632      	mov	r2, r6
 80066a8:	4604      	mov	r4, r0
 80066aa:	460d      	mov	r5, r1
 80066ac:	463b      	mov	r3, r7
 80066ae:	4640      	mov	r0, r8
 80066b0:	4649      	mov	r1, r9
 80066b2:	f7f9 ff11 	bl	80004d8 <__aeabi_dmul>
 80066b6:	4632      	mov	r2, r6
 80066b8:	463b      	mov	r3, r7
 80066ba:	f7f9 fd57 	bl	800016c <__adddf3>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	4620      	mov	r0, r4
 80066c4:	4629      	mov	r1, r5
 80066c6:	f7f9 fd4f 	bl	8000168 <__aeabi_dsub>
 80066ca:	4642      	mov	r2, r8
 80066cc:	464b      	mov	r3, r9
 80066ce:	f7f9 fd4b 	bl	8000168 <__aeabi_dsub>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	2000      	movs	r0, #0
 80066d8:	4939      	ldr	r1, [pc, #228]	; (80067c0 <__ieee754_pow+0xa20>)
 80066da:	f7f9 fd45 	bl	8000168 <__aeabi_dsub>
 80066de:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80066e2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80066e6:	da29      	bge.n	800673c <__ieee754_pow+0x99c>
 80066e8:	4652      	mov	r2, sl
 80066ea:	f000 fb71 	bl	8006dd0 <scalbn>
 80066ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066f2:	f7ff bbfe 	b.w	8005ef2 <__ieee754_pow+0x152>
 80066f6:	4b33      	ldr	r3, [pc, #204]	; (80067c4 <__ieee754_pow+0xa24>)
 80066f8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80066fc:	429f      	cmp	r7, r3
 80066fe:	f77f af13 	ble.w	8006528 <__ieee754_pow+0x788>
 8006702:	4b31      	ldr	r3, [pc, #196]	; (80067c8 <__ieee754_pow+0xa28>)
 8006704:	440b      	add	r3, r1
 8006706:	4303      	orrs	r3, r0
 8006708:	d009      	beq.n	800671e <__ieee754_pow+0x97e>
 800670a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800670e:	2200      	movs	r2, #0
 8006710:	2300      	movs	r3, #0
 8006712:	f7fa f953 	bl	80009bc <__aeabi_dcmplt>
 8006716:	3800      	subs	r0, #0
 8006718:	bf18      	it	ne
 800671a:	2001      	movne	r0, #1
 800671c:	e453      	b.n	8005fc6 <__ieee754_pow+0x226>
 800671e:	4622      	mov	r2, r4
 8006720:	462b      	mov	r3, r5
 8006722:	f7f9 fd21 	bl	8000168 <__aeabi_dsub>
 8006726:	4642      	mov	r2, r8
 8006728:	464b      	mov	r3, r9
 800672a:	f7fa f95b 	bl	80009e4 <__aeabi_dcmpge>
 800672e:	2800      	cmp	r0, #0
 8006730:	f43f aefa 	beq.w	8006528 <__ieee754_pow+0x788>
 8006734:	e7e9      	b.n	800670a <__ieee754_pow+0x96a>
 8006736:	f04f 0a00 	mov.w	sl, #0
 800673a:	e720      	b.n	800657e <__ieee754_pow+0x7de>
 800673c:	4621      	mov	r1, r4
 800673e:	e7d6      	b.n	80066ee <__ieee754_pow+0x94e>
 8006740:	f04f 0b00 	mov.w	fp, #0
 8006744:	f8df c078 	ldr.w	ip, [pc, #120]	; 80067c0 <__ieee754_pow+0xa20>
 8006748:	f7ff bbba 	b.w	8005ec0 <__ieee754_pow+0x120>
 800674c:	f04f 0b00 	mov.w	fp, #0
 8006750:	f04f 0c00 	mov.w	ip, #0
 8006754:	f7ff bbb4 	b.w	8005ec0 <__ieee754_pow+0x120>
 8006758:	4640      	mov	r0, r8
 800675a:	4649      	mov	r1, r9
 800675c:	f7ff bb3d 	b.w	8005dda <__ieee754_pow+0x3a>
 8006760:	9200      	str	r2, [sp, #0]
 8006762:	f7ff bb89 	b.w	8005e78 <__ieee754_pow+0xd8>
 8006766:	2300      	movs	r3, #0
 8006768:	f7ff bb73 	b.w	8005e52 <__ieee754_pow+0xb2>
 800676c:	f3af 8000 	nop.w
 8006770:	652b82fe 	.word	0x652b82fe
 8006774:	3c971547 	.word	0x3c971547
 8006778:	00000000 	.word	0x00000000
 800677c:	3fe62e43 	.word	0x3fe62e43
 8006780:	fefa39ef 	.word	0xfefa39ef
 8006784:	3fe62e42 	.word	0x3fe62e42
 8006788:	0ca86c39 	.word	0x0ca86c39
 800678c:	be205c61 	.word	0xbe205c61
 8006790:	72bea4d0 	.word	0x72bea4d0
 8006794:	3e663769 	.word	0x3e663769
 8006798:	c5d26bf1 	.word	0xc5d26bf1
 800679c:	3ebbbd41 	.word	0x3ebbbd41
 80067a0:	af25de2c 	.word	0xaf25de2c
 80067a4:	3f11566a 	.word	0x3f11566a
 80067a8:	16bebd93 	.word	0x16bebd93
 80067ac:	3f66c16c 	.word	0x3f66c16c
 80067b0:	5555553e 	.word	0x5555553e
 80067b4:	3fc55555 	.word	0x3fc55555
 80067b8:	3fe00000 	.word	0x3fe00000
 80067bc:	000fffff 	.word	0x000fffff
 80067c0:	3ff00000 	.word	0x3ff00000
 80067c4:	4090cbff 	.word	0x4090cbff
 80067c8:	3f6f3400 	.word	0x3f6f3400

080067cc <__ieee754_sqrt>:
 80067cc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8006928 <__ieee754_sqrt+0x15c>
 80067d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d4:	ea3c 0c01 	bics.w	ip, ip, r1
 80067d8:	4606      	mov	r6, r0
 80067da:	460d      	mov	r5, r1
 80067dc:	460c      	mov	r4, r1
 80067de:	460a      	mov	r2, r1
 80067e0:	4607      	mov	r7, r0
 80067e2:	4603      	mov	r3, r0
 80067e4:	d10f      	bne.n	8006806 <__ieee754_sqrt+0x3a>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	f7f9 fe75 	bl	80004d8 <__aeabi_dmul>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4630      	mov	r0, r6
 80067f4:	4629      	mov	r1, r5
 80067f6:	f7f9 fcb9 	bl	800016c <__adddf3>
 80067fa:	4606      	mov	r6, r0
 80067fc:	460d      	mov	r5, r1
 80067fe:	4630      	mov	r0, r6
 8006800:	4629      	mov	r1, r5
 8006802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006806:	2900      	cmp	r1, #0
 8006808:	dc0e      	bgt.n	8006828 <__ieee754_sqrt+0x5c>
 800680a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800680e:	ea5c 0707 	orrs.w	r7, ip, r7
 8006812:	d0f4      	beq.n	80067fe <__ieee754_sqrt+0x32>
 8006814:	b141      	cbz	r1, 8006828 <__ieee754_sqrt+0x5c>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	f7f9 fca5 	bl	8000168 <__aeabi_dsub>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	f7f9 ff83 	bl	800072c <__aeabi_ddiv>
 8006826:	e7e8      	b.n	80067fa <__ieee754_sqrt+0x2e>
 8006828:	1521      	asrs	r1, r4, #20
 800682a:	d075      	beq.n	8006918 <__ieee754_sqrt+0x14c>
 800682c:	07cc      	lsls	r4, r1, #31
 800682e:	f04f 0400 	mov.w	r4, #0
 8006832:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006836:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800683a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800683e:	bf5e      	ittt	pl
 8006840:	0fd9      	lsrpl	r1, r3, #31
 8006842:	005b      	lslpl	r3, r3, #1
 8006844:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006848:	0fd9      	lsrs	r1, r3, #31
 800684a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800684e:	2516      	movs	r5, #22
 8006850:	4620      	mov	r0, r4
 8006852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006856:	107f      	asrs	r7, r7, #1
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	1846      	adds	r6, r0, r1
 800685c:	4296      	cmp	r6, r2
 800685e:	bfde      	ittt	le
 8006860:	1b92      	suble	r2, r2, r6
 8006862:	1870      	addle	r0, r6, r1
 8006864:	1864      	addle	r4, r4, r1
 8006866:	0052      	lsls	r2, r2, #1
 8006868:	3d01      	subs	r5, #1
 800686a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800686e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006872:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006876:	d1f0      	bne.n	800685a <__ieee754_sqrt+0x8e>
 8006878:	4629      	mov	r1, r5
 800687a:	f04f 0e20 	mov.w	lr, #32
 800687e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006882:	4282      	cmp	r2, r0
 8006884:	eb06 0c05 	add.w	ip, r6, r5
 8006888:	dc02      	bgt.n	8006890 <__ieee754_sqrt+0xc4>
 800688a:	d113      	bne.n	80068b4 <__ieee754_sqrt+0xe8>
 800688c:	459c      	cmp	ip, r3
 800688e:	d811      	bhi.n	80068b4 <__ieee754_sqrt+0xe8>
 8006890:	f1bc 0f00 	cmp.w	ip, #0
 8006894:	eb0c 0506 	add.w	r5, ip, r6
 8006898:	da43      	bge.n	8006922 <__ieee754_sqrt+0x156>
 800689a:	2d00      	cmp	r5, #0
 800689c:	db41      	blt.n	8006922 <__ieee754_sqrt+0x156>
 800689e:	f100 0801 	add.w	r8, r0, #1
 80068a2:	1a12      	subs	r2, r2, r0
 80068a4:	4640      	mov	r0, r8
 80068a6:	459c      	cmp	ip, r3
 80068a8:	bf88      	it	hi
 80068aa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80068ae:	eba3 030c 	sub.w	r3, r3, ip
 80068b2:	4431      	add	r1, r6
 80068b4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80068b8:	f1be 0e01 	subs.w	lr, lr, #1
 80068bc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80068c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068c4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80068c8:	d1db      	bne.n	8006882 <__ieee754_sqrt+0xb6>
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d006      	beq.n	80068dc <__ieee754_sqrt+0x110>
 80068ce:	1c48      	adds	r0, r1, #1
 80068d0:	bf0b      	itete	eq
 80068d2:	4671      	moveq	r1, lr
 80068d4:	3101      	addne	r1, #1
 80068d6:	3401      	addeq	r4, #1
 80068d8:	f021 0101 	bicne.w	r1, r1, #1
 80068dc:	1063      	asrs	r3, r4, #1
 80068de:	0849      	lsrs	r1, r1, #1
 80068e0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80068e4:	07e2      	lsls	r2, r4, #31
 80068e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80068ea:	bf48      	it	mi
 80068ec:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80068f0:	460e      	mov	r6, r1
 80068f2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80068f6:	e782      	b.n	80067fe <__ieee754_sqrt+0x32>
 80068f8:	0ada      	lsrs	r2, r3, #11
 80068fa:	3815      	subs	r0, #21
 80068fc:	055b      	lsls	r3, r3, #21
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d0fa      	beq.n	80068f8 <__ieee754_sqrt+0x12c>
 8006902:	02d5      	lsls	r5, r2, #11
 8006904:	d50a      	bpl.n	800691c <__ieee754_sqrt+0x150>
 8006906:	f1c1 0420 	rsb	r4, r1, #32
 800690a:	fa23 f404 	lsr.w	r4, r3, r4
 800690e:	1e4d      	subs	r5, r1, #1
 8006910:	408b      	lsls	r3, r1
 8006912:	4322      	orrs	r2, r4
 8006914:	1b41      	subs	r1, r0, r5
 8006916:	e789      	b.n	800682c <__ieee754_sqrt+0x60>
 8006918:	4608      	mov	r0, r1
 800691a:	e7f0      	b.n	80068fe <__ieee754_sqrt+0x132>
 800691c:	0052      	lsls	r2, r2, #1
 800691e:	3101      	adds	r1, #1
 8006920:	e7ef      	b.n	8006902 <__ieee754_sqrt+0x136>
 8006922:	4680      	mov	r8, r0
 8006924:	e7bd      	b.n	80068a2 <__ieee754_sqrt+0xd6>
 8006926:	bf00      	nop
 8006928:	7ff00000 	.word	0x7ff00000

0800692c <__ieee754_asinf>:
 800692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8006934:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006938:	4604      	mov	r4, r0
 800693a:	4605      	mov	r5, r0
 800693c:	d10c      	bne.n	8006958 <__ieee754_asinf+0x2c>
 800693e:	498d      	ldr	r1, [pc, #564]	; (8006b74 <__ieee754_asinf+0x248>)
 8006940:	f7fa fa00 	bl	8000d44 <__aeabi_fmul>
 8006944:	498c      	ldr	r1, [pc, #560]	; (8006b78 <__ieee754_asinf+0x24c>)
 8006946:	4605      	mov	r5, r0
 8006948:	4620      	mov	r0, r4
 800694a:	f7fa f9fb 	bl	8000d44 <__aeabi_fmul>
 800694e:	4601      	mov	r1, r0
 8006950:	4628      	mov	r0, r5
 8006952:	f7fa f8ef 	bl	8000b34 <__addsf3>
 8006956:	e006      	b.n	8006966 <__ieee754_asinf+0x3a>
 8006958:	dd07      	ble.n	800696a <__ieee754_asinf+0x3e>
 800695a:	4601      	mov	r1, r0
 800695c:	f7fa f8e8 	bl	8000b30 <__aeabi_fsub>
 8006960:	4601      	mov	r1, r0
 8006962:	f7fa faa3 	bl	8000eac <__aeabi_fdiv>
 8006966:	4604      	mov	r4, r0
 8006968:	e00e      	b.n	8006988 <__ieee754_asinf+0x5c>
 800696a:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800696e:	da58      	bge.n	8006a22 <__ieee754_asinf+0xf6>
 8006970:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8006974:	da0b      	bge.n	800698e <__ieee754_asinf+0x62>
 8006976:	4981      	ldr	r1, [pc, #516]	; (8006b7c <__ieee754_asinf+0x250>)
 8006978:	f7fa f8dc 	bl	8000b34 <__addsf3>
 800697c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006980:	f7fa fb9c 	bl	80010bc <__aeabi_fcmpgt>
 8006984:	2800      	cmp	r0, #0
 8006986:	d04c      	beq.n	8006a22 <__ieee754_asinf+0xf6>
 8006988:	4620      	mov	r0, r4
 800698a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800698e:	4601      	mov	r1, r0
 8006990:	f7fa f9d8 	bl	8000d44 <__aeabi_fmul>
 8006994:	4605      	mov	r5, r0
 8006996:	497a      	ldr	r1, [pc, #488]	; (8006b80 <__ieee754_asinf+0x254>)
 8006998:	f7fa f9d4 	bl	8000d44 <__aeabi_fmul>
 800699c:	4979      	ldr	r1, [pc, #484]	; (8006b84 <__ieee754_asinf+0x258>)
 800699e:	f7fa f8c9 	bl	8000b34 <__addsf3>
 80069a2:	4629      	mov	r1, r5
 80069a4:	f7fa f9ce 	bl	8000d44 <__aeabi_fmul>
 80069a8:	4977      	ldr	r1, [pc, #476]	; (8006b88 <__ieee754_asinf+0x25c>)
 80069aa:	f7fa f8c1 	bl	8000b30 <__aeabi_fsub>
 80069ae:	4629      	mov	r1, r5
 80069b0:	f7fa f9c8 	bl	8000d44 <__aeabi_fmul>
 80069b4:	4975      	ldr	r1, [pc, #468]	; (8006b8c <__ieee754_asinf+0x260>)
 80069b6:	f7fa f8bd 	bl	8000b34 <__addsf3>
 80069ba:	4629      	mov	r1, r5
 80069bc:	f7fa f9c2 	bl	8000d44 <__aeabi_fmul>
 80069c0:	4973      	ldr	r1, [pc, #460]	; (8006b90 <__ieee754_asinf+0x264>)
 80069c2:	f7fa f8b5 	bl	8000b30 <__aeabi_fsub>
 80069c6:	4629      	mov	r1, r5
 80069c8:	f7fa f9bc 	bl	8000d44 <__aeabi_fmul>
 80069cc:	4971      	ldr	r1, [pc, #452]	; (8006b94 <__ieee754_asinf+0x268>)
 80069ce:	f7fa f8b1 	bl	8000b34 <__addsf3>
 80069d2:	4629      	mov	r1, r5
 80069d4:	f7fa f9b6 	bl	8000d44 <__aeabi_fmul>
 80069d8:	496f      	ldr	r1, [pc, #444]	; (8006b98 <__ieee754_asinf+0x26c>)
 80069da:	4606      	mov	r6, r0
 80069dc:	4628      	mov	r0, r5
 80069de:	f7fa f9b1 	bl	8000d44 <__aeabi_fmul>
 80069e2:	496e      	ldr	r1, [pc, #440]	; (8006b9c <__ieee754_asinf+0x270>)
 80069e4:	f7fa f8a4 	bl	8000b30 <__aeabi_fsub>
 80069e8:	4629      	mov	r1, r5
 80069ea:	f7fa f9ab 	bl	8000d44 <__aeabi_fmul>
 80069ee:	496c      	ldr	r1, [pc, #432]	; (8006ba0 <__ieee754_asinf+0x274>)
 80069f0:	f7fa f8a0 	bl	8000b34 <__addsf3>
 80069f4:	4629      	mov	r1, r5
 80069f6:	f7fa f9a5 	bl	8000d44 <__aeabi_fmul>
 80069fa:	496a      	ldr	r1, [pc, #424]	; (8006ba4 <__ieee754_asinf+0x278>)
 80069fc:	f7fa f898 	bl	8000b30 <__aeabi_fsub>
 8006a00:	4629      	mov	r1, r5
 8006a02:	f7fa f99f 	bl	8000d44 <__aeabi_fmul>
 8006a06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006a0a:	f7fa f893 	bl	8000b34 <__addsf3>
 8006a0e:	4601      	mov	r1, r0
 8006a10:	4630      	mov	r0, r6
 8006a12:	f7fa fa4b 	bl	8000eac <__aeabi_fdiv>
 8006a16:	4621      	mov	r1, r4
 8006a18:	f7fa f994 	bl	8000d44 <__aeabi_fmul>
 8006a1c:	4601      	mov	r1, r0
 8006a1e:	4620      	mov	r0, r4
 8006a20:	e797      	b.n	8006952 <__ieee754_asinf+0x26>
 8006a22:	4620      	mov	r0, r4
 8006a24:	f000 fb5e 	bl	80070e4 <fabsf>
 8006a28:	4601      	mov	r1, r0
 8006a2a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a2e:	f7fa f87f 	bl	8000b30 <__aeabi_fsub>
 8006a32:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006a36:	f7fa f985 	bl	8000d44 <__aeabi_fmul>
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	4950      	ldr	r1, [pc, #320]	; (8006b80 <__ieee754_asinf+0x254>)
 8006a3e:	f7fa f981 	bl	8000d44 <__aeabi_fmul>
 8006a42:	4950      	ldr	r1, [pc, #320]	; (8006b84 <__ieee754_asinf+0x258>)
 8006a44:	f7fa f876 	bl	8000b34 <__addsf3>
 8006a48:	4631      	mov	r1, r6
 8006a4a:	f7fa f97b 	bl	8000d44 <__aeabi_fmul>
 8006a4e:	494e      	ldr	r1, [pc, #312]	; (8006b88 <__ieee754_asinf+0x25c>)
 8006a50:	f7fa f86e 	bl	8000b30 <__aeabi_fsub>
 8006a54:	4631      	mov	r1, r6
 8006a56:	f7fa f975 	bl	8000d44 <__aeabi_fmul>
 8006a5a:	494c      	ldr	r1, [pc, #304]	; (8006b8c <__ieee754_asinf+0x260>)
 8006a5c:	f7fa f86a 	bl	8000b34 <__addsf3>
 8006a60:	4631      	mov	r1, r6
 8006a62:	f7fa f96f 	bl	8000d44 <__aeabi_fmul>
 8006a66:	494a      	ldr	r1, [pc, #296]	; (8006b90 <__ieee754_asinf+0x264>)
 8006a68:	f7fa f862 	bl	8000b30 <__aeabi_fsub>
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	f7fa f969 	bl	8000d44 <__aeabi_fmul>
 8006a72:	4948      	ldr	r1, [pc, #288]	; (8006b94 <__ieee754_asinf+0x268>)
 8006a74:	f7fa f85e 	bl	8000b34 <__addsf3>
 8006a78:	4631      	mov	r1, r6
 8006a7a:	f7fa f963 	bl	8000d44 <__aeabi_fmul>
 8006a7e:	4946      	ldr	r1, [pc, #280]	; (8006b98 <__ieee754_asinf+0x26c>)
 8006a80:	4681      	mov	r9, r0
 8006a82:	4630      	mov	r0, r6
 8006a84:	f7fa f95e 	bl	8000d44 <__aeabi_fmul>
 8006a88:	4944      	ldr	r1, [pc, #272]	; (8006b9c <__ieee754_asinf+0x270>)
 8006a8a:	f7fa f851 	bl	8000b30 <__aeabi_fsub>
 8006a8e:	4631      	mov	r1, r6
 8006a90:	f7fa f958 	bl	8000d44 <__aeabi_fmul>
 8006a94:	4942      	ldr	r1, [pc, #264]	; (8006ba0 <__ieee754_asinf+0x274>)
 8006a96:	f7fa f84d 	bl	8000b34 <__addsf3>
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	f7fa f952 	bl	8000d44 <__aeabi_fmul>
 8006aa0:	4940      	ldr	r1, [pc, #256]	; (8006ba4 <__ieee754_asinf+0x278>)
 8006aa2:	f7fa f845 	bl	8000b30 <__aeabi_fsub>
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	f7fa f94c 	bl	8000d44 <__aeabi_fmul>
 8006aac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006ab0:	f7fa f840 	bl	8000b34 <__addsf3>
 8006ab4:	4682      	mov	sl, r0
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f000 f902 	bl	8006cc0 <__ieee754_sqrtf>
 8006abc:	4b3a      	ldr	r3, [pc, #232]	; (8006ba8 <__ieee754_asinf+0x27c>)
 8006abe:	4607      	mov	r7, r0
 8006ac0:	4598      	cmp	r8, r3
 8006ac2:	dd1a      	ble.n	8006afa <__ieee754_asinf+0x1ce>
 8006ac4:	4651      	mov	r1, sl
 8006ac6:	4648      	mov	r0, r9
 8006ac8:	f7fa f9f0 	bl	8000eac <__aeabi_fdiv>
 8006acc:	4639      	mov	r1, r7
 8006ace:	f7fa f939 	bl	8000d44 <__aeabi_fmul>
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	f7fa f82e 	bl	8000b34 <__addsf3>
 8006ad8:	4601      	mov	r1, r0
 8006ada:	f7fa f82b 	bl	8000b34 <__addsf3>
 8006ade:	4933      	ldr	r1, [pc, #204]	; (8006bac <__ieee754_asinf+0x280>)
 8006ae0:	f7fa f828 	bl	8000b34 <__addsf3>
 8006ae4:	4601      	mov	r1, r0
 8006ae6:	4823      	ldr	r0, [pc, #140]	; (8006b74 <__ieee754_asinf+0x248>)
 8006ae8:	f7fa f822 	bl	8000b30 <__aeabi_fsub>
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	4604      	mov	r4, r0
 8006af0:	f73f af4a 	bgt.w	8006988 <__ieee754_asinf+0x5c>
 8006af4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006af8:	e735      	b.n	8006966 <__ieee754_asinf+0x3a>
 8006afa:	4601      	mov	r1, r0
 8006afc:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8006b00:	f7fa f818 	bl	8000b34 <__addsf3>
 8006b04:	4651      	mov	r1, sl
 8006b06:	4604      	mov	r4, r0
 8006b08:	4648      	mov	r0, r9
 8006b0a:	f7fa f9cf 	bl	8000eac <__aeabi_fdiv>
 8006b0e:	4601      	mov	r1, r0
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7fa f917 	bl	8000d44 <__aeabi_fmul>
 8006b16:	f028 080f 	bic.w	r8, r8, #15
 8006b1a:	4681      	mov	r9, r0
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	4640      	mov	r0, r8
 8006b20:	f7fa f910 	bl	8000d44 <__aeabi_fmul>
 8006b24:	4601      	mov	r1, r0
 8006b26:	4630      	mov	r0, r6
 8006b28:	f7fa f802 	bl	8000b30 <__aeabi_fsub>
 8006b2c:	4641      	mov	r1, r8
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4638      	mov	r0, r7
 8006b32:	f7f9 ffff 	bl	8000b34 <__addsf3>
 8006b36:	4601      	mov	r1, r0
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f7fa f9b7 	bl	8000eac <__aeabi_fdiv>
 8006b3e:	4601      	mov	r1, r0
 8006b40:	f7f9 fff8 	bl	8000b34 <__addsf3>
 8006b44:	4601      	mov	r1, r0
 8006b46:	480c      	ldr	r0, [pc, #48]	; (8006b78 <__ieee754_asinf+0x24c>)
 8006b48:	f7f9 fff2 	bl	8000b30 <__aeabi_fsub>
 8006b4c:	4601      	mov	r1, r0
 8006b4e:	4648      	mov	r0, r9
 8006b50:	f7f9 ffee 	bl	8000b30 <__aeabi_fsub>
 8006b54:	4641      	mov	r1, r8
 8006b56:	4604      	mov	r4, r0
 8006b58:	4640      	mov	r0, r8
 8006b5a:	f7f9 ffeb 	bl	8000b34 <__addsf3>
 8006b5e:	4601      	mov	r1, r0
 8006b60:	4813      	ldr	r0, [pc, #76]	; (8006bb0 <__ieee754_asinf+0x284>)
 8006b62:	f7f9 ffe5 	bl	8000b30 <__aeabi_fsub>
 8006b66:	4601      	mov	r1, r0
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7f9 ffe1 	bl	8000b30 <__aeabi_fsub>
 8006b6e:	4601      	mov	r1, r0
 8006b70:	480f      	ldr	r0, [pc, #60]	; (8006bb0 <__ieee754_asinf+0x284>)
 8006b72:	e7b9      	b.n	8006ae8 <__ieee754_asinf+0x1bc>
 8006b74:	3fc90fdb 	.word	0x3fc90fdb
 8006b78:	b33bbd2e 	.word	0xb33bbd2e
 8006b7c:	7149f2ca 	.word	0x7149f2ca
 8006b80:	3811ef08 	.word	0x3811ef08
 8006b84:	3a4f7f04 	.word	0x3a4f7f04
 8006b88:	3d241146 	.word	0x3d241146
 8006b8c:	3e4e0aa8 	.word	0x3e4e0aa8
 8006b90:	3ea6b090 	.word	0x3ea6b090
 8006b94:	3e2aaaab 	.word	0x3e2aaaab
 8006b98:	3d9dc62e 	.word	0x3d9dc62e
 8006b9c:	3f303361 	.word	0x3f303361
 8006ba0:	4001572d 	.word	0x4001572d
 8006ba4:	4019d139 	.word	0x4019d139
 8006ba8:	3f799999 	.word	0x3f799999
 8006bac:	333bbd2e 	.word	0x333bbd2e
 8006bb0:	3f490fdb 	.word	0x3f490fdb

08006bb4 <__ieee754_atan2f>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006bba:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	dc05      	bgt.n	8006bce <__ieee754_atan2f+0x1a>
 8006bc2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006bc6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006bca:	4607      	mov	r7, r0
 8006bcc:	dd04      	ble.n	8006bd8 <__ieee754_atan2f+0x24>
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7f9 ffb0 	bl	8000b34 <__addsf3>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	e011      	b.n	8006bfc <__ieee754_atan2f+0x48>
 8006bd8:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8006bdc:	d103      	bne.n	8006be6 <__ieee754_atan2f+0x32>
 8006bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006be2:	f000 b973 	b.w	8006ecc <atanf>
 8006be6:	178c      	asrs	r4, r1, #30
 8006be8:	f004 0402 	and.w	r4, r4, #2
 8006bec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8006bf0:	b932      	cbnz	r2, 8006c00 <__ieee754_atan2f+0x4c>
 8006bf2:	2c02      	cmp	r4, #2
 8006bf4:	d04c      	beq.n	8006c90 <__ieee754_atan2f+0xdc>
 8006bf6:	2c03      	cmp	r4, #3
 8006bf8:	d100      	bne.n	8006bfc <__ieee754_atan2f+0x48>
 8006bfa:	4b29      	ldr	r3, [pc, #164]	; (8006ca0 <__ieee754_atan2f+0xec>)
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c00:	b91e      	cbnz	r6, 8006c0a <__ieee754_atan2f+0x56>
 8006c02:	2f00      	cmp	r7, #0
 8006c04:	da4a      	bge.n	8006c9c <__ieee754_atan2f+0xe8>
 8006c06:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <__ieee754_atan2f+0xf0>)
 8006c08:	e7f8      	b.n	8006bfc <__ieee754_atan2f+0x48>
 8006c0a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006c0e:	d10e      	bne.n	8006c2e <__ieee754_atan2f+0x7a>
 8006c10:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006c14:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c18:	d105      	bne.n	8006c26 <__ieee754_atan2f+0x72>
 8006c1a:	2c02      	cmp	r4, #2
 8006c1c:	d83a      	bhi.n	8006c94 <__ieee754_atan2f+0xe0>
 8006c1e:	4b22      	ldr	r3, [pc, #136]	; (8006ca8 <__ieee754_atan2f+0xf4>)
 8006c20:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006c24:	e7ea      	b.n	8006bfc <__ieee754_atan2f+0x48>
 8006c26:	2c02      	cmp	r4, #2
 8006c28:	d836      	bhi.n	8006c98 <__ieee754_atan2f+0xe4>
 8006c2a:	4b20      	ldr	r3, [pc, #128]	; (8006cac <__ieee754_atan2f+0xf8>)
 8006c2c:	e7f8      	b.n	8006c20 <__ieee754_atan2f+0x6c>
 8006c2e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006c32:	d0e6      	beq.n	8006c02 <__ieee754_atan2f+0x4e>
 8006c34:	1b92      	subs	r2, r2, r6
 8006c36:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8006c3a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8006c3e:	da17      	bge.n	8006c70 <__ieee754_atan2f+0xbc>
 8006c40:	2900      	cmp	r1, #0
 8006c42:	da01      	bge.n	8006c48 <__ieee754_atan2f+0x94>
 8006c44:	303c      	adds	r0, #60	; 0x3c
 8006c46:	db15      	blt.n	8006c74 <__ieee754_atan2f+0xc0>
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fa f92f 	bl	8000eac <__aeabi_fdiv>
 8006c4e:	f000 fa49 	bl	80070e4 <fabsf>
 8006c52:	f000 f93b 	bl	8006ecc <atanf>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2c01      	cmp	r4, #1
 8006c5a:	d00d      	beq.n	8006c78 <__ieee754_atan2f+0xc4>
 8006c5c:	2c02      	cmp	r4, #2
 8006c5e:	d00e      	beq.n	8006c7e <__ieee754_atan2f+0xca>
 8006c60:	2c00      	cmp	r4, #0
 8006c62:	d0cb      	beq.n	8006bfc <__ieee754_atan2f+0x48>
 8006c64:	4912      	ldr	r1, [pc, #72]	; (8006cb0 <__ieee754_atan2f+0xfc>)
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7f9 ff64 	bl	8000b34 <__addsf3>
 8006c6c:	4911      	ldr	r1, [pc, #68]	; (8006cb4 <__ieee754_atan2f+0x100>)
 8006c6e:	e00c      	b.n	8006c8a <__ieee754_atan2f+0xd6>
 8006c70:	4b11      	ldr	r3, [pc, #68]	; (8006cb8 <__ieee754_atan2f+0x104>)
 8006c72:	e7f1      	b.n	8006c58 <__ieee754_atan2f+0xa4>
 8006c74:	2300      	movs	r3, #0
 8006c76:	e7ef      	b.n	8006c58 <__ieee754_atan2f+0xa4>
 8006c78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c7c:	e7be      	b.n	8006bfc <__ieee754_atan2f+0x48>
 8006c7e:	490c      	ldr	r1, [pc, #48]	; (8006cb0 <__ieee754_atan2f+0xfc>)
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7f9 ff57 	bl	8000b34 <__addsf3>
 8006c86:	4601      	mov	r1, r0
 8006c88:	480a      	ldr	r0, [pc, #40]	; (8006cb4 <__ieee754_atan2f+0x100>)
 8006c8a:	f7f9 ff51 	bl	8000b30 <__aeabi_fsub>
 8006c8e:	e7a1      	b.n	8006bd4 <__ieee754_atan2f+0x20>
 8006c90:	4b08      	ldr	r3, [pc, #32]	; (8006cb4 <__ieee754_atan2f+0x100>)
 8006c92:	e7b3      	b.n	8006bfc <__ieee754_atan2f+0x48>
 8006c94:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <__ieee754_atan2f+0x108>)
 8006c96:	e7b1      	b.n	8006bfc <__ieee754_atan2f+0x48>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e7af      	b.n	8006bfc <__ieee754_atan2f+0x48>
 8006c9c:	4b06      	ldr	r3, [pc, #24]	; (8006cb8 <__ieee754_atan2f+0x104>)
 8006c9e:	e7ad      	b.n	8006bfc <__ieee754_atan2f+0x48>
 8006ca0:	c0490fdb 	.word	0xc0490fdb
 8006ca4:	bfc90fdb 	.word	0xbfc90fdb
 8006ca8:	08009d28 	.word	0x08009d28
 8006cac:	08009d34 	.word	0x08009d34
 8006cb0:	33bbbd2e 	.word	0x33bbbd2e
 8006cb4:	40490fdb 	.word	0x40490fdb
 8006cb8:	3fc90fdb 	.word	0x3fc90fdb
 8006cbc:	3f490fdb 	.word	0x3f490fdb

08006cc0 <__ieee754_sqrtf>:
 8006cc0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8006cc4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	4603      	mov	r3, r0
 8006ccc:	4604      	mov	r4, r0
 8006cce:	d309      	bcc.n	8006ce4 <__ieee754_sqrtf+0x24>
 8006cd0:	4601      	mov	r1, r0
 8006cd2:	f7fa f837 	bl	8000d44 <__aeabi_fmul>
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f7f9 ff2b 	bl	8000b34 <__addsf3>
 8006cde:	4604      	mov	r4, r0
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	d0fb      	beq.n	8006ce0 <__ieee754_sqrtf+0x20>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	da06      	bge.n	8006cfa <__ieee754_sqrtf+0x3a>
 8006cec:	4601      	mov	r1, r0
 8006cee:	f7f9 ff1f 	bl	8000b30 <__aeabi_fsub>
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	f7fa f8da 	bl	8000eac <__aeabi_fdiv>
 8006cf8:	e7f1      	b.n	8006cde <__ieee754_sqrtf+0x1e>
 8006cfa:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8006cfe:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8006d02:	d029      	beq.n	8006d58 <__ieee754_sqrtf+0x98>
 8006d04:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8006d08:	07cb      	lsls	r3, r1, #31
 8006d0a:	f04f 0300 	mov.w	r3, #0
 8006d0e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8006d12:	f04f 0419 	mov.w	r4, #25
 8006d16:	461e      	mov	r6, r3
 8006d18:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8006d1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006d20:	bf58      	it	pl
 8006d22:	0052      	lslpl	r2, r2, #1
 8006d24:	1040      	asrs	r0, r0, #1
 8006d26:	0052      	lsls	r2, r2, #1
 8006d28:	1875      	adds	r5, r6, r1
 8006d2a:	4295      	cmp	r5, r2
 8006d2c:	bfde      	ittt	le
 8006d2e:	186e      	addle	r6, r5, r1
 8006d30:	1b52      	suble	r2, r2, r5
 8006d32:	185b      	addle	r3, r3, r1
 8006d34:	3c01      	subs	r4, #1
 8006d36:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006d3a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006d3e:	d1f3      	bne.n	8006d28 <__ieee754_sqrtf+0x68>
 8006d40:	b112      	cbz	r2, 8006d48 <__ieee754_sqrtf+0x88>
 8006d42:	3301      	adds	r3, #1
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	105c      	asrs	r4, r3, #1
 8006d4a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8006d4e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8006d52:	e7c5      	b.n	8006ce0 <__ieee754_sqrtf+0x20>
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	3201      	adds	r2, #1
 8006d58:	0218      	lsls	r0, r3, #8
 8006d5a:	d5fb      	bpl.n	8006d54 <__ieee754_sqrtf+0x94>
 8006d5c:	3a01      	subs	r2, #1
 8006d5e:	1a89      	subs	r1, r1, r2
 8006d60:	e7d0      	b.n	8006d04 <__ieee754_sqrtf+0x44>

08006d62 <with_errno>:
 8006d62:	b570      	push	{r4, r5, r6, lr}
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	4616      	mov	r6, r2
 8006d6a:	f000 f9c3 	bl	80070f4 <__errno>
 8006d6e:	4629      	mov	r1, r5
 8006d70:	6006      	str	r6, [r0, #0]
 8006d72:	4620      	mov	r0, r4
 8006d74:	bd70      	pop	{r4, r5, r6, pc}

08006d76 <xflow>:
 8006d76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d78:	4615      	mov	r5, r2
 8006d7a:	461c      	mov	r4, r3
 8006d7c:	b180      	cbz	r0, 8006da0 <xflow+0x2a>
 8006d7e:	4610      	mov	r0, r2
 8006d80:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006d84:	e9cd 0100 	strd	r0, r1, [sp]
 8006d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	4621      	mov	r1, r4
 8006d90:	f7f9 fba2 	bl	80004d8 <__aeabi_dmul>
 8006d94:	2222      	movs	r2, #34	; 0x22
 8006d96:	b003      	add	sp, #12
 8006d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d9c:	f7ff bfe1 	b.w	8006d62 <with_errno>
 8006da0:	4610      	mov	r0, r2
 8006da2:	4619      	mov	r1, r3
 8006da4:	e7ee      	b.n	8006d84 <xflow+0xe>

08006da6 <__math_uflow>:
 8006da6:	2200      	movs	r2, #0
 8006da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006dac:	f7ff bfe3 	b.w	8006d76 <xflow>

08006db0 <__math_oflow>:
 8006db0:	2200      	movs	r2, #0
 8006db2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006db6:	f7ff bfde 	b.w	8006d76 <xflow>

08006dba <fabs>:
 8006dba:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006dbe:	4770      	bx	lr

08006dc0 <finite>:
 8006dc0:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006dc4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006dc8:	0fc0      	lsrs	r0, r0, #31
 8006dca:	4770      	bx	lr
 8006dcc:	0000      	movs	r0, r0
	...

08006dd0 <scalbn>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	460d      	mov	r5, r1
 8006dda:	4617      	mov	r7, r2
 8006ddc:	460b      	mov	r3, r1
 8006dde:	b996      	cbnz	r6, 8006e06 <scalbn+0x36>
 8006de0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006de4:	4303      	orrs	r3, r0
 8006de6:	d039      	beq.n	8006e5c <scalbn+0x8c>
 8006de8:	4b33      	ldr	r3, [pc, #204]	; (8006eb8 <scalbn+0xe8>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7f9 fb74 	bl	80004d8 <__aeabi_dmul>
 8006df0:	4b32      	ldr	r3, [pc, #200]	; (8006ebc <scalbn+0xec>)
 8006df2:	4604      	mov	r4, r0
 8006df4:	429f      	cmp	r7, r3
 8006df6:	460d      	mov	r5, r1
 8006df8:	da0f      	bge.n	8006e1a <scalbn+0x4a>
 8006dfa:	a32b      	add	r3, pc, #172	; (adr r3, 8006ea8 <scalbn+0xd8>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fb6a 	bl	80004d8 <__aeabi_dmul>
 8006e04:	e006      	b.n	8006e14 <scalbn+0x44>
 8006e06:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006e0a:	4296      	cmp	r6, r2
 8006e0c:	d10a      	bne.n	8006e24 <scalbn+0x54>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	f7f9 f9ac 	bl	800016c <__adddf3>
 8006e14:	4604      	mov	r4, r0
 8006e16:	460d      	mov	r5, r1
 8006e18:	e020      	b.n	8006e5c <scalbn+0x8c>
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006e20:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8006e24:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8006e28:	19b9      	adds	r1, r7, r6
 8006e2a:	4291      	cmp	r1, r2
 8006e2c:	dd0e      	ble.n	8006e4c <scalbn+0x7c>
 8006e2e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8006e32:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8006e36:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8006e3a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8006e3e:	4820      	ldr	r0, [pc, #128]	; (8006ec0 <scalbn+0xf0>)
 8006e40:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8006e44:	a31a      	add	r3, pc, #104	; (adr r3, 8006eb0 <scalbn+0xe0>)
 8006e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4a:	e7d9      	b.n	8006e00 <scalbn+0x30>
 8006e4c:	2900      	cmp	r1, #0
 8006e4e:	dd08      	ble.n	8006e62 <scalbn+0x92>
 8006e50:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e58:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	4629      	mov	r1, r5
 8006e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e62:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006e66:	da12      	bge.n	8006e8e <scalbn+0xbe>
 8006e68:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006e6c:	429f      	cmp	r7, r3
 8006e6e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8006e72:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8006e76:	dcdc      	bgt.n	8006e32 <scalbn+0x62>
 8006e78:	a30b      	add	r3, pc, #44	; (adr r3, 8006ea8 <scalbn+0xd8>)
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8006e82:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8006e86:	480f      	ldr	r0, [pc, #60]	; (8006ec4 <scalbn+0xf4>)
 8006e88:	f041 011f 	orr.w	r1, r1, #31
 8006e8c:	e7b8      	b.n	8006e00 <scalbn+0x30>
 8006e8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006e92:	3136      	adds	r1, #54	; 0x36
 8006e94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006e98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <scalbn+0xf8>)
 8006ea4:	e7ac      	b.n	8006e00 <scalbn+0x30>
 8006ea6:	bf00      	nop
 8006ea8:	c2f8f359 	.word	0xc2f8f359
 8006eac:	01a56e1f 	.word	0x01a56e1f
 8006eb0:	8800759c 	.word	0x8800759c
 8006eb4:	7e37e43c 	.word	0x7e37e43c
 8006eb8:	43500000 	.word	0x43500000
 8006ebc:	ffff3cb0 	.word	0xffff3cb0
 8006ec0:	8800759c 	.word	0x8800759c
 8006ec4:	c2f8f359 	.word	0xc2f8f359
 8006ec8:	3c900000 	.word	0x3c900000

08006ecc <atanf>:
 8006ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8006ed4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8006ed8:	4604      	mov	r4, r0
 8006eda:	4680      	mov	r8, r0
 8006edc:	db0e      	blt.n	8006efc <atanf+0x30>
 8006ede:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006ee2:	dd04      	ble.n	8006eee <atanf+0x22>
 8006ee4:	4601      	mov	r1, r0
 8006ee6:	f7f9 fe25 	bl	8000b34 <__addsf3>
 8006eea:	4604      	mov	r4, r0
 8006eec:	e003      	b.n	8006ef6 <atanf+0x2a>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f300 80ce 	bgt.w	8007090 <atanf+0x1c4>
 8006ef4:	4c67      	ldr	r4, [pc, #412]	; (8007094 <atanf+0x1c8>)
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006efc:	4b66      	ldr	r3, [pc, #408]	; (8007098 <atanf+0x1cc>)
 8006efe:	429d      	cmp	r5, r3
 8006f00:	dc0e      	bgt.n	8006f20 <atanf+0x54>
 8006f02:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8006f06:	da08      	bge.n	8006f1a <atanf+0x4e>
 8006f08:	4964      	ldr	r1, [pc, #400]	; (800709c <atanf+0x1d0>)
 8006f0a:	f7f9 fe13 	bl	8000b34 <__addsf3>
 8006f0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006f12:	f7fa f8d3 	bl	80010bc <__aeabi_fcmpgt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d1ed      	bne.n	8006ef6 <atanf+0x2a>
 8006f1a:	f04f 36ff 	mov.w	r6, #4294967295
 8006f1e:	e01c      	b.n	8006f5a <atanf+0x8e>
 8006f20:	f000 f8e0 	bl	80070e4 <fabsf>
 8006f24:	4b5e      	ldr	r3, [pc, #376]	; (80070a0 <atanf+0x1d4>)
 8006f26:	4604      	mov	r4, r0
 8006f28:	429d      	cmp	r5, r3
 8006f2a:	dc7c      	bgt.n	8007026 <atanf+0x15a>
 8006f2c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8006f30:	429d      	cmp	r5, r3
 8006f32:	dc67      	bgt.n	8007004 <atanf+0x138>
 8006f34:	4601      	mov	r1, r0
 8006f36:	f7f9 fdfd 	bl	8000b34 <__addsf3>
 8006f3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006f3e:	f7f9 fdf7 	bl	8000b30 <__aeabi_fsub>
 8006f42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006f46:	4605      	mov	r5, r0
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f7f9 fdf3 	bl	8000b34 <__addsf3>
 8006f4e:	4601      	mov	r1, r0
 8006f50:	4628      	mov	r0, r5
 8006f52:	f7f9 ffab 	bl	8000eac <__aeabi_fdiv>
 8006f56:	2600      	movs	r6, #0
 8006f58:	4604      	mov	r4, r0
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f7f9 fef1 	bl	8000d44 <__aeabi_fmul>
 8006f62:	4601      	mov	r1, r0
 8006f64:	4607      	mov	r7, r0
 8006f66:	f7f9 feed 	bl	8000d44 <__aeabi_fmul>
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	494d      	ldr	r1, [pc, #308]	; (80070a4 <atanf+0x1d8>)
 8006f6e:	f7f9 fee9 	bl	8000d44 <__aeabi_fmul>
 8006f72:	494d      	ldr	r1, [pc, #308]	; (80070a8 <atanf+0x1dc>)
 8006f74:	f7f9 fdde 	bl	8000b34 <__addsf3>
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 fee3 	bl	8000d44 <__aeabi_fmul>
 8006f7e:	494b      	ldr	r1, [pc, #300]	; (80070ac <atanf+0x1e0>)
 8006f80:	f7f9 fdd8 	bl	8000b34 <__addsf3>
 8006f84:	4629      	mov	r1, r5
 8006f86:	f7f9 fedd 	bl	8000d44 <__aeabi_fmul>
 8006f8a:	4949      	ldr	r1, [pc, #292]	; (80070b0 <atanf+0x1e4>)
 8006f8c:	f7f9 fdd2 	bl	8000b34 <__addsf3>
 8006f90:	4629      	mov	r1, r5
 8006f92:	f7f9 fed7 	bl	8000d44 <__aeabi_fmul>
 8006f96:	4947      	ldr	r1, [pc, #284]	; (80070b4 <atanf+0x1e8>)
 8006f98:	f7f9 fdcc 	bl	8000b34 <__addsf3>
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 fed1 	bl	8000d44 <__aeabi_fmul>
 8006fa2:	4945      	ldr	r1, [pc, #276]	; (80070b8 <atanf+0x1ec>)
 8006fa4:	f7f9 fdc6 	bl	8000b34 <__addsf3>
 8006fa8:	4639      	mov	r1, r7
 8006faa:	f7f9 fecb 	bl	8000d44 <__aeabi_fmul>
 8006fae:	4943      	ldr	r1, [pc, #268]	; (80070bc <atanf+0x1f0>)
 8006fb0:	4607      	mov	r7, r0
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7f9 fec6 	bl	8000d44 <__aeabi_fmul>
 8006fb8:	4941      	ldr	r1, [pc, #260]	; (80070c0 <atanf+0x1f4>)
 8006fba:	f7f9 fdb9 	bl	8000b30 <__aeabi_fsub>
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	f7f9 fec0 	bl	8000d44 <__aeabi_fmul>
 8006fc4:	493f      	ldr	r1, [pc, #252]	; (80070c4 <atanf+0x1f8>)
 8006fc6:	f7f9 fdb3 	bl	8000b30 <__aeabi_fsub>
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7f9 feba 	bl	8000d44 <__aeabi_fmul>
 8006fd0:	493d      	ldr	r1, [pc, #244]	; (80070c8 <atanf+0x1fc>)
 8006fd2:	f7f9 fdad 	bl	8000b30 <__aeabi_fsub>
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f7f9 feb4 	bl	8000d44 <__aeabi_fmul>
 8006fdc:	493b      	ldr	r1, [pc, #236]	; (80070cc <atanf+0x200>)
 8006fde:	f7f9 fda7 	bl	8000b30 <__aeabi_fsub>
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	f7f9 feae 	bl	8000d44 <__aeabi_fmul>
 8006fe8:	4601      	mov	r1, r0
 8006fea:	4638      	mov	r0, r7
 8006fec:	f7f9 fda2 	bl	8000b34 <__addsf3>
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	f7f9 fea7 	bl	8000d44 <__aeabi_fmul>
 8006ff6:	1c73      	adds	r3, r6, #1
 8006ff8:	4601      	mov	r1, r0
 8006ffa:	d133      	bne.n	8007064 <atanf+0x198>
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f7f9 fd97 	bl	8000b30 <__aeabi_fsub>
 8007002:	e772      	b.n	8006eea <atanf+0x1e>
 8007004:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007008:	f7f9 fd92 	bl	8000b30 <__aeabi_fsub>
 800700c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007010:	4605      	mov	r5, r0
 8007012:	4620      	mov	r0, r4
 8007014:	f7f9 fd8e 	bl	8000b34 <__addsf3>
 8007018:	4601      	mov	r1, r0
 800701a:	4628      	mov	r0, r5
 800701c:	f7f9 ff46 	bl	8000eac <__aeabi_fdiv>
 8007020:	2601      	movs	r6, #1
 8007022:	4604      	mov	r4, r0
 8007024:	e799      	b.n	8006f5a <atanf+0x8e>
 8007026:	4b2a      	ldr	r3, [pc, #168]	; (80070d0 <atanf+0x204>)
 8007028:	429d      	cmp	r5, r3
 800702a:	dc14      	bgt.n	8007056 <atanf+0x18a>
 800702c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8007030:	f7f9 fd7e 	bl	8000b30 <__aeabi_fsub>
 8007034:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8007038:	4605      	mov	r5, r0
 800703a:	4620      	mov	r0, r4
 800703c:	f7f9 fe82 	bl	8000d44 <__aeabi_fmul>
 8007040:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007044:	f7f9 fd76 	bl	8000b34 <__addsf3>
 8007048:	4601      	mov	r1, r0
 800704a:	4628      	mov	r0, r5
 800704c:	f7f9 ff2e 	bl	8000eac <__aeabi_fdiv>
 8007050:	2602      	movs	r6, #2
 8007052:	4604      	mov	r4, r0
 8007054:	e781      	b.n	8006f5a <atanf+0x8e>
 8007056:	4601      	mov	r1, r0
 8007058:	481e      	ldr	r0, [pc, #120]	; (80070d4 <atanf+0x208>)
 800705a:	f7f9 ff27 	bl	8000eac <__aeabi_fdiv>
 800705e:	2603      	movs	r6, #3
 8007060:	4604      	mov	r4, r0
 8007062:	e77a      	b.n	8006f5a <atanf+0x8e>
 8007064:	4b1c      	ldr	r3, [pc, #112]	; (80070d8 <atanf+0x20c>)
 8007066:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800706a:	f7f9 fd61 	bl	8000b30 <__aeabi_fsub>
 800706e:	4621      	mov	r1, r4
 8007070:	f7f9 fd5e 	bl	8000b30 <__aeabi_fsub>
 8007074:	4b19      	ldr	r3, [pc, #100]	; (80070dc <atanf+0x210>)
 8007076:	4601      	mov	r1, r0
 8007078:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800707c:	f7f9 fd58 	bl	8000b30 <__aeabi_fsub>
 8007080:	f1b8 0f00 	cmp.w	r8, #0
 8007084:	4604      	mov	r4, r0
 8007086:	f6bf af36 	bge.w	8006ef6 <atanf+0x2a>
 800708a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800708e:	e72c      	b.n	8006eea <atanf+0x1e>
 8007090:	4c13      	ldr	r4, [pc, #76]	; (80070e0 <atanf+0x214>)
 8007092:	e730      	b.n	8006ef6 <atanf+0x2a>
 8007094:	bfc90fdb 	.word	0xbfc90fdb
 8007098:	3edfffff 	.word	0x3edfffff
 800709c:	7149f2ca 	.word	0x7149f2ca
 80070a0:	3f97ffff 	.word	0x3f97ffff
 80070a4:	3c8569d7 	.word	0x3c8569d7
 80070a8:	3d4bda59 	.word	0x3d4bda59
 80070ac:	3d886b35 	.word	0x3d886b35
 80070b0:	3dba2e6e 	.word	0x3dba2e6e
 80070b4:	3e124925 	.word	0x3e124925
 80070b8:	3eaaaaab 	.word	0x3eaaaaab
 80070bc:	bd15a221 	.word	0xbd15a221
 80070c0:	3d6ef16b 	.word	0x3d6ef16b
 80070c4:	3d9d8795 	.word	0x3d9d8795
 80070c8:	3de38e38 	.word	0x3de38e38
 80070cc:	3e4ccccd 	.word	0x3e4ccccd
 80070d0:	401bffff 	.word	0x401bffff
 80070d4:	bf800000 	.word	0xbf800000
 80070d8:	08009d50 	.word	0x08009d50
 80070dc:	08009d40 	.word	0x08009d40
 80070e0:	3fc90fdb 	.word	0x3fc90fdb

080070e4 <fabsf>:
 80070e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80070e8:	4770      	bx	lr
	...

080070ec <nanf>:
 80070ec:	4800      	ldr	r0, [pc, #0]	; (80070f0 <nanf+0x4>)
 80070ee:	4770      	bx	lr
 80070f0:	7fc00000 	.word	0x7fc00000

080070f4 <__errno>:
 80070f4:	4b01      	ldr	r3, [pc, #4]	; (80070fc <__errno+0x8>)
 80070f6:	6818      	ldr	r0, [r3, #0]
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20000030 	.word	0x20000030

08007100 <std>:
 8007100:	2300      	movs	r3, #0
 8007102:	b510      	push	{r4, lr}
 8007104:	4604      	mov	r4, r0
 8007106:	e9c0 3300 	strd	r3, r3, [r0]
 800710a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800710e:	6083      	str	r3, [r0, #8]
 8007110:	8181      	strh	r1, [r0, #12]
 8007112:	6643      	str	r3, [r0, #100]	; 0x64
 8007114:	81c2      	strh	r2, [r0, #14]
 8007116:	6183      	str	r3, [r0, #24]
 8007118:	4619      	mov	r1, r3
 800711a:	2208      	movs	r2, #8
 800711c:	305c      	adds	r0, #92	; 0x5c
 800711e:	f000 f91a 	bl	8007356 <memset>
 8007122:	4b05      	ldr	r3, [pc, #20]	; (8007138 <std+0x38>)
 8007124:	6224      	str	r4, [r4, #32]
 8007126:	6263      	str	r3, [r4, #36]	; 0x24
 8007128:	4b04      	ldr	r3, [pc, #16]	; (800713c <std+0x3c>)
 800712a:	62a3      	str	r3, [r4, #40]	; 0x28
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <std+0x40>)
 800712e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <std+0x44>)
 8007132:	6323      	str	r3, [r4, #48]	; 0x30
 8007134:	bd10      	pop	{r4, pc}
 8007136:	bf00      	nop
 8007138:	08007e45 	.word	0x08007e45
 800713c:	08007e67 	.word	0x08007e67
 8007140:	08007e9f 	.word	0x08007e9f
 8007144:	08007ec3 	.word	0x08007ec3

08007148 <_cleanup_r>:
 8007148:	4901      	ldr	r1, [pc, #4]	; (8007150 <_cleanup_r+0x8>)
 800714a:	f000 b8af 	b.w	80072ac <_fwalk_reent>
 800714e:	bf00      	nop
 8007150:	08008d09 	.word	0x08008d09

08007154 <__sfmoreglue>:
 8007154:	2268      	movs	r2, #104	; 0x68
 8007156:	b570      	push	{r4, r5, r6, lr}
 8007158:	1e4d      	subs	r5, r1, #1
 800715a:	4355      	muls	r5, r2
 800715c:	460e      	mov	r6, r1
 800715e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007162:	f000 f921 	bl	80073a8 <_malloc_r>
 8007166:	4604      	mov	r4, r0
 8007168:	b140      	cbz	r0, 800717c <__sfmoreglue+0x28>
 800716a:	2100      	movs	r1, #0
 800716c:	e9c0 1600 	strd	r1, r6, [r0]
 8007170:	300c      	adds	r0, #12
 8007172:	60a0      	str	r0, [r4, #8]
 8007174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007178:	f000 f8ed 	bl	8007356 <memset>
 800717c:	4620      	mov	r0, r4
 800717e:	bd70      	pop	{r4, r5, r6, pc}

08007180 <__sfp_lock_acquire>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__sfp_lock_acquire+0x8>)
 8007182:	f000 b8d8 	b.w	8007336 <__retarget_lock_acquire_recursive>
 8007186:	bf00      	nop
 8007188:	20001f41 	.word	0x20001f41

0800718c <__sfp_lock_release>:
 800718c:	4801      	ldr	r0, [pc, #4]	; (8007194 <__sfp_lock_release+0x8>)
 800718e:	f000 b8d3 	b.w	8007338 <__retarget_lock_release_recursive>
 8007192:	bf00      	nop
 8007194:	20001f41 	.word	0x20001f41

08007198 <__sinit_lock_acquire>:
 8007198:	4801      	ldr	r0, [pc, #4]	; (80071a0 <__sinit_lock_acquire+0x8>)
 800719a:	f000 b8cc 	b.w	8007336 <__retarget_lock_acquire_recursive>
 800719e:	bf00      	nop
 80071a0:	20001f42 	.word	0x20001f42

080071a4 <__sinit_lock_release>:
 80071a4:	4801      	ldr	r0, [pc, #4]	; (80071ac <__sinit_lock_release+0x8>)
 80071a6:	f000 b8c7 	b.w	8007338 <__retarget_lock_release_recursive>
 80071aa:	bf00      	nop
 80071ac:	20001f42 	.word	0x20001f42

080071b0 <__sinit>:
 80071b0:	b510      	push	{r4, lr}
 80071b2:	4604      	mov	r4, r0
 80071b4:	f7ff fff0 	bl	8007198 <__sinit_lock_acquire>
 80071b8:	69a3      	ldr	r3, [r4, #24]
 80071ba:	b11b      	cbz	r3, 80071c4 <__sinit+0x14>
 80071bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c0:	f7ff bff0 	b.w	80071a4 <__sinit_lock_release>
 80071c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071c8:	6523      	str	r3, [r4, #80]	; 0x50
 80071ca:	4b13      	ldr	r3, [pc, #76]	; (8007218 <__sinit+0x68>)
 80071cc:	4a13      	ldr	r2, [pc, #76]	; (800721c <__sinit+0x6c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80071d2:	42a3      	cmp	r3, r4
 80071d4:	bf08      	it	eq
 80071d6:	2301      	moveq	r3, #1
 80071d8:	4620      	mov	r0, r4
 80071da:	bf08      	it	eq
 80071dc:	61a3      	streq	r3, [r4, #24]
 80071de:	f000 f81f 	bl	8007220 <__sfp>
 80071e2:	6060      	str	r0, [r4, #4]
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 f81b 	bl	8007220 <__sfp>
 80071ea:	60a0      	str	r0, [r4, #8]
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 f817 	bl	8007220 <__sfp>
 80071f2:	2200      	movs	r2, #0
 80071f4:	2104      	movs	r1, #4
 80071f6:	60e0      	str	r0, [r4, #12]
 80071f8:	6860      	ldr	r0, [r4, #4]
 80071fa:	f7ff ff81 	bl	8007100 <std>
 80071fe:	2201      	movs	r2, #1
 8007200:	2109      	movs	r1, #9
 8007202:	68a0      	ldr	r0, [r4, #8]
 8007204:	f7ff ff7c 	bl	8007100 <std>
 8007208:	2202      	movs	r2, #2
 800720a:	2112      	movs	r1, #18
 800720c:	68e0      	ldr	r0, [r4, #12]
 800720e:	f7ff ff77 	bl	8007100 <std>
 8007212:	2301      	movs	r3, #1
 8007214:	61a3      	str	r3, [r4, #24]
 8007216:	e7d1      	b.n	80071bc <__sinit+0xc>
 8007218:	08009dc0 	.word	0x08009dc0
 800721c:	08007149 	.word	0x08007149

08007220 <__sfp>:
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007222:	4607      	mov	r7, r0
 8007224:	f7ff ffac 	bl	8007180 <__sfp_lock_acquire>
 8007228:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <__sfp+0x84>)
 800722a:	681e      	ldr	r6, [r3, #0]
 800722c:	69b3      	ldr	r3, [r6, #24]
 800722e:	b913      	cbnz	r3, 8007236 <__sfp+0x16>
 8007230:	4630      	mov	r0, r6
 8007232:	f7ff ffbd 	bl	80071b0 <__sinit>
 8007236:	3648      	adds	r6, #72	; 0x48
 8007238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800723c:	3b01      	subs	r3, #1
 800723e:	d503      	bpl.n	8007248 <__sfp+0x28>
 8007240:	6833      	ldr	r3, [r6, #0]
 8007242:	b30b      	cbz	r3, 8007288 <__sfp+0x68>
 8007244:	6836      	ldr	r6, [r6, #0]
 8007246:	e7f7      	b.n	8007238 <__sfp+0x18>
 8007248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800724c:	b9d5      	cbnz	r5, 8007284 <__sfp+0x64>
 800724e:	4b16      	ldr	r3, [pc, #88]	; (80072a8 <__sfp+0x88>)
 8007250:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007254:	60e3      	str	r3, [r4, #12]
 8007256:	6665      	str	r5, [r4, #100]	; 0x64
 8007258:	f000 f86c 	bl	8007334 <__retarget_lock_init_recursive>
 800725c:	f7ff ff96 	bl	800718c <__sfp_lock_release>
 8007260:	2208      	movs	r2, #8
 8007262:	4629      	mov	r1, r5
 8007264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800726c:	6025      	str	r5, [r4, #0]
 800726e:	61a5      	str	r5, [r4, #24]
 8007270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007274:	f000 f86f 	bl	8007356 <memset>
 8007278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800727c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007280:	4620      	mov	r0, r4
 8007282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007284:	3468      	adds	r4, #104	; 0x68
 8007286:	e7d9      	b.n	800723c <__sfp+0x1c>
 8007288:	2104      	movs	r1, #4
 800728a:	4638      	mov	r0, r7
 800728c:	f7ff ff62 	bl	8007154 <__sfmoreglue>
 8007290:	4604      	mov	r4, r0
 8007292:	6030      	str	r0, [r6, #0]
 8007294:	2800      	cmp	r0, #0
 8007296:	d1d5      	bne.n	8007244 <__sfp+0x24>
 8007298:	f7ff ff78 	bl	800718c <__sfp_lock_release>
 800729c:	230c      	movs	r3, #12
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	e7ee      	b.n	8007280 <__sfp+0x60>
 80072a2:	bf00      	nop
 80072a4:	08009dc0 	.word	0x08009dc0
 80072a8:	ffff0001 	.word	0xffff0001

080072ac <_fwalk_reent>:
 80072ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b0:	4606      	mov	r6, r0
 80072b2:	4688      	mov	r8, r1
 80072b4:	2700      	movs	r7, #0
 80072b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072be:	f1b9 0901 	subs.w	r9, r9, #1
 80072c2:	d505      	bpl.n	80072d0 <_fwalk_reent+0x24>
 80072c4:	6824      	ldr	r4, [r4, #0]
 80072c6:	2c00      	cmp	r4, #0
 80072c8:	d1f7      	bne.n	80072ba <_fwalk_reent+0xe>
 80072ca:	4638      	mov	r0, r7
 80072cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d0:	89ab      	ldrh	r3, [r5, #12]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d907      	bls.n	80072e6 <_fwalk_reent+0x3a>
 80072d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072da:	3301      	adds	r3, #1
 80072dc:	d003      	beq.n	80072e6 <_fwalk_reent+0x3a>
 80072de:	4629      	mov	r1, r5
 80072e0:	4630      	mov	r0, r6
 80072e2:	47c0      	blx	r8
 80072e4:	4307      	orrs	r7, r0
 80072e6:	3568      	adds	r5, #104	; 0x68
 80072e8:	e7e9      	b.n	80072be <_fwalk_reent+0x12>
	...

080072ec <__libc_init_array>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	2600      	movs	r6, #0
 80072f0:	4d0c      	ldr	r5, [pc, #48]	; (8007324 <__libc_init_array+0x38>)
 80072f2:	4c0d      	ldr	r4, [pc, #52]	; (8007328 <__libc_init_array+0x3c>)
 80072f4:	1b64      	subs	r4, r4, r5
 80072f6:	10a4      	asrs	r4, r4, #2
 80072f8:	42a6      	cmp	r6, r4
 80072fa:	d109      	bne.n	8007310 <__libc_init_array+0x24>
 80072fc:	f002 fca2 	bl	8009c44 <_init>
 8007300:	2600      	movs	r6, #0
 8007302:	4d0a      	ldr	r5, [pc, #40]	; (800732c <__libc_init_array+0x40>)
 8007304:	4c0a      	ldr	r4, [pc, #40]	; (8007330 <__libc_init_array+0x44>)
 8007306:	1b64      	subs	r4, r4, r5
 8007308:	10a4      	asrs	r4, r4, #2
 800730a:	42a6      	cmp	r6, r4
 800730c:	d105      	bne.n	800731a <__libc_init_array+0x2e>
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f855 3b04 	ldr.w	r3, [r5], #4
 8007314:	4798      	blx	r3
 8007316:	3601      	adds	r6, #1
 8007318:	e7ee      	b.n	80072f8 <__libc_init_array+0xc>
 800731a:	f855 3b04 	ldr.w	r3, [r5], #4
 800731e:	4798      	blx	r3
 8007320:	3601      	adds	r6, #1
 8007322:	e7f2      	b.n	800730a <__libc_init_array+0x1e>
 8007324:	0800a13c 	.word	0x0800a13c
 8007328:	0800a13c 	.word	0x0800a13c
 800732c:	0800a13c 	.word	0x0800a13c
 8007330:	0800a140 	.word	0x0800a140

08007334 <__retarget_lock_init_recursive>:
 8007334:	4770      	bx	lr

08007336 <__retarget_lock_acquire_recursive>:
 8007336:	4770      	bx	lr

08007338 <__retarget_lock_release_recursive>:
 8007338:	4770      	bx	lr

0800733a <memcpy>:
 800733a:	440a      	add	r2, r1
 800733c:	4291      	cmp	r1, r2
 800733e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007342:	d100      	bne.n	8007346 <memcpy+0xc>
 8007344:	4770      	bx	lr
 8007346:	b510      	push	{r4, lr}
 8007348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800734c:	4291      	cmp	r1, r2
 800734e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007352:	d1f9      	bne.n	8007348 <memcpy+0xe>
 8007354:	bd10      	pop	{r4, pc}

08007356 <memset>:
 8007356:	4603      	mov	r3, r0
 8007358:	4402      	add	r2, r0
 800735a:	4293      	cmp	r3, r2
 800735c:	d100      	bne.n	8007360 <memset+0xa>
 800735e:	4770      	bx	lr
 8007360:	f803 1b01 	strb.w	r1, [r3], #1
 8007364:	e7f9      	b.n	800735a <memset+0x4>
	...

08007368 <sbrk_aligned>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4e0e      	ldr	r6, [pc, #56]	; (80073a4 <sbrk_aligned+0x3c>)
 800736c:	460c      	mov	r4, r1
 800736e:	6831      	ldr	r1, [r6, #0]
 8007370:	4605      	mov	r5, r0
 8007372:	b911      	cbnz	r1, 800737a <sbrk_aligned+0x12>
 8007374:	f000 fd56 	bl	8007e24 <_sbrk_r>
 8007378:	6030      	str	r0, [r6, #0]
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f000 fd51 	bl	8007e24 <_sbrk_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d00a      	beq.n	800739c <sbrk_aligned+0x34>
 8007386:	1cc4      	adds	r4, r0, #3
 8007388:	f024 0403 	bic.w	r4, r4, #3
 800738c:	42a0      	cmp	r0, r4
 800738e:	d007      	beq.n	80073a0 <sbrk_aligned+0x38>
 8007390:	1a21      	subs	r1, r4, r0
 8007392:	4628      	mov	r0, r5
 8007394:	f000 fd46 	bl	8007e24 <_sbrk_r>
 8007398:	3001      	adds	r0, #1
 800739a:	d101      	bne.n	80073a0 <sbrk_aligned+0x38>
 800739c:	f04f 34ff 	mov.w	r4, #4294967295
 80073a0:	4620      	mov	r0, r4
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	20001f48 	.word	0x20001f48

080073a8 <_malloc_r>:
 80073a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ac:	1ccd      	adds	r5, r1, #3
 80073ae:	f025 0503 	bic.w	r5, r5, #3
 80073b2:	3508      	adds	r5, #8
 80073b4:	2d0c      	cmp	r5, #12
 80073b6:	bf38      	it	cc
 80073b8:	250c      	movcc	r5, #12
 80073ba:	2d00      	cmp	r5, #0
 80073bc:	4607      	mov	r7, r0
 80073be:	db01      	blt.n	80073c4 <_malloc_r+0x1c>
 80073c0:	42a9      	cmp	r1, r5
 80073c2:	d905      	bls.n	80073d0 <_malloc_r+0x28>
 80073c4:	230c      	movs	r3, #12
 80073c6:	2600      	movs	r6, #0
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	4630      	mov	r0, r6
 80073cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d0:	4e2e      	ldr	r6, [pc, #184]	; (800748c <_malloc_r+0xe4>)
 80073d2:	f001 fd01 	bl	8008dd8 <__malloc_lock>
 80073d6:	6833      	ldr	r3, [r6, #0]
 80073d8:	461c      	mov	r4, r3
 80073da:	bb34      	cbnz	r4, 800742a <_malloc_r+0x82>
 80073dc:	4629      	mov	r1, r5
 80073de:	4638      	mov	r0, r7
 80073e0:	f7ff ffc2 	bl	8007368 <sbrk_aligned>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	4604      	mov	r4, r0
 80073e8:	d14d      	bne.n	8007486 <_malloc_r+0xde>
 80073ea:	6834      	ldr	r4, [r6, #0]
 80073ec:	4626      	mov	r6, r4
 80073ee:	2e00      	cmp	r6, #0
 80073f0:	d140      	bne.n	8007474 <_malloc_r+0xcc>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	4631      	mov	r1, r6
 80073f6:	4638      	mov	r0, r7
 80073f8:	eb04 0803 	add.w	r8, r4, r3
 80073fc:	f000 fd12 	bl	8007e24 <_sbrk_r>
 8007400:	4580      	cmp	r8, r0
 8007402:	d13a      	bne.n	800747a <_malloc_r+0xd2>
 8007404:	6821      	ldr	r1, [r4, #0]
 8007406:	3503      	adds	r5, #3
 8007408:	1a6d      	subs	r5, r5, r1
 800740a:	f025 0503 	bic.w	r5, r5, #3
 800740e:	3508      	adds	r5, #8
 8007410:	2d0c      	cmp	r5, #12
 8007412:	bf38      	it	cc
 8007414:	250c      	movcc	r5, #12
 8007416:	4638      	mov	r0, r7
 8007418:	4629      	mov	r1, r5
 800741a:	f7ff ffa5 	bl	8007368 <sbrk_aligned>
 800741e:	3001      	adds	r0, #1
 8007420:	d02b      	beq.n	800747a <_malloc_r+0xd2>
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	442b      	add	r3, r5
 8007426:	6023      	str	r3, [r4, #0]
 8007428:	e00e      	b.n	8007448 <_malloc_r+0xa0>
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	1b52      	subs	r2, r2, r5
 800742e:	d41e      	bmi.n	800746e <_malloc_r+0xc6>
 8007430:	2a0b      	cmp	r2, #11
 8007432:	d916      	bls.n	8007462 <_malloc_r+0xba>
 8007434:	1961      	adds	r1, r4, r5
 8007436:	42a3      	cmp	r3, r4
 8007438:	6025      	str	r5, [r4, #0]
 800743a:	bf18      	it	ne
 800743c:	6059      	strne	r1, [r3, #4]
 800743e:	6863      	ldr	r3, [r4, #4]
 8007440:	bf08      	it	eq
 8007442:	6031      	streq	r1, [r6, #0]
 8007444:	5162      	str	r2, [r4, r5]
 8007446:	604b      	str	r3, [r1, #4]
 8007448:	4638      	mov	r0, r7
 800744a:	f104 060b 	add.w	r6, r4, #11
 800744e:	f001 fcc9 	bl	8008de4 <__malloc_unlock>
 8007452:	f026 0607 	bic.w	r6, r6, #7
 8007456:	1d23      	adds	r3, r4, #4
 8007458:	1af2      	subs	r2, r6, r3
 800745a:	d0b6      	beq.n	80073ca <_malloc_r+0x22>
 800745c:	1b9b      	subs	r3, r3, r6
 800745e:	50a3      	str	r3, [r4, r2]
 8007460:	e7b3      	b.n	80073ca <_malloc_r+0x22>
 8007462:	6862      	ldr	r2, [r4, #4]
 8007464:	42a3      	cmp	r3, r4
 8007466:	bf0c      	ite	eq
 8007468:	6032      	streq	r2, [r6, #0]
 800746a:	605a      	strne	r2, [r3, #4]
 800746c:	e7ec      	b.n	8007448 <_malloc_r+0xa0>
 800746e:	4623      	mov	r3, r4
 8007470:	6864      	ldr	r4, [r4, #4]
 8007472:	e7b2      	b.n	80073da <_malloc_r+0x32>
 8007474:	4634      	mov	r4, r6
 8007476:	6876      	ldr	r6, [r6, #4]
 8007478:	e7b9      	b.n	80073ee <_malloc_r+0x46>
 800747a:	230c      	movs	r3, #12
 800747c:	4638      	mov	r0, r7
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	f001 fcb0 	bl	8008de4 <__malloc_unlock>
 8007484:	e7a1      	b.n	80073ca <_malloc_r+0x22>
 8007486:	6025      	str	r5, [r4, #0]
 8007488:	e7de      	b.n	8007448 <_malloc_r+0xa0>
 800748a:	bf00      	nop
 800748c:	20001f44 	.word	0x20001f44

08007490 <__cvt>:
 8007490:	2b00      	cmp	r3, #0
 8007492:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007496:	461f      	mov	r7, r3
 8007498:	bfbb      	ittet	lt
 800749a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800749e:	461f      	movlt	r7, r3
 80074a0:	2300      	movge	r3, #0
 80074a2:	232d      	movlt	r3, #45	; 0x2d
 80074a4:	b088      	sub	sp, #32
 80074a6:	4614      	mov	r4, r2
 80074a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80074ac:	7013      	strb	r3, [r2, #0]
 80074ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80074b4:	f023 0820 	bic.w	r8, r3, #32
 80074b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074bc:	d005      	beq.n	80074ca <__cvt+0x3a>
 80074be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074c2:	d100      	bne.n	80074c6 <__cvt+0x36>
 80074c4:	3501      	adds	r5, #1
 80074c6:	2302      	movs	r3, #2
 80074c8:	e000      	b.n	80074cc <__cvt+0x3c>
 80074ca:	2303      	movs	r3, #3
 80074cc:	aa07      	add	r2, sp, #28
 80074ce:	9204      	str	r2, [sp, #16]
 80074d0:	aa06      	add	r2, sp, #24
 80074d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80074d6:	e9cd 3500 	strd	r3, r5, [sp]
 80074da:	4622      	mov	r2, r4
 80074dc:	463b      	mov	r3, r7
 80074de:	f000 fda3 	bl	8008028 <_dtoa_r>
 80074e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80074e6:	4606      	mov	r6, r0
 80074e8:	d102      	bne.n	80074f0 <__cvt+0x60>
 80074ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80074ec:	07db      	lsls	r3, r3, #31
 80074ee:	d522      	bpl.n	8007536 <__cvt+0xa6>
 80074f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074f4:	eb06 0905 	add.w	r9, r6, r5
 80074f8:	d110      	bne.n	800751c <__cvt+0x8c>
 80074fa:	7833      	ldrb	r3, [r6, #0]
 80074fc:	2b30      	cmp	r3, #48	; 0x30
 80074fe:	d10a      	bne.n	8007516 <__cvt+0x86>
 8007500:	2200      	movs	r2, #0
 8007502:	2300      	movs	r3, #0
 8007504:	4620      	mov	r0, r4
 8007506:	4639      	mov	r1, r7
 8007508:	f7f9 fa4e 	bl	80009a8 <__aeabi_dcmpeq>
 800750c:	b918      	cbnz	r0, 8007516 <__cvt+0x86>
 800750e:	f1c5 0501 	rsb	r5, r5, #1
 8007512:	f8ca 5000 	str.w	r5, [sl]
 8007516:	f8da 3000 	ldr.w	r3, [sl]
 800751a:	4499      	add	r9, r3
 800751c:	2200      	movs	r2, #0
 800751e:	2300      	movs	r3, #0
 8007520:	4620      	mov	r0, r4
 8007522:	4639      	mov	r1, r7
 8007524:	f7f9 fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8007528:	b108      	cbz	r0, 800752e <__cvt+0x9e>
 800752a:	f8cd 901c 	str.w	r9, [sp, #28]
 800752e:	2230      	movs	r2, #48	; 0x30
 8007530:	9b07      	ldr	r3, [sp, #28]
 8007532:	454b      	cmp	r3, r9
 8007534:	d307      	bcc.n	8007546 <__cvt+0xb6>
 8007536:	4630      	mov	r0, r6
 8007538:	9b07      	ldr	r3, [sp, #28]
 800753a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800753c:	1b9b      	subs	r3, r3, r6
 800753e:	6013      	str	r3, [r2, #0]
 8007540:	b008      	add	sp, #32
 8007542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007546:	1c59      	adds	r1, r3, #1
 8007548:	9107      	str	r1, [sp, #28]
 800754a:	701a      	strb	r2, [r3, #0]
 800754c:	e7f0      	b.n	8007530 <__cvt+0xa0>

0800754e <__exponent>:
 800754e:	4603      	mov	r3, r0
 8007550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007552:	2900      	cmp	r1, #0
 8007554:	f803 2b02 	strb.w	r2, [r3], #2
 8007558:	bfb6      	itet	lt
 800755a:	222d      	movlt	r2, #45	; 0x2d
 800755c:	222b      	movge	r2, #43	; 0x2b
 800755e:	4249      	neglt	r1, r1
 8007560:	2909      	cmp	r1, #9
 8007562:	7042      	strb	r2, [r0, #1]
 8007564:	dd2b      	ble.n	80075be <__exponent+0x70>
 8007566:	f10d 0407 	add.w	r4, sp, #7
 800756a:	46a4      	mov	ip, r4
 800756c:	270a      	movs	r7, #10
 800756e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007572:	460a      	mov	r2, r1
 8007574:	46a6      	mov	lr, r4
 8007576:	fb07 1516 	mls	r5, r7, r6, r1
 800757a:	2a63      	cmp	r2, #99	; 0x63
 800757c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007580:	4631      	mov	r1, r6
 8007582:	f104 34ff 	add.w	r4, r4, #4294967295
 8007586:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800758a:	dcf0      	bgt.n	800756e <__exponent+0x20>
 800758c:	3130      	adds	r1, #48	; 0x30
 800758e:	f1ae 0502 	sub.w	r5, lr, #2
 8007592:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007596:	4629      	mov	r1, r5
 8007598:	1c44      	adds	r4, r0, #1
 800759a:	4561      	cmp	r1, ip
 800759c:	d30a      	bcc.n	80075b4 <__exponent+0x66>
 800759e:	f10d 0209 	add.w	r2, sp, #9
 80075a2:	eba2 020e 	sub.w	r2, r2, lr
 80075a6:	4565      	cmp	r5, ip
 80075a8:	bf88      	it	hi
 80075aa:	2200      	movhi	r2, #0
 80075ac:	4413      	add	r3, r2
 80075ae:	1a18      	subs	r0, r3, r0
 80075b0:	b003      	add	sp, #12
 80075b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075b8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80075bc:	e7ed      	b.n	800759a <__exponent+0x4c>
 80075be:	2330      	movs	r3, #48	; 0x30
 80075c0:	3130      	adds	r1, #48	; 0x30
 80075c2:	7083      	strb	r3, [r0, #2]
 80075c4:	70c1      	strb	r1, [r0, #3]
 80075c6:	1d03      	adds	r3, r0, #4
 80075c8:	e7f1      	b.n	80075ae <__exponent+0x60>
	...

080075cc <_printf_float>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	b091      	sub	sp, #68	; 0x44
 80075d2:	460c      	mov	r4, r1
 80075d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80075d8:	4616      	mov	r6, r2
 80075da:	461f      	mov	r7, r3
 80075dc:	4605      	mov	r5, r0
 80075de:	f001 fbcf 	bl	8008d80 <_localeconv_r>
 80075e2:	6803      	ldr	r3, [r0, #0]
 80075e4:	4618      	mov	r0, r3
 80075e6:	9309      	str	r3, [sp, #36]	; 0x24
 80075e8:	f7f8 fdb2 	bl	8000150 <strlen>
 80075ec:	2300      	movs	r3, #0
 80075ee:	930e      	str	r3, [sp, #56]	; 0x38
 80075f0:	f8d8 3000 	ldr.w	r3, [r8]
 80075f4:	900a      	str	r0, [sp, #40]	; 0x28
 80075f6:	3307      	adds	r3, #7
 80075f8:	f023 0307 	bic.w	r3, r3, #7
 80075fc:	f103 0208 	add.w	r2, r3, #8
 8007600:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007604:	f8d4 b000 	ldr.w	fp, [r4]
 8007608:	f8c8 2000 	str.w	r2, [r8]
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007614:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007618:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800761c:	930b      	str	r3, [sp, #44]	; 0x2c
 800761e:	f04f 32ff 	mov.w	r2, #4294967295
 8007622:	4640      	mov	r0, r8
 8007624:	4b9c      	ldr	r3, [pc, #624]	; (8007898 <_printf_float+0x2cc>)
 8007626:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007628:	f7f9 f9f0 	bl	8000a0c <__aeabi_dcmpun>
 800762c:	bb70      	cbnz	r0, 800768c <_printf_float+0xc0>
 800762e:	f04f 32ff 	mov.w	r2, #4294967295
 8007632:	4640      	mov	r0, r8
 8007634:	4b98      	ldr	r3, [pc, #608]	; (8007898 <_printf_float+0x2cc>)
 8007636:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007638:	f7f9 f9ca 	bl	80009d0 <__aeabi_dcmple>
 800763c:	bb30      	cbnz	r0, 800768c <_printf_float+0xc0>
 800763e:	2200      	movs	r2, #0
 8007640:	2300      	movs	r3, #0
 8007642:	4640      	mov	r0, r8
 8007644:	4651      	mov	r1, sl
 8007646:	f7f9 f9b9 	bl	80009bc <__aeabi_dcmplt>
 800764a:	b110      	cbz	r0, 8007652 <_printf_float+0x86>
 800764c:	232d      	movs	r3, #45	; 0x2d
 800764e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007652:	4b92      	ldr	r3, [pc, #584]	; (800789c <_printf_float+0x2d0>)
 8007654:	4892      	ldr	r0, [pc, #584]	; (80078a0 <_printf_float+0x2d4>)
 8007656:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800765a:	bf94      	ite	ls
 800765c:	4698      	movls	r8, r3
 800765e:	4680      	movhi	r8, r0
 8007660:	2303      	movs	r3, #3
 8007662:	f04f 0a00 	mov.w	sl, #0
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	f02b 0304 	bic.w	r3, fp, #4
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	4633      	mov	r3, r6
 8007670:	4621      	mov	r1, r4
 8007672:	4628      	mov	r0, r5
 8007674:	9700      	str	r7, [sp, #0]
 8007676:	aa0f      	add	r2, sp, #60	; 0x3c
 8007678:	f000 f9d4 	bl	8007a24 <_printf_common>
 800767c:	3001      	adds	r0, #1
 800767e:	f040 8090 	bne.w	80077a2 <_printf_float+0x1d6>
 8007682:	f04f 30ff 	mov.w	r0, #4294967295
 8007686:	b011      	add	sp, #68	; 0x44
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	4642      	mov	r2, r8
 800768e:	4653      	mov	r3, sl
 8007690:	4640      	mov	r0, r8
 8007692:	4651      	mov	r1, sl
 8007694:	f7f9 f9ba 	bl	8000a0c <__aeabi_dcmpun>
 8007698:	b148      	cbz	r0, 80076ae <_printf_float+0xe2>
 800769a:	f1ba 0f00 	cmp.w	sl, #0
 800769e:	bfb8      	it	lt
 80076a0:	232d      	movlt	r3, #45	; 0x2d
 80076a2:	4880      	ldr	r0, [pc, #512]	; (80078a4 <_printf_float+0x2d8>)
 80076a4:	bfb8      	it	lt
 80076a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076aa:	4b7f      	ldr	r3, [pc, #508]	; (80078a8 <_printf_float+0x2dc>)
 80076ac:	e7d3      	b.n	8007656 <_printf_float+0x8a>
 80076ae:	6863      	ldr	r3, [r4, #4]
 80076b0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	d142      	bne.n	800773e <_printf_float+0x172>
 80076b8:	2306      	movs	r3, #6
 80076ba:	6063      	str	r3, [r4, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	9206      	str	r2, [sp, #24]
 80076c0:	aa0e      	add	r2, sp, #56	; 0x38
 80076c2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80076c6:	aa0d      	add	r2, sp, #52	; 0x34
 80076c8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80076cc:	9203      	str	r2, [sp, #12]
 80076ce:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80076d2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80076d6:	6023      	str	r3, [r4, #0]
 80076d8:	6863      	ldr	r3, [r4, #4]
 80076da:	4642      	mov	r2, r8
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4628      	mov	r0, r5
 80076e0:	4653      	mov	r3, sl
 80076e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80076e4:	f7ff fed4 	bl	8007490 <__cvt>
 80076e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076ea:	4680      	mov	r8, r0
 80076ec:	2947      	cmp	r1, #71	; 0x47
 80076ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80076f0:	d108      	bne.n	8007704 <_printf_float+0x138>
 80076f2:	1cc8      	adds	r0, r1, #3
 80076f4:	db02      	blt.n	80076fc <_printf_float+0x130>
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	4299      	cmp	r1, r3
 80076fa:	dd40      	ble.n	800777e <_printf_float+0x1b2>
 80076fc:	f1a9 0902 	sub.w	r9, r9, #2
 8007700:	fa5f f989 	uxtb.w	r9, r9
 8007704:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007708:	d81f      	bhi.n	800774a <_printf_float+0x17e>
 800770a:	464a      	mov	r2, r9
 800770c:	3901      	subs	r1, #1
 800770e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007712:	910d      	str	r1, [sp, #52]	; 0x34
 8007714:	f7ff ff1b 	bl	800754e <__exponent>
 8007718:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800771a:	4682      	mov	sl, r0
 800771c:	1813      	adds	r3, r2, r0
 800771e:	2a01      	cmp	r2, #1
 8007720:	6123      	str	r3, [r4, #16]
 8007722:	dc02      	bgt.n	800772a <_printf_float+0x15e>
 8007724:	6822      	ldr	r2, [r4, #0]
 8007726:	07d2      	lsls	r2, r2, #31
 8007728:	d501      	bpl.n	800772e <_printf_float+0x162>
 800772a:	3301      	adds	r3, #1
 800772c:	6123      	str	r3, [r4, #16]
 800772e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007732:	2b00      	cmp	r3, #0
 8007734:	d09b      	beq.n	800766e <_printf_float+0xa2>
 8007736:	232d      	movs	r3, #45	; 0x2d
 8007738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800773c:	e797      	b.n	800766e <_printf_float+0xa2>
 800773e:	2947      	cmp	r1, #71	; 0x47
 8007740:	d1bc      	bne.n	80076bc <_printf_float+0xf0>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1ba      	bne.n	80076bc <_printf_float+0xf0>
 8007746:	2301      	movs	r3, #1
 8007748:	e7b7      	b.n	80076ba <_printf_float+0xee>
 800774a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800774e:	d118      	bne.n	8007782 <_printf_float+0x1b6>
 8007750:	2900      	cmp	r1, #0
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	dd0b      	ble.n	800776e <_printf_float+0x1a2>
 8007756:	6121      	str	r1, [r4, #16]
 8007758:	b913      	cbnz	r3, 8007760 <_printf_float+0x194>
 800775a:	6822      	ldr	r2, [r4, #0]
 800775c:	07d0      	lsls	r0, r2, #31
 800775e:	d502      	bpl.n	8007766 <_printf_float+0x19a>
 8007760:	3301      	adds	r3, #1
 8007762:	440b      	add	r3, r1
 8007764:	6123      	str	r3, [r4, #16]
 8007766:	f04f 0a00 	mov.w	sl, #0
 800776a:	65a1      	str	r1, [r4, #88]	; 0x58
 800776c:	e7df      	b.n	800772e <_printf_float+0x162>
 800776e:	b913      	cbnz	r3, 8007776 <_printf_float+0x1aa>
 8007770:	6822      	ldr	r2, [r4, #0]
 8007772:	07d2      	lsls	r2, r2, #31
 8007774:	d501      	bpl.n	800777a <_printf_float+0x1ae>
 8007776:	3302      	adds	r3, #2
 8007778:	e7f4      	b.n	8007764 <_printf_float+0x198>
 800777a:	2301      	movs	r3, #1
 800777c:	e7f2      	b.n	8007764 <_printf_float+0x198>
 800777e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007784:	4299      	cmp	r1, r3
 8007786:	db05      	blt.n	8007794 <_printf_float+0x1c8>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	6121      	str	r1, [r4, #16]
 800778c:	07d8      	lsls	r0, r3, #31
 800778e:	d5ea      	bpl.n	8007766 <_printf_float+0x19a>
 8007790:	1c4b      	adds	r3, r1, #1
 8007792:	e7e7      	b.n	8007764 <_printf_float+0x198>
 8007794:	2900      	cmp	r1, #0
 8007796:	bfcc      	ite	gt
 8007798:	2201      	movgt	r2, #1
 800779a:	f1c1 0202 	rsble	r2, r1, #2
 800779e:	4413      	add	r3, r2
 80077a0:	e7e0      	b.n	8007764 <_printf_float+0x198>
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	055a      	lsls	r2, r3, #21
 80077a6:	d407      	bmi.n	80077b8 <_printf_float+0x1ec>
 80077a8:	6923      	ldr	r3, [r4, #16]
 80077aa:	4642      	mov	r2, r8
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	d12b      	bne.n	800780e <_printf_float+0x242>
 80077b6:	e764      	b.n	8007682 <_printf_float+0xb6>
 80077b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80077bc:	f240 80dd 	bls.w	800797a <_printf_float+0x3ae>
 80077c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077c4:	2200      	movs	r2, #0
 80077c6:	2300      	movs	r3, #0
 80077c8:	f7f9 f8ee 	bl	80009a8 <__aeabi_dcmpeq>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	d033      	beq.n	8007838 <_printf_float+0x26c>
 80077d0:	2301      	movs	r3, #1
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	4a35      	ldr	r2, [pc, #212]	; (80078ac <_printf_float+0x2e0>)
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f af51 	beq.w	8007682 <_printf_float+0xb6>
 80077e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077e4:	429a      	cmp	r2, r3
 80077e6:	db02      	blt.n	80077ee <_printf_float+0x222>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	07d8      	lsls	r0, r3, #31
 80077ec:	d50f      	bpl.n	800780e <_printf_float+0x242>
 80077ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	f43f af42 	beq.w	8007682 <_printf_float+0xb6>
 80077fe:	f04f 0800 	mov.w	r8, #0
 8007802:	f104 091a 	add.w	r9, r4, #26
 8007806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007808:	3b01      	subs	r3, #1
 800780a:	4543      	cmp	r3, r8
 800780c:	dc09      	bgt.n	8007822 <_printf_float+0x256>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	079b      	lsls	r3, r3, #30
 8007812:	f100 8102 	bmi.w	8007a1a <_printf_float+0x44e>
 8007816:	68e0      	ldr	r0, [r4, #12]
 8007818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800781a:	4298      	cmp	r0, r3
 800781c:	bfb8      	it	lt
 800781e:	4618      	movlt	r0, r3
 8007820:	e731      	b.n	8007686 <_printf_float+0xba>
 8007822:	2301      	movs	r3, #1
 8007824:	464a      	mov	r2, r9
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	47b8      	blx	r7
 800782c:	3001      	adds	r0, #1
 800782e:	f43f af28 	beq.w	8007682 <_printf_float+0xb6>
 8007832:	f108 0801 	add.w	r8, r8, #1
 8007836:	e7e6      	b.n	8007806 <_printf_float+0x23a>
 8007838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800783a:	2b00      	cmp	r3, #0
 800783c:	dc38      	bgt.n	80078b0 <_printf_float+0x2e4>
 800783e:	2301      	movs	r3, #1
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	4a19      	ldr	r2, [pc, #100]	; (80078ac <_printf_float+0x2e0>)
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	f43f af1a 	beq.w	8007682 <_printf_float+0xb6>
 800784e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007852:	4313      	orrs	r3, r2
 8007854:	d102      	bne.n	800785c <_printf_float+0x290>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	07d9      	lsls	r1, r3, #31
 800785a:	d5d8      	bpl.n	800780e <_printf_float+0x242>
 800785c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f af0b 	beq.w	8007682 <_printf_float+0xb6>
 800786c:	f04f 0900 	mov.w	r9, #0
 8007870:	f104 0a1a 	add.w	sl, r4, #26
 8007874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007876:	425b      	negs	r3, r3
 8007878:	454b      	cmp	r3, r9
 800787a:	dc01      	bgt.n	8007880 <_printf_float+0x2b4>
 800787c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800787e:	e794      	b.n	80077aa <_printf_float+0x1de>
 8007880:	2301      	movs	r3, #1
 8007882:	4652      	mov	r2, sl
 8007884:	4631      	mov	r1, r6
 8007886:	4628      	mov	r0, r5
 8007888:	47b8      	blx	r7
 800788a:	3001      	adds	r0, #1
 800788c:	f43f aef9 	beq.w	8007682 <_printf_float+0xb6>
 8007890:	f109 0901 	add.w	r9, r9, #1
 8007894:	e7ee      	b.n	8007874 <_printf_float+0x2a8>
 8007896:	bf00      	nop
 8007898:	7fefffff 	.word	0x7fefffff
 800789c:	08009dc4 	.word	0x08009dc4
 80078a0:	08009dc8 	.word	0x08009dc8
 80078a4:	08009dd0 	.word	0x08009dd0
 80078a8:	08009dcc 	.word	0x08009dcc
 80078ac:	08009dd4 	.word	0x08009dd4
 80078b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078b4:	429a      	cmp	r2, r3
 80078b6:	bfa8      	it	ge
 80078b8:	461a      	movge	r2, r3
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	4691      	mov	r9, r2
 80078be:	dc37      	bgt.n	8007930 <_printf_float+0x364>
 80078c0:	f04f 0b00 	mov.w	fp, #0
 80078c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078c8:	f104 021a 	add.w	r2, r4, #26
 80078cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80078d0:	ebaa 0309 	sub.w	r3, sl, r9
 80078d4:	455b      	cmp	r3, fp
 80078d6:	dc33      	bgt.n	8007940 <_printf_float+0x374>
 80078d8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80078dc:	429a      	cmp	r2, r3
 80078de:	db3b      	blt.n	8007958 <_printf_float+0x38c>
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	07da      	lsls	r2, r3, #31
 80078e4:	d438      	bmi.n	8007958 <_printf_float+0x38c>
 80078e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80078ea:	eba3 020a 	sub.w	r2, r3, sl
 80078ee:	eba3 0901 	sub.w	r9, r3, r1
 80078f2:	4591      	cmp	r9, r2
 80078f4:	bfa8      	it	ge
 80078f6:	4691      	movge	r9, r2
 80078f8:	f1b9 0f00 	cmp.w	r9, #0
 80078fc:	dc34      	bgt.n	8007968 <_printf_float+0x39c>
 80078fe:	f04f 0800 	mov.w	r8, #0
 8007902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007906:	f104 0a1a 	add.w	sl, r4, #26
 800790a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800790e:	1a9b      	subs	r3, r3, r2
 8007910:	eba3 0309 	sub.w	r3, r3, r9
 8007914:	4543      	cmp	r3, r8
 8007916:	f77f af7a 	ble.w	800780e <_printf_float+0x242>
 800791a:	2301      	movs	r3, #1
 800791c:	4652      	mov	r2, sl
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	f43f aeac 	beq.w	8007682 <_printf_float+0xb6>
 800792a:	f108 0801 	add.w	r8, r8, #1
 800792e:	e7ec      	b.n	800790a <_printf_float+0x33e>
 8007930:	4613      	mov	r3, r2
 8007932:	4631      	mov	r1, r6
 8007934:	4642      	mov	r2, r8
 8007936:	4628      	mov	r0, r5
 8007938:	47b8      	blx	r7
 800793a:	3001      	adds	r0, #1
 800793c:	d1c0      	bne.n	80078c0 <_printf_float+0x2f4>
 800793e:	e6a0      	b.n	8007682 <_printf_float+0xb6>
 8007940:	2301      	movs	r3, #1
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	920b      	str	r2, [sp, #44]	; 0x2c
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	f43f ae99 	beq.w	8007682 <_printf_float+0xb6>
 8007950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007952:	f10b 0b01 	add.w	fp, fp, #1
 8007956:	e7b9      	b.n	80078cc <_printf_float+0x300>
 8007958:	4631      	mov	r1, r6
 800795a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	d1bf      	bne.n	80078e6 <_printf_float+0x31a>
 8007966:	e68c      	b.n	8007682 <_printf_float+0xb6>
 8007968:	464b      	mov	r3, r9
 800796a:	4631      	mov	r1, r6
 800796c:	4628      	mov	r0, r5
 800796e:	eb08 020a 	add.w	r2, r8, sl
 8007972:	47b8      	blx	r7
 8007974:	3001      	adds	r0, #1
 8007976:	d1c2      	bne.n	80078fe <_printf_float+0x332>
 8007978:	e683      	b.n	8007682 <_printf_float+0xb6>
 800797a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800797c:	2a01      	cmp	r2, #1
 800797e:	dc01      	bgt.n	8007984 <_printf_float+0x3b8>
 8007980:	07db      	lsls	r3, r3, #31
 8007982:	d537      	bpl.n	80079f4 <_printf_float+0x428>
 8007984:	2301      	movs	r3, #1
 8007986:	4642      	mov	r2, r8
 8007988:	4631      	mov	r1, r6
 800798a:	4628      	mov	r0, r5
 800798c:	47b8      	blx	r7
 800798e:	3001      	adds	r0, #1
 8007990:	f43f ae77 	beq.w	8007682 <_printf_float+0xb6>
 8007994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f ae6f 	beq.w	8007682 <_printf_float+0xb6>
 80079a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079a8:	2200      	movs	r2, #0
 80079aa:	2300      	movs	r3, #0
 80079ac:	f7f8 fffc 	bl	80009a8 <__aeabi_dcmpeq>
 80079b0:	b9d8      	cbnz	r0, 80079ea <_printf_float+0x41e>
 80079b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079b4:	f108 0201 	add.w	r2, r8, #1
 80079b8:	3b01      	subs	r3, #1
 80079ba:	4631      	mov	r1, r6
 80079bc:	4628      	mov	r0, r5
 80079be:	47b8      	blx	r7
 80079c0:	3001      	adds	r0, #1
 80079c2:	d10e      	bne.n	80079e2 <_printf_float+0x416>
 80079c4:	e65d      	b.n	8007682 <_printf_float+0xb6>
 80079c6:	2301      	movs	r3, #1
 80079c8:	464a      	mov	r2, r9
 80079ca:	4631      	mov	r1, r6
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b8      	blx	r7
 80079d0:	3001      	adds	r0, #1
 80079d2:	f43f ae56 	beq.w	8007682 <_printf_float+0xb6>
 80079d6:	f108 0801 	add.w	r8, r8, #1
 80079da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079dc:	3b01      	subs	r3, #1
 80079de:	4543      	cmp	r3, r8
 80079e0:	dcf1      	bgt.n	80079c6 <_printf_float+0x3fa>
 80079e2:	4653      	mov	r3, sl
 80079e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80079e8:	e6e0      	b.n	80077ac <_printf_float+0x1e0>
 80079ea:	f04f 0800 	mov.w	r8, #0
 80079ee:	f104 091a 	add.w	r9, r4, #26
 80079f2:	e7f2      	b.n	80079da <_printf_float+0x40e>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4642      	mov	r2, r8
 80079f8:	e7df      	b.n	80079ba <_printf_float+0x3ee>
 80079fa:	2301      	movs	r3, #1
 80079fc:	464a      	mov	r2, r9
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b8      	blx	r7
 8007a04:	3001      	adds	r0, #1
 8007a06:	f43f ae3c 	beq.w	8007682 <_printf_float+0xb6>
 8007a0a:	f108 0801 	add.w	r8, r8, #1
 8007a0e:	68e3      	ldr	r3, [r4, #12]
 8007a10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a12:	1a5b      	subs	r3, r3, r1
 8007a14:	4543      	cmp	r3, r8
 8007a16:	dcf0      	bgt.n	80079fa <_printf_float+0x42e>
 8007a18:	e6fd      	b.n	8007816 <_printf_float+0x24a>
 8007a1a:	f04f 0800 	mov.w	r8, #0
 8007a1e:	f104 0919 	add.w	r9, r4, #25
 8007a22:	e7f4      	b.n	8007a0e <_printf_float+0x442>

08007a24 <_printf_common>:
 8007a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	4616      	mov	r6, r2
 8007a2a:	4699      	mov	r9, r3
 8007a2c:	688a      	ldr	r2, [r1, #8]
 8007a2e:	690b      	ldr	r3, [r1, #16]
 8007a30:	4607      	mov	r7, r0
 8007a32:	4293      	cmp	r3, r2
 8007a34:	bfb8      	it	lt
 8007a36:	4613      	movlt	r3, r2
 8007a38:	6033      	str	r3, [r6, #0]
 8007a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a3e:	460c      	mov	r4, r1
 8007a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a44:	b10a      	cbz	r2, 8007a4a <_printf_common+0x26>
 8007a46:	3301      	adds	r3, #1
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	0699      	lsls	r1, r3, #26
 8007a4e:	bf42      	ittt	mi
 8007a50:	6833      	ldrmi	r3, [r6, #0]
 8007a52:	3302      	addmi	r3, #2
 8007a54:	6033      	strmi	r3, [r6, #0]
 8007a56:	6825      	ldr	r5, [r4, #0]
 8007a58:	f015 0506 	ands.w	r5, r5, #6
 8007a5c:	d106      	bne.n	8007a6c <_printf_common+0x48>
 8007a5e:	f104 0a19 	add.w	sl, r4, #25
 8007a62:	68e3      	ldr	r3, [r4, #12]
 8007a64:	6832      	ldr	r2, [r6, #0]
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	42ab      	cmp	r3, r5
 8007a6a:	dc28      	bgt.n	8007abe <_printf_common+0x9a>
 8007a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a70:	1e13      	subs	r3, r2, #0
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	bf18      	it	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	0692      	lsls	r2, r2, #26
 8007a7a:	d42d      	bmi.n	8007ad8 <_printf_common+0xb4>
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a84:	47c0      	blx	r8
 8007a86:	3001      	adds	r0, #1
 8007a88:	d020      	beq.n	8007acc <_printf_common+0xa8>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	68e5      	ldr	r5, [r4, #12]
 8007a8e:	f003 0306 	and.w	r3, r3, #6
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	bf18      	it	ne
 8007a96:	2500      	movne	r5, #0
 8007a98:	6832      	ldr	r2, [r6, #0]
 8007a9a:	f04f 0600 	mov.w	r6, #0
 8007a9e:	68a3      	ldr	r3, [r4, #8]
 8007aa0:	bf08      	it	eq
 8007aa2:	1aad      	subeq	r5, r5, r2
 8007aa4:	6922      	ldr	r2, [r4, #16]
 8007aa6:	bf08      	it	eq
 8007aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bfc4      	itt	gt
 8007ab0:	1a9b      	subgt	r3, r3, r2
 8007ab2:	18ed      	addgt	r5, r5, r3
 8007ab4:	341a      	adds	r4, #26
 8007ab6:	42b5      	cmp	r5, r6
 8007ab8:	d11a      	bne.n	8007af0 <_printf_common+0xcc>
 8007aba:	2000      	movs	r0, #0
 8007abc:	e008      	b.n	8007ad0 <_printf_common+0xac>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4652      	mov	r2, sl
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	47c0      	blx	r8
 8007ac8:	3001      	adds	r0, #1
 8007aca:	d103      	bne.n	8007ad4 <_printf_common+0xb0>
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	e7c4      	b.n	8007a62 <_printf_common+0x3e>
 8007ad8:	2030      	movs	r0, #48	; 0x30
 8007ada:	18e1      	adds	r1, r4, r3
 8007adc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ae6:	4422      	add	r2, r4
 8007ae8:	3302      	adds	r3, #2
 8007aea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007aee:	e7c5      	b.n	8007a7c <_printf_common+0x58>
 8007af0:	2301      	movs	r3, #1
 8007af2:	4622      	mov	r2, r4
 8007af4:	4649      	mov	r1, r9
 8007af6:	4638      	mov	r0, r7
 8007af8:	47c0      	blx	r8
 8007afa:	3001      	adds	r0, #1
 8007afc:	d0e6      	beq.n	8007acc <_printf_common+0xa8>
 8007afe:	3601      	adds	r6, #1
 8007b00:	e7d9      	b.n	8007ab6 <_printf_common+0x92>
	...

08007b04 <_printf_i>:
 8007b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b08:	7e0f      	ldrb	r7, [r1, #24]
 8007b0a:	4691      	mov	r9, r2
 8007b0c:	2f78      	cmp	r7, #120	; 0x78
 8007b0e:	4680      	mov	r8, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	469a      	mov	sl, r3
 8007b14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b1a:	d807      	bhi.n	8007b2c <_printf_i+0x28>
 8007b1c:	2f62      	cmp	r7, #98	; 0x62
 8007b1e:	d80a      	bhi.n	8007b36 <_printf_i+0x32>
 8007b20:	2f00      	cmp	r7, #0
 8007b22:	f000 80d9 	beq.w	8007cd8 <_printf_i+0x1d4>
 8007b26:	2f58      	cmp	r7, #88	; 0x58
 8007b28:	f000 80a4 	beq.w	8007c74 <_printf_i+0x170>
 8007b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b34:	e03a      	b.n	8007bac <_printf_i+0xa8>
 8007b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b3a:	2b15      	cmp	r3, #21
 8007b3c:	d8f6      	bhi.n	8007b2c <_printf_i+0x28>
 8007b3e:	a101      	add	r1, pc, #4	; (adr r1, 8007b44 <_printf_i+0x40>)
 8007b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b44:	08007b9d 	.word	0x08007b9d
 8007b48:	08007bb1 	.word	0x08007bb1
 8007b4c:	08007b2d 	.word	0x08007b2d
 8007b50:	08007b2d 	.word	0x08007b2d
 8007b54:	08007b2d 	.word	0x08007b2d
 8007b58:	08007b2d 	.word	0x08007b2d
 8007b5c:	08007bb1 	.word	0x08007bb1
 8007b60:	08007b2d 	.word	0x08007b2d
 8007b64:	08007b2d 	.word	0x08007b2d
 8007b68:	08007b2d 	.word	0x08007b2d
 8007b6c:	08007b2d 	.word	0x08007b2d
 8007b70:	08007cbf 	.word	0x08007cbf
 8007b74:	08007be1 	.word	0x08007be1
 8007b78:	08007ca1 	.word	0x08007ca1
 8007b7c:	08007b2d 	.word	0x08007b2d
 8007b80:	08007b2d 	.word	0x08007b2d
 8007b84:	08007ce1 	.word	0x08007ce1
 8007b88:	08007b2d 	.word	0x08007b2d
 8007b8c:	08007be1 	.word	0x08007be1
 8007b90:	08007b2d 	.word	0x08007b2d
 8007b94:	08007b2d 	.word	0x08007b2d
 8007b98:	08007ca9 	.word	0x08007ca9
 8007b9c:	682b      	ldr	r3, [r5, #0]
 8007b9e:	1d1a      	adds	r2, r3, #4
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	602a      	str	r2, [r5, #0]
 8007ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bac:	2301      	movs	r3, #1
 8007bae:	e0a4      	b.n	8007cfa <_printf_i+0x1f6>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	6829      	ldr	r1, [r5, #0]
 8007bb4:	0606      	lsls	r6, r0, #24
 8007bb6:	f101 0304 	add.w	r3, r1, #4
 8007bba:	d50a      	bpl.n	8007bd2 <_printf_i+0xce>
 8007bbc:	680e      	ldr	r6, [r1, #0]
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	2e00      	cmp	r6, #0
 8007bc2:	da03      	bge.n	8007bcc <_printf_i+0xc8>
 8007bc4:	232d      	movs	r3, #45	; 0x2d
 8007bc6:	4276      	negs	r6, r6
 8007bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bcc:	230a      	movs	r3, #10
 8007bce:	485e      	ldr	r0, [pc, #376]	; (8007d48 <_printf_i+0x244>)
 8007bd0:	e019      	b.n	8007c06 <_printf_i+0x102>
 8007bd2:	680e      	ldr	r6, [r1, #0]
 8007bd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007bd8:	602b      	str	r3, [r5, #0]
 8007bda:	bf18      	it	ne
 8007bdc:	b236      	sxthne	r6, r6
 8007bde:	e7ef      	b.n	8007bc0 <_printf_i+0xbc>
 8007be0:	682b      	ldr	r3, [r5, #0]
 8007be2:	6820      	ldr	r0, [r4, #0]
 8007be4:	1d19      	adds	r1, r3, #4
 8007be6:	6029      	str	r1, [r5, #0]
 8007be8:	0601      	lsls	r1, r0, #24
 8007bea:	d501      	bpl.n	8007bf0 <_printf_i+0xec>
 8007bec:	681e      	ldr	r6, [r3, #0]
 8007bee:	e002      	b.n	8007bf6 <_printf_i+0xf2>
 8007bf0:	0646      	lsls	r6, r0, #25
 8007bf2:	d5fb      	bpl.n	8007bec <_printf_i+0xe8>
 8007bf4:	881e      	ldrh	r6, [r3, #0]
 8007bf6:	2f6f      	cmp	r7, #111	; 0x6f
 8007bf8:	bf0c      	ite	eq
 8007bfa:	2308      	moveq	r3, #8
 8007bfc:	230a      	movne	r3, #10
 8007bfe:	4852      	ldr	r0, [pc, #328]	; (8007d48 <_printf_i+0x244>)
 8007c00:	2100      	movs	r1, #0
 8007c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c06:	6865      	ldr	r5, [r4, #4]
 8007c08:	2d00      	cmp	r5, #0
 8007c0a:	bfa8      	it	ge
 8007c0c:	6821      	ldrge	r1, [r4, #0]
 8007c0e:	60a5      	str	r5, [r4, #8]
 8007c10:	bfa4      	itt	ge
 8007c12:	f021 0104 	bicge.w	r1, r1, #4
 8007c16:	6021      	strge	r1, [r4, #0]
 8007c18:	b90e      	cbnz	r6, 8007c1e <_printf_i+0x11a>
 8007c1a:	2d00      	cmp	r5, #0
 8007c1c:	d04d      	beq.n	8007cba <_printf_i+0x1b6>
 8007c1e:	4615      	mov	r5, r2
 8007c20:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c24:	fb03 6711 	mls	r7, r3, r1, r6
 8007c28:	5dc7      	ldrb	r7, [r0, r7]
 8007c2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c2e:	4637      	mov	r7, r6
 8007c30:	42bb      	cmp	r3, r7
 8007c32:	460e      	mov	r6, r1
 8007c34:	d9f4      	bls.n	8007c20 <_printf_i+0x11c>
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	d10b      	bne.n	8007c52 <_printf_i+0x14e>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	07de      	lsls	r6, r3, #31
 8007c3e:	d508      	bpl.n	8007c52 <_printf_i+0x14e>
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	6861      	ldr	r1, [r4, #4]
 8007c44:	4299      	cmp	r1, r3
 8007c46:	bfde      	ittt	le
 8007c48:	2330      	movle	r3, #48	; 0x30
 8007c4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c52:	1b52      	subs	r2, r2, r5
 8007c54:	6122      	str	r2, [r4, #16]
 8007c56:	464b      	mov	r3, r9
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f8cd a000 	str.w	sl, [sp]
 8007c60:	aa03      	add	r2, sp, #12
 8007c62:	f7ff fedf 	bl	8007a24 <_printf_common>
 8007c66:	3001      	adds	r0, #1
 8007c68:	d14c      	bne.n	8007d04 <_printf_i+0x200>
 8007c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6e:	b004      	add	sp, #16
 8007c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c74:	4834      	ldr	r0, [pc, #208]	; (8007d48 <_printf_i+0x244>)
 8007c76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c7a:	6829      	ldr	r1, [r5, #0]
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c82:	6029      	str	r1, [r5, #0]
 8007c84:	061d      	lsls	r5, r3, #24
 8007c86:	d514      	bpl.n	8007cb2 <_printf_i+0x1ae>
 8007c88:	07df      	lsls	r7, r3, #31
 8007c8a:	bf44      	itt	mi
 8007c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8007c90:	6023      	strmi	r3, [r4, #0]
 8007c92:	b91e      	cbnz	r6, 8007c9c <_printf_i+0x198>
 8007c94:	6823      	ldr	r3, [r4, #0]
 8007c96:	f023 0320 	bic.w	r3, r3, #32
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	e7af      	b.n	8007c00 <_printf_i+0xfc>
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	f043 0320 	orr.w	r3, r3, #32
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	2378      	movs	r3, #120	; 0x78
 8007caa:	4828      	ldr	r0, [pc, #160]	; (8007d4c <_printf_i+0x248>)
 8007cac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cb0:	e7e3      	b.n	8007c7a <_printf_i+0x176>
 8007cb2:	0659      	lsls	r1, r3, #25
 8007cb4:	bf48      	it	mi
 8007cb6:	b2b6      	uxthmi	r6, r6
 8007cb8:	e7e6      	b.n	8007c88 <_printf_i+0x184>
 8007cba:	4615      	mov	r5, r2
 8007cbc:	e7bb      	b.n	8007c36 <_printf_i+0x132>
 8007cbe:	682b      	ldr	r3, [r5, #0]
 8007cc0:	6826      	ldr	r6, [r4, #0]
 8007cc2:	1d18      	adds	r0, r3, #4
 8007cc4:	6961      	ldr	r1, [r4, #20]
 8007cc6:	6028      	str	r0, [r5, #0]
 8007cc8:	0635      	lsls	r5, r6, #24
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	d501      	bpl.n	8007cd2 <_printf_i+0x1ce>
 8007cce:	6019      	str	r1, [r3, #0]
 8007cd0:	e002      	b.n	8007cd8 <_printf_i+0x1d4>
 8007cd2:	0670      	lsls	r0, r6, #25
 8007cd4:	d5fb      	bpl.n	8007cce <_printf_i+0x1ca>
 8007cd6:	8019      	strh	r1, [r3, #0]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4615      	mov	r5, r2
 8007cdc:	6123      	str	r3, [r4, #16]
 8007cde:	e7ba      	b.n	8007c56 <_printf_i+0x152>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	1d1a      	adds	r2, r3, #4
 8007ce6:	602a      	str	r2, [r5, #0]
 8007ce8:	681d      	ldr	r5, [r3, #0]
 8007cea:	6862      	ldr	r2, [r4, #4]
 8007cec:	4628      	mov	r0, r5
 8007cee:	f001 f865 	bl	8008dbc <memchr>
 8007cf2:	b108      	cbz	r0, 8007cf8 <_printf_i+0x1f4>
 8007cf4:	1b40      	subs	r0, r0, r5
 8007cf6:	6060      	str	r0, [r4, #4]
 8007cf8:	6863      	ldr	r3, [r4, #4]
 8007cfa:	6123      	str	r3, [r4, #16]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d02:	e7a8      	b.n	8007c56 <_printf_i+0x152>
 8007d04:	462a      	mov	r2, r5
 8007d06:	4649      	mov	r1, r9
 8007d08:	4640      	mov	r0, r8
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	47d0      	blx	sl
 8007d0e:	3001      	adds	r0, #1
 8007d10:	d0ab      	beq.n	8007c6a <_printf_i+0x166>
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	079b      	lsls	r3, r3, #30
 8007d16:	d413      	bmi.n	8007d40 <_printf_i+0x23c>
 8007d18:	68e0      	ldr	r0, [r4, #12]
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	4298      	cmp	r0, r3
 8007d1e:	bfb8      	it	lt
 8007d20:	4618      	movlt	r0, r3
 8007d22:	e7a4      	b.n	8007c6e <_printf_i+0x16a>
 8007d24:	2301      	movs	r3, #1
 8007d26:	4632      	mov	r2, r6
 8007d28:	4649      	mov	r1, r9
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	47d0      	blx	sl
 8007d2e:	3001      	adds	r0, #1
 8007d30:	d09b      	beq.n	8007c6a <_printf_i+0x166>
 8007d32:	3501      	adds	r5, #1
 8007d34:	68e3      	ldr	r3, [r4, #12]
 8007d36:	9903      	ldr	r1, [sp, #12]
 8007d38:	1a5b      	subs	r3, r3, r1
 8007d3a:	42ab      	cmp	r3, r5
 8007d3c:	dcf2      	bgt.n	8007d24 <_printf_i+0x220>
 8007d3e:	e7eb      	b.n	8007d18 <_printf_i+0x214>
 8007d40:	2500      	movs	r5, #0
 8007d42:	f104 0619 	add.w	r6, r4, #25
 8007d46:	e7f5      	b.n	8007d34 <_printf_i+0x230>
 8007d48:	08009dd6 	.word	0x08009dd6
 8007d4c:	08009de7 	.word	0x08009de7

08007d50 <cleanup_glue>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	460c      	mov	r4, r1
 8007d54:	6809      	ldr	r1, [r1, #0]
 8007d56:	4605      	mov	r5, r0
 8007d58:	b109      	cbz	r1, 8007d5e <cleanup_glue+0xe>
 8007d5a:	f7ff fff9 	bl	8007d50 <cleanup_glue>
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4628      	mov	r0, r5
 8007d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d66:	f001 bbd9 	b.w	800951c <_free_r>
	...

08007d6c <_reclaim_reent>:
 8007d6c:	4b2c      	ldr	r3, [pc, #176]	; (8007e20 <_reclaim_reent+0xb4>)
 8007d6e:	b570      	push	{r4, r5, r6, lr}
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4604      	mov	r4, r0
 8007d74:	4283      	cmp	r3, r0
 8007d76:	d051      	beq.n	8007e1c <_reclaim_reent+0xb0>
 8007d78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d7a:	b143      	cbz	r3, 8007d8e <_reclaim_reent+0x22>
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d14a      	bne.n	8007e18 <_reclaim_reent+0xac>
 8007d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d84:	6819      	ldr	r1, [r3, #0]
 8007d86:	b111      	cbz	r1, 8007d8e <_reclaim_reent+0x22>
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f001 fbc7 	bl	800951c <_free_r>
 8007d8e:	6961      	ldr	r1, [r4, #20]
 8007d90:	b111      	cbz	r1, 8007d98 <_reclaim_reent+0x2c>
 8007d92:	4620      	mov	r0, r4
 8007d94:	f001 fbc2 	bl	800951c <_free_r>
 8007d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d9a:	b111      	cbz	r1, 8007da2 <_reclaim_reent+0x36>
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f001 fbbd 	bl	800951c <_free_r>
 8007da2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007da4:	b111      	cbz	r1, 8007dac <_reclaim_reent+0x40>
 8007da6:	4620      	mov	r0, r4
 8007da8:	f001 fbb8 	bl	800951c <_free_r>
 8007dac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007dae:	b111      	cbz	r1, 8007db6 <_reclaim_reent+0x4a>
 8007db0:	4620      	mov	r0, r4
 8007db2:	f001 fbb3 	bl	800951c <_free_r>
 8007db6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007db8:	b111      	cbz	r1, 8007dc0 <_reclaim_reent+0x54>
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f001 fbae 	bl	800951c <_free_r>
 8007dc0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007dc2:	b111      	cbz	r1, 8007dca <_reclaim_reent+0x5e>
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f001 fba9 	bl	800951c <_free_r>
 8007dca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007dcc:	b111      	cbz	r1, 8007dd4 <_reclaim_reent+0x68>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f001 fba4 	bl	800951c <_free_r>
 8007dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd6:	b111      	cbz	r1, 8007dde <_reclaim_reent+0x72>
 8007dd8:	4620      	mov	r0, r4
 8007dda:	f001 fb9f 	bl	800951c <_free_r>
 8007dde:	69a3      	ldr	r3, [r4, #24]
 8007de0:	b1e3      	cbz	r3, 8007e1c <_reclaim_reent+0xb0>
 8007de2:	4620      	mov	r0, r4
 8007de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007de6:	4798      	blx	r3
 8007de8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dea:	b1b9      	cbz	r1, 8007e1c <_reclaim_reent+0xb0>
 8007dec:	4620      	mov	r0, r4
 8007dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007df2:	f7ff bfad 	b.w	8007d50 <cleanup_glue>
 8007df6:	5949      	ldr	r1, [r1, r5]
 8007df8:	b941      	cbnz	r1, 8007e0c <_reclaim_reent+0xa0>
 8007dfa:	3504      	adds	r5, #4
 8007dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dfe:	2d80      	cmp	r5, #128	; 0x80
 8007e00:	68d9      	ldr	r1, [r3, #12]
 8007e02:	d1f8      	bne.n	8007df6 <_reclaim_reent+0x8a>
 8007e04:	4620      	mov	r0, r4
 8007e06:	f001 fb89 	bl	800951c <_free_r>
 8007e0a:	e7ba      	b.n	8007d82 <_reclaim_reent+0x16>
 8007e0c:	680e      	ldr	r6, [r1, #0]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f001 fb84 	bl	800951c <_free_r>
 8007e14:	4631      	mov	r1, r6
 8007e16:	e7ef      	b.n	8007df8 <_reclaim_reent+0x8c>
 8007e18:	2500      	movs	r5, #0
 8007e1a:	e7ef      	b.n	8007dfc <_reclaim_reent+0x90>
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000030 	.word	0x20000030

08007e24 <_sbrk_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	2300      	movs	r3, #0
 8007e28:	4d05      	ldr	r5, [pc, #20]	; (8007e40 <_sbrk_r+0x1c>)
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	602b      	str	r3, [r5, #0]
 8007e30:	f7fa fd10 	bl	8002854 <_sbrk>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_sbrk_r+0x1a>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_sbrk_r+0x1a>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	20001f4c 	.word	0x20001f4c

08007e44 <__sread>:
 8007e44:	b510      	push	{r4, lr}
 8007e46:	460c      	mov	r4, r1
 8007e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4c:	f001 fbae 	bl	80095ac <_read_r>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	bfab      	itete	ge
 8007e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e56:	89a3      	ldrhlt	r3, [r4, #12]
 8007e58:	181b      	addge	r3, r3, r0
 8007e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e5e:	bfac      	ite	ge
 8007e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e62:	81a3      	strhlt	r3, [r4, #12]
 8007e64:	bd10      	pop	{r4, pc}

08007e66 <__swrite>:
 8007e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6a:	461f      	mov	r7, r3
 8007e6c:	898b      	ldrh	r3, [r1, #12]
 8007e6e:	4605      	mov	r5, r0
 8007e70:	05db      	lsls	r3, r3, #23
 8007e72:	460c      	mov	r4, r1
 8007e74:	4616      	mov	r6, r2
 8007e76:	d505      	bpl.n	8007e84 <__swrite+0x1e>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e80:	f000 ff82 	bl	8008d88 <_lseek_r>
 8007e84:	89a3      	ldrh	r3, [r4, #12]
 8007e86:	4632      	mov	r2, r6
 8007e88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e8c:	81a3      	strh	r3, [r4, #12]
 8007e8e:	4628      	mov	r0, r5
 8007e90:	463b      	mov	r3, r7
 8007e92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e9a:	f000 b817 	b.w	8007ecc <_write_r>

08007e9e <__sseek>:
 8007e9e:	b510      	push	{r4, lr}
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea6:	f000 ff6f 	bl	8008d88 <_lseek_r>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	bf15      	itete	ne
 8007eb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007eb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007eb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eba:	81a3      	strheq	r3, [r4, #12]
 8007ebc:	bf18      	it	ne
 8007ebe:	81a3      	strhne	r3, [r4, #12]
 8007ec0:	bd10      	pop	{r4, pc}

08007ec2 <__sclose>:
 8007ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec6:	f000 b813 	b.w	8007ef0 <_close_r>
	...

08007ecc <_write_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4604      	mov	r4, r0
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4d05      	ldr	r5, [pc, #20]	; (8007eec <_write_r+0x20>)
 8007ed8:	602a      	str	r2, [r5, #0]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f7fa fca0 	bl	8002820 <_write>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d102      	bne.n	8007eea <_write_r+0x1e>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b103      	cbz	r3, 8007eea <_write_r+0x1e>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	20001f4c 	.word	0x20001f4c

08007ef0 <_close_r>:
 8007ef0:	b538      	push	{r3, r4, r5, lr}
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	4d05      	ldr	r5, [pc, #20]	; (8007f0c <_close_r+0x1c>)
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	4608      	mov	r0, r1
 8007efa:	602b      	str	r3, [r5, #0]
 8007efc:	f7fa fc9e 	bl	800283c <_close>
 8007f00:	1c43      	adds	r3, r0, #1
 8007f02:	d102      	bne.n	8007f0a <_close_r+0x1a>
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	b103      	cbz	r3, 8007f0a <_close_r+0x1a>
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	bd38      	pop	{r3, r4, r5, pc}
 8007f0c:	20001f4c 	.word	0x20001f4c

08007f10 <quorem>:
 8007f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	6903      	ldr	r3, [r0, #16]
 8007f16:	690c      	ldr	r4, [r1, #16]
 8007f18:	4607      	mov	r7, r0
 8007f1a:	42a3      	cmp	r3, r4
 8007f1c:	f2c0 8082 	blt.w	8008024 <quorem+0x114>
 8007f20:	3c01      	subs	r4, #1
 8007f22:	f100 0514 	add.w	r5, r0, #20
 8007f26:	f101 0814 	add.w	r8, r1, #20
 8007f2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f2e:	9301      	str	r3, [sp, #4]
 8007f30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f48:	d331      	bcc.n	8007fae <quorem+0x9e>
 8007f4a:	f04f 0e00 	mov.w	lr, #0
 8007f4e:	4640      	mov	r0, r8
 8007f50:	46ac      	mov	ip, r5
 8007f52:	46f2      	mov	sl, lr
 8007f54:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f58:	b293      	uxth	r3, r2
 8007f5a:	fb06 e303 	mla	r3, r6, r3, lr
 8007f5e:	0c12      	lsrs	r2, r2, #16
 8007f60:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	fb06 e202 	mla	r2, r6, r2, lr
 8007f6a:	ebaa 0303 	sub.w	r3, sl, r3
 8007f6e:	f8dc a000 	ldr.w	sl, [ip]
 8007f72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f76:	fa1f fa8a 	uxth.w	sl, sl
 8007f7a:	4453      	add	r3, sl
 8007f7c:	f8dc a000 	ldr.w	sl, [ip]
 8007f80:	b292      	uxth	r2, r2
 8007f82:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f90:	4581      	cmp	r9, r0
 8007f92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f96:	f84c 3b04 	str.w	r3, [ip], #4
 8007f9a:	d2db      	bcs.n	8007f54 <quorem+0x44>
 8007f9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fa0:	b92b      	cbnz	r3, 8007fae <quorem+0x9e>
 8007fa2:	9b01      	ldr	r3, [sp, #4]
 8007fa4:	3b04      	subs	r3, #4
 8007fa6:	429d      	cmp	r5, r3
 8007fa8:	461a      	mov	r2, r3
 8007faa:	d32f      	bcc.n	800800c <quorem+0xfc>
 8007fac:	613c      	str	r4, [r7, #16]
 8007fae:	4638      	mov	r0, r7
 8007fb0:	f001 f99c 	bl	80092ec <__mcmp>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	db25      	blt.n	8008004 <quorem+0xf4>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f04f 0c00 	mov.w	ip, #0
 8007fbe:	3601      	adds	r6, #1
 8007fc0:	f858 1b04 	ldr.w	r1, [r8], #4
 8007fc4:	f8d0 e000 	ldr.w	lr, [r0]
 8007fc8:	b28b      	uxth	r3, r1
 8007fca:	ebac 0303 	sub.w	r3, ip, r3
 8007fce:	fa1f f28e 	uxth.w	r2, lr
 8007fd2:	4413      	add	r3, r2
 8007fd4:	0c0a      	lsrs	r2, r1, #16
 8007fd6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007fda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fe4:	45c1      	cmp	r9, r8
 8007fe6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007fea:	f840 3b04 	str.w	r3, [r0], #4
 8007fee:	d2e7      	bcs.n	8007fc0 <quorem+0xb0>
 8007ff0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ff4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ff8:	b922      	cbnz	r2, 8008004 <quorem+0xf4>
 8007ffa:	3b04      	subs	r3, #4
 8007ffc:	429d      	cmp	r5, r3
 8007ffe:	461a      	mov	r2, r3
 8008000:	d30a      	bcc.n	8008018 <quorem+0x108>
 8008002:	613c      	str	r4, [r7, #16]
 8008004:	4630      	mov	r0, r6
 8008006:	b003      	add	sp, #12
 8008008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800c:	6812      	ldr	r2, [r2, #0]
 800800e:	3b04      	subs	r3, #4
 8008010:	2a00      	cmp	r2, #0
 8008012:	d1cb      	bne.n	8007fac <quorem+0x9c>
 8008014:	3c01      	subs	r4, #1
 8008016:	e7c6      	b.n	8007fa6 <quorem+0x96>
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	3b04      	subs	r3, #4
 800801c:	2a00      	cmp	r2, #0
 800801e:	d1f0      	bne.n	8008002 <quorem+0xf2>
 8008020:	3c01      	subs	r4, #1
 8008022:	e7eb      	b.n	8007ffc <quorem+0xec>
 8008024:	2000      	movs	r0, #0
 8008026:	e7ee      	b.n	8008006 <quorem+0xf6>

08008028 <_dtoa_r>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	4616      	mov	r6, r2
 800802e:	461f      	mov	r7, r3
 8008030:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008032:	b099      	sub	sp, #100	; 0x64
 8008034:	4605      	mov	r5, r0
 8008036:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800803a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800803e:	b974      	cbnz	r4, 800805e <_dtoa_r+0x36>
 8008040:	2010      	movs	r0, #16
 8008042:	f000 feb3 	bl	8008dac <malloc>
 8008046:	4602      	mov	r2, r0
 8008048:	6268      	str	r0, [r5, #36]	; 0x24
 800804a:	b920      	cbnz	r0, 8008056 <_dtoa_r+0x2e>
 800804c:	21ea      	movs	r1, #234	; 0xea
 800804e:	4ba8      	ldr	r3, [pc, #672]	; (80082f0 <_dtoa_r+0x2c8>)
 8008050:	48a8      	ldr	r0, [pc, #672]	; (80082f4 <_dtoa_r+0x2cc>)
 8008052:	f001 fabd 	bl	80095d0 <__assert_func>
 8008056:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800805a:	6004      	str	r4, [r0, #0]
 800805c:	60c4      	str	r4, [r0, #12]
 800805e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008060:	6819      	ldr	r1, [r3, #0]
 8008062:	b151      	cbz	r1, 800807a <_dtoa_r+0x52>
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	2301      	movs	r3, #1
 8008068:	4093      	lsls	r3, r2
 800806a:	604a      	str	r2, [r1, #4]
 800806c:	608b      	str	r3, [r1, #8]
 800806e:	4628      	mov	r0, r5
 8008070:	f000 fefe 	bl	8008e70 <_Bfree>
 8008074:	2200      	movs	r2, #0
 8008076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	1e3b      	subs	r3, r7, #0
 800807c:	bfaf      	iteee	ge
 800807e:	2300      	movge	r3, #0
 8008080:	2201      	movlt	r2, #1
 8008082:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008086:	9305      	strlt	r3, [sp, #20]
 8008088:	bfa8      	it	ge
 800808a:	f8c8 3000 	strge.w	r3, [r8]
 800808e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008092:	4b99      	ldr	r3, [pc, #612]	; (80082f8 <_dtoa_r+0x2d0>)
 8008094:	bfb8      	it	lt
 8008096:	f8c8 2000 	strlt.w	r2, [r8]
 800809a:	ea33 0309 	bics.w	r3, r3, r9
 800809e:	d119      	bne.n	80080d4 <_dtoa_r+0xac>
 80080a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80080a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080ac:	4333      	orrs	r3, r6
 80080ae:	f000 857f 	beq.w	8008bb0 <_dtoa_r+0xb88>
 80080b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080b4:	b953      	cbnz	r3, 80080cc <_dtoa_r+0xa4>
 80080b6:	4b91      	ldr	r3, [pc, #580]	; (80082fc <_dtoa_r+0x2d4>)
 80080b8:	e022      	b.n	8008100 <_dtoa_r+0xd8>
 80080ba:	4b91      	ldr	r3, [pc, #580]	; (8008300 <_dtoa_r+0x2d8>)
 80080bc:	9303      	str	r3, [sp, #12]
 80080be:	3308      	adds	r3, #8
 80080c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80080c2:	6013      	str	r3, [r2, #0]
 80080c4:	9803      	ldr	r0, [sp, #12]
 80080c6:	b019      	add	sp, #100	; 0x64
 80080c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080cc:	4b8b      	ldr	r3, [pc, #556]	; (80082fc <_dtoa_r+0x2d4>)
 80080ce:	9303      	str	r3, [sp, #12]
 80080d0:	3303      	adds	r3, #3
 80080d2:	e7f5      	b.n	80080c0 <_dtoa_r+0x98>
 80080d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80080d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80080dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80080e0:	2200      	movs	r2, #0
 80080e2:	2300      	movs	r3, #0
 80080e4:	f7f8 fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80080e8:	4680      	mov	r8, r0
 80080ea:	b158      	cbz	r0, 8008104 <_dtoa_r+0xdc>
 80080ec:	2301      	movs	r3, #1
 80080ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 8558 	beq.w	8008baa <_dtoa_r+0xb82>
 80080fa:	4882      	ldr	r0, [pc, #520]	; (8008304 <_dtoa_r+0x2dc>)
 80080fc:	6018      	str	r0, [r3, #0]
 80080fe:	1e43      	subs	r3, r0, #1
 8008100:	9303      	str	r3, [sp, #12]
 8008102:	e7df      	b.n	80080c4 <_dtoa_r+0x9c>
 8008104:	ab16      	add	r3, sp, #88	; 0x58
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	ab17      	add	r3, sp, #92	; 0x5c
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	4628      	mov	r0, r5
 800810e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008112:	f001 f993 	bl	800943c <__d2b>
 8008116:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800811a:	4683      	mov	fp, r0
 800811c:	2c00      	cmp	r4, #0
 800811e:	d07f      	beq.n	8008220 <_dtoa_r+0x1f8>
 8008120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008126:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800812a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800812e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008132:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008136:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800813a:	2200      	movs	r2, #0
 800813c:	4b72      	ldr	r3, [pc, #456]	; (8008308 <_dtoa_r+0x2e0>)
 800813e:	f7f8 f813 	bl	8000168 <__aeabi_dsub>
 8008142:	a365      	add	r3, pc, #404	; (adr r3, 80082d8 <_dtoa_r+0x2b0>)
 8008144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008148:	f7f8 f9c6 	bl	80004d8 <__aeabi_dmul>
 800814c:	a364      	add	r3, pc, #400	; (adr r3, 80082e0 <_dtoa_r+0x2b8>)
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	f7f8 f80b 	bl	800016c <__adddf3>
 8008156:	4606      	mov	r6, r0
 8008158:	4620      	mov	r0, r4
 800815a:	460f      	mov	r7, r1
 800815c:	f7f8 f952 	bl	8000404 <__aeabi_i2d>
 8008160:	a361      	add	r3, pc, #388	; (adr r3, 80082e8 <_dtoa_r+0x2c0>)
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f7f8 f9b7 	bl	80004d8 <__aeabi_dmul>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f7 fffb 	bl	800016c <__adddf3>
 8008176:	4606      	mov	r6, r0
 8008178:	460f      	mov	r7, r1
 800817a:	f7f8 fc5d 	bl	8000a38 <__aeabi_d2iz>
 800817e:	2200      	movs	r2, #0
 8008180:	4682      	mov	sl, r0
 8008182:	2300      	movs	r3, #0
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fc18 	bl	80009bc <__aeabi_dcmplt>
 800818c:	b148      	cbz	r0, 80081a2 <_dtoa_r+0x17a>
 800818e:	4650      	mov	r0, sl
 8008190:	f7f8 f938 	bl	8000404 <__aeabi_i2d>
 8008194:	4632      	mov	r2, r6
 8008196:	463b      	mov	r3, r7
 8008198:	f7f8 fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800819c:	b908      	cbnz	r0, 80081a2 <_dtoa_r+0x17a>
 800819e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081a2:	f1ba 0f16 	cmp.w	sl, #22
 80081a6:	d858      	bhi.n	800825a <_dtoa_r+0x232>
 80081a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081ac:	4b57      	ldr	r3, [pc, #348]	; (800830c <_dtoa_r+0x2e4>)
 80081ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f7f8 fc01 	bl	80009bc <__aeabi_dcmplt>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d04f      	beq.n	800825e <_dtoa_r+0x236>
 80081be:	2300      	movs	r3, #0
 80081c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80081c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80081c8:	1b1c      	subs	r4, r3, r4
 80081ca:	1e63      	subs	r3, r4, #1
 80081cc:	9309      	str	r3, [sp, #36]	; 0x24
 80081ce:	bf49      	itett	mi
 80081d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80081d4:	2300      	movpl	r3, #0
 80081d6:	9306      	strmi	r3, [sp, #24]
 80081d8:	2300      	movmi	r3, #0
 80081da:	bf54      	ite	pl
 80081dc:	9306      	strpl	r3, [sp, #24]
 80081de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80081e0:	f1ba 0f00 	cmp.w	sl, #0
 80081e4:	db3d      	blt.n	8008262 <_dtoa_r+0x23a>
 80081e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80081ec:	4453      	add	r3, sl
 80081ee:	9309      	str	r3, [sp, #36]	; 0x24
 80081f0:	2300      	movs	r3, #0
 80081f2:	930a      	str	r3, [sp, #40]	; 0x28
 80081f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80081f6:	2b09      	cmp	r3, #9
 80081f8:	f200 808c 	bhi.w	8008314 <_dtoa_r+0x2ec>
 80081fc:	2b05      	cmp	r3, #5
 80081fe:	bfc4      	itt	gt
 8008200:	3b04      	subgt	r3, #4
 8008202:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008206:	bfc8      	it	gt
 8008208:	2400      	movgt	r4, #0
 800820a:	f1a3 0302 	sub.w	r3, r3, #2
 800820e:	bfd8      	it	le
 8008210:	2401      	movle	r4, #1
 8008212:	2b03      	cmp	r3, #3
 8008214:	f200 808a 	bhi.w	800832c <_dtoa_r+0x304>
 8008218:	e8df f003 	tbb	[pc, r3]
 800821c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008220:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008224:	441c      	add	r4, r3
 8008226:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800822a:	2b20      	cmp	r3, #32
 800822c:	bfc3      	ittte	gt
 800822e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008232:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008236:	fa09 f303 	lslgt.w	r3, r9, r3
 800823a:	f1c3 0320 	rsble	r3, r3, #32
 800823e:	bfc6      	itte	gt
 8008240:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008244:	4318      	orrgt	r0, r3
 8008246:	fa06 f003 	lslle.w	r0, r6, r3
 800824a:	f7f8 f8cb 	bl	80003e4 <__aeabi_ui2d>
 800824e:	2301      	movs	r3, #1
 8008250:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008254:	3c01      	subs	r4, #1
 8008256:	9313      	str	r3, [sp, #76]	; 0x4c
 8008258:	e76f      	b.n	800813a <_dtoa_r+0x112>
 800825a:	2301      	movs	r3, #1
 800825c:	e7b2      	b.n	80081c4 <_dtoa_r+0x19c>
 800825e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008260:	e7b1      	b.n	80081c6 <_dtoa_r+0x19e>
 8008262:	9b06      	ldr	r3, [sp, #24]
 8008264:	eba3 030a 	sub.w	r3, r3, sl
 8008268:	9306      	str	r3, [sp, #24]
 800826a:	f1ca 0300 	rsb	r3, sl, #0
 800826e:	930a      	str	r3, [sp, #40]	; 0x28
 8008270:	2300      	movs	r3, #0
 8008272:	930e      	str	r3, [sp, #56]	; 0x38
 8008274:	e7be      	b.n	80081f4 <_dtoa_r+0x1cc>
 8008276:	2300      	movs	r3, #0
 8008278:	930b      	str	r3, [sp, #44]	; 0x2c
 800827a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800827c:	2b00      	cmp	r3, #0
 800827e:	dc58      	bgt.n	8008332 <_dtoa_r+0x30a>
 8008280:	f04f 0901 	mov.w	r9, #1
 8008284:	464b      	mov	r3, r9
 8008286:	f8cd 9020 	str.w	r9, [sp, #32]
 800828a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800828e:	2200      	movs	r2, #0
 8008290:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008292:	6042      	str	r2, [r0, #4]
 8008294:	2204      	movs	r2, #4
 8008296:	f102 0614 	add.w	r6, r2, #20
 800829a:	429e      	cmp	r6, r3
 800829c:	6841      	ldr	r1, [r0, #4]
 800829e:	d94e      	bls.n	800833e <_dtoa_r+0x316>
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 fda5 	bl	8008df0 <_Balloc>
 80082a6:	9003      	str	r0, [sp, #12]
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d14c      	bne.n	8008346 <_dtoa_r+0x31e>
 80082ac:	4602      	mov	r2, r0
 80082ae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082b2:	4b17      	ldr	r3, [pc, #92]	; (8008310 <_dtoa_r+0x2e8>)
 80082b4:	e6cc      	b.n	8008050 <_dtoa_r+0x28>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e7de      	b.n	8008278 <_dtoa_r+0x250>
 80082ba:	2300      	movs	r3, #0
 80082bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80082be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082c0:	eb0a 0903 	add.w	r9, sl, r3
 80082c4:	f109 0301 	add.w	r3, r9, #1
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	9308      	str	r3, [sp, #32]
 80082cc:	bfb8      	it	lt
 80082ce:	2301      	movlt	r3, #1
 80082d0:	e7dd      	b.n	800828e <_dtoa_r+0x266>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e7f2      	b.n	80082bc <_dtoa_r+0x294>
 80082d6:	bf00      	nop
 80082d8:	636f4361 	.word	0x636f4361
 80082dc:	3fd287a7 	.word	0x3fd287a7
 80082e0:	8b60c8b3 	.word	0x8b60c8b3
 80082e4:	3fc68a28 	.word	0x3fc68a28
 80082e8:	509f79fb 	.word	0x509f79fb
 80082ec:	3fd34413 	.word	0x3fd34413
 80082f0:	08009e05 	.word	0x08009e05
 80082f4:	08009e1c 	.word	0x08009e1c
 80082f8:	7ff00000 	.word	0x7ff00000
 80082fc:	08009e01 	.word	0x08009e01
 8008300:	08009df8 	.word	0x08009df8
 8008304:	08009dd5 	.word	0x08009dd5
 8008308:	3ff80000 	.word	0x3ff80000
 800830c:	08009f10 	.word	0x08009f10
 8008310:	08009e77 	.word	0x08009e77
 8008314:	2401      	movs	r4, #1
 8008316:	2300      	movs	r3, #0
 8008318:	940b      	str	r4, [sp, #44]	; 0x2c
 800831a:	9322      	str	r3, [sp, #136]	; 0x88
 800831c:	f04f 39ff 	mov.w	r9, #4294967295
 8008320:	2200      	movs	r2, #0
 8008322:	2312      	movs	r3, #18
 8008324:	f8cd 9020 	str.w	r9, [sp, #32]
 8008328:	9223      	str	r2, [sp, #140]	; 0x8c
 800832a:	e7b0      	b.n	800828e <_dtoa_r+0x266>
 800832c:	2301      	movs	r3, #1
 800832e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008330:	e7f4      	b.n	800831c <_dtoa_r+0x2f4>
 8008332:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008336:	464b      	mov	r3, r9
 8008338:	f8cd 9020 	str.w	r9, [sp, #32]
 800833c:	e7a7      	b.n	800828e <_dtoa_r+0x266>
 800833e:	3101      	adds	r1, #1
 8008340:	6041      	str	r1, [r0, #4]
 8008342:	0052      	lsls	r2, r2, #1
 8008344:	e7a7      	b.n	8008296 <_dtoa_r+0x26e>
 8008346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008348:	9a03      	ldr	r2, [sp, #12]
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	9b08      	ldr	r3, [sp, #32]
 800834e:	2b0e      	cmp	r3, #14
 8008350:	f200 80a8 	bhi.w	80084a4 <_dtoa_r+0x47c>
 8008354:	2c00      	cmp	r4, #0
 8008356:	f000 80a5 	beq.w	80084a4 <_dtoa_r+0x47c>
 800835a:	f1ba 0f00 	cmp.w	sl, #0
 800835e:	dd34      	ble.n	80083ca <_dtoa_r+0x3a2>
 8008360:	4a9a      	ldr	r2, [pc, #616]	; (80085cc <_dtoa_r+0x5a4>)
 8008362:	f00a 030f 	and.w	r3, sl, #15
 8008366:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800836a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800836e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008372:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008376:	ea4f 142a 	mov.w	r4, sl, asr #4
 800837a:	d016      	beq.n	80083aa <_dtoa_r+0x382>
 800837c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008380:	4b93      	ldr	r3, [pc, #588]	; (80085d0 <_dtoa_r+0x5a8>)
 8008382:	2703      	movs	r7, #3
 8008384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008388:	f7f8 f9d0 	bl	800072c <__aeabi_ddiv>
 800838c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008390:	f004 040f 	and.w	r4, r4, #15
 8008394:	4e8e      	ldr	r6, [pc, #568]	; (80085d0 <_dtoa_r+0x5a8>)
 8008396:	b954      	cbnz	r4, 80083ae <_dtoa_r+0x386>
 8008398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800839c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a0:	f7f8 f9c4 	bl	800072c <__aeabi_ddiv>
 80083a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083a8:	e029      	b.n	80083fe <_dtoa_r+0x3d6>
 80083aa:	2702      	movs	r7, #2
 80083ac:	e7f2      	b.n	8008394 <_dtoa_r+0x36c>
 80083ae:	07e1      	lsls	r1, r4, #31
 80083b0:	d508      	bpl.n	80083c4 <_dtoa_r+0x39c>
 80083b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083ba:	f7f8 f88d 	bl	80004d8 <__aeabi_dmul>
 80083be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083c2:	3701      	adds	r7, #1
 80083c4:	1064      	asrs	r4, r4, #1
 80083c6:	3608      	adds	r6, #8
 80083c8:	e7e5      	b.n	8008396 <_dtoa_r+0x36e>
 80083ca:	f000 80a5 	beq.w	8008518 <_dtoa_r+0x4f0>
 80083ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083d2:	f1ca 0400 	rsb	r4, sl, #0
 80083d6:	4b7d      	ldr	r3, [pc, #500]	; (80085cc <_dtoa_r+0x5a4>)
 80083d8:	f004 020f 	and.w	r2, r4, #15
 80083dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e4:	f7f8 f878 	bl	80004d8 <__aeabi_dmul>
 80083e8:	2702      	movs	r7, #2
 80083ea:	2300      	movs	r3, #0
 80083ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083f0:	4e77      	ldr	r6, [pc, #476]	; (80085d0 <_dtoa_r+0x5a8>)
 80083f2:	1124      	asrs	r4, r4, #4
 80083f4:	2c00      	cmp	r4, #0
 80083f6:	f040 8084 	bne.w	8008502 <_dtoa_r+0x4da>
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1d2      	bne.n	80083a4 <_dtoa_r+0x37c>
 80083fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 808b 	beq.w	800851c <_dtoa_r+0x4f4>
 8008406:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800840a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800840e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008412:	2200      	movs	r2, #0
 8008414:	4b6f      	ldr	r3, [pc, #444]	; (80085d4 <_dtoa_r+0x5ac>)
 8008416:	f7f8 fad1 	bl	80009bc <__aeabi_dcmplt>
 800841a:	2800      	cmp	r0, #0
 800841c:	d07e      	beq.n	800851c <_dtoa_r+0x4f4>
 800841e:	9b08      	ldr	r3, [sp, #32]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d07b      	beq.n	800851c <_dtoa_r+0x4f4>
 8008424:	f1b9 0f00 	cmp.w	r9, #0
 8008428:	dd38      	ble.n	800849c <_dtoa_r+0x474>
 800842a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800842e:	2200      	movs	r2, #0
 8008430:	4b69      	ldr	r3, [pc, #420]	; (80085d8 <_dtoa_r+0x5b0>)
 8008432:	f7f8 f851 	bl	80004d8 <__aeabi_dmul>
 8008436:	464c      	mov	r4, r9
 8008438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800843c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008440:	3701      	adds	r7, #1
 8008442:	4638      	mov	r0, r7
 8008444:	f7f7 ffde 	bl	8000404 <__aeabi_i2d>
 8008448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800844c:	f7f8 f844 	bl	80004d8 <__aeabi_dmul>
 8008450:	2200      	movs	r2, #0
 8008452:	4b62      	ldr	r3, [pc, #392]	; (80085dc <_dtoa_r+0x5b4>)
 8008454:	f7f7 fe8a 	bl	800016c <__adddf3>
 8008458:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800845c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008460:	9611      	str	r6, [sp, #68]	; 0x44
 8008462:	2c00      	cmp	r4, #0
 8008464:	d15d      	bne.n	8008522 <_dtoa_r+0x4fa>
 8008466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800846a:	2200      	movs	r2, #0
 800846c:	4b5c      	ldr	r3, [pc, #368]	; (80085e0 <_dtoa_r+0x5b8>)
 800846e:	f7f7 fe7b 	bl	8000168 <__aeabi_dsub>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800847a:	4633      	mov	r3, r6
 800847c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800847e:	f7f8 fabb 	bl	80009f8 <__aeabi_dcmpgt>
 8008482:	2800      	cmp	r0, #0
 8008484:	f040 829c 	bne.w	80089c0 <_dtoa_r+0x998>
 8008488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800848c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800848e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008492:	f7f8 fa93 	bl	80009bc <__aeabi_dcmplt>
 8008496:	2800      	cmp	r0, #0
 8008498:	f040 8290 	bne.w	80089bc <_dtoa_r+0x994>
 800849c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80084a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80084a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f2c0 8152 	blt.w	8008750 <_dtoa_r+0x728>
 80084ac:	f1ba 0f0e 	cmp.w	sl, #14
 80084b0:	f300 814e 	bgt.w	8008750 <_dtoa_r+0x728>
 80084b4:	4b45      	ldr	r3, [pc, #276]	; (80085cc <_dtoa_r+0x5a4>)
 80084b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80084ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80084c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f280 80db 	bge.w	8008680 <_dtoa_r+0x658>
 80084ca:	9b08      	ldr	r3, [sp, #32]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f300 80d7 	bgt.w	8008680 <_dtoa_r+0x658>
 80084d2:	f040 8272 	bne.w	80089ba <_dtoa_r+0x992>
 80084d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084da:	2200      	movs	r2, #0
 80084dc:	4b40      	ldr	r3, [pc, #256]	; (80085e0 <_dtoa_r+0x5b8>)
 80084de:	f7f7 fffb 	bl	80004d8 <__aeabi_dmul>
 80084e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e6:	f7f8 fa7d 	bl	80009e4 <__aeabi_dcmpge>
 80084ea:	9c08      	ldr	r4, [sp, #32]
 80084ec:	4626      	mov	r6, r4
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f040 8248 	bne.w	8008984 <_dtoa_r+0x95c>
 80084f4:	2331      	movs	r3, #49	; 0x31
 80084f6:	9f03      	ldr	r7, [sp, #12]
 80084f8:	f10a 0a01 	add.w	sl, sl, #1
 80084fc:	f807 3b01 	strb.w	r3, [r7], #1
 8008500:	e244      	b.n	800898c <_dtoa_r+0x964>
 8008502:	07e2      	lsls	r2, r4, #31
 8008504:	d505      	bpl.n	8008512 <_dtoa_r+0x4ea>
 8008506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800850a:	f7f7 ffe5 	bl	80004d8 <__aeabi_dmul>
 800850e:	2301      	movs	r3, #1
 8008510:	3701      	adds	r7, #1
 8008512:	1064      	asrs	r4, r4, #1
 8008514:	3608      	adds	r6, #8
 8008516:	e76d      	b.n	80083f4 <_dtoa_r+0x3cc>
 8008518:	2702      	movs	r7, #2
 800851a:	e770      	b.n	80083fe <_dtoa_r+0x3d6>
 800851c:	46d0      	mov	r8, sl
 800851e:	9c08      	ldr	r4, [sp, #32]
 8008520:	e78f      	b.n	8008442 <_dtoa_r+0x41a>
 8008522:	9903      	ldr	r1, [sp, #12]
 8008524:	4b29      	ldr	r3, [pc, #164]	; (80085cc <_dtoa_r+0x5a4>)
 8008526:	4421      	add	r1, r4
 8008528:	9112      	str	r1, [sp, #72]	; 0x48
 800852a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800852c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008530:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008534:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008538:	2900      	cmp	r1, #0
 800853a:	d055      	beq.n	80085e8 <_dtoa_r+0x5c0>
 800853c:	2000      	movs	r0, #0
 800853e:	4929      	ldr	r1, [pc, #164]	; (80085e4 <_dtoa_r+0x5bc>)
 8008540:	f7f8 f8f4 	bl	800072c <__aeabi_ddiv>
 8008544:	463b      	mov	r3, r7
 8008546:	4632      	mov	r2, r6
 8008548:	f7f7 fe0e 	bl	8000168 <__aeabi_dsub>
 800854c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008550:	9f03      	ldr	r7, [sp, #12]
 8008552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008556:	f7f8 fa6f 	bl	8000a38 <__aeabi_d2iz>
 800855a:	4604      	mov	r4, r0
 800855c:	f7f7 ff52 	bl	8000404 <__aeabi_i2d>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008568:	f7f7 fdfe 	bl	8000168 <__aeabi_dsub>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	3430      	adds	r4, #48	; 0x30
 8008572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800857a:	f807 4b01 	strb.w	r4, [r7], #1
 800857e:	f7f8 fa1d 	bl	80009bc <__aeabi_dcmplt>
 8008582:	2800      	cmp	r0, #0
 8008584:	d174      	bne.n	8008670 <_dtoa_r+0x648>
 8008586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800858a:	2000      	movs	r0, #0
 800858c:	4911      	ldr	r1, [pc, #68]	; (80085d4 <_dtoa_r+0x5ac>)
 800858e:	f7f7 fdeb 	bl	8000168 <__aeabi_dsub>
 8008592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008596:	f7f8 fa11 	bl	80009bc <__aeabi_dcmplt>
 800859a:	2800      	cmp	r0, #0
 800859c:	f040 80b7 	bne.w	800870e <_dtoa_r+0x6e6>
 80085a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085a2:	429f      	cmp	r7, r3
 80085a4:	f43f af7a 	beq.w	800849c <_dtoa_r+0x474>
 80085a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085ac:	2200      	movs	r2, #0
 80085ae:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <_dtoa_r+0x5b0>)
 80085b0:	f7f7 ff92 	bl	80004d8 <__aeabi_dmul>
 80085b4:	2200      	movs	r2, #0
 80085b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085be:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <_dtoa_r+0x5b0>)
 80085c0:	f7f7 ff8a 	bl	80004d8 <__aeabi_dmul>
 80085c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085c8:	e7c3      	b.n	8008552 <_dtoa_r+0x52a>
 80085ca:	bf00      	nop
 80085cc:	08009f10 	.word	0x08009f10
 80085d0:	08009ee8 	.word	0x08009ee8
 80085d4:	3ff00000 	.word	0x3ff00000
 80085d8:	40240000 	.word	0x40240000
 80085dc:	401c0000 	.word	0x401c0000
 80085e0:	40140000 	.word	0x40140000
 80085e4:	3fe00000 	.word	0x3fe00000
 80085e8:	4630      	mov	r0, r6
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f7 ff74 	bl	80004d8 <__aeabi_dmul>
 80085f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80085f6:	9c03      	ldr	r4, [sp, #12]
 80085f8:	9314      	str	r3, [sp, #80]	; 0x50
 80085fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085fe:	f7f8 fa1b 	bl	8000a38 <__aeabi_d2iz>
 8008602:	9015      	str	r0, [sp, #84]	; 0x54
 8008604:	f7f7 fefe 	bl	8000404 <__aeabi_i2d>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008610:	f7f7 fdaa 	bl	8000168 <__aeabi_dsub>
 8008614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008616:	4606      	mov	r6, r0
 8008618:	3330      	adds	r3, #48	; 0x30
 800861a:	f804 3b01 	strb.w	r3, [r4], #1
 800861e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008620:	460f      	mov	r7, r1
 8008622:	429c      	cmp	r4, r3
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	d124      	bne.n	8008674 <_dtoa_r+0x64c>
 800862a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800862e:	4bb0      	ldr	r3, [pc, #704]	; (80088f0 <_dtoa_r+0x8c8>)
 8008630:	f7f7 fd9c 	bl	800016c <__adddf3>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	f7f8 f9dc 	bl	80009f8 <__aeabi_dcmpgt>
 8008640:	2800      	cmp	r0, #0
 8008642:	d163      	bne.n	800870c <_dtoa_r+0x6e4>
 8008644:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008648:	2000      	movs	r0, #0
 800864a:	49a9      	ldr	r1, [pc, #676]	; (80088f0 <_dtoa_r+0x8c8>)
 800864c:	f7f7 fd8c 	bl	8000168 <__aeabi_dsub>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	4630      	mov	r0, r6
 8008656:	4639      	mov	r1, r7
 8008658:	f7f8 f9b0 	bl	80009bc <__aeabi_dcmplt>
 800865c:	2800      	cmp	r0, #0
 800865e:	f43f af1d 	beq.w	800849c <_dtoa_r+0x474>
 8008662:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008664:	1e7b      	subs	r3, r7, #1
 8008666:	9314      	str	r3, [sp, #80]	; 0x50
 8008668:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800866c:	2b30      	cmp	r3, #48	; 0x30
 800866e:	d0f8      	beq.n	8008662 <_dtoa_r+0x63a>
 8008670:	46c2      	mov	sl, r8
 8008672:	e03b      	b.n	80086ec <_dtoa_r+0x6c4>
 8008674:	4b9f      	ldr	r3, [pc, #636]	; (80088f4 <_dtoa_r+0x8cc>)
 8008676:	f7f7 ff2f 	bl	80004d8 <__aeabi_dmul>
 800867a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800867e:	e7bc      	b.n	80085fa <_dtoa_r+0x5d2>
 8008680:	9f03      	ldr	r7, [sp, #12]
 8008682:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008686:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800868a:	4640      	mov	r0, r8
 800868c:	4649      	mov	r1, r9
 800868e:	f7f8 f84d 	bl	800072c <__aeabi_ddiv>
 8008692:	f7f8 f9d1 	bl	8000a38 <__aeabi_d2iz>
 8008696:	4604      	mov	r4, r0
 8008698:	f7f7 feb4 	bl	8000404 <__aeabi_i2d>
 800869c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086a0:	f7f7 ff1a 	bl	80004d8 <__aeabi_dmul>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4640      	mov	r0, r8
 80086aa:	4649      	mov	r1, r9
 80086ac:	f7f7 fd5c 	bl	8000168 <__aeabi_dsub>
 80086b0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80086b4:	f807 6b01 	strb.w	r6, [r7], #1
 80086b8:	9e03      	ldr	r6, [sp, #12]
 80086ba:	f8dd c020 	ldr.w	ip, [sp, #32]
 80086be:	1bbe      	subs	r6, r7, r6
 80086c0:	45b4      	cmp	ip, r6
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	d136      	bne.n	8008736 <_dtoa_r+0x70e>
 80086c8:	f7f7 fd50 	bl	800016c <__adddf3>
 80086cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086d0:	4680      	mov	r8, r0
 80086d2:	4689      	mov	r9, r1
 80086d4:	f7f8 f990 	bl	80009f8 <__aeabi_dcmpgt>
 80086d8:	bb58      	cbnz	r0, 8008732 <_dtoa_r+0x70a>
 80086da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086de:	4640      	mov	r0, r8
 80086e0:	4649      	mov	r1, r9
 80086e2:	f7f8 f961 	bl	80009a8 <__aeabi_dcmpeq>
 80086e6:	b108      	cbz	r0, 80086ec <_dtoa_r+0x6c4>
 80086e8:	07e1      	lsls	r1, r4, #31
 80086ea:	d422      	bmi.n	8008732 <_dtoa_r+0x70a>
 80086ec:	4628      	mov	r0, r5
 80086ee:	4659      	mov	r1, fp
 80086f0:	f000 fbbe 	bl	8008e70 <_Bfree>
 80086f4:	2300      	movs	r3, #0
 80086f6:	703b      	strb	r3, [r7, #0]
 80086f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80086fa:	f10a 0001 	add.w	r0, sl, #1
 80086fe:	6018      	str	r0, [r3, #0]
 8008700:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008702:	2b00      	cmp	r3, #0
 8008704:	f43f acde 	beq.w	80080c4 <_dtoa_r+0x9c>
 8008708:	601f      	str	r7, [r3, #0]
 800870a:	e4db      	b.n	80080c4 <_dtoa_r+0x9c>
 800870c:	4627      	mov	r7, r4
 800870e:	463b      	mov	r3, r7
 8008710:	461f      	mov	r7, r3
 8008712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008716:	2a39      	cmp	r2, #57	; 0x39
 8008718:	d107      	bne.n	800872a <_dtoa_r+0x702>
 800871a:	9a03      	ldr	r2, [sp, #12]
 800871c:	429a      	cmp	r2, r3
 800871e:	d1f7      	bne.n	8008710 <_dtoa_r+0x6e8>
 8008720:	2230      	movs	r2, #48	; 0x30
 8008722:	9903      	ldr	r1, [sp, #12]
 8008724:	f108 0801 	add.w	r8, r8, #1
 8008728:	700a      	strb	r2, [r1, #0]
 800872a:	781a      	ldrb	r2, [r3, #0]
 800872c:	3201      	adds	r2, #1
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	e79e      	b.n	8008670 <_dtoa_r+0x648>
 8008732:	46d0      	mov	r8, sl
 8008734:	e7eb      	b.n	800870e <_dtoa_r+0x6e6>
 8008736:	2200      	movs	r2, #0
 8008738:	4b6e      	ldr	r3, [pc, #440]	; (80088f4 <_dtoa_r+0x8cc>)
 800873a:	f7f7 fecd 	bl	80004d8 <__aeabi_dmul>
 800873e:	2200      	movs	r2, #0
 8008740:	2300      	movs	r3, #0
 8008742:	4680      	mov	r8, r0
 8008744:	4689      	mov	r9, r1
 8008746:	f7f8 f92f 	bl	80009a8 <__aeabi_dcmpeq>
 800874a:	2800      	cmp	r0, #0
 800874c:	d09b      	beq.n	8008686 <_dtoa_r+0x65e>
 800874e:	e7cd      	b.n	80086ec <_dtoa_r+0x6c4>
 8008750:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008752:	2a00      	cmp	r2, #0
 8008754:	f000 80d0 	beq.w	80088f8 <_dtoa_r+0x8d0>
 8008758:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800875a:	2a01      	cmp	r2, #1
 800875c:	f300 80ae 	bgt.w	80088bc <_dtoa_r+0x894>
 8008760:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008762:	2a00      	cmp	r2, #0
 8008764:	f000 80a6 	beq.w	80088b4 <_dtoa_r+0x88c>
 8008768:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800876c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800876e:	9f06      	ldr	r7, [sp, #24]
 8008770:	9a06      	ldr	r2, [sp, #24]
 8008772:	2101      	movs	r1, #1
 8008774:	441a      	add	r2, r3
 8008776:	9206      	str	r2, [sp, #24]
 8008778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800877a:	4628      	mov	r0, r5
 800877c:	441a      	add	r2, r3
 800877e:	9209      	str	r2, [sp, #36]	; 0x24
 8008780:	f000 fc2c 	bl	8008fdc <__i2b>
 8008784:	4606      	mov	r6, r0
 8008786:	2f00      	cmp	r7, #0
 8008788:	dd0c      	ble.n	80087a4 <_dtoa_r+0x77c>
 800878a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878c:	2b00      	cmp	r3, #0
 800878e:	dd09      	ble.n	80087a4 <_dtoa_r+0x77c>
 8008790:	42bb      	cmp	r3, r7
 8008792:	bfa8      	it	ge
 8008794:	463b      	movge	r3, r7
 8008796:	9a06      	ldr	r2, [sp, #24]
 8008798:	1aff      	subs	r7, r7, r3
 800879a:	1ad2      	subs	r2, r2, r3
 800879c:	9206      	str	r2, [sp, #24]
 800879e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	9309      	str	r3, [sp, #36]	; 0x24
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	b1f3      	cbz	r3, 80087e6 <_dtoa_r+0x7be>
 80087a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 80a8 	beq.w	8008900 <_dtoa_r+0x8d8>
 80087b0:	2c00      	cmp	r4, #0
 80087b2:	dd10      	ble.n	80087d6 <_dtoa_r+0x7ae>
 80087b4:	4631      	mov	r1, r6
 80087b6:	4622      	mov	r2, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 fccd 	bl	8009158 <__pow5mult>
 80087be:	465a      	mov	r2, fp
 80087c0:	4601      	mov	r1, r0
 80087c2:	4606      	mov	r6, r0
 80087c4:	4628      	mov	r0, r5
 80087c6:	f000 fc1f 	bl	8009008 <__multiply>
 80087ca:	4680      	mov	r8, r0
 80087cc:	4659      	mov	r1, fp
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 fb4e 	bl	8008e70 <_Bfree>
 80087d4:	46c3      	mov	fp, r8
 80087d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d8:	1b1a      	subs	r2, r3, r4
 80087da:	d004      	beq.n	80087e6 <_dtoa_r+0x7be>
 80087dc:	4659      	mov	r1, fp
 80087de:	4628      	mov	r0, r5
 80087e0:	f000 fcba 	bl	8009158 <__pow5mult>
 80087e4:	4683      	mov	fp, r0
 80087e6:	2101      	movs	r1, #1
 80087e8:	4628      	mov	r0, r5
 80087ea:	f000 fbf7 	bl	8008fdc <__i2b>
 80087ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087f0:	4604      	mov	r4, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f340 8086 	ble.w	8008904 <_dtoa_r+0x8dc>
 80087f8:	461a      	mov	r2, r3
 80087fa:	4601      	mov	r1, r0
 80087fc:	4628      	mov	r0, r5
 80087fe:	f000 fcab 	bl	8009158 <__pow5mult>
 8008802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008804:	4604      	mov	r4, r0
 8008806:	2b01      	cmp	r3, #1
 8008808:	dd7f      	ble.n	800890a <_dtoa_r+0x8e2>
 800880a:	f04f 0800 	mov.w	r8, #0
 800880e:	6923      	ldr	r3, [r4, #16]
 8008810:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008814:	6918      	ldr	r0, [r3, #16]
 8008816:	f000 fb93 	bl	8008f40 <__hi0bits>
 800881a:	f1c0 0020 	rsb	r0, r0, #32
 800881e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008820:	4418      	add	r0, r3
 8008822:	f010 001f 	ands.w	r0, r0, #31
 8008826:	f000 8092 	beq.w	800894e <_dtoa_r+0x926>
 800882a:	f1c0 0320 	rsb	r3, r0, #32
 800882e:	2b04      	cmp	r3, #4
 8008830:	f340 808a 	ble.w	8008948 <_dtoa_r+0x920>
 8008834:	f1c0 001c 	rsb	r0, r0, #28
 8008838:	9b06      	ldr	r3, [sp, #24]
 800883a:	4407      	add	r7, r0
 800883c:	4403      	add	r3, r0
 800883e:	9306      	str	r3, [sp, #24]
 8008840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008842:	4403      	add	r3, r0
 8008844:	9309      	str	r3, [sp, #36]	; 0x24
 8008846:	9b06      	ldr	r3, [sp, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	dd05      	ble.n	8008858 <_dtoa_r+0x830>
 800884c:	4659      	mov	r1, fp
 800884e:	461a      	mov	r2, r3
 8008850:	4628      	mov	r0, r5
 8008852:	f000 fcdb 	bl	800920c <__lshift>
 8008856:	4683      	mov	fp, r0
 8008858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	dd05      	ble.n	800886a <_dtoa_r+0x842>
 800885e:	4621      	mov	r1, r4
 8008860:	461a      	mov	r2, r3
 8008862:	4628      	mov	r0, r5
 8008864:	f000 fcd2 	bl	800920c <__lshift>
 8008868:	4604      	mov	r4, r0
 800886a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d070      	beq.n	8008952 <_dtoa_r+0x92a>
 8008870:	4621      	mov	r1, r4
 8008872:	4658      	mov	r0, fp
 8008874:	f000 fd3a 	bl	80092ec <__mcmp>
 8008878:	2800      	cmp	r0, #0
 800887a:	da6a      	bge.n	8008952 <_dtoa_r+0x92a>
 800887c:	2300      	movs	r3, #0
 800887e:	4659      	mov	r1, fp
 8008880:	220a      	movs	r2, #10
 8008882:	4628      	mov	r0, r5
 8008884:	f000 fb16 	bl	8008eb4 <__multadd>
 8008888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800888a:	4683      	mov	fp, r0
 800888c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 8194 	beq.w	8008bbe <_dtoa_r+0xb96>
 8008896:	4631      	mov	r1, r6
 8008898:	2300      	movs	r3, #0
 800889a:	220a      	movs	r2, #10
 800889c:	4628      	mov	r0, r5
 800889e:	f000 fb09 	bl	8008eb4 <__multadd>
 80088a2:	f1b9 0f00 	cmp.w	r9, #0
 80088a6:	4606      	mov	r6, r0
 80088a8:	f300 8093 	bgt.w	80089d2 <_dtoa_r+0x9aa>
 80088ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	dc57      	bgt.n	8008962 <_dtoa_r+0x93a>
 80088b2:	e08e      	b.n	80089d2 <_dtoa_r+0x9aa>
 80088b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80088b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088ba:	e757      	b.n	800876c <_dtoa_r+0x744>
 80088bc:	9b08      	ldr	r3, [sp, #32]
 80088be:	1e5c      	subs	r4, r3, #1
 80088c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c2:	42a3      	cmp	r3, r4
 80088c4:	bfb7      	itett	lt
 80088c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088c8:	1b1c      	subge	r4, r3, r4
 80088ca:	1ae2      	sublt	r2, r4, r3
 80088cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80088ce:	bfbe      	ittt	lt
 80088d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80088d2:	189b      	addlt	r3, r3, r2
 80088d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80088d6:	9b08      	ldr	r3, [sp, #32]
 80088d8:	bfb8      	it	lt
 80088da:	2400      	movlt	r4, #0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	bfbb      	ittet	lt
 80088e0:	9b06      	ldrlt	r3, [sp, #24]
 80088e2:	9a08      	ldrlt	r2, [sp, #32]
 80088e4:	9f06      	ldrge	r7, [sp, #24]
 80088e6:	1a9f      	sublt	r7, r3, r2
 80088e8:	bfac      	ite	ge
 80088ea:	9b08      	ldrge	r3, [sp, #32]
 80088ec:	2300      	movlt	r3, #0
 80088ee:	e73f      	b.n	8008770 <_dtoa_r+0x748>
 80088f0:	3fe00000 	.word	0x3fe00000
 80088f4:	40240000 	.word	0x40240000
 80088f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80088fa:	9f06      	ldr	r7, [sp, #24]
 80088fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80088fe:	e742      	b.n	8008786 <_dtoa_r+0x75e>
 8008900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008902:	e76b      	b.n	80087dc <_dtoa_r+0x7b4>
 8008904:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008906:	2b01      	cmp	r3, #1
 8008908:	dc19      	bgt.n	800893e <_dtoa_r+0x916>
 800890a:	9b04      	ldr	r3, [sp, #16]
 800890c:	b9bb      	cbnz	r3, 800893e <_dtoa_r+0x916>
 800890e:	9b05      	ldr	r3, [sp, #20]
 8008910:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008914:	b99b      	cbnz	r3, 800893e <_dtoa_r+0x916>
 8008916:	9b05      	ldr	r3, [sp, #20]
 8008918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800891c:	0d1b      	lsrs	r3, r3, #20
 800891e:	051b      	lsls	r3, r3, #20
 8008920:	b183      	cbz	r3, 8008944 <_dtoa_r+0x91c>
 8008922:	f04f 0801 	mov.w	r8, #1
 8008926:	9b06      	ldr	r3, [sp, #24]
 8008928:	3301      	adds	r3, #1
 800892a:	9306      	str	r3, [sp, #24]
 800892c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892e:	3301      	adds	r3, #1
 8008930:	9309      	str	r3, [sp, #36]	; 0x24
 8008932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008934:	2b00      	cmp	r3, #0
 8008936:	f47f af6a 	bne.w	800880e <_dtoa_r+0x7e6>
 800893a:	2001      	movs	r0, #1
 800893c:	e76f      	b.n	800881e <_dtoa_r+0x7f6>
 800893e:	f04f 0800 	mov.w	r8, #0
 8008942:	e7f6      	b.n	8008932 <_dtoa_r+0x90a>
 8008944:	4698      	mov	r8, r3
 8008946:	e7f4      	b.n	8008932 <_dtoa_r+0x90a>
 8008948:	f43f af7d 	beq.w	8008846 <_dtoa_r+0x81e>
 800894c:	4618      	mov	r0, r3
 800894e:	301c      	adds	r0, #28
 8008950:	e772      	b.n	8008838 <_dtoa_r+0x810>
 8008952:	9b08      	ldr	r3, [sp, #32]
 8008954:	2b00      	cmp	r3, #0
 8008956:	dc36      	bgt.n	80089c6 <_dtoa_r+0x99e>
 8008958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800895a:	2b02      	cmp	r3, #2
 800895c:	dd33      	ble.n	80089c6 <_dtoa_r+0x99e>
 800895e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008962:	f1b9 0f00 	cmp.w	r9, #0
 8008966:	d10d      	bne.n	8008984 <_dtoa_r+0x95c>
 8008968:	4621      	mov	r1, r4
 800896a:	464b      	mov	r3, r9
 800896c:	2205      	movs	r2, #5
 800896e:	4628      	mov	r0, r5
 8008970:	f000 faa0 	bl	8008eb4 <__multadd>
 8008974:	4601      	mov	r1, r0
 8008976:	4604      	mov	r4, r0
 8008978:	4658      	mov	r0, fp
 800897a:	f000 fcb7 	bl	80092ec <__mcmp>
 800897e:	2800      	cmp	r0, #0
 8008980:	f73f adb8 	bgt.w	80084f4 <_dtoa_r+0x4cc>
 8008984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008986:	9f03      	ldr	r7, [sp, #12]
 8008988:	ea6f 0a03 	mvn.w	sl, r3
 800898c:	f04f 0800 	mov.w	r8, #0
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f000 fa6c 	bl	8008e70 <_Bfree>
 8008998:	2e00      	cmp	r6, #0
 800899a:	f43f aea7 	beq.w	80086ec <_dtoa_r+0x6c4>
 800899e:	f1b8 0f00 	cmp.w	r8, #0
 80089a2:	d005      	beq.n	80089b0 <_dtoa_r+0x988>
 80089a4:	45b0      	cmp	r8, r6
 80089a6:	d003      	beq.n	80089b0 <_dtoa_r+0x988>
 80089a8:	4641      	mov	r1, r8
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 fa60 	bl	8008e70 <_Bfree>
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	f000 fa5c 	bl	8008e70 <_Bfree>
 80089b8:	e698      	b.n	80086ec <_dtoa_r+0x6c4>
 80089ba:	2400      	movs	r4, #0
 80089bc:	4626      	mov	r6, r4
 80089be:	e7e1      	b.n	8008984 <_dtoa_r+0x95c>
 80089c0:	46c2      	mov	sl, r8
 80089c2:	4626      	mov	r6, r4
 80089c4:	e596      	b.n	80084f4 <_dtoa_r+0x4cc>
 80089c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 80fd 	beq.w	8008bcc <_dtoa_r+0xba4>
 80089d2:	2f00      	cmp	r7, #0
 80089d4:	dd05      	ble.n	80089e2 <_dtoa_r+0x9ba>
 80089d6:	4631      	mov	r1, r6
 80089d8:	463a      	mov	r2, r7
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 fc16 	bl	800920c <__lshift>
 80089e0:	4606      	mov	r6, r0
 80089e2:	f1b8 0f00 	cmp.w	r8, #0
 80089e6:	d05c      	beq.n	8008aa2 <_dtoa_r+0xa7a>
 80089e8:	4628      	mov	r0, r5
 80089ea:	6871      	ldr	r1, [r6, #4]
 80089ec:	f000 fa00 	bl	8008df0 <_Balloc>
 80089f0:	4607      	mov	r7, r0
 80089f2:	b928      	cbnz	r0, 8008a00 <_dtoa_r+0x9d8>
 80089f4:	4602      	mov	r2, r0
 80089f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80089fa:	4b7f      	ldr	r3, [pc, #508]	; (8008bf8 <_dtoa_r+0xbd0>)
 80089fc:	f7ff bb28 	b.w	8008050 <_dtoa_r+0x28>
 8008a00:	6932      	ldr	r2, [r6, #16]
 8008a02:	f106 010c 	add.w	r1, r6, #12
 8008a06:	3202      	adds	r2, #2
 8008a08:	0092      	lsls	r2, r2, #2
 8008a0a:	300c      	adds	r0, #12
 8008a0c:	f7fe fc95 	bl	800733a <memcpy>
 8008a10:	2201      	movs	r2, #1
 8008a12:	4639      	mov	r1, r7
 8008a14:	4628      	mov	r0, r5
 8008a16:	f000 fbf9 	bl	800920c <__lshift>
 8008a1a:	46b0      	mov	r8, r6
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	3301      	adds	r3, #1
 8008a22:	9308      	str	r3, [sp, #32]
 8008a24:	9b03      	ldr	r3, [sp, #12]
 8008a26:	444b      	add	r3, r9
 8008a28:	930a      	str	r3, [sp, #40]	; 0x28
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	9309      	str	r3, [sp, #36]	; 0x24
 8008a32:	9b08      	ldr	r3, [sp, #32]
 8008a34:	4621      	mov	r1, r4
 8008a36:	3b01      	subs	r3, #1
 8008a38:	4658      	mov	r0, fp
 8008a3a:	9304      	str	r3, [sp, #16]
 8008a3c:	f7ff fa68 	bl	8007f10 <quorem>
 8008a40:	4603      	mov	r3, r0
 8008a42:	4641      	mov	r1, r8
 8008a44:	3330      	adds	r3, #48	; 0x30
 8008a46:	9006      	str	r0, [sp, #24]
 8008a48:	4658      	mov	r0, fp
 8008a4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a4c:	f000 fc4e 	bl	80092ec <__mcmp>
 8008a50:	4632      	mov	r2, r6
 8008a52:	4681      	mov	r9, r0
 8008a54:	4621      	mov	r1, r4
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 fc64 	bl	8009324 <__mdiff>
 8008a5c:	68c2      	ldr	r2, [r0, #12]
 8008a5e:	4607      	mov	r7, r0
 8008a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a62:	bb02      	cbnz	r2, 8008aa6 <_dtoa_r+0xa7e>
 8008a64:	4601      	mov	r1, r0
 8008a66:	4658      	mov	r0, fp
 8008a68:	f000 fc40 	bl	80092ec <__mcmp>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a70:	4639      	mov	r1, r7
 8008a72:	4628      	mov	r0, r5
 8008a74:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008a78:	f000 f9fa 	bl	8008e70 <_Bfree>
 8008a7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a80:	9f08      	ldr	r7, [sp, #32]
 8008a82:	ea43 0102 	orr.w	r1, r3, r2
 8008a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8c:	d10d      	bne.n	8008aaa <_dtoa_r+0xa82>
 8008a8e:	2b39      	cmp	r3, #57	; 0x39
 8008a90:	d029      	beq.n	8008ae6 <_dtoa_r+0xabe>
 8008a92:	f1b9 0f00 	cmp.w	r9, #0
 8008a96:	dd01      	ble.n	8008a9c <_dtoa_r+0xa74>
 8008a98:	9b06      	ldr	r3, [sp, #24]
 8008a9a:	3331      	adds	r3, #49	; 0x31
 8008a9c:	9a04      	ldr	r2, [sp, #16]
 8008a9e:	7013      	strb	r3, [r2, #0]
 8008aa0:	e776      	b.n	8008990 <_dtoa_r+0x968>
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	e7b9      	b.n	8008a1a <_dtoa_r+0x9f2>
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	e7e2      	b.n	8008a70 <_dtoa_r+0xa48>
 8008aaa:	f1b9 0f00 	cmp.w	r9, #0
 8008aae:	db06      	blt.n	8008abe <_dtoa_r+0xa96>
 8008ab0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008ab2:	ea41 0909 	orr.w	r9, r1, r9
 8008ab6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ab8:	ea59 0101 	orrs.w	r1, r9, r1
 8008abc:	d120      	bne.n	8008b00 <_dtoa_r+0xad8>
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	ddec      	ble.n	8008a9c <_dtoa_r+0xa74>
 8008ac2:	4659      	mov	r1, fp
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	9308      	str	r3, [sp, #32]
 8008aca:	f000 fb9f 	bl	800920c <__lshift>
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4683      	mov	fp, r0
 8008ad2:	f000 fc0b 	bl	80092ec <__mcmp>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	9b08      	ldr	r3, [sp, #32]
 8008ada:	dc02      	bgt.n	8008ae2 <_dtoa_r+0xaba>
 8008adc:	d1de      	bne.n	8008a9c <_dtoa_r+0xa74>
 8008ade:	07da      	lsls	r2, r3, #31
 8008ae0:	d5dc      	bpl.n	8008a9c <_dtoa_r+0xa74>
 8008ae2:	2b39      	cmp	r3, #57	; 0x39
 8008ae4:	d1d8      	bne.n	8008a98 <_dtoa_r+0xa70>
 8008ae6:	2339      	movs	r3, #57	; 0x39
 8008ae8:	9a04      	ldr	r2, [sp, #16]
 8008aea:	7013      	strb	r3, [r2, #0]
 8008aec:	463b      	mov	r3, r7
 8008aee:	461f      	mov	r7, r3
 8008af0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	2a39      	cmp	r2, #57	; 0x39
 8008af8:	d050      	beq.n	8008b9c <_dtoa_r+0xb74>
 8008afa:	3201      	adds	r2, #1
 8008afc:	701a      	strb	r2, [r3, #0]
 8008afe:	e747      	b.n	8008990 <_dtoa_r+0x968>
 8008b00:	2a00      	cmp	r2, #0
 8008b02:	dd03      	ble.n	8008b0c <_dtoa_r+0xae4>
 8008b04:	2b39      	cmp	r3, #57	; 0x39
 8008b06:	d0ee      	beq.n	8008ae6 <_dtoa_r+0xabe>
 8008b08:	3301      	adds	r3, #1
 8008b0a:	e7c7      	b.n	8008a9c <_dtoa_r+0xa74>
 8008b0c:	9a08      	ldr	r2, [sp, #32]
 8008b0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b10:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008b14:	428a      	cmp	r2, r1
 8008b16:	d02a      	beq.n	8008b6e <_dtoa_r+0xb46>
 8008b18:	4659      	mov	r1, fp
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	220a      	movs	r2, #10
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 f9c8 	bl	8008eb4 <__multadd>
 8008b24:	45b0      	cmp	r8, r6
 8008b26:	4683      	mov	fp, r0
 8008b28:	f04f 0300 	mov.w	r3, #0
 8008b2c:	f04f 020a 	mov.w	r2, #10
 8008b30:	4641      	mov	r1, r8
 8008b32:	4628      	mov	r0, r5
 8008b34:	d107      	bne.n	8008b46 <_dtoa_r+0xb1e>
 8008b36:	f000 f9bd 	bl	8008eb4 <__multadd>
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	4606      	mov	r6, r0
 8008b3e:	9b08      	ldr	r3, [sp, #32]
 8008b40:	3301      	adds	r3, #1
 8008b42:	9308      	str	r3, [sp, #32]
 8008b44:	e775      	b.n	8008a32 <_dtoa_r+0xa0a>
 8008b46:	f000 f9b5 	bl	8008eb4 <__multadd>
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4680      	mov	r8, r0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	220a      	movs	r2, #10
 8008b52:	4628      	mov	r0, r5
 8008b54:	f000 f9ae 	bl	8008eb4 <__multadd>
 8008b58:	4606      	mov	r6, r0
 8008b5a:	e7f0      	b.n	8008b3e <_dtoa_r+0xb16>
 8008b5c:	f1b9 0f00 	cmp.w	r9, #0
 8008b60:	bfcc      	ite	gt
 8008b62:	464f      	movgt	r7, r9
 8008b64:	2701      	movle	r7, #1
 8008b66:	f04f 0800 	mov.w	r8, #0
 8008b6a:	9a03      	ldr	r2, [sp, #12]
 8008b6c:	4417      	add	r7, r2
 8008b6e:	4659      	mov	r1, fp
 8008b70:	2201      	movs	r2, #1
 8008b72:	4628      	mov	r0, r5
 8008b74:	9308      	str	r3, [sp, #32]
 8008b76:	f000 fb49 	bl	800920c <__lshift>
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4683      	mov	fp, r0
 8008b7e:	f000 fbb5 	bl	80092ec <__mcmp>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	dcb2      	bgt.n	8008aec <_dtoa_r+0xac4>
 8008b86:	d102      	bne.n	8008b8e <_dtoa_r+0xb66>
 8008b88:	9b08      	ldr	r3, [sp, #32]
 8008b8a:	07db      	lsls	r3, r3, #31
 8008b8c:	d4ae      	bmi.n	8008aec <_dtoa_r+0xac4>
 8008b8e:	463b      	mov	r3, r7
 8008b90:	461f      	mov	r7, r3
 8008b92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b96:	2a30      	cmp	r2, #48	; 0x30
 8008b98:	d0fa      	beq.n	8008b90 <_dtoa_r+0xb68>
 8008b9a:	e6f9      	b.n	8008990 <_dtoa_r+0x968>
 8008b9c:	9a03      	ldr	r2, [sp, #12]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d1a5      	bne.n	8008aee <_dtoa_r+0xac6>
 8008ba2:	2331      	movs	r3, #49	; 0x31
 8008ba4:	f10a 0a01 	add.w	sl, sl, #1
 8008ba8:	e779      	b.n	8008a9e <_dtoa_r+0xa76>
 8008baa:	4b14      	ldr	r3, [pc, #80]	; (8008bfc <_dtoa_r+0xbd4>)
 8008bac:	f7ff baa8 	b.w	8008100 <_dtoa_r+0xd8>
 8008bb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f47f aa81 	bne.w	80080ba <_dtoa_r+0x92>
 8008bb8:	4b11      	ldr	r3, [pc, #68]	; (8008c00 <_dtoa_r+0xbd8>)
 8008bba:	f7ff baa1 	b.w	8008100 <_dtoa_r+0xd8>
 8008bbe:	f1b9 0f00 	cmp.w	r9, #0
 8008bc2:	dc03      	bgt.n	8008bcc <_dtoa_r+0xba4>
 8008bc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	f73f aecb 	bgt.w	8008962 <_dtoa_r+0x93a>
 8008bcc:	9f03      	ldr	r7, [sp, #12]
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4658      	mov	r0, fp
 8008bd2:	f7ff f99d 	bl	8007f10 <quorem>
 8008bd6:	9a03      	ldr	r2, [sp, #12]
 8008bd8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008bdc:	f807 3b01 	strb.w	r3, [r7], #1
 8008be0:	1aba      	subs	r2, r7, r2
 8008be2:	4591      	cmp	r9, r2
 8008be4:	ddba      	ble.n	8008b5c <_dtoa_r+0xb34>
 8008be6:	4659      	mov	r1, fp
 8008be8:	2300      	movs	r3, #0
 8008bea:	220a      	movs	r2, #10
 8008bec:	4628      	mov	r0, r5
 8008bee:	f000 f961 	bl	8008eb4 <__multadd>
 8008bf2:	4683      	mov	fp, r0
 8008bf4:	e7eb      	b.n	8008bce <_dtoa_r+0xba6>
 8008bf6:	bf00      	nop
 8008bf8:	08009e77 	.word	0x08009e77
 8008bfc:	08009dd4 	.word	0x08009dd4
 8008c00:	08009df8 	.word	0x08009df8

08008c04 <__sflush_r>:
 8008c04:	898a      	ldrh	r2, [r1, #12]
 8008c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c08:	4605      	mov	r5, r0
 8008c0a:	0710      	lsls	r0, r2, #28
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	d457      	bmi.n	8008cc0 <__sflush_r+0xbc>
 8008c10:	684b      	ldr	r3, [r1, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	dc04      	bgt.n	8008c20 <__sflush_r+0x1c>
 8008c16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	dc01      	bgt.n	8008c20 <__sflush_r+0x1c>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c22:	2e00      	cmp	r6, #0
 8008c24:	d0fa      	beq.n	8008c1c <__sflush_r+0x18>
 8008c26:	2300      	movs	r3, #0
 8008c28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c2c:	682f      	ldr	r7, [r5, #0]
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	d032      	beq.n	8008c98 <__sflush_r+0x94>
 8008c32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	075a      	lsls	r2, r3, #29
 8008c38:	d505      	bpl.n	8008c46 <__sflush_r+0x42>
 8008c3a:	6863      	ldr	r3, [r4, #4]
 8008c3c:	1ac0      	subs	r0, r0, r3
 8008c3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c40:	b10b      	cbz	r3, 8008c46 <__sflush_r+0x42>
 8008c42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c44:	1ac0      	subs	r0, r0, r3
 8008c46:	2300      	movs	r3, #0
 8008c48:	4602      	mov	r2, r0
 8008c4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	6a21      	ldr	r1, [r4, #32]
 8008c50:	47b0      	blx	r6
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	89a3      	ldrh	r3, [r4, #12]
 8008c56:	d106      	bne.n	8008c66 <__sflush_r+0x62>
 8008c58:	6829      	ldr	r1, [r5, #0]
 8008c5a:	291d      	cmp	r1, #29
 8008c5c:	d82c      	bhi.n	8008cb8 <__sflush_r+0xb4>
 8008c5e:	4a29      	ldr	r2, [pc, #164]	; (8008d04 <__sflush_r+0x100>)
 8008c60:	40ca      	lsrs	r2, r1
 8008c62:	07d6      	lsls	r6, r2, #31
 8008c64:	d528      	bpl.n	8008cb8 <__sflush_r+0xb4>
 8008c66:	2200      	movs	r2, #0
 8008c68:	6062      	str	r2, [r4, #4]
 8008c6a:	6922      	ldr	r2, [r4, #16]
 8008c6c:	04d9      	lsls	r1, r3, #19
 8008c6e:	6022      	str	r2, [r4, #0]
 8008c70:	d504      	bpl.n	8008c7c <__sflush_r+0x78>
 8008c72:	1c42      	adds	r2, r0, #1
 8008c74:	d101      	bne.n	8008c7a <__sflush_r+0x76>
 8008c76:	682b      	ldr	r3, [r5, #0]
 8008c78:	b903      	cbnz	r3, 8008c7c <__sflush_r+0x78>
 8008c7a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c7e:	602f      	str	r7, [r5, #0]
 8008c80:	2900      	cmp	r1, #0
 8008c82:	d0cb      	beq.n	8008c1c <__sflush_r+0x18>
 8008c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c88:	4299      	cmp	r1, r3
 8008c8a:	d002      	beq.n	8008c92 <__sflush_r+0x8e>
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f000 fc45 	bl	800951c <_free_r>
 8008c92:	2000      	movs	r0, #0
 8008c94:	6360      	str	r0, [r4, #52]	; 0x34
 8008c96:	e7c2      	b.n	8008c1e <__sflush_r+0x1a>
 8008c98:	6a21      	ldr	r1, [r4, #32]
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b0      	blx	r6
 8008ca0:	1c41      	adds	r1, r0, #1
 8008ca2:	d1c7      	bne.n	8008c34 <__sflush_r+0x30>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0c4      	beq.n	8008c34 <__sflush_r+0x30>
 8008caa:	2b1d      	cmp	r3, #29
 8008cac:	d001      	beq.n	8008cb2 <__sflush_r+0xae>
 8008cae:	2b16      	cmp	r3, #22
 8008cb0:	d101      	bne.n	8008cb6 <__sflush_r+0xb2>
 8008cb2:	602f      	str	r7, [r5, #0]
 8008cb4:	e7b2      	b.n	8008c1c <__sflush_r+0x18>
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	e7ae      	b.n	8008c1e <__sflush_r+0x1a>
 8008cc0:	690f      	ldr	r7, [r1, #16]
 8008cc2:	2f00      	cmp	r7, #0
 8008cc4:	d0aa      	beq.n	8008c1c <__sflush_r+0x18>
 8008cc6:	0793      	lsls	r3, r2, #30
 8008cc8:	bf18      	it	ne
 8008cca:	2300      	movne	r3, #0
 8008ccc:	680e      	ldr	r6, [r1, #0]
 8008cce:	bf08      	it	eq
 8008cd0:	694b      	ldreq	r3, [r1, #20]
 8008cd2:	1bf6      	subs	r6, r6, r7
 8008cd4:	600f      	str	r7, [r1, #0]
 8008cd6:	608b      	str	r3, [r1, #8]
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	dd9f      	ble.n	8008c1c <__sflush_r+0x18>
 8008cdc:	4633      	mov	r3, r6
 8008cde:	463a      	mov	r2, r7
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	6a21      	ldr	r1, [r4, #32]
 8008ce4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008ce8:	47e0      	blx	ip
 8008cea:	2800      	cmp	r0, #0
 8008cec:	dc06      	bgt.n	8008cfc <__sflush_r+0xf8>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	e790      	b.n	8008c1e <__sflush_r+0x1a>
 8008cfc:	4407      	add	r7, r0
 8008cfe:	1a36      	subs	r6, r6, r0
 8008d00:	e7ea      	b.n	8008cd8 <__sflush_r+0xd4>
 8008d02:	bf00      	nop
 8008d04:	20400001 	.word	0x20400001

08008d08 <_fflush_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	690b      	ldr	r3, [r1, #16]
 8008d0c:	4605      	mov	r5, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	b913      	cbnz	r3, 8008d18 <_fflush_r+0x10>
 8008d12:	2500      	movs	r5, #0
 8008d14:	4628      	mov	r0, r5
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	b118      	cbz	r0, 8008d22 <_fflush_r+0x1a>
 8008d1a:	6983      	ldr	r3, [r0, #24]
 8008d1c:	b90b      	cbnz	r3, 8008d22 <_fflush_r+0x1a>
 8008d1e:	f7fe fa47 	bl	80071b0 <__sinit>
 8008d22:	4b14      	ldr	r3, [pc, #80]	; (8008d74 <_fflush_r+0x6c>)
 8008d24:	429c      	cmp	r4, r3
 8008d26:	d11b      	bne.n	8008d60 <_fflush_r+0x58>
 8008d28:	686c      	ldr	r4, [r5, #4]
 8008d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0ef      	beq.n	8008d12 <_fflush_r+0xa>
 8008d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d34:	07d0      	lsls	r0, r2, #31
 8008d36:	d404      	bmi.n	8008d42 <_fflush_r+0x3a>
 8008d38:	0599      	lsls	r1, r3, #22
 8008d3a:	d402      	bmi.n	8008d42 <_fflush_r+0x3a>
 8008d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d3e:	f7fe fafa 	bl	8007336 <__retarget_lock_acquire_recursive>
 8008d42:	4628      	mov	r0, r5
 8008d44:	4621      	mov	r1, r4
 8008d46:	f7ff ff5d 	bl	8008c04 <__sflush_r>
 8008d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	07da      	lsls	r2, r3, #31
 8008d50:	d4e0      	bmi.n	8008d14 <_fflush_r+0xc>
 8008d52:	89a3      	ldrh	r3, [r4, #12]
 8008d54:	059b      	lsls	r3, r3, #22
 8008d56:	d4dd      	bmi.n	8008d14 <_fflush_r+0xc>
 8008d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d5a:	f7fe faed 	bl	8007338 <__retarget_lock_release_recursive>
 8008d5e:	e7d9      	b.n	8008d14 <_fflush_r+0xc>
 8008d60:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <_fflush_r+0x70>)
 8008d62:	429c      	cmp	r4, r3
 8008d64:	d101      	bne.n	8008d6a <_fflush_r+0x62>
 8008d66:	68ac      	ldr	r4, [r5, #8]
 8008d68:	e7df      	b.n	8008d2a <_fflush_r+0x22>
 8008d6a:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <_fflush_r+0x74>)
 8008d6c:	429c      	cmp	r4, r3
 8008d6e:	bf08      	it	eq
 8008d70:	68ec      	ldreq	r4, [r5, #12]
 8008d72:	e7da      	b.n	8008d2a <_fflush_r+0x22>
 8008d74:	08009d80 	.word	0x08009d80
 8008d78:	08009da0 	.word	0x08009da0
 8008d7c:	08009d60 	.word	0x08009d60

08008d80 <_localeconv_r>:
 8008d80:	4800      	ldr	r0, [pc, #0]	; (8008d84 <_localeconv_r+0x4>)
 8008d82:	4770      	bx	lr
 8008d84:	20000184 	.word	0x20000184

08008d88 <_lseek_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4608      	mov	r0, r1
 8008d8e:	4611      	mov	r1, r2
 8008d90:	2200      	movs	r2, #0
 8008d92:	4d05      	ldr	r5, [pc, #20]	; (8008da8 <_lseek_r+0x20>)
 8008d94:	602a      	str	r2, [r5, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f7f9 fd5a 	bl	8002850 <_lseek>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_lseek_r+0x1e>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_lseek_r+0x1e>
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	20001f4c 	.word	0x20001f4c

08008dac <malloc>:
 8008dac:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <malloc+0xc>)
 8008dae:	4601      	mov	r1, r0
 8008db0:	6818      	ldr	r0, [r3, #0]
 8008db2:	f7fe baf9 	b.w	80073a8 <_malloc_r>
 8008db6:	bf00      	nop
 8008db8:	20000030 	.word	0x20000030

08008dbc <memchr>:
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	b2c9      	uxtb	r1, r1
 8008dc2:	4402      	add	r2, r0
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	d101      	bne.n	8008dce <memchr+0x12>
 8008dca:	2000      	movs	r0, #0
 8008dcc:	e003      	b.n	8008dd6 <memchr+0x1a>
 8008dce:	7804      	ldrb	r4, [r0, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	428c      	cmp	r4, r1
 8008dd4:	d1f6      	bne.n	8008dc4 <memchr+0x8>
 8008dd6:	bd10      	pop	{r4, pc}

08008dd8 <__malloc_lock>:
 8008dd8:	4801      	ldr	r0, [pc, #4]	; (8008de0 <__malloc_lock+0x8>)
 8008dda:	f7fe baac 	b.w	8007336 <__retarget_lock_acquire_recursive>
 8008dde:	bf00      	nop
 8008de0:	20001f40 	.word	0x20001f40

08008de4 <__malloc_unlock>:
 8008de4:	4801      	ldr	r0, [pc, #4]	; (8008dec <__malloc_unlock+0x8>)
 8008de6:	f7fe baa7 	b.w	8007338 <__retarget_lock_release_recursive>
 8008dea:	bf00      	nop
 8008dec:	20001f40 	.word	0x20001f40

08008df0 <_Balloc>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008df4:	4604      	mov	r4, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	b976      	cbnz	r6, 8008e18 <_Balloc+0x28>
 8008dfa:	2010      	movs	r0, #16
 8008dfc:	f7ff ffd6 	bl	8008dac <malloc>
 8008e00:	4602      	mov	r2, r0
 8008e02:	6260      	str	r0, [r4, #36]	; 0x24
 8008e04:	b920      	cbnz	r0, 8008e10 <_Balloc+0x20>
 8008e06:	2166      	movs	r1, #102	; 0x66
 8008e08:	4b17      	ldr	r3, [pc, #92]	; (8008e68 <_Balloc+0x78>)
 8008e0a:	4818      	ldr	r0, [pc, #96]	; (8008e6c <_Balloc+0x7c>)
 8008e0c:	f000 fbe0 	bl	80095d0 <__assert_func>
 8008e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e14:	6006      	str	r6, [r0, #0]
 8008e16:	60c6      	str	r6, [r0, #12]
 8008e18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e1a:	68f3      	ldr	r3, [r6, #12]
 8008e1c:	b183      	cbz	r3, 8008e40 <_Balloc+0x50>
 8008e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e26:	b9b8      	cbnz	r0, 8008e58 <_Balloc+0x68>
 8008e28:	2101      	movs	r1, #1
 8008e2a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e2e:	1d72      	adds	r2, r6, #5
 8008e30:	4620      	mov	r0, r4
 8008e32:	0092      	lsls	r2, r2, #2
 8008e34:	f000 fb5e 	bl	80094f4 <_calloc_r>
 8008e38:	b160      	cbz	r0, 8008e54 <_Balloc+0x64>
 8008e3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e3e:	e00e      	b.n	8008e5e <_Balloc+0x6e>
 8008e40:	2221      	movs	r2, #33	; 0x21
 8008e42:	2104      	movs	r1, #4
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 fb55 	bl	80094f4 <_calloc_r>
 8008e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e4c:	60f0      	str	r0, [r6, #12]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e4      	bne.n	8008e1e <_Balloc+0x2e>
 8008e54:	2000      	movs	r0, #0
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
 8008e58:	6802      	ldr	r2, [r0, #0]
 8008e5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e64:	e7f7      	b.n	8008e56 <_Balloc+0x66>
 8008e66:	bf00      	nop
 8008e68:	08009e05 	.word	0x08009e05
 8008e6c:	08009e88 	.word	0x08009e88

08008e70 <_Bfree>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e74:	4605      	mov	r5, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	b976      	cbnz	r6, 8008e98 <_Bfree+0x28>
 8008e7a:	2010      	movs	r0, #16
 8008e7c:	f7ff ff96 	bl	8008dac <malloc>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6268      	str	r0, [r5, #36]	; 0x24
 8008e84:	b920      	cbnz	r0, 8008e90 <_Bfree+0x20>
 8008e86:	218a      	movs	r1, #138	; 0x8a
 8008e88:	4b08      	ldr	r3, [pc, #32]	; (8008eac <_Bfree+0x3c>)
 8008e8a:	4809      	ldr	r0, [pc, #36]	; (8008eb0 <_Bfree+0x40>)
 8008e8c:	f000 fba0 	bl	80095d0 <__assert_func>
 8008e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e94:	6006      	str	r6, [r0, #0]
 8008e96:	60c6      	str	r6, [r0, #12]
 8008e98:	b13c      	cbz	r4, 8008eaa <_Bfree+0x3a>
 8008e9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e9c:	6862      	ldr	r2, [r4, #4]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ea4:	6021      	str	r1, [r4, #0]
 8008ea6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	08009e05 	.word	0x08009e05
 8008eb0:	08009e88 	.word	0x08009e88

08008eb4 <__multadd>:
 8008eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb8:	4607      	mov	r7, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	461e      	mov	r6, r3
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	690d      	ldr	r5, [r1, #16]
 8008ec2:	f101 0c14 	add.w	ip, r1, #20
 8008ec6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eca:	3001      	adds	r0, #1
 8008ecc:	b299      	uxth	r1, r3
 8008ece:	fb02 6101 	mla	r1, r2, r1, r6
 8008ed2:	0c1e      	lsrs	r6, r3, #16
 8008ed4:	0c0b      	lsrs	r3, r1, #16
 8008ed6:	fb02 3306 	mla	r3, r2, r6, r3
 8008eda:	b289      	uxth	r1, r1
 8008edc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ee0:	4285      	cmp	r5, r0
 8008ee2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ee6:	f84c 1b04 	str.w	r1, [ip], #4
 8008eea:	dcec      	bgt.n	8008ec6 <__multadd+0x12>
 8008eec:	b30e      	cbz	r6, 8008f32 <__multadd+0x7e>
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dc19      	bgt.n	8008f28 <__multadd+0x74>
 8008ef4:	6861      	ldr	r1, [r4, #4]
 8008ef6:	4638      	mov	r0, r7
 8008ef8:	3101      	adds	r1, #1
 8008efa:	f7ff ff79 	bl	8008df0 <_Balloc>
 8008efe:	4680      	mov	r8, r0
 8008f00:	b928      	cbnz	r0, 8008f0e <__multadd+0x5a>
 8008f02:	4602      	mov	r2, r0
 8008f04:	21b5      	movs	r1, #181	; 0xb5
 8008f06:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <__multadd+0x84>)
 8008f08:	480c      	ldr	r0, [pc, #48]	; (8008f3c <__multadd+0x88>)
 8008f0a:	f000 fb61 	bl	80095d0 <__assert_func>
 8008f0e:	6922      	ldr	r2, [r4, #16]
 8008f10:	f104 010c 	add.w	r1, r4, #12
 8008f14:	3202      	adds	r2, #2
 8008f16:	0092      	lsls	r2, r2, #2
 8008f18:	300c      	adds	r0, #12
 8008f1a:	f7fe fa0e 	bl	800733a <memcpy>
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4638      	mov	r0, r7
 8008f22:	f7ff ffa5 	bl	8008e70 <_Bfree>
 8008f26:	4644      	mov	r4, r8
 8008f28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f2c:	3501      	adds	r5, #1
 8008f2e:	615e      	str	r6, [r3, #20]
 8008f30:	6125      	str	r5, [r4, #16]
 8008f32:	4620      	mov	r0, r4
 8008f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f38:	08009e77 	.word	0x08009e77
 8008f3c:	08009e88 	.word	0x08009e88

08008f40 <__hi0bits>:
 8008f40:	0c02      	lsrs	r2, r0, #16
 8008f42:	0412      	lsls	r2, r2, #16
 8008f44:	4603      	mov	r3, r0
 8008f46:	b9ca      	cbnz	r2, 8008f7c <__hi0bits+0x3c>
 8008f48:	0403      	lsls	r3, r0, #16
 8008f4a:	2010      	movs	r0, #16
 8008f4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008f50:	bf04      	itt	eq
 8008f52:	021b      	lsleq	r3, r3, #8
 8008f54:	3008      	addeq	r0, #8
 8008f56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008f5a:	bf04      	itt	eq
 8008f5c:	011b      	lsleq	r3, r3, #4
 8008f5e:	3004      	addeq	r0, #4
 8008f60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008f64:	bf04      	itt	eq
 8008f66:	009b      	lsleq	r3, r3, #2
 8008f68:	3002      	addeq	r0, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	db05      	blt.n	8008f7a <__hi0bits+0x3a>
 8008f6e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008f72:	f100 0001 	add.w	r0, r0, #1
 8008f76:	bf08      	it	eq
 8008f78:	2020      	moveq	r0, #32
 8008f7a:	4770      	bx	lr
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e7e5      	b.n	8008f4c <__hi0bits+0xc>

08008f80 <__lo0bits>:
 8008f80:	6803      	ldr	r3, [r0, #0]
 8008f82:	4602      	mov	r2, r0
 8008f84:	f013 0007 	ands.w	r0, r3, #7
 8008f88:	d00b      	beq.n	8008fa2 <__lo0bits+0x22>
 8008f8a:	07d9      	lsls	r1, r3, #31
 8008f8c:	d421      	bmi.n	8008fd2 <__lo0bits+0x52>
 8008f8e:	0798      	lsls	r0, r3, #30
 8008f90:	bf49      	itett	mi
 8008f92:	085b      	lsrmi	r3, r3, #1
 8008f94:	089b      	lsrpl	r3, r3, #2
 8008f96:	2001      	movmi	r0, #1
 8008f98:	6013      	strmi	r3, [r2, #0]
 8008f9a:	bf5c      	itt	pl
 8008f9c:	2002      	movpl	r0, #2
 8008f9e:	6013      	strpl	r3, [r2, #0]
 8008fa0:	4770      	bx	lr
 8008fa2:	b299      	uxth	r1, r3
 8008fa4:	b909      	cbnz	r1, 8008faa <__lo0bits+0x2a>
 8008fa6:	2010      	movs	r0, #16
 8008fa8:	0c1b      	lsrs	r3, r3, #16
 8008faa:	b2d9      	uxtb	r1, r3
 8008fac:	b909      	cbnz	r1, 8008fb2 <__lo0bits+0x32>
 8008fae:	3008      	adds	r0, #8
 8008fb0:	0a1b      	lsrs	r3, r3, #8
 8008fb2:	0719      	lsls	r1, r3, #28
 8008fb4:	bf04      	itt	eq
 8008fb6:	091b      	lsreq	r3, r3, #4
 8008fb8:	3004      	addeq	r0, #4
 8008fba:	0799      	lsls	r1, r3, #30
 8008fbc:	bf04      	itt	eq
 8008fbe:	089b      	lsreq	r3, r3, #2
 8008fc0:	3002      	addeq	r0, #2
 8008fc2:	07d9      	lsls	r1, r3, #31
 8008fc4:	d403      	bmi.n	8008fce <__lo0bits+0x4e>
 8008fc6:	085b      	lsrs	r3, r3, #1
 8008fc8:	f100 0001 	add.w	r0, r0, #1
 8008fcc:	d003      	beq.n	8008fd6 <__lo0bits+0x56>
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	4770      	bx	lr
 8008fd2:	2000      	movs	r0, #0
 8008fd4:	4770      	bx	lr
 8008fd6:	2020      	movs	r0, #32
 8008fd8:	4770      	bx	lr
	...

08008fdc <__i2b>:
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	460c      	mov	r4, r1
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	f7ff ff05 	bl	8008df0 <_Balloc>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	b928      	cbnz	r0, 8008ff6 <__i2b+0x1a>
 8008fea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008fee:	4b04      	ldr	r3, [pc, #16]	; (8009000 <__i2b+0x24>)
 8008ff0:	4804      	ldr	r0, [pc, #16]	; (8009004 <__i2b+0x28>)
 8008ff2:	f000 faed 	bl	80095d0 <__assert_func>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	6144      	str	r4, [r0, #20]
 8008ffa:	6103      	str	r3, [r0, #16]
 8008ffc:	bd10      	pop	{r4, pc}
 8008ffe:	bf00      	nop
 8009000:	08009e77 	.word	0x08009e77
 8009004:	08009e88 	.word	0x08009e88

08009008 <__multiply>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	4691      	mov	r9, r2
 800900e:	690a      	ldr	r2, [r1, #16]
 8009010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009014:	460c      	mov	r4, r1
 8009016:	429a      	cmp	r2, r3
 8009018:	bfbe      	ittt	lt
 800901a:	460b      	movlt	r3, r1
 800901c:	464c      	movlt	r4, r9
 800901e:	4699      	movlt	r9, r3
 8009020:	6927      	ldr	r7, [r4, #16]
 8009022:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009026:	68a3      	ldr	r3, [r4, #8]
 8009028:	6861      	ldr	r1, [r4, #4]
 800902a:	eb07 060a 	add.w	r6, r7, sl
 800902e:	42b3      	cmp	r3, r6
 8009030:	b085      	sub	sp, #20
 8009032:	bfb8      	it	lt
 8009034:	3101      	addlt	r1, #1
 8009036:	f7ff fedb 	bl	8008df0 <_Balloc>
 800903a:	b930      	cbnz	r0, 800904a <__multiply+0x42>
 800903c:	4602      	mov	r2, r0
 800903e:	f240 115d 	movw	r1, #349	; 0x15d
 8009042:	4b43      	ldr	r3, [pc, #268]	; (8009150 <__multiply+0x148>)
 8009044:	4843      	ldr	r0, [pc, #268]	; (8009154 <__multiply+0x14c>)
 8009046:	f000 fac3 	bl	80095d0 <__assert_func>
 800904a:	f100 0514 	add.w	r5, r0, #20
 800904e:	462b      	mov	r3, r5
 8009050:	2200      	movs	r2, #0
 8009052:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009056:	4543      	cmp	r3, r8
 8009058:	d321      	bcc.n	800909e <__multiply+0x96>
 800905a:	f104 0314 	add.w	r3, r4, #20
 800905e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009062:	f109 0314 	add.w	r3, r9, #20
 8009066:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800906a:	9202      	str	r2, [sp, #8]
 800906c:	1b3a      	subs	r2, r7, r4
 800906e:	3a15      	subs	r2, #21
 8009070:	f022 0203 	bic.w	r2, r2, #3
 8009074:	3204      	adds	r2, #4
 8009076:	f104 0115 	add.w	r1, r4, #21
 800907a:	428f      	cmp	r7, r1
 800907c:	bf38      	it	cc
 800907e:	2204      	movcc	r2, #4
 8009080:	9201      	str	r2, [sp, #4]
 8009082:	9a02      	ldr	r2, [sp, #8]
 8009084:	9303      	str	r3, [sp, #12]
 8009086:	429a      	cmp	r2, r3
 8009088:	d80c      	bhi.n	80090a4 <__multiply+0x9c>
 800908a:	2e00      	cmp	r6, #0
 800908c:	dd03      	ble.n	8009096 <__multiply+0x8e>
 800908e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009092:	2b00      	cmp	r3, #0
 8009094:	d059      	beq.n	800914a <__multiply+0x142>
 8009096:	6106      	str	r6, [r0, #16]
 8009098:	b005      	add	sp, #20
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	f843 2b04 	str.w	r2, [r3], #4
 80090a2:	e7d8      	b.n	8009056 <__multiply+0x4e>
 80090a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80090a8:	f1ba 0f00 	cmp.w	sl, #0
 80090ac:	d023      	beq.n	80090f6 <__multiply+0xee>
 80090ae:	46a9      	mov	r9, r5
 80090b0:	f04f 0c00 	mov.w	ip, #0
 80090b4:	f104 0e14 	add.w	lr, r4, #20
 80090b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090bc:	f8d9 1000 	ldr.w	r1, [r9]
 80090c0:	fa1f fb82 	uxth.w	fp, r2
 80090c4:	b289      	uxth	r1, r1
 80090c6:	fb0a 110b 	mla	r1, sl, fp, r1
 80090ca:	4461      	add	r1, ip
 80090cc:	f8d9 c000 	ldr.w	ip, [r9]
 80090d0:	0c12      	lsrs	r2, r2, #16
 80090d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80090d6:	fb0a c202 	mla	r2, sl, r2, ip
 80090da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090de:	b289      	uxth	r1, r1
 80090e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090e4:	4577      	cmp	r7, lr
 80090e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090ea:	f849 1b04 	str.w	r1, [r9], #4
 80090ee:	d8e3      	bhi.n	80090b8 <__multiply+0xb0>
 80090f0:	9a01      	ldr	r2, [sp, #4]
 80090f2:	f845 c002 	str.w	ip, [r5, r2]
 80090f6:	9a03      	ldr	r2, [sp, #12]
 80090f8:	3304      	adds	r3, #4
 80090fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090fe:	f1b9 0f00 	cmp.w	r9, #0
 8009102:	d020      	beq.n	8009146 <__multiply+0x13e>
 8009104:	46ae      	mov	lr, r5
 8009106:	f04f 0a00 	mov.w	sl, #0
 800910a:	6829      	ldr	r1, [r5, #0]
 800910c:	f104 0c14 	add.w	ip, r4, #20
 8009110:	f8bc b000 	ldrh.w	fp, [ip]
 8009114:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009118:	b289      	uxth	r1, r1
 800911a:	fb09 220b 	mla	r2, r9, fp, r2
 800911e:	4492      	add	sl, r2
 8009120:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009124:	f84e 1b04 	str.w	r1, [lr], #4
 8009128:	f85c 2b04 	ldr.w	r2, [ip], #4
 800912c:	f8be 1000 	ldrh.w	r1, [lr]
 8009130:	0c12      	lsrs	r2, r2, #16
 8009132:	fb09 1102 	mla	r1, r9, r2, r1
 8009136:	4567      	cmp	r7, ip
 8009138:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800913c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009140:	d8e6      	bhi.n	8009110 <__multiply+0x108>
 8009142:	9a01      	ldr	r2, [sp, #4]
 8009144:	50a9      	str	r1, [r5, r2]
 8009146:	3504      	adds	r5, #4
 8009148:	e79b      	b.n	8009082 <__multiply+0x7a>
 800914a:	3e01      	subs	r6, #1
 800914c:	e79d      	b.n	800908a <__multiply+0x82>
 800914e:	bf00      	nop
 8009150:	08009e77 	.word	0x08009e77
 8009154:	08009e88 	.word	0x08009e88

08009158 <__pow5mult>:
 8009158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800915c:	4615      	mov	r5, r2
 800915e:	f012 0203 	ands.w	r2, r2, #3
 8009162:	4606      	mov	r6, r0
 8009164:	460f      	mov	r7, r1
 8009166:	d007      	beq.n	8009178 <__pow5mult+0x20>
 8009168:	4c25      	ldr	r4, [pc, #148]	; (8009200 <__pow5mult+0xa8>)
 800916a:	3a01      	subs	r2, #1
 800916c:	2300      	movs	r3, #0
 800916e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009172:	f7ff fe9f 	bl	8008eb4 <__multadd>
 8009176:	4607      	mov	r7, r0
 8009178:	10ad      	asrs	r5, r5, #2
 800917a:	d03d      	beq.n	80091f8 <__pow5mult+0xa0>
 800917c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800917e:	b97c      	cbnz	r4, 80091a0 <__pow5mult+0x48>
 8009180:	2010      	movs	r0, #16
 8009182:	f7ff fe13 	bl	8008dac <malloc>
 8009186:	4602      	mov	r2, r0
 8009188:	6270      	str	r0, [r6, #36]	; 0x24
 800918a:	b928      	cbnz	r0, 8009198 <__pow5mult+0x40>
 800918c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009190:	4b1c      	ldr	r3, [pc, #112]	; (8009204 <__pow5mult+0xac>)
 8009192:	481d      	ldr	r0, [pc, #116]	; (8009208 <__pow5mult+0xb0>)
 8009194:	f000 fa1c 	bl	80095d0 <__assert_func>
 8009198:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800919c:	6004      	str	r4, [r0, #0]
 800919e:	60c4      	str	r4, [r0, #12]
 80091a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091a8:	b94c      	cbnz	r4, 80091be <__pow5mult+0x66>
 80091aa:	f240 2171 	movw	r1, #625	; 0x271
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7ff ff14 	bl	8008fdc <__i2b>
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80091bc:	6003      	str	r3, [r0, #0]
 80091be:	f04f 0900 	mov.w	r9, #0
 80091c2:	07eb      	lsls	r3, r5, #31
 80091c4:	d50a      	bpl.n	80091dc <__pow5mult+0x84>
 80091c6:	4639      	mov	r1, r7
 80091c8:	4622      	mov	r2, r4
 80091ca:	4630      	mov	r0, r6
 80091cc:	f7ff ff1c 	bl	8009008 <__multiply>
 80091d0:	4680      	mov	r8, r0
 80091d2:	4639      	mov	r1, r7
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7ff fe4b 	bl	8008e70 <_Bfree>
 80091da:	4647      	mov	r7, r8
 80091dc:	106d      	asrs	r5, r5, #1
 80091de:	d00b      	beq.n	80091f8 <__pow5mult+0xa0>
 80091e0:	6820      	ldr	r0, [r4, #0]
 80091e2:	b938      	cbnz	r0, 80091f4 <__pow5mult+0x9c>
 80091e4:	4622      	mov	r2, r4
 80091e6:	4621      	mov	r1, r4
 80091e8:	4630      	mov	r0, r6
 80091ea:	f7ff ff0d 	bl	8009008 <__multiply>
 80091ee:	6020      	str	r0, [r4, #0]
 80091f0:	f8c0 9000 	str.w	r9, [r0]
 80091f4:	4604      	mov	r4, r0
 80091f6:	e7e4      	b.n	80091c2 <__pow5mult+0x6a>
 80091f8:	4638      	mov	r0, r7
 80091fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091fe:	bf00      	nop
 8009200:	08009fd8 	.word	0x08009fd8
 8009204:	08009e05 	.word	0x08009e05
 8009208:	08009e88 	.word	0x08009e88

0800920c <__lshift>:
 800920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009210:	460c      	mov	r4, r1
 8009212:	4607      	mov	r7, r0
 8009214:	4691      	mov	r9, r2
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	6849      	ldr	r1, [r1, #4]
 800921a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009224:	f108 0601 	add.w	r6, r8, #1
 8009228:	42b3      	cmp	r3, r6
 800922a:	db0b      	blt.n	8009244 <__lshift+0x38>
 800922c:	4638      	mov	r0, r7
 800922e:	f7ff fddf 	bl	8008df0 <_Balloc>
 8009232:	4605      	mov	r5, r0
 8009234:	b948      	cbnz	r0, 800924a <__lshift+0x3e>
 8009236:	4602      	mov	r2, r0
 8009238:	f240 11d9 	movw	r1, #473	; 0x1d9
 800923c:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <__lshift+0xd8>)
 800923e:	482a      	ldr	r0, [pc, #168]	; (80092e8 <__lshift+0xdc>)
 8009240:	f000 f9c6 	bl	80095d0 <__assert_func>
 8009244:	3101      	adds	r1, #1
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	e7ee      	b.n	8009228 <__lshift+0x1c>
 800924a:	2300      	movs	r3, #0
 800924c:	f100 0114 	add.w	r1, r0, #20
 8009250:	f100 0210 	add.w	r2, r0, #16
 8009254:	4618      	mov	r0, r3
 8009256:	4553      	cmp	r3, sl
 8009258:	db37      	blt.n	80092ca <__lshift+0xbe>
 800925a:	6920      	ldr	r0, [r4, #16]
 800925c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009260:	f104 0314 	add.w	r3, r4, #20
 8009264:	f019 091f 	ands.w	r9, r9, #31
 8009268:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800926c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009270:	d02f      	beq.n	80092d2 <__lshift+0xc6>
 8009272:	468a      	mov	sl, r1
 8009274:	f04f 0c00 	mov.w	ip, #0
 8009278:	f1c9 0e20 	rsb	lr, r9, #32
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	fa02 f209 	lsl.w	r2, r2, r9
 8009282:	ea42 020c 	orr.w	r2, r2, ip
 8009286:	f84a 2b04 	str.w	r2, [sl], #4
 800928a:	f853 2b04 	ldr.w	r2, [r3], #4
 800928e:	4298      	cmp	r0, r3
 8009290:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009294:	d8f2      	bhi.n	800927c <__lshift+0x70>
 8009296:	1b03      	subs	r3, r0, r4
 8009298:	3b15      	subs	r3, #21
 800929a:	f023 0303 	bic.w	r3, r3, #3
 800929e:	3304      	adds	r3, #4
 80092a0:	f104 0215 	add.w	r2, r4, #21
 80092a4:	4290      	cmp	r0, r2
 80092a6:	bf38      	it	cc
 80092a8:	2304      	movcc	r3, #4
 80092aa:	f841 c003 	str.w	ip, [r1, r3]
 80092ae:	f1bc 0f00 	cmp.w	ip, #0
 80092b2:	d001      	beq.n	80092b8 <__lshift+0xac>
 80092b4:	f108 0602 	add.w	r6, r8, #2
 80092b8:	3e01      	subs	r6, #1
 80092ba:	4638      	mov	r0, r7
 80092bc:	4621      	mov	r1, r4
 80092be:	612e      	str	r6, [r5, #16]
 80092c0:	f7ff fdd6 	bl	8008e70 <_Bfree>
 80092c4:	4628      	mov	r0, r5
 80092c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80092ce:	3301      	adds	r3, #1
 80092d0:	e7c1      	b.n	8009256 <__lshift+0x4a>
 80092d2:	3904      	subs	r1, #4
 80092d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092d8:	4298      	cmp	r0, r3
 80092da:	f841 2f04 	str.w	r2, [r1, #4]!
 80092de:	d8f9      	bhi.n	80092d4 <__lshift+0xc8>
 80092e0:	e7ea      	b.n	80092b8 <__lshift+0xac>
 80092e2:	bf00      	nop
 80092e4:	08009e77 	.word	0x08009e77
 80092e8:	08009e88 	.word	0x08009e88

080092ec <__mcmp>:
 80092ec:	4603      	mov	r3, r0
 80092ee:	690a      	ldr	r2, [r1, #16]
 80092f0:	6900      	ldr	r0, [r0, #16]
 80092f2:	b530      	push	{r4, r5, lr}
 80092f4:	1a80      	subs	r0, r0, r2
 80092f6:	d10d      	bne.n	8009314 <__mcmp+0x28>
 80092f8:	3314      	adds	r3, #20
 80092fa:	3114      	adds	r1, #20
 80092fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009300:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009304:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009308:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800930c:	4295      	cmp	r5, r2
 800930e:	d002      	beq.n	8009316 <__mcmp+0x2a>
 8009310:	d304      	bcc.n	800931c <__mcmp+0x30>
 8009312:	2001      	movs	r0, #1
 8009314:	bd30      	pop	{r4, r5, pc}
 8009316:	42a3      	cmp	r3, r4
 8009318:	d3f4      	bcc.n	8009304 <__mcmp+0x18>
 800931a:	e7fb      	b.n	8009314 <__mcmp+0x28>
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	e7f8      	b.n	8009314 <__mcmp+0x28>
	...

08009324 <__mdiff>:
 8009324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	460d      	mov	r5, r1
 800932a:	4607      	mov	r7, r0
 800932c:	4611      	mov	r1, r2
 800932e:	4628      	mov	r0, r5
 8009330:	4614      	mov	r4, r2
 8009332:	f7ff ffdb 	bl	80092ec <__mcmp>
 8009336:	1e06      	subs	r6, r0, #0
 8009338:	d111      	bne.n	800935e <__mdiff+0x3a>
 800933a:	4631      	mov	r1, r6
 800933c:	4638      	mov	r0, r7
 800933e:	f7ff fd57 	bl	8008df0 <_Balloc>
 8009342:	4602      	mov	r2, r0
 8009344:	b928      	cbnz	r0, 8009352 <__mdiff+0x2e>
 8009346:	f240 2132 	movw	r1, #562	; 0x232
 800934a:	4b3a      	ldr	r3, [pc, #232]	; (8009434 <__mdiff+0x110>)
 800934c:	483a      	ldr	r0, [pc, #232]	; (8009438 <__mdiff+0x114>)
 800934e:	f000 f93f 	bl	80095d0 <__assert_func>
 8009352:	2301      	movs	r3, #1
 8009354:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009358:	4610      	mov	r0, r2
 800935a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935e:	bfa4      	itt	ge
 8009360:	4623      	movge	r3, r4
 8009362:	462c      	movge	r4, r5
 8009364:	4638      	mov	r0, r7
 8009366:	6861      	ldr	r1, [r4, #4]
 8009368:	bfa6      	itte	ge
 800936a:	461d      	movge	r5, r3
 800936c:	2600      	movge	r6, #0
 800936e:	2601      	movlt	r6, #1
 8009370:	f7ff fd3e 	bl	8008df0 <_Balloc>
 8009374:	4602      	mov	r2, r0
 8009376:	b918      	cbnz	r0, 8009380 <__mdiff+0x5c>
 8009378:	f44f 7110 	mov.w	r1, #576	; 0x240
 800937c:	4b2d      	ldr	r3, [pc, #180]	; (8009434 <__mdiff+0x110>)
 800937e:	e7e5      	b.n	800934c <__mdiff+0x28>
 8009380:	f102 0814 	add.w	r8, r2, #20
 8009384:	46c2      	mov	sl, r8
 8009386:	f04f 0c00 	mov.w	ip, #0
 800938a:	6927      	ldr	r7, [r4, #16]
 800938c:	60c6      	str	r6, [r0, #12]
 800938e:	692e      	ldr	r6, [r5, #16]
 8009390:	f104 0014 	add.w	r0, r4, #20
 8009394:	f105 0914 	add.w	r9, r5, #20
 8009398:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800939c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093a0:	3410      	adds	r4, #16
 80093a2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80093a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80093aa:	fa1f f18b 	uxth.w	r1, fp
 80093ae:	448c      	add	ip, r1
 80093b0:	b299      	uxth	r1, r3
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	ebac 0101 	sub.w	r1, ip, r1
 80093b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093bc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093c0:	b289      	uxth	r1, r1
 80093c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80093c6:	454e      	cmp	r6, r9
 80093c8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80093cc:	f84a 3b04 	str.w	r3, [sl], #4
 80093d0:	d8e7      	bhi.n	80093a2 <__mdiff+0x7e>
 80093d2:	1b73      	subs	r3, r6, r5
 80093d4:	3b15      	subs	r3, #21
 80093d6:	f023 0303 	bic.w	r3, r3, #3
 80093da:	3515      	adds	r5, #21
 80093dc:	3304      	adds	r3, #4
 80093de:	42ae      	cmp	r6, r5
 80093e0:	bf38      	it	cc
 80093e2:	2304      	movcc	r3, #4
 80093e4:	4418      	add	r0, r3
 80093e6:	4443      	add	r3, r8
 80093e8:	461e      	mov	r6, r3
 80093ea:	4605      	mov	r5, r0
 80093ec:	4575      	cmp	r5, lr
 80093ee:	d30e      	bcc.n	800940e <__mdiff+0xea>
 80093f0:	f10e 0103 	add.w	r1, lr, #3
 80093f4:	1a09      	subs	r1, r1, r0
 80093f6:	f021 0103 	bic.w	r1, r1, #3
 80093fa:	3803      	subs	r0, #3
 80093fc:	4586      	cmp	lr, r0
 80093fe:	bf38      	it	cc
 8009400:	2100      	movcc	r1, #0
 8009402:	4419      	add	r1, r3
 8009404:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009408:	b18b      	cbz	r3, 800942e <__mdiff+0x10a>
 800940a:	6117      	str	r7, [r2, #16]
 800940c:	e7a4      	b.n	8009358 <__mdiff+0x34>
 800940e:	f855 8b04 	ldr.w	r8, [r5], #4
 8009412:	fa1f f188 	uxth.w	r1, r8
 8009416:	4461      	add	r1, ip
 8009418:	140c      	asrs	r4, r1, #16
 800941a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800941e:	b289      	uxth	r1, r1
 8009420:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009424:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009428:	f846 1b04 	str.w	r1, [r6], #4
 800942c:	e7de      	b.n	80093ec <__mdiff+0xc8>
 800942e:	3f01      	subs	r7, #1
 8009430:	e7e8      	b.n	8009404 <__mdiff+0xe0>
 8009432:	bf00      	nop
 8009434:	08009e77 	.word	0x08009e77
 8009438:	08009e88 	.word	0x08009e88

0800943c <__d2b>:
 800943c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009440:	2101      	movs	r1, #1
 8009442:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009446:	4690      	mov	r8, r2
 8009448:	461d      	mov	r5, r3
 800944a:	f7ff fcd1 	bl	8008df0 <_Balloc>
 800944e:	4604      	mov	r4, r0
 8009450:	b930      	cbnz	r0, 8009460 <__d2b+0x24>
 8009452:	4602      	mov	r2, r0
 8009454:	f240 310a 	movw	r1, #778	; 0x30a
 8009458:	4b24      	ldr	r3, [pc, #144]	; (80094ec <__d2b+0xb0>)
 800945a:	4825      	ldr	r0, [pc, #148]	; (80094f0 <__d2b+0xb4>)
 800945c:	f000 f8b8 	bl	80095d0 <__assert_func>
 8009460:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009464:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009468:	bb2d      	cbnz	r5, 80094b6 <__d2b+0x7a>
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	f1b8 0300 	subs.w	r3, r8, #0
 8009470:	d026      	beq.n	80094c0 <__d2b+0x84>
 8009472:	4668      	mov	r0, sp
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	f7ff fd83 	bl	8008f80 <__lo0bits>
 800947a:	9900      	ldr	r1, [sp, #0]
 800947c:	b1f0      	cbz	r0, 80094bc <__d2b+0x80>
 800947e:	9a01      	ldr	r2, [sp, #4]
 8009480:	f1c0 0320 	rsb	r3, r0, #32
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	430b      	orrs	r3, r1
 800948a:	40c2      	lsrs	r2, r0
 800948c:	6163      	str	r3, [r4, #20]
 800948e:	9201      	str	r2, [sp, #4]
 8009490:	9b01      	ldr	r3, [sp, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	bf14      	ite	ne
 8009496:	2102      	movne	r1, #2
 8009498:	2101      	moveq	r1, #1
 800949a:	61a3      	str	r3, [r4, #24]
 800949c:	6121      	str	r1, [r4, #16]
 800949e:	b1c5      	cbz	r5, 80094d2 <__d2b+0x96>
 80094a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80094a4:	4405      	add	r5, r0
 80094a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80094aa:	603d      	str	r5, [r7, #0]
 80094ac:	6030      	str	r0, [r6, #0]
 80094ae:	4620      	mov	r0, r4
 80094b0:	b002      	add	sp, #8
 80094b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094ba:	e7d6      	b.n	800946a <__d2b+0x2e>
 80094bc:	6161      	str	r1, [r4, #20]
 80094be:	e7e7      	b.n	8009490 <__d2b+0x54>
 80094c0:	a801      	add	r0, sp, #4
 80094c2:	f7ff fd5d 	bl	8008f80 <__lo0bits>
 80094c6:	2101      	movs	r1, #1
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	6121      	str	r1, [r4, #16]
 80094cc:	6163      	str	r3, [r4, #20]
 80094ce:	3020      	adds	r0, #32
 80094d0:	e7e5      	b.n	800949e <__d2b+0x62>
 80094d2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80094d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094da:	6038      	str	r0, [r7, #0]
 80094dc:	6918      	ldr	r0, [r3, #16]
 80094de:	f7ff fd2f 	bl	8008f40 <__hi0bits>
 80094e2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80094e6:	6031      	str	r1, [r6, #0]
 80094e8:	e7e1      	b.n	80094ae <__d2b+0x72>
 80094ea:	bf00      	nop
 80094ec:	08009e77 	.word	0x08009e77
 80094f0:	08009e88 	.word	0x08009e88

080094f4 <_calloc_r>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	fba1 5402 	umull	r5, r4, r1, r2
 80094fa:	b934      	cbnz	r4, 800950a <_calloc_r+0x16>
 80094fc:	4629      	mov	r1, r5
 80094fe:	f7fd ff53 	bl	80073a8 <_malloc_r>
 8009502:	4606      	mov	r6, r0
 8009504:	b928      	cbnz	r0, 8009512 <_calloc_r+0x1e>
 8009506:	4630      	mov	r0, r6
 8009508:	bd70      	pop	{r4, r5, r6, pc}
 800950a:	220c      	movs	r2, #12
 800950c:	2600      	movs	r6, #0
 800950e:	6002      	str	r2, [r0, #0]
 8009510:	e7f9      	b.n	8009506 <_calloc_r+0x12>
 8009512:	462a      	mov	r2, r5
 8009514:	4621      	mov	r1, r4
 8009516:	f7fd ff1e 	bl	8007356 <memset>
 800951a:	e7f4      	b.n	8009506 <_calloc_r+0x12>

0800951c <_free_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4605      	mov	r5, r0
 8009520:	2900      	cmp	r1, #0
 8009522:	d040      	beq.n	80095a6 <_free_r+0x8a>
 8009524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009528:	1f0c      	subs	r4, r1, #4
 800952a:	2b00      	cmp	r3, #0
 800952c:	bfb8      	it	lt
 800952e:	18e4      	addlt	r4, r4, r3
 8009530:	f7ff fc52 	bl	8008dd8 <__malloc_lock>
 8009534:	4a1c      	ldr	r2, [pc, #112]	; (80095a8 <_free_r+0x8c>)
 8009536:	6813      	ldr	r3, [r2, #0]
 8009538:	b933      	cbnz	r3, 8009548 <_free_r+0x2c>
 800953a:	6063      	str	r3, [r4, #4]
 800953c:	6014      	str	r4, [r2, #0]
 800953e:	4628      	mov	r0, r5
 8009540:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009544:	f7ff bc4e 	b.w	8008de4 <__malloc_unlock>
 8009548:	42a3      	cmp	r3, r4
 800954a:	d908      	bls.n	800955e <_free_r+0x42>
 800954c:	6820      	ldr	r0, [r4, #0]
 800954e:	1821      	adds	r1, r4, r0
 8009550:	428b      	cmp	r3, r1
 8009552:	bf01      	itttt	eq
 8009554:	6819      	ldreq	r1, [r3, #0]
 8009556:	685b      	ldreq	r3, [r3, #4]
 8009558:	1809      	addeq	r1, r1, r0
 800955a:	6021      	streq	r1, [r4, #0]
 800955c:	e7ed      	b.n	800953a <_free_r+0x1e>
 800955e:	461a      	mov	r2, r3
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	b10b      	cbz	r3, 8009568 <_free_r+0x4c>
 8009564:	42a3      	cmp	r3, r4
 8009566:	d9fa      	bls.n	800955e <_free_r+0x42>
 8009568:	6811      	ldr	r1, [r2, #0]
 800956a:	1850      	adds	r0, r2, r1
 800956c:	42a0      	cmp	r0, r4
 800956e:	d10b      	bne.n	8009588 <_free_r+0x6c>
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	4401      	add	r1, r0
 8009574:	1850      	adds	r0, r2, r1
 8009576:	4283      	cmp	r3, r0
 8009578:	6011      	str	r1, [r2, #0]
 800957a:	d1e0      	bne.n	800953e <_free_r+0x22>
 800957c:	6818      	ldr	r0, [r3, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	4401      	add	r1, r0
 8009582:	6011      	str	r1, [r2, #0]
 8009584:	6053      	str	r3, [r2, #4]
 8009586:	e7da      	b.n	800953e <_free_r+0x22>
 8009588:	d902      	bls.n	8009590 <_free_r+0x74>
 800958a:	230c      	movs	r3, #12
 800958c:	602b      	str	r3, [r5, #0]
 800958e:	e7d6      	b.n	800953e <_free_r+0x22>
 8009590:	6820      	ldr	r0, [r4, #0]
 8009592:	1821      	adds	r1, r4, r0
 8009594:	428b      	cmp	r3, r1
 8009596:	bf01      	itttt	eq
 8009598:	6819      	ldreq	r1, [r3, #0]
 800959a:	685b      	ldreq	r3, [r3, #4]
 800959c:	1809      	addeq	r1, r1, r0
 800959e:	6021      	streq	r1, [r4, #0]
 80095a0:	6063      	str	r3, [r4, #4]
 80095a2:	6054      	str	r4, [r2, #4]
 80095a4:	e7cb      	b.n	800953e <_free_r+0x22>
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	20001f44 	.word	0x20001f44

080095ac <_read_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	2200      	movs	r2, #0
 80095b6:	4d05      	ldr	r5, [pc, #20]	; (80095cc <_read_r+0x20>)
 80095b8:	602a      	str	r2, [r5, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f7f9 f922 	bl	8002804 <_read>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_read_r+0x1e>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_read_r+0x1e>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	20001f4c 	.word	0x20001f4c

080095d0 <__assert_func>:
 80095d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095d2:	4614      	mov	r4, r2
 80095d4:	461a      	mov	r2, r3
 80095d6:	4b09      	ldr	r3, [pc, #36]	; (80095fc <__assert_func+0x2c>)
 80095d8:	4605      	mov	r5, r0
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68d8      	ldr	r0, [r3, #12]
 80095de:	b14c      	cbz	r4, 80095f4 <__assert_func+0x24>
 80095e0:	4b07      	ldr	r3, [pc, #28]	; (8009600 <__assert_func+0x30>)
 80095e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095e6:	9100      	str	r1, [sp, #0]
 80095e8:	462b      	mov	r3, r5
 80095ea:	4906      	ldr	r1, [pc, #24]	; (8009604 <__assert_func+0x34>)
 80095ec:	f000 f80e 	bl	800960c <fiprintf>
 80095f0:	f000 fa56 	bl	8009aa0 <abort>
 80095f4:	4b04      	ldr	r3, [pc, #16]	; (8009608 <__assert_func+0x38>)
 80095f6:	461c      	mov	r4, r3
 80095f8:	e7f3      	b.n	80095e2 <__assert_func+0x12>
 80095fa:	bf00      	nop
 80095fc:	20000030 	.word	0x20000030
 8009600:	08009fe4 	.word	0x08009fe4
 8009604:	08009ff1 	.word	0x08009ff1
 8009608:	0800a01f 	.word	0x0800a01f

0800960c <fiprintf>:
 800960c:	b40e      	push	{r1, r2, r3}
 800960e:	b503      	push	{r0, r1, lr}
 8009610:	4601      	mov	r1, r0
 8009612:	ab03      	add	r3, sp, #12
 8009614:	4805      	ldr	r0, [pc, #20]	; (800962c <fiprintf+0x20>)
 8009616:	f853 2b04 	ldr.w	r2, [r3], #4
 800961a:	6800      	ldr	r0, [r0, #0]
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	f000 f841 	bl	80096a4 <_vfiprintf_r>
 8009622:	b002      	add	sp, #8
 8009624:	f85d eb04 	ldr.w	lr, [sp], #4
 8009628:	b003      	add	sp, #12
 800962a:	4770      	bx	lr
 800962c:	20000030 	.word	0x20000030

08009630 <__ascii_mbtowc>:
 8009630:	b082      	sub	sp, #8
 8009632:	b901      	cbnz	r1, 8009636 <__ascii_mbtowc+0x6>
 8009634:	a901      	add	r1, sp, #4
 8009636:	b142      	cbz	r2, 800964a <__ascii_mbtowc+0x1a>
 8009638:	b14b      	cbz	r3, 800964e <__ascii_mbtowc+0x1e>
 800963a:	7813      	ldrb	r3, [r2, #0]
 800963c:	600b      	str	r3, [r1, #0]
 800963e:	7812      	ldrb	r2, [r2, #0]
 8009640:	1e10      	subs	r0, r2, #0
 8009642:	bf18      	it	ne
 8009644:	2001      	movne	r0, #1
 8009646:	b002      	add	sp, #8
 8009648:	4770      	bx	lr
 800964a:	4610      	mov	r0, r2
 800964c:	e7fb      	b.n	8009646 <__ascii_mbtowc+0x16>
 800964e:	f06f 0001 	mvn.w	r0, #1
 8009652:	e7f8      	b.n	8009646 <__ascii_mbtowc+0x16>

08009654 <__sfputc_r>:
 8009654:	6893      	ldr	r3, [r2, #8]
 8009656:	b410      	push	{r4}
 8009658:	3b01      	subs	r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	6093      	str	r3, [r2, #8]
 800965e:	da07      	bge.n	8009670 <__sfputc_r+0x1c>
 8009660:	6994      	ldr	r4, [r2, #24]
 8009662:	42a3      	cmp	r3, r4
 8009664:	db01      	blt.n	800966a <__sfputc_r+0x16>
 8009666:	290a      	cmp	r1, #10
 8009668:	d102      	bne.n	8009670 <__sfputc_r+0x1c>
 800966a:	bc10      	pop	{r4}
 800966c:	f000 b94a 	b.w	8009904 <__swbuf_r>
 8009670:	6813      	ldr	r3, [r2, #0]
 8009672:	1c58      	adds	r0, r3, #1
 8009674:	6010      	str	r0, [r2, #0]
 8009676:	7019      	strb	r1, [r3, #0]
 8009678:	4608      	mov	r0, r1
 800967a:	bc10      	pop	{r4}
 800967c:	4770      	bx	lr

0800967e <__sfputs_r>:
 800967e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009680:	4606      	mov	r6, r0
 8009682:	460f      	mov	r7, r1
 8009684:	4614      	mov	r4, r2
 8009686:	18d5      	adds	r5, r2, r3
 8009688:	42ac      	cmp	r4, r5
 800968a:	d101      	bne.n	8009690 <__sfputs_r+0x12>
 800968c:	2000      	movs	r0, #0
 800968e:	e007      	b.n	80096a0 <__sfputs_r+0x22>
 8009690:	463a      	mov	r2, r7
 8009692:	4630      	mov	r0, r6
 8009694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009698:	f7ff ffdc 	bl	8009654 <__sfputc_r>
 800969c:	1c43      	adds	r3, r0, #1
 800969e:	d1f3      	bne.n	8009688 <__sfputs_r+0xa>
 80096a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096a4 <_vfiprintf_r>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	460d      	mov	r5, r1
 80096aa:	4614      	mov	r4, r2
 80096ac:	4698      	mov	r8, r3
 80096ae:	4606      	mov	r6, r0
 80096b0:	b09d      	sub	sp, #116	; 0x74
 80096b2:	b118      	cbz	r0, 80096bc <_vfiprintf_r+0x18>
 80096b4:	6983      	ldr	r3, [r0, #24]
 80096b6:	b90b      	cbnz	r3, 80096bc <_vfiprintf_r+0x18>
 80096b8:	f7fd fd7a 	bl	80071b0 <__sinit>
 80096bc:	4b89      	ldr	r3, [pc, #548]	; (80098e4 <_vfiprintf_r+0x240>)
 80096be:	429d      	cmp	r5, r3
 80096c0:	d11b      	bne.n	80096fa <_vfiprintf_r+0x56>
 80096c2:	6875      	ldr	r5, [r6, #4]
 80096c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096c6:	07d9      	lsls	r1, r3, #31
 80096c8:	d405      	bmi.n	80096d6 <_vfiprintf_r+0x32>
 80096ca:	89ab      	ldrh	r3, [r5, #12]
 80096cc:	059a      	lsls	r2, r3, #22
 80096ce:	d402      	bmi.n	80096d6 <_vfiprintf_r+0x32>
 80096d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096d2:	f7fd fe30 	bl	8007336 <__retarget_lock_acquire_recursive>
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	071b      	lsls	r3, r3, #28
 80096da:	d501      	bpl.n	80096e0 <_vfiprintf_r+0x3c>
 80096dc:	692b      	ldr	r3, [r5, #16]
 80096de:	b9eb      	cbnz	r3, 800971c <_vfiprintf_r+0x78>
 80096e0:	4629      	mov	r1, r5
 80096e2:	4630      	mov	r0, r6
 80096e4:	f000 f96e 	bl	80099c4 <__swsetup_r>
 80096e8:	b1c0      	cbz	r0, 800971c <_vfiprintf_r+0x78>
 80096ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ec:	07dc      	lsls	r4, r3, #31
 80096ee:	d50e      	bpl.n	800970e <_vfiprintf_r+0x6a>
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295
 80096f4:	b01d      	add	sp, #116	; 0x74
 80096f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fa:	4b7b      	ldr	r3, [pc, #492]	; (80098e8 <_vfiprintf_r+0x244>)
 80096fc:	429d      	cmp	r5, r3
 80096fe:	d101      	bne.n	8009704 <_vfiprintf_r+0x60>
 8009700:	68b5      	ldr	r5, [r6, #8]
 8009702:	e7df      	b.n	80096c4 <_vfiprintf_r+0x20>
 8009704:	4b79      	ldr	r3, [pc, #484]	; (80098ec <_vfiprintf_r+0x248>)
 8009706:	429d      	cmp	r5, r3
 8009708:	bf08      	it	eq
 800970a:	68f5      	ldreq	r5, [r6, #12]
 800970c:	e7da      	b.n	80096c4 <_vfiprintf_r+0x20>
 800970e:	89ab      	ldrh	r3, [r5, #12]
 8009710:	0598      	lsls	r0, r3, #22
 8009712:	d4ed      	bmi.n	80096f0 <_vfiprintf_r+0x4c>
 8009714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009716:	f7fd fe0f 	bl	8007338 <__retarget_lock_release_recursive>
 800971a:	e7e9      	b.n	80096f0 <_vfiprintf_r+0x4c>
 800971c:	2300      	movs	r3, #0
 800971e:	9309      	str	r3, [sp, #36]	; 0x24
 8009720:	2320      	movs	r3, #32
 8009722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009726:	2330      	movs	r3, #48	; 0x30
 8009728:	f04f 0901 	mov.w	r9, #1
 800972c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009730:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80098f0 <_vfiprintf_r+0x24c>
 8009734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009738:	4623      	mov	r3, r4
 800973a:	469a      	mov	sl, r3
 800973c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009740:	b10a      	cbz	r2, 8009746 <_vfiprintf_r+0xa2>
 8009742:	2a25      	cmp	r2, #37	; 0x25
 8009744:	d1f9      	bne.n	800973a <_vfiprintf_r+0x96>
 8009746:	ebba 0b04 	subs.w	fp, sl, r4
 800974a:	d00b      	beq.n	8009764 <_vfiprintf_r+0xc0>
 800974c:	465b      	mov	r3, fp
 800974e:	4622      	mov	r2, r4
 8009750:	4629      	mov	r1, r5
 8009752:	4630      	mov	r0, r6
 8009754:	f7ff ff93 	bl	800967e <__sfputs_r>
 8009758:	3001      	adds	r0, #1
 800975a:	f000 80aa 	beq.w	80098b2 <_vfiprintf_r+0x20e>
 800975e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009760:	445a      	add	r2, fp
 8009762:	9209      	str	r2, [sp, #36]	; 0x24
 8009764:	f89a 3000 	ldrb.w	r3, [sl]
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 80a2 	beq.w	80098b2 <_vfiprintf_r+0x20e>
 800976e:	2300      	movs	r3, #0
 8009770:	f04f 32ff 	mov.w	r2, #4294967295
 8009774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009778:	f10a 0a01 	add.w	sl, sl, #1
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	9307      	str	r3, [sp, #28]
 8009780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009784:	931a      	str	r3, [sp, #104]	; 0x68
 8009786:	4654      	mov	r4, sl
 8009788:	2205      	movs	r2, #5
 800978a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978e:	4858      	ldr	r0, [pc, #352]	; (80098f0 <_vfiprintf_r+0x24c>)
 8009790:	f7ff fb14 	bl	8008dbc <memchr>
 8009794:	9a04      	ldr	r2, [sp, #16]
 8009796:	b9d8      	cbnz	r0, 80097d0 <_vfiprintf_r+0x12c>
 8009798:	06d1      	lsls	r1, r2, #27
 800979a:	bf44      	itt	mi
 800979c:	2320      	movmi	r3, #32
 800979e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a2:	0713      	lsls	r3, r2, #28
 80097a4:	bf44      	itt	mi
 80097a6:	232b      	movmi	r3, #43	; 0x2b
 80097a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ac:	f89a 3000 	ldrb.w	r3, [sl]
 80097b0:	2b2a      	cmp	r3, #42	; 0x2a
 80097b2:	d015      	beq.n	80097e0 <_vfiprintf_r+0x13c>
 80097b4:	4654      	mov	r4, sl
 80097b6:	2000      	movs	r0, #0
 80097b8:	f04f 0c0a 	mov.w	ip, #10
 80097bc:	9a07      	ldr	r2, [sp, #28]
 80097be:	4621      	mov	r1, r4
 80097c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097c4:	3b30      	subs	r3, #48	; 0x30
 80097c6:	2b09      	cmp	r3, #9
 80097c8:	d94e      	bls.n	8009868 <_vfiprintf_r+0x1c4>
 80097ca:	b1b0      	cbz	r0, 80097fa <_vfiprintf_r+0x156>
 80097cc:	9207      	str	r2, [sp, #28]
 80097ce:	e014      	b.n	80097fa <_vfiprintf_r+0x156>
 80097d0:	eba0 0308 	sub.w	r3, r0, r8
 80097d4:	fa09 f303 	lsl.w	r3, r9, r3
 80097d8:	4313      	orrs	r3, r2
 80097da:	46a2      	mov	sl, r4
 80097dc:	9304      	str	r3, [sp, #16]
 80097de:	e7d2      	b.n	8009786 <_vfiprintf_r+0xe2>
 80097e0:	9b03      	ldr	r3, [sp, #12]
 80097e2:	1d19      	adds	r1, r3, #4
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	9103      	str	r1, [sp, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	bfbb      	ittet	lt
 80097ec:	425b      	neglt	r3, r3
 80097ee:	f042 0202 	orrlt.w	r2, r2, #2
 80097f2:	9307      	strge	r3, [sp, #28]
 80097f4:	9307      	strlt	r3, [sp, #28]
 80097f6:	bfb8      	it	lt
 80097f8:	9204      	strlt	r2, [sp, #16]
 80097fa:	7823      	ldrb	r3, [r4, #0]
 80097fc:	2b2e      	cmp	r3, #46	; 0x2e
 80097fe:	d10c      	bne.n	800981a <_vfiprintf_r+0x176>
 8009800:	7863      	ldrb	r3, [r4, #1]
 8009802:	2b2a      	cmp	r3, #42	; 0x2a
 8009804:	d135      	bne.n	8009872 <_vfiprintf_r+0x1ce>
 8009806:	9b03      	ldr	r3, [sp, #12]
 8009808:	3402      	adds	r4, #2
 800980a:	1d1a      	adds	r2, r3, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	9203      	str	r2, [sp, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	bfb8      	it	lt
 8009814:	f04f 33ff 	movlt.w	r3, #4294967295
 8009818:	9305      	str	r3, [sp, #20]
 800981a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80098f4 <_vfiprintf_r+0x250>
 800981e:	2203      	movs	r2, #3
 8009820:	4650      	mov	r0, sl
 8009822:	7821      	ldrb	r1, [r4, #0]
 8009824:	f7ff faca 	bl	8008dbc <memchr>
 8009828:	b140      	cbz	r0, 800983c <_vfiprintf_r+0x198>
 800982a:	2340      	movs	r3, #64	; 0x40
 800982c:	eba0 000a 	sub.w	r0, r0, sl
 8009830:	fa03 f000 	lsl.w	r0, r3, r0
 8009834:	9b04      	ldr	r3, [sp, #16]
 8009836:	3401      	adds	r4, #1
 8009838:	4303      	orrs	r3, r0
 800983a:	9304      	str	r3, [sp, #16]
 800983c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009840:	2206      	movs	r2, #6
 8009842:	482d      	ldr	r0, [pc, #180]	; (80098f8 <_vfiprintf_r+0x254>)
 8009844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009848:	f7ff fab8 	bl	8008dbc <memchr>
 800984c:	2800      	cmp	r0, #0
 800984e:	d03f      	beq.n	80098d0 <_vfiprintf_r+0x22c>
 8009850:	4b2a      	ldr	r3, [pc, #168]	; (80098fc <_vfiprintf_r+0x258>)
 8009852:	bb1b      	cbnz	r3, 800989c <_vfiprintf_r+0x1f8>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	3307      	adds	r3, #7
 8009858:	f023 0307 	bic.w	r3, r3, #7
 800985c:	3308      	adds	r3, #8
 800985e:	9303      	str	r3, [sp, #12]
 8009860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009862:	443b      	add	r3, r7
 8009864:	9309      	str	r3, [sp, #36]	; 0x24
 8009866:	e767      	b.n	8009738 <_vfiprintf_r+0x94>
 8009868:	460c      	mov	r4, r1
 800986a:	2001      	movs	r0, #1
 800986c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009870:	e7a5      	b.n	80097be <_vfiprintf_r+0x11a>
 8009872:	2300      	movs	r3, #0
 8009874:	f04f 0c0a 	mov.w	ip, #10
 8009878:	4619      	mov	r1, r3
 800987a:	3401      	adds	r4, #1
 800987c:	9305      	str	r3, [sp, #20]
 800987e:	4620      	mov	r0, r4
 8009880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009884:	3a30      	subs	r2, #48	; 0x30
 8009886:	2a09      	cmp	r2, #9
 8009888:	d903      	bls.n	8009892 <_vfiprintf_r+0x1ee>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c5      	beq.n	800981a <_vfiprintf_r+0x176>
 800988e:	9105      	str	r1, [sp, #20]
 8009890:	e7c3      	b.n	800981a <_vfiprintf_r+0x176>
 8009892:	4604      	mov	r4, r0
 8009894:	2301      	movs	r3, #1
 8009896:	fb0c 2101 	mla	r1, ip, r1, r2
 800989a:	e7f0      	b.n	800987e <_vfiprintf_r+0x1da>
 800989c:	ab03      	add	r3, sp, #12
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	462a      	mov	r2, r5
 80098a2:	4630      	mov	r0, r6
 80098a4:	4b16      	ldr	r3, [pc, #88]	; (8009900 <_vfiprintf_r+0x25c>)
 80098a6:	a904      	add	r1, sp, #16
 80098a8:	f7fd fe90 	bl	80075cc <_printf_float>
 80098ac:	4607      	mov	r7, r0
 80098ae:	1c78      	adds	r0, r7, #1
 80098b0:	d1d6      	bne.n	8009860 <_vfiprintf_r+0x1bc>
 80098b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098b4:	07d9      	lsls	r1, r3, #31
 80098b6:	d405      	bmi.n	80098c4 <_vfiprintf_r+0x220>
 80098b8:	89ab      	ldrh	r3, [r5, #12]
 80098ba:	059a      	lsls	r2, r3, #22
 80098bc:	d402      	bmi.n	80098c4 <_vfiprintf_r+0x220>
 80098be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c0:	f7fd fd3a 	bl	8007338 <__retarget_lock_release_recursive>
 80098c4:	89ab      	ldrh	r3, [r5, #12]
 80098c6:	065b      	lsls	r3, r3, #25
 80098c8:	f53f af12 	bmi.w	80096f0 <_vfiprintf_r+0x4c>
 80098cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098ce:	e711      	b.n	80096f4 <_vfiprintf_r+0x50>
 80098d0:	ab03      	add	r3, sp, #12
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	462a      	mov	r2, r5
 80098d6:	4630      	mov	r0, r6
 80098d8:	4b09      	ldr	r3, [pc, #36]	; (8009900 <_vfiprintf_r+0x25c>)
 80098da:	a904      	add	r1, sp, #16
 80098dc:	f7fe f912 	bl	8007b04 <_printf_i>
 80098e0:	e7e4      	b.n	80098ac <_vfiprintf_r+0x208>
 80098e2:	bf00      	nop
 80098e4:	08009d80 	.word	0x08009d80
 80098e8:	08009da0 	.word	0x08009da0
 80098ec:	08009d60 	.word	0x08009d60
 80098f0:	0800a02a 	.word	0x0800a02a
 80098f4:	0800a030 	.word	0x0800a030
 80098f8:	0800a034 	.word	0x0800a034
 80098fc:	080075cd 	.word	0x080075cd
 8009900:	0800967f 	.word	0x0800967f

08009904 <__swbuf_r>:
 8009904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009906:	460e      	mov	r6, r1
 8009908:	4614      	mov	r4, r2
 800990a:	4605      	mov	r5, r0
 800990c:	b118      	cbz	r0, 8009916 <__swbuf_r+0x12>
 800990e:	6983      	ldr	r3, [r0, #24]
 8009910:	b90b      	cbnz	r3, 8009916 <__swbuf_r+0x12>
 8009912:	f7fd fc4d 	bl	80071b0 <__sinit>
 8009916:	4b21      	ldr	r3, [pc, #132]	; (800999c <__swbuf_r+0x98>)
 8009918:	429c      	cmp	r4, r3
 800991a:	d12b      	bne.n	8009974 <__swbuf_r+0x70>
 800991c:	686c      	ldr	r4, [r5, #4]
 800991e:	69a3      	ldr	r3, [r4, #24]
 8009920:	60a3      	str	r3, [r4, #8]
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	071a      	lsls	r2, r3, #28
 8009926:	d52f      	bpl.n	8009988 <__swbuf_r+0x84>
 8009928:	6923      	ldr	r3, [r4, #16]
 800992a:	b36b      	cbz	r3, 8009988 <__swbuf_r+0x84>
 800992c:	6923      	ldr	r3, [r4, #16]
 800992e:	6820      	ldr	r0, [r4, #0]
 8009930:	b2f6      	uxtb	r6, r6
 8009932:	1ac0      	subs	r0, r0, r3
 8009934:	6963      	ldr	r3, [r4, #20]
 8009936:	4637      	mov	r7, r6
 8009938:	4283      	cmp	r3, r0
 800993a:	dc04      	bgt.n	8009946 <__swbuf_r+0x42>
 800993c:	4621      	mov	r1, r4
 800993e:	4628      	mov	r0, r5
 8009940:	f7ff f9e2 	bl	8008d08 <_fflush_r>
 8009944:	bb30      	cbnz	r0, 8009994 <__swbuf_r+0x90>
 8009946:	68a3      	ldr	r3, [r4, #8]
 8009948:	3001      	adds	r0, #1
 800994a:	3b01      	subs	r3, #1
 800994c:	60a3      	str	r3, [r4, #8]
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	6022      	str	r2, [r4, #0]
 8009954:	701e      	strb	r6, [r3, #0]
 8009956:	6963      	ldr	r3, [r4, #20]
 8009958:	4283      	cmp	r3, r0
 800995a:	d004      	beq.n	8009966 <__swbuf_r+0x62>
 800995c:	89a3      	ldrh	r3, [r4, #12]
 800995e:	07db      	lsls	r3, r3, #31
 8009960:	d506      	bpl.n	8009970 <__swbuf_r+0x6c>
 8009962:	2e0a      	cmp	r6, #10
 8009964:	d104      	bne.n	8009970 <__swbuf_r+0x6c>
 8009966:	4621      	mov	r1, r4
 8009968:	4628      	mov	r0, r5
 800996a:	f7ff f9cd 	bl	8008d08 <_fflush_r>
 800996e:	b988      	cbnz	r0, 8009994 <__swbuf_r+0x90>
 8009970:	4638      	mov	r0, r7
 8009972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009974:	4b0a      	ldr	r3, [pc, #40]	; (80099a0 <__swbuf_r+0x9c>)
 8009976:	429c      	cmp	r4, r3
 8009978:	d101      	bne.n	800997e <__swbuf_r+0x7a>
 800997a:	68ac      	ldr	r4, [r5, #8]
 800997c:	e7cf      	b.n	800991e <__swbuf_r+0x1a>
 800997e:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <__swbuf_r+0xa0>)
 8009980:	429c      	cmp	r4, r3
 8009982:	bf08      	it	eq
 8009984:	68ec      	ldreq	r4, [r5, #12]
 8009986:	e7ca      	b.n	800991e <__swbuf_r+0x1a>
 8009988:	4621      	mov	r1, r4
 800998a:	4628      	mov	r0, r5
 800998c:	f000 f81a 	bl	80099c4 <__swsetup_r>
 8009990:	2800      	cmp	r0, #0
 8009992:	d0cb      	beq.n	800992c <__swbuf_r+0x28>
 8009994:	f04f 37ff 	mov.w	r7, #4294967295
 8009998:	e7ea      	b.n	8009970 <__swbuf_r+0x6c>
 800999a:	bf00      	nop
 800999c:	08009d80 	.word	0x08009d80
 80099a0:	08009da0 	.word	0x08009da0
 80099a4:	08009d60 	.word	0x08009d60

080099a8 <__ascii_wctomb>:
 80099a8:	4603      	mov	r3, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	b141      	cbz	r1, 80099c0 <__ascii_wctomb+0x18>
 80099ae:	2aff      	cmp	r2, #255	; 0xff
 80099b0:	d904      	bls.n	80099bc <__ascii_wctomb+0x14>
 80099b2:	228a      	movs	r2, #138	; 0x8a
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	4770      	bx	lr
 80099bc:	2001      	movs	r0, #1
 80099be:	700a      	strb	r2, [r1, #0]
 80099c0:	4770      	bx	lr
	...

080099c4 <__swsetup_r>:
 80099c4:	4b32      	ldr	r3, [pc, #200]	; (8009a90 <__swsetup_r+0xcc>)
 80099c6:	b570      	push	{r4, r5, r6, lr}
 80099c8:	681d      	ldr	r5, [r3, #0]
 80099ca:	4606      	mov	r6, r0
 80099cc:	460c      	mov	r4, r1
 80099ce:	b125      	cbz	r5, 80099da <__swsetup_r+0x16>
 80099d0:	69ab      	ldr	r3, [r5, #24]
 80099d2:	b913      	cbnz	r3, 80099da <__swsetup_r+0x16>
 80099d4:	4628      	mov	r0, r5
 80099d6:	f7fd fbeb 	bl	80071b0 <__sinit>
 80099da:	4b2e      	ldr	r3, [pc, #184]	; (8009a94 <__swsetup_r+0xd0>)
 80099dc:	429c      	cmp	r4, r3
 80099de:	d10f      	bne.n	8009a00 <__swsetup_r+0x3c>
 80099e0:	686c      	ldr	r4, [r5, #4]
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099e8:	0719      	lsls	r1, r3, #28
 80099ea:	d42c      	bmi.n	8009a46 <__swsetup_r+0x82>
 80099ec:	06dd      	lsls	r5, r3, #27
 80099ee:	d411      	bmi.n	8009a14 <__swsetup_r+0x50>
 80099f0:	2309      	movs	r3, #9
 80099f2:	6033      	str	r3, [r6, #0]
 80099f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	e03e      	b.n	8009a7e <__swsetup_r+0xba>
 8009a00:	4b25      	ldr	r3, [pc, #148]	; (8009a98 <__swsetup_r+0xd4>)
 8009a02:	429c      	cmp	r4, r3
 8009a04:	d101      	bne.n	8009a0a <__swsetup_r+0x46>
 8009a06:	68ac      	ldr	r4, [r5, #8]
 8009a08:	e7eb      	b.n	80099e2 <__swsetup_r+0x1e>
 8009a0a:	4b24      	ldr	r3, [pc, #144]	; (8009a9c <__swsetup_r+0xd8>)
 8009a0c:	429c      	cmp	r4, r3
 8009a0e:	bf08      	it	eq
 8009a10:	68ec      	ldreq	r4, [r5, #12]
 8009a12:	e7e6      	b.n	80099e2 <__swsetup_r+0x1e>
 8009a14:	0758      	lsls	r0, r3, #29
 8009a16:	d512      	bpl.n	8009a3e <__swsetup_r+0x7a>
 8009a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a1a:	b141      	cbz	r1, 8009a2e <__swsetup_r+0x6a>
 8009a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a20:	4299      	cmp	r1, r3
 8009a22:	d002      	beq.n	8009a2a <__swsetup_r+0x66>
 8009a24:	4630      	mov	r0, r6
 8009a26:	f7ff fd79 	bl	800951c <_free_r>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	2300      	movs	r3, #0
 8009a38:	6063      	str	r3, [r4, #4]
 8009a3a:	6923      	ldr	r3, [r4, #16]
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	89a3      	ldrh	r3, [r4, #12]
 8009a40:	f043 0308 	orr.w	r3, r3, #8
 8009a44:	81a3      	strh	r3, [r4, #12]
 8009a46:	6923      	ldr	r3, [r4, #16]
 8009a48:	b94b      	cbnz	r3, 8009a5e <__swsetup_r+0x9a>
 8009a4a:	89a3      	ldrh	r3, [r4, #12]
 8009a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a54:	d003      	beq.n	8009a5e <__swsetup_r+0x9a>
 8009a56:	4621      	mov	r1, r4
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 f84d 	bl	8009af8 <__smakebuf_r>
 8009a5e:	89a0      	ldrh	r0, [r4, #12]
 8009a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a64:	f010 0301 	ands.w	r3, r0, #1
 8009a68:	d00a      	beq.n	8009a80 <__swsetup_r+0xbc>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60a3      	str	r3, [r4, #8]
 8009a6e:	6963      	ldr	r3, [r4, #20]
 8009a70:	425b      	negs	r3, r3
 8009a72:	61a3      	str	r3, [r4, #24]
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	b943      	cbnz	r3, 8009a8a <__swsetup_r+0xc6>
 8009a78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a7c:	d1ba      	bne.n	80099f4 <__swsetup_r+0x30>
 8009a7e:	bd70      	pop	{r4, r5, r6, pc}
 8009a80:	0781      	lsls	r1, r0, #30
 8009a82:	bf58      	it	pl
 8009a84:	6963      	ldrpl	r3, [r4, #20]
 8009a86:	60a3      	str	r3, [r4, #8]
 8009a88:	e7f4      	b.n	8009a74 <__swsetup_r+0xb0>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	e7f7      	b.n	8009a7e <__swsetup_r+0xba>
 8009a8e:	bf00      	nop
 8009a90:	20000030 	.word	0x20000030
 8009a94:	08009d80 	.word	0x08009d80
 8009a98:	08009da0 	.word	0x08009da0
 8009a9c:	08009d60 	.word	0x08009d60

08009aa0 <abort>:
 8009aa0:	2006      	movs	r0, #6
 8009aa2:	b508      	push	{r3, lr}
 8009aa4:	f000 f890 	bl	8009bc8 <raise>
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	f7f8 fea5 	bl	80027f8 <_exit>

08009aae <__swhatbuf_r>:
 8009aae:	b570      	push	{r4, r5, r6, lr}
 8009ab0:	460e      	mov	r6, r1
 8009ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab6:	4614      	mov	r4, r2
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	461d      	mov	r5, r3
 8009abc:	b096      	sub	sp, #88	; 0x58
 8009abe:	da08      	bge.n	8009ad2 <__swhatbuf_r+0x24>
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ac6:	602a      	str	r2, [r5, #0]
 8009ac8:	061a      	lsls	r2, r3, #24
 8009aca:	d410      	bmi.n	8009aee <__swhatbuf_r+0x40>
 8009acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ad0:	e00e      	b.n	8009af0 <__swhatbuf_r+0x42>
 8009ad2:	466a      	mov	r2, sp
 8009ad4:	f000 f894 	bl	8009c00 <_fstat_r>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	dbf1      	blt.n	8009ac0 <__swhatbuf_r+0x12>
 8009adc:	9a01      	ldr	r2, [sp, #4]
 8009ade:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ae2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ae6:	425a      	negs	r2, r3
 8009ae8:	415a      	adcs	r2, r3
 8009aea:	602a      	str	r2, [r5, #0]
 8009aec:	e7ee      	b.n	8009acc <__swhatbuf_r+0x1e>
 8009aee:	2340      	movs	r3, #64	; 0x40
 8009af0:	2000      	movs	r0, #0
 8009af2:	6023      	str	r3, [r4, #0]
 8009af4:	b016      	add	sp, #88	; 0x58
 8009af6:	bd70      	pop	{r4, r5, r6, pc}

08009af8 <__smakebuf_r>:
 8009af8:	898b      	ldrh	r3, [r1, #12]
 8009afa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009afc:	079d      	lsls	r5, r3, #30
 8009afe:	4606      	mov	r6, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	d507      	bpl.n	8009b14 <__smakebuf_r+0x1c>
 8009b04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	6123      	str	r3, [r4, #16]
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	6163      	str	r3, [r4, #20]
 8009b10:	b002      	add	sp, #8
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	466a      	mov	r2, sp
 8009b16:	ab01      	add	r3, sp, #4
 8009b18:	f7ff ffc9 	bl	8009aae <__swhatbuf_r>
 8009b1c:	9900      	ldr	r1, [sp, #0]
 8009b1e:	4605      	mov	r5, r0
 8009b20:	4630      	mov	r0, r6
 8009b22:	f7fd fc41 	bl	80073a8 <_malloc_r>
 8009b26:	b948      	cbnz	r0, 8009b3c <__smakebuf_r+0x44>
 8009b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b2c:	059a      	lsls	r2, r3, #22
 8009b2e:	d4ef      	bmi.n	8009b10 <__smakebuf_r+0x18>
 8009b30:	f023 0303 	bic.w	r3, r3, #3
 8009b34:	f043 0302 	orr.w	r3, r3, #2
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	e7e3      	b.n	8009b04 <__smakebuf_r+0xc>
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	; (8009b74 <__smakebuf_r+0x7c>)
 8009b3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	6020      	str	r0, [r4, #0]
 8009b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b48:	81a3      	strh	r3, [r4, #12]
 8009b4a:	9b00      	ldr	r3, [sp, #0]
 8009b4c:	6120      	str	r0, [r4, #16]
 8009b4e:	6163      	str	r3, [r4, #20]
 8009b50:	9b01      	ldr	r3, [sp, #4]
 8009b52:	b15b      	cbz	r3, 8009b6c <__smakebuf_r+0x74>
 8009b54:	4630      	mov	r0, r6
 8009b56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b5a:	f000 f863 	bl	8009c24 <_isatty_r>
 8009b5e:	b128      	cbz	r0, 8009b6c <__smakebuf_r+0x74>
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	f023 0303 	bic.w	r3, r3, #3
 8009b66:	f043 0301 	orr.w	r3, r3, #1
 8009b6a:	81a3      	strh	r3, [r4, #12]
 8009b6c:	89a0      	ldrh	r0, [r4, #12]
 8009b6e:	4305      	orrs	r5, r0
 8009b70:	81a5      	strh	r5, [r4, #12]
 8009b72:	e7cd      	b.n	8009b10 <__smakebuf_r+0x18>
 8009b74:	08007149 	.word	0x08007149

08009b78 <_raise_r>:
 8009b78:	291f      	cmp	r1, #31
 8009b7a:	b538      	push	{r3, r4, r5, lr}
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	460d      	mov	r5, r1
 8009b80:	d904      	bls.n	8009b8c <_raise_r+0x14>
 8009b82:	2316      	movs	r3, #22
 8009b84:	6003      	str	r3, [r0, #0]
 8009b86:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b8e:	b112      	cbz	r2, 8009b96 <_raise_r+0x1e>
 8009b90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b94:	b94b      	cbnz	r3, 8009baa <_raise_r+0x32>
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 f830 	bl	8009bfc <_getpid_r>
 8009b9c:	462a      	mov	r2, r5
 8009b9e:	4601      	mov	r1, r0
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba6:	f000 b817 	b.w	8009bd8 <_kill_r>
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d00a      	beq.n	8009bc4 <_raise_r+0x4c>
 8009bae:	1c59      	adds	r1, r3, #1
 8009bb0:	d103      	bne.n	8009bba <_raise_r+0x42>
 8009bb2:	2316      	movs	r3, #22
 8009bb4:	6003      	str	r3, [r0, #0]
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	e7e7      	b.n	8009b8a <_raise_r+0x12>
 8009bba:	2400      	movs	r4, #0
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009bc2:	4798      	blx	r3
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	e7e0      	b.n	8009b8a <_raise_r+0x12>

08009bc8 <raise>:
 8009bc8:	4b02      	ldr	r3, [pc, #8]	; (8009bd4 <raise+0xc>)
 8009bca:	4601      	mov	r1, r0
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	f7ff bfd3 	b.w	8009b78 <_raise_r>
 8009bd2:	bf00      	nop
 8009bd4:	20000030 	.word	0x20000030

08009bd8 <_kill_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	2300      	movs	r3, #0
 8009bdc:	4d06      	ldr	r5, [pc, #24]	; (8009bf8 <_kill_r+0x20>)
 8009bde:	4604      	mov	r4, r0
 8009be0:	4608      	mov	r0, r1
 8009be2:	4611      	mov	r1, r2
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f7f8 fdff 	bl	80027e8 <_kill>
 8009bea:	1c43      	adds	r3, r0, #1
 8009bec:	d102      	bne.n	8009bf4 <_kill_r+0x1c>
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	b103      	cbz	r3, 8009bf4 <_kill_r+0x1c>
 8009bf2:	6023      	str	r3, [r4, #0]
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20001f4c 	.word	0x20001f4c

08009bfc <_getpid_r>:
 8009bfc:	f7f8 bdf2 	b.w	80027e4 <_getpid>

08009c00 <_fstat_r>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	2300      	movs	r3, #0
 8009c04:	4d06      	ldr	r5, [pc, #24]	; (8009c20 <_fstat_r+0x20>)
 8009c06:	4604      	mov	r4, r0
 8009c08:	4608      	mov	r0, r1
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	602b      	str	r3, [r5, #0]
 8009c0e:	f7f8 fe18 	bl	8002842 <_fstat>
 8009c12:	1c43      	adds	r3, r0, #1
 8009c14:	d102      	bne.n	8009c1c <_fstat_r+0x1c>
 8009c16:	682b      	ldr	r3, [r5, #0]
 8009c18:	b103      	cbz	r3, 8009c1c <_fstat_r+0x1c>
 8009c1a:	6023      	str	r3, [r4, #0]
 8009c1c:	bd38      	pop	{r3, r4, r5, pc}
 8009c1e:	bf00      	nop
 8009c20:	20001f4c 	.word	0x20001f4c

08009c24 <_isatty_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	2300      	movs	r3, #0
 8009c28:	4d05      	ldr	r5, [pc, #20]	; (8009c40 <_isatty_r+0x1c>)
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4608      	mov	r0, r1
 8009c2e:	602b      	str	r3, [r5, #0]
 8009c30:	f7f8 fe0c 	bl	800284c <_isatty>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	d102      	bne.n	8009c3e <_isatty_r+0x1a>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	b103      	cbz	r3, 8009c3e <_isatty_r+0x1a>
 8009c3c:	6023      	str	r3, [r4, #0]
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	20001f4c 	.word	0x20001f4c

08009c44 <_init>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	bf00      	nop
 8009c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4a:	bc08      	pop	{r3}
 8009c4c:	469e      	mov	lr, r3
 8009c4e:	4770      	bx	lr

08009c50 <_fini>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	bf00      	nop
 8009c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c56:	bc08      	pop	{r3}
 8009c58:	469e      	mov	lr, r3
 8009c5a:	4770      	bx	lr
