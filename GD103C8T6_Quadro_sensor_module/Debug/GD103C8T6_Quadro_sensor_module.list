
GD103C8T6_Quadro_sensor_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080090e0  080090e0  000190e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009218  08009218  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08009218  08009218  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009218  08009218  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800921c  0800921c  0001921c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cb0  20000088  080092a8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d38  080092a8  00021d38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a218  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea4  00000000  00000000  0003a2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003e170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  0003f790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b024  00000000  00000000  00040bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d55  00000000  00000000  0005bc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097cea  00000000  00000000  00074971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c65b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063f0  00000000  00000000  0010c6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	080090c8 	.word	0x080090c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	080090c8 	.word	0x080090c8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <expRunningAverageGX>:

uint8_t _buffer[21];

static uint8_t _mag_adjust[3];

float expRunningAverageGX(float newVal) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <expRunningAverageGX+0x48>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fd10 	bl	8000ad0 <__aeabi_fsub>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <expRunningAverageGX+0x4c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4610      	mov	r0, r2
 80010bc:	f7ff fe12 	bl	8000ce4 <__aeabi_fmul>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <expRunningAverageGX+0x48>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f7ff fd02 	bl	8000ad4 <__addsf3>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <expRunningAverageGX+0x48>)
 80010d6:	601a      	str	r2, [r3, #0]
  return filVal;
 80010d8:	4b02      	ldr	r3, [pc, #8]	; (80010e4 <expRunningAverageGX+0x48>)
 80010da:	681b      	ldr	r3, [r3, #0]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200000c8 	.word	0x200000c8
 80010e8:	20000000 	.word	0x20000000

080010ec <expRunningAverageGY>:

float expRunningAverageGY(float newVal) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <expRunningAverageGY+0x48>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fce8 	bl	8000ad0 <__aeabi_fsub>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <expRunningAverageGY+0x4c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f7ff fdea 	bl	8000ce4 <__aeabi_fmul>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <expRunningAverageGY+0x48>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	4610      	mov	r0, r2
 800111c:	f7ff fcda 	bl	8000ad4 <__addsf3>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <expRunningAverageGY+0x48>)
 8001126:	601a      	str	r2, [r3, #0]
  return filVal;
 8001128:	4b02      	ldr	r3, [pc, #8]	; (8001134 <expRunningAverageGY+0x48>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000cc 	.word	0x200000cc
 8001138:	20000000 	.word	0x20000000

0800113c <expRunningAverageGZ>:

float expRunningAverageGZ(float newVal) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <expRunningAverageGZ+0x48>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fcc0 	bl	8000ad0 <__aeabi_fsub>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <expRunningAverageGZ+0x4c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4610      	mov	r0, r2
 800115c:	f7ff fdc2 	bl	8000ce4 <__aeabi_fmul>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <expRunningAverageGZ+0x48>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4610      	mov	r0, r2
 800116c:	f7ff fcb2 	bl	8000ad4 <__addsf3>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <expRunningAverageGZ+0x48>)
 8001176:	601a      	str	r2, [r3, #0]
  return filVal;
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <expRunningAverageGZ+0x48>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000d0 	.word	0x200000d0
 8001188:	20000000 	.word	0x20000000

0800118c <expRunningAverageAX>:

float expRunningAverageAX(float newVal) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <expRunningAverageAX+0x48>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4619      	mov	r1, r3
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fc98 	bl	8000ad0 <__aeabi_fsub>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <expRunningAverageAX+0x4c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f7ff fd9a 	bl	8000ce4 <__aeabi_fmul>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <expRunningAverageAX+0x48>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	4610      	mov	r0, r2
 80011bc:	f7ff fc8a 	bl	8000ad4 <__addsf3>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <expRunningAverageAX+0x48>)
 80011c6:	601a      	str	r2, [r3, #0]
  return filVal;
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <expRunningAverageAX+0x48>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200000d4 	.word	0x200000d4
 80011d8:	20000000 	.word	0x20000000

080011dc <expRunningAverageAY>:

float expRunningAverageAY(float newVal) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <expRunningAverageAY+0x48>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fc70 	bl	8000ad0 <__aeabi_fsub>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <expRunningAverageAY+0x4c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4610      	mov	r0, r2
 80011fc:	f7ff fd72 	bl	8000ce4 <__aeabi_fmul>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <expRunningAverageAY+0x48>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f7ff fc62 	bl	8000ad4 <__addsf3>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <expRunningAverageAY+0x48>)
 8001216:	601a      	str	r2, [r3, #0]
  return filVal;
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <expRunningAverageAY+0x48>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200000d8 	.word	0x200000d8
 8001228:	20000000 	.word	0x20000000

0800122c <expRunningAverageAZ>:

float expRunningAverageAZ(float newVal) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <expRunningAverageAZ+0x48>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fc48 	bl	8000ad0 <__aeabi_fsub>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <expRunningAverageAZ+0x4c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	4610      	mov	r0, r2
 800124c:	f7ff fd4a 	bl	8000ce4 <__aeabi_fmul>
 8001250:	4603      	mov	r3, r0
 8001252:	461a      	mov	r2, r3
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <expRunningAverageAZ+0x48>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f7ff fc3a 	bl	8000ad4 <__addsf3>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <expRunningAverageAZ+0x48>)
 8001266:	601a      	str	r2, [r3, #0]
  return filVal;
 8001268:	4b02      	ldr	r3, [pc, #8]	; (8001274 <expRunningAverageAZ+0x48>)
 800126a:	681b      	ldr	r3, [r3, #0]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200000dc 	.word	0x200000dc
 8001278:	20000000 	.word	0x20000000

0800127c <MPU9250_OnActivate>:
	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
return(Xe);
}

__weak void MPU9250_OnActivate()
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr

08001288 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 800128c:	f7ff fff6 	bl	800127c <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2110      	movs	r1, #16
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <MPU9250_Activate+0x18>)
 8001296:	f002 ff4f 	bl	8004138 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40010800 	.word	0x40010800

080012a4 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2110      	movs	r1, #16
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <MPU9250_Deactivate+0x14>)
 80012ae:	f002 ff43 	bl	8004138 <HAL_GPIO_WritePin>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40010800 	.word	0x40010800

080012bc <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80012ca:	f107 020f 	add.w	r2, r7, #15
 80012ce:	1df9      	adds	r1, r7, #7
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	4806      	ldr	r0, [pc, #24]	; (80012f4 <SPIx_WriteRead+0x38>)
 80012da:	f003 fe66 	bl	8004faa <HAL_SPI_TransmitReceive>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SPIx_WriteRead+0x2c>
	{
		return -1;
 80012e4:	23ff      	movs	r3, #255	; 0xff
 80012e6:	e000      	b.n	80012ea <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2000022c 	.word	0x2000022c

080012f8 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *p_buffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	70fb      	strb	r3, [r7, #3]
 8001304:	4613      	mov	r3, r2
 8001306:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001308:	f7ff ffbe 	bl	8001288 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffd4 	bl	80012bc <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8001314:	e00a      	b.n	800132c <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*p_buffer);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffce 	bl	80012bc <SPIx_WriteRead>
		NumByteToWrite--;
 8001320:	883b      	ldrh	r3, [r7, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	803b      	strh	r3, [r7, #0]
		p_buffer++;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3301      	adds	r3, #1
 800132a:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 800132c:	883b      	ldrh	r3, [r7, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f1      	bne.n	8001316 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 8001332:	f7ff ffb7 	bl	80012a4 <MPU9250_Deactivate>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *p_buffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	70fb      	strb	r3, [r7, #3]
 800134c:	4613      	mov	r3, r2
 800134e:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001350:	f7ff ff9a 	bl	8001288 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800135a:	b2db      	uxtb	r3, r3
 800135c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 800135e:	f107 010f 	add.w	r1, r7, #15
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	2201      	movs	r2, #1
 8001368:	480b      	ldr	r0, [pc, #44]	; (8001398 <MPU_SPI_Read+0x58>)
 800136a:	f003 fbd1 	bl	8004b10 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&MPU9250_SPI, p_buffer, NumByteToRead, HAL_MAX_DELAY) == HAL_OK) {
 800136e:	883a      	ldrh	r2, [r7, #0]
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4808      	ldr	r0, [pc, #32]	; (8001398 <MPU_SPI_Read+0x58>)
 8001378:	f003 fd06 	bl	8004d88 <HAL_SPI_Receive>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d103      	bne.n	800138a <MPU_SPI_Read+0x4a>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001382:	2110      	movs	r1, #16
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MPU_SPI_Read+0x5c>)
 8001386:	f002 feef 	bl	8004168 <HAL_GPIO_TogglePin>
	}
	else {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	}
	MPU9250_Deactivate();
 800138a:	f7ff ff8b 	bl	80012a4 <MPU9250_Deactivate>
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000022c 	.word	0x2000022c
 800139c:	40010c00 	.word	0x40010c00

080013a0 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	460a      	mov	r2, r1
 80013aa:	71fb      	strb	r3, [r7, #7]
 80013ac:	4613      	mov	r3, r2
 80013ae:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 80013b0:	79f9      	ldrb	r1, [r7, #7]
 80013b2:	1dbb      	adds	r3, r7, #6
 80013b4:	2201      	movs	r2, #1
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff9e 	bl	80012f8 <MPU_SPI_Write>
	HAL_Delay(10);
 80013bc:	200a      	movs	r0, #10
 80013be:	f001 feaf 	bl	8003120 <HAL_Delay>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	603a      	str	r2, [r7, #0]
 80013d4:	71fb      	strb	r3, [r7, #7]
 80013d6:	460b      	mov	r3, r1
 80013d8:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	4619      	mov	r1, r3
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f7ff ffac 	bl	8001340 <MPU_SPI_Read>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 8001400:	210c      	movs	r1, #12
 8001402:	2025      	movs	r0, #37	; 0x25
 8001404:	f7ff ffcc 	bl	80013a0 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4619      	mov	r1, r3
 800140c:	2026      	movs	r0, #38	; 0x26
 800140e:	f7ff ffc7 	bl	80013a0 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	4619      	mov	r1, r3
 8001416:	2063      	movs	r0, #99	; 0x63
 8001418:	f7ff ffc2 	bl	80013a0 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 800141c:	2181      	movs	r1, #129	; 0x81
 800141e:	2027      	movs	r0, #39	; 0x27
 8001420:	f7ff ffbe 	bl	80013a0 <writeRegister>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	603a      	str	r2, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	460b      	mov	r3, r1
 800143a:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 800143c:	218c      	movs	r1, #140	; 0x8c
 800143e:	2025      	movs	r0, #37	; 0x25
 8001440:	f7ff ffae 	bl	80013a0 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4619      	mov	r1, r3
 8001448:	2026      	movs	r0, #38	; 0x26
 800144a:	f7ff ffa9 	bl	80013a0 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4619      	mov	r1, r3
 8001458:	2027      	movs	r0, #39	; 0x27
 800145a:	f7ff ffa1 	bl	80013a0 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f001 fe5e 	bl	8003120 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8001464:	79bb      	ldrb	r3, [r7, #6]
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	2049      	movs	r0, #73	; 0x49
 800146c:	f7ff ffad 	bl	80013ca <readRegisters>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I, 1, _buffer);
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <whoAmI+0x18>)
 800147e:	2101      	movs	r1, #1
 8001480:	2075      	movs	r0, #117	; 0x75
 8001482:	f7ff ffa2 	bl	80013ca <readRegisters>

	// return the register value
	return _buffer[0];
 8001486:	4b02      	ldr	r3, [pc, #8]	; (8001490 <whoAmI+0x18>)
 8001488:	781b      	ldrb	r3, [r3, #0]
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000a4 	.word	0x200000a4

08001494 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I, 1, _buffer);
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <whoAmIAK8963+0x18>)
 800149a:	2101      	movs	r1, #1
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff ffc5 	bl	800142c <readAK8963Registers>
	// return the register value
	return _buffer[0];
 80014a2:	4b02      	ldr	r3, [pc, #8]	; (80014ac <whoAmIAK8963+0x18>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000a4 	.word	0x200000a4

080014b0 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80014b6:	2101      	movs	r1, #1
 80014b8:	206b      	movs	r0, #107	; 0x6b
 80014ba:	f7ff ff71 	bl	80013a0 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80014be:	2120      	movs	r1, #32
 80014c0:	206a      	movs	r0, #106	; 0x6a
 80014c2:	f7ff ff6d 	bl	80013a0 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80014c6:	210d      	movs	r1, #13
 80014c8:	2024      	movs	r0, #36	; 0x24
 80014ca:	f7ff ff69 	bl	80013a0 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 80014ce:	2100      	movs	r1, #0
 80014d0:	200a      	movs	r0, #10
 80014d2:	f7ff ff8d 	bl	80013f0 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1, PWR_RESET);
 80014d6:	2180      	movs	r1, #128	; 0x80
 80014d8:	206b      	movs	r0, #107	; 0x6b
 80014da:	f7ff ff61 	bl	80013a0 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80014de:	200a      	movs	r0, #10
 80014e0:	f001 fe1e 	bl	8003120 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2, AK8963_RESET);
 80014e4:	2101      	movs	r1, #1
 80014e6:	200b      	movs	r0, #11
 80014e8:	f7ff ff82 	bl	80013f0 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80014ec:	2101      	movs	r1, #1
 80014ee:	206b      	movs	r0, #107	; 0x6b
 80014f0:	f7ff ff56 	bl	80013a0 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80014f4:	f7ff ffc0 	bl	8001478 <whoAmI>
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
	{
		//return 1;
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 80014fc:	2100      	movs	r1, #0
 80014fe:	206c      	movs	r0, #108	; 0x6c
 8001500:	f7ff ff4e 	bl	80013a0 <writeRegister>

	// setting accel range to 8G as default
	writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_16G);
 8001504:	2118      	movs	r1, #24
 8001506:	201c      	movs	r0, #28
 8001508:	f7ff ff4a 	bl	80013a0 <writeRegister>

	// setting the gyro range to 500DPS as default
	writeRegister(GYRO_CONFIG, GYRO_FS_SEL_2000DPS);
 800150c:	2118      	movs	r1, #24
 800150e:	201b      	movs	r0, #27
 8001510:	f7ff ff46 	bl	80013a0 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2, DLPF_10);
 8001514:	2105      	movs	r1, #5
 8001516:	201d      	movs	r0, #29
 8001518:	f7ff ff42 	bl	80013a0 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG, DLPF_10);
 800151c:	2105      	movs	r1, #5
 800151e:	201a      	movs	r0, #26
 8001520:	f7ff ff3e 	bl	80013a0 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV, 0x00);
 8001524:	2100      	movs	r1, #0
 8001526:	2019      	movs	r0, #25
 8001528:	f7ff ff3a 	bl	80013a0 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 800152c:	2120      	movs	r1, #32
 800152e:	206a      	movs	r0, #106	; 0x6a
 8001530:	f7ff ff36 	bl	80013a0 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 8001534:	210d      	movs	r1, #13
 8001536:	2024      	movs	r0, #36	; 0x24
 8001538:	f7ff ff32 	bl	80013a0 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 800153c:	f7ff ffaa 	bl	8001494 <whoAmIAK8963>
 8001540:	4603      	mov	r3, r0
 8001542:	2b48      	cmp	r3, #72	; 0x48
 8001544:	d001      	beq.n	800154a <MPU9250_Init+0x9a>
	{
		return 1;
 8001546:	2301      	movs	r3, #1
 8001548:	e02a      	b.n	80015a0 <MPU9250_Init+0xf0>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 800154a:	2100      	movs	r1, #0
 800154c:	200a      	movs	r0, #10
 800154e:	f7ff ff4f 	bl	80013f0 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f001 fde4 	bl	8003120 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1, AK8963_FUSE_ROM);
 8001558:	210f      	movs	r1, #15
 800155a:	200a      	movs	r0, #10
 800155c:	f7ff ff48 	bl	80013f0 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001560:	2064      	movs	r0, #100	; 0x64
 8001562:	f001 fddd 	bl	8003120 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <MPU9250_Init+0xf8>)
 8001568:	2103      	movs	r1, #3
 800156a:	2010      	movs	r0, #16
 800156c:	f7ff ff5e 	bl	800142c <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001570:	2100      	movs	r1, #0
 8001572:	200a      	movs	r0, #10
 8001574:	f7ff ff3c 	bl	80013f0 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001578:	2064      	movs	r0, #100	; 0x64
 800157a:	f001 fdd1 	bl	8003120 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1, AK8963_CNT_MEAS2);
 800157e:	2116      	movs	r1, #22
 8001580:	200a      	movs	r0, #10
 8001582:	f7ff ff35 	bl	80013f0 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001586:	2064      	movs	r0, #100	; 0x64
 8001588:	f001 fdca 	bl	8003120 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800158c:	2101      	movs	r1, #1
 800158e:	206b      	movs	r0, #107	; 0x6b
 8001590:	f7ff ff06 	bl	80013a0 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL, 7 , _buffer);
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <MPU9250_Init+0xfc>)
 8001596:	2107      	movs	r1, #7
 8001598:	2003      	movs	r0, #3
 800159a:	f7ff ff47 	bl	800142c <readAK8963Registers>
//	writeRegister(GYRO_CONFIG, 0x08);
//	//accel config 8g
//	writeRegister(ACCEL_CONFIG, 0x10);

	// successful init, return 0
	return 0;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200000bc 	.word	0x200000bc
 80015ac:	200000a4 	.word	0x200000a4

080015b0 <MPU9250_calibrate>:
}

uint16_t ii, packet_count, fifo_count;

void MPU9250_calibrate()
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    //uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    writeRegister(PWR_MGMNT_1, PWR_RESET); // Write a one to bit 7 reset bit; toggle reset device
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	206b      	movs	r0, #107	; 0x6b
 80015ba:	f7ff fef1 	bl	80013a0 <writeRegister>
    HAL_Delay(100);
 80015be:	2064      	movs	r0, #100	; 0x64
 80015c0:	f001 fdae 	bl	8003120 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80015c4:	2101      	movs	r1, #1
 80015c6:	206b      	movs	r0, #107	; 0x6b
 80015c8:	f7ff feea 	bl	80013a0 <writeRegister>
    writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 80015cc:	2100      	movs	r1, #0
 80015ce:	206c      	movs	r0, #108	; 0x6c
 80015d0:	f7ff fee6 	bl	80013a0 <writeRegister>
    HAL_Delay(200);
 80015d4:	20c8      	movs	r0, #200	; 0xc8
 80015d6:	f001 fda3 	bl	8003120 <HAL_Delay>

    // Configure device for bias calculation
    writeRegister(INT_ENABLE, INT_DISABLE);   // Disable all interrupts
 80015da:	2100      	movs	r1, #0
 80015dc:	2038      	movs	r0, #56	; 0x38
 80015de:	f7ff fedf 	bl	80013a0 <writeRegister>
    writeRegister(FIFO_EN, 0x00);      // Disable FIFO
 80015e2:	2100      	movs	r1, #0
 80015e4:	2023      	movs	r0, #35	; 0x23
 80015e6:	f7ff fedb 	bl	80013a0 <writeRegister>
    writeRegister(PWR_MGMNT_1, SEN_ENABLE);   // Turn on internal clock source
 80015ea:	2100      	movs	r1, #0
 80015ec:	206b      	movs	r0, #107	; 0x6b
 80015ee:	f7ff fed7 	bl	80013a0 <writeRegister>
    writeRegister(I2C_MST_CTRL, 0x00); // Disable I2C master
 80015f2:	2100      	movs	r1, #0
 80015f4:	2024      	movs	r0, #36	; 0x24
 80015f6:	f7ff fed3 	bl	80013a0 <writeRegister>
    writeRegister(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80015fa:	2100      	movs	r1, #0
 80015fc:	206a      	movs	r0, #106	; 0x6a
 80015fe:	f7ff fecf 	bl	80013a0 <writeRegister>
    writeRegister(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001602:	210c      	movs	r1, #12
 8001604:	206a      	movs	r0, #106	; 0x6a
 8001606:	f7ff fecb 	bl	80013a0 <writeRegister>
    HAL_Delay(15);
 800160a:	200f      	movs	r0, #15
 800160c:	f001 fd88 	bl	8003120 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    writeRegister(CONFIG, DLPF_184);      // Set low-pass filter to 184 Hz
 8001610:	2101      	movs	r1, #1
 8001612:	201a      	movs	r0, #26
 8001614:	f7ff fec4 	bl	80013a0 <writeRegister>
    writeRegister(SMPDIV, 0x00);  // Set sample rate to 1 kHz
 8001618:	2100      	movs	r1, #0
 800161a:	2019      	movs	r0, #25
 800161c:	f7ff fec0 	bl	80013a0 <writeRegister>
    writeRegister(GYRO_CONFIG, GYRO_FS_SEL_250DPS);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001620:	2100      	movs	r1, #0
 8001622:	201b      	movs	r0, #27
 8001624:	f7ff febc 	bl	80013a0 <writeRegister>
    writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_2G); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001628:	2100      	movs	r1, #0
 800162a:	201c      	movs	r0, #28
 800162c:	f7ff feb8 	bl	80013a0 <writeRegister>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001634:	85fb      	strh	r3, [r7, #46]	; 0x2e

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    writeRegister(USER_CTRL, 0x40);   // Enable FIFO
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	206a      	movs	r0, #106	; 0x6a
 800163a:	f7ff feb1 	bl	80013a0 <writeRegister>
    writeRegister(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9250)
 800163e:	2178      	movs	r1, #120	; 0x78
 8001640:	2023      	movs	r0, #35	; 0x23
 8001642:	f7ff fead 	bl	80013a0 <writeRegister>
    HAL_Delay(28); // accumulate 40 samples in 27 milliseconds = 480 bytes
 8001646:	201c      	movs	r0, #28
 8001648:	f001 fd6a 	bl	8003120 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    writeRegister(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 800164c:	2100      	movs	r1, #0
 800164e:	2023      	movs	r0, #35	; 0x23
 8001650:	f7ff fea6 	bl	80013a0 <writeRegister>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    uint8_t fifoCount_buffer[2];
    readRegisters(FIFO_COUNT, 2, fifoCount_buffer);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	461a      	mov	r2, r3
 800165a:	2102      	movs	r1, #2
 800165c:	2072      	movs	r0, #114	; 0x72
 800165e:	f7ff feb4 	bl	80013ca <readRegisters>

    fifo_count = (fifoCount_buffer[0] << 8) | fifoCount_buffer[1];
 8001662:	7f3b      	ldrb	r3, [r7, #28]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	b21a      	sxth	r2, r3
 8001668:	7f7b      	ldrb	r3, [r7, #29]
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b89      	ldr	r3, [pc, #548]	; (8001898 <MPU9250_calibrate+0x2e8>)
 8001674:	801a      	strh	r2, [r3, #0]
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8001676:	4b88      	ldr	r3, [pc, #544]	; (8001898 <MPU9250_calibrate+0x2e8>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	4a88      	ldr	r2, [pc, #544]	; (800189c <MPU9250_calibrate+0x2ec>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	08db      	lsrs	r3, r3, #3
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <MPU9250_calibrate+0x2f0>)
 8001686:	801a      	strh	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++)
 8001688:	4b86      	ldr	r3, [pc, #536]	; (80018a4 <MPU9250_calibrate+0x2f4>)
 800168a:	2200      	movs	r2, #0
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	e078      	b.n	8001782 <MPU9250_calibrate+0x1d2>
    {
        int32_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001690:	2300      	movs	r3, #0
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
        readRegisters(FIFO_READ, 12, data);
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	461a      	mov	r2, r3
 80016ae:	210c      	movs	r1, #12
 80016b0:	2074      	movs	r0, #116	; 0x74
 80016b2:	f7ff fe8a 	bl	80013ca <readRegisters>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80016b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	b21a      	sxth	r2, r3
 80016be:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	613b      	str	r3, [r7, #16]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80016ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	b21a      	sxth	r2, r3
 80016d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b21b      	sxth	r3, r3
 80016dc:	617b      	str	r3, [r7, #20]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80016de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	61bb      	str	r3, [r7, #24]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80016f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016fe:	b21b      	sxth	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b21b      	sxth	r3, r3
 8001704:	607b      	str	r3, [r7, #4]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 8001706:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	b21a      	sxth	r2, r3
 800170e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001712:	b21b      	sxth	r3, r3
 8001714:	4313      	orrs	r3, r2
 8001716:	b21b      	sxth	r3, r3
 8001718:	60bb      	str	r3, [r7, #8]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 800171a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	b21a      	sxth	r2, r3
 8001722:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001726:	b21b      	sxth	r3, r3
 8001728:	4313      	orrs	r3, r2
 800172a:	b21b      	sxth	r3, r3
 800172c:	60fb      	str	r3, [r7, #12]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 800172e:	4b5e      	ldr	r3, [pc, #376]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4413      	add	r3, r2
 8001736:	4a5c      	ldr	r2, [pc, #368]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 8001738:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 800173a:	4b5b      	ldr	r3, [pc, #364]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	4413      	add	r3, r2
 8001742:	4a59      	ldr	r2, [pc, #356]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 8001744:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 8001746:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4413      	add	r3, r2
 800174e:	4a56      	ldr	r2, [pc, #344]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 8001750:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 8001752:	4b56      	ldr	r3, [pc, #344]	; (80018ac <MPU9250_calibrate+0x2fc>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	4a54      	ldr	r2, [pc, #336]	; (80018ac <MPU9250_calibrate+0x2fc>)
 800175c:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 800175e:	4b53      	ldr	r3, [pc, #332]	; (80018ac <MPU9250_calibrate+0x2fc>)
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	4413      	add	r3, r2
 8001766:	4a51      	ldr	r2, [pc, #324]	; (80018ac <MPU9250_calibrate+0x2fc>)
 8001768:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 800176a:	4b50      	ldr	r3, [pc, #320]	; (80018ac <MPU9250_calibrate+0x2fc>)
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	4a4e      	ldr	r2, [pc, #312]	; (80018ac <MPU9250_calibrate+0x2fc>)
 8001774:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 8001776:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <MPU9250_calibrate+0x2f4>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	b29a      	uxth	r2, r3
 800177e:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <MPU9250_calibrate+0x2f4>)
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	4b48      	ldr	r3, [pc, #288]	; (80018a4 <MPU9250_calibrate+0x2f4>)
 8001784:	881a      	ldrh	r2, [r3, #0]
 8001786:	4b46      	ldr	r3, [pc, #280]	; (80018a0 <MPU9250_calibrate+0x2f0>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d380      	bcc.n	8001690 <MPU9250_calibrate+0xe0>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800178e:	4b46      	ldr	r3, [pc, #280]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a43      	ldr	r2, [pc, #268]	; (80018a0 <MPU9250_calibrate+0x2f0>)
 8001794:	8812      	ldrh	r2, [r2, #0]
 8001796:	fb93 f3f2 	sdiv	r3, r3, r2
 800179a:	4a43      	ldr	r2, [pc, #268]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 800179c:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 800179e:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a3f      	ldr	r2, [pc, #252]	; (80018a0 <MPU9250_calibrate+0x2f0>)
 80017a4:	8812      	ldrh	r2, [r2, #0]
 80017a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80017aa:	4a3f      	ldr	r2, [pc, #252]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 80017ac:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 80017ae:	4b3e      	ldr	r3, [pc, #248]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4a3b      	ldr	r2, [pc, #236]	; (80018a0 <MPU9250_calibrate+0x2f0>)
 80017b4:	8812      	ldrh	r2, [r2, #0]
 80017b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80017ba:	4a3b      	ldr	r2, [pc, #236]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 80017bc:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <MPU9250_calibrate+0x2fc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a37      	ldr	r2, [pc, #220]	; (80018a0 <MPU9250_calibrate+0x2f0>)
 80017c4:	8812      	ldrh	r2, [r2, #0]
 80017c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80017ca:	4a38      	ldr	r2, [pc, #224]	; (80018ac <MPU9250_calibrate+0x2fc>)
 80017cc:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 80017ce:	4b37      	ldr	r3, [pc, #220]	; (80018ac <MPU9250_calibrate+0x2fc>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a33      	ldr	r2, [pc, #204]	; (80018a0 <MPU9250_calibrate+0x2f0>)
 80017d4:	8812      	ldrh	r2, [r2, #0]
 80017d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80017da:	4a34      	ldr	r2, [pc, #208]	; (80018ac <MPU9250_calibrate+0x2fc>)
 80017dc:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 80017de:	4b33      	ldr	r3, [pc, #204]	; (80018ac <MPU9250_calibrate+0x2fc>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	4a2f      	ldr	r2, [pc, #188]	; (80018a0 <MPU9250_calibrate+0x2f0>)
 80017e4:	8812      	ldrh	r2, [r2, #0]
 80017e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80017ea:	4a30      	ldr	r2, [pc, #192]	; (80018ac <MPU9250_calibrate+0x2fc>)
 80017ec:	6093      	str	r3, [r2, #8]
    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	dd06      	ble.n	8001804 <MPU9250_calibrate+0x254>
 80017f6:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4a2a      	ldr	r2, [pc, #168]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 8001800:	6093      	str	r3, [r2, #8]
 8001802:	e005      	b.n	8001810 <MPU9250_calibrate+0x260>
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800180a:	4413      	add	r3, r2
 800180c:	4a26      	ldr	r2, [pc, #152]	; (80018a8 <MPU9250_calibrate+0x2f8>)
 800180e:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001810:	4b26      	ldr	r3, [pc, #152]	; (80018ac <MPU9250_calibrate+0x2fc>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	425b      	negs	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	da00      	bge.n	800181c <MPU9250_calibrate+0x26c>
 800181a:	3303      	adds	r3, #3
 800181c:	109b      	asrs	r3, r3, #2
 800181e:	121b      	asrs	r3, r3, #8
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f887 3020 	strb.w	r3, [r7, #32]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <MPU9250_calibrate+0x2fc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	425b      	negs	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	da00      	bge.n	8001832 <MPU9250_calibrate+0x282>
 8001830:	3303      	adds	r3, #3
 8001832:	109b      	asrs	r3, r3, #2
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MPU9250_calibrate+0x2fc>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	425b      	negs	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	da00      	bge.n	8001846 <MPU9250_calibrate+0x296>
 8001844:	3303      	adds	r3, #3
 8001846:	109b      	asrs	r3, r3, #2
 8001848:	121b      	asrs	r3, r3, #8
 800184a:	b2db      	uxtb	r3, r3
 800184c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MPU9250_calibrate+0x2fc>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	425b      	negs	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	da00      	bge.n	800185c <MPU9250_calibrate+0x2ac>
 800185a:	3303      	adds	r3, #3
 800185c:	109b      	asrs	r3, r3, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MPU9250_calibrate+0x2fc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	425b      	negs	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	da00      	bge.n	8001870 <MPU9250_calibrate+0x2c0>
 800186e:	3303      	adds	r3, #3
 8001870:	109b      	asrs	r3, r3, #2
 8001872:	121b      	asrs	r3, r3, #8
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MPU9250_calibrate+0x2fc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	425b      	negs	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	da00      	bge.n	8001886 <MPU9250_calibrate+0x2d6>
 8001884:	3303      	adds	r3, #3
 8001886:	109b      	asrs	r3, r3, #2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
//	acc_ofset_data_corrected[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
//	acc_ofset_data_corrected[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
//	acc_ofset_data_corrected[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
//	acc_ofset_data_corrected[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);

}
 800188e:	bf00      	nop
 8001890:	3730      	adds	r7, #48	; 0x30
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	200000c4 	.word	0x200000c4
 800189c:	aaaaaaab 	.word	0xaaaaaaab
 80018a0:	200000c2 	.word	0x200000c2
 80018a4:	200000c0 	.word	0x200000c0
 80018a8:	20000170 	.word	0x20000170
 80018ac:	20000164 	.word	0x20000164

080018b0 <MPU9250_GetData>:

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 80018bc:	4a9c      	ldr	r2, [pc, #624]	; (8001b30 <MPU9250_GetData+0x280>)
 80018be:	2115      	movs	r1, #21
 80018c0:	203b      	movs	r0, #59	; 0x3b
 80018c2:	f7ff fd82 	bl	80013ca <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 80018c6:	4b9a      	ldr	r3, [pc, #616]	; (8001b30 <MPU9250_GetData+0x280>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	4b98      	ldr	r3, [pc, #608]	; (8001b30 <MPU9250_GetData+0x280>)
 80018d0:	785b      	ldrb	r3, [r3, #1]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 80018dc:	4b94      	ldr	r3, [pc, #592]	; (8001b30 <MPU9250_GetData+0x280>)
 80018de:	789b      	ldrb	r3, [r3, #2]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b219      	sxth	r1, r3
 80018e4:	4b92      	ldr	r3, [pc, #584]	; (8001b30 <MPU9250_GetData+0x280>)
 80018e6:	78db      	ldrb	r3, [r3, #3]
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3302      	adds	r3, #2
 80018ee:	430a      	orrs	r2, r1
 80018f0:	b212      	sxth	r2, r2
 80018f2:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 80018f4:	4b8e      	ldr	r3, [pc, #568]	; (8001b30 <MPU9250_GetData+0x280>)
 80018f6:	791b      	ldrb	r3, [r3, #4]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	b219      	sxth	r1, r3
 80018fc:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <MPU9250_GetData+0x280>)
 80018fe:	795b      	ldrb	r3, [r3, #5]
 8001900:	b21a      	sxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3304      	adds	r3, #4
 8001906:	430a      	orrs	r2, r1
 8001908:	b212      	sxth	r2, r2
 800190a:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) |_buffer[9];
 800190c:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <MPU9250_GetData+0x280>)
 800190e:	7a1b      	ldrb	r3, [r3, #8]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21a      	sxth	r2, r3
 8001914:	4b86      	ldr	r3, [pc, #536]	; (8001b30 <MPU9250_GetData+0x280>)
 8001916:	7a5b      	ldrb	r3, [r3, #9]
 8001918:	b21b      	sxth	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b21a      	sxth	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001922:	4b83      	ldr	r3, [pc, #524]	; (8001b30 <MPU9250_GetData+0x280>)
 8001924:	7a9b      	ldrb	r3, [r3, #10]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	b219      	sxth	r1, r3
 800192a:	4b81      	ldr	r3, [pc, #516]	; (8001b30 <MPU9250_GetData+0x280>)
 800192c:	7adb      	ldrb	r3, [r3, #11]
 800192e:	b21a      	sxth	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3302      	adds	r3, #2
 8001934:	430a      	orrs	r2, r1
 8001936:	b212      	sxth	r2, r2
 8001938:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 800193a:	4b7d      	ldr	r3, [pc, #500]	; (8001b30 <MPU9250_GetData+0x280>)
 800193c:	7b1b      	ldrb	r3, [r3, #12]
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b219      	sxth	r1, r3
 8001942:	4b7b      	ldr	r3, [pc, #492]	; (8001b30 <MPU9250_GetData+0x280>)
 8001944:	7b5b      	ldrb	r3, [r3, #13]
 8001946:	b21a      	sxth	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3304      	adds	r3, #4
 800194c:	430a      	orrs	r2, r1
 800194e:	b212      	sxth	r2, r2
 8001950:	801a      	strh	r2, [r3, #0]

	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 2048.0f * 9.8f;
 8001952:	4b77      	ldr	r3, [pc, #476]	; (8001b30 <MPU9250_GetData+0x280>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	b21b      	sxth	r3, r3
 800195a:	461a      	mov	r2, r3
 800195c:	4b74      	ldr	r3, [pc, #464]	; (8001b30 <MPU9250_GetData+0x280>)
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	4413      	add	r3, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f96a 	bl	8000c3c <__aeabi_i2f>
 8001968:	4603      	mov	r3, r0
 800196a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fa6c 	bl	8000e4c <__aeabi_fdiv>
 8001974:	4603      	mov	r3, r0
 8001976:	496f      	ldr	r1, [pc, #444]	; (8001b34 <MPU9250_GetData+0x284>)
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f9b3 	bl	8000ce4 <__aeabi_fmul>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <MPU9250_GetData+0x288>)
 8001984:	601a      	str	r2, [r3, #0]
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 2048.0f * 9.8f;
 8001986:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <MPU9250_GetData+0x280>)
 8001988:	789b      	ldrb	r3, [r3, #2]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b21b      	sxth	r3, r3
 800198e:	461a      	mov	r2, r3
 8001990:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <MPU9250_GetData+0x280>)
 8001992:	78db      	ldrb	r3, [r3, #3]
 8001994:	4413      	add	r3, r2
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f950 	bl	8000c3c <__aeabi_i2f>
 800199c:	4603      	mov	r3, r0
 800199e:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fa52 	bl	8000e4c <__aeabi_fdiv>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4962      	ldr	r1, [pc, #392]	; (8001b34 <MPU9250_GetData+0x284>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f999 	bl	8000ce4 <__aeabi_fmul>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <MPU9250_GetData+0x28c>)
 80019b8:	601a      	str	r2, [r3, #0]
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 2048.0f * 9.8f;
 80019ba:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <MPU9250_GetData+0x280>)
 80019bc:	791b      	ldrb	r3, [r3, #4]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	461a      	mov	r2, r3
 80019c4:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <MPU9250_GetData+0x280>)
 80019c6:	795b      	ldrb	r3, [r3, #5]
 80019c8:	4413      	add	r3, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f936 	bl	8000c3c <__aeabi_i2f>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fa38 	bl	8000e4c <__aeabi_fdiv>
 80019dc:	4603      	mov	r3, r0
 80019de:	4955      	ldr	r1, [pc, #340]	; (8001b34 <MPU9250_GetData+0x284>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f97f 	bl	8000ce4 <__aeabi_fmul>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b55      	ldr	r3, [pc, #340]	; (8001b40 <MPU9250_GetData+0x290>)
 80019ec:	601a      	str	r2, [r3, #0]
//	accelX=((((int16_t)((uint16_t)_buffer[6] << 8) + _buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])))/4096.0f*9.8f;
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 16.4f * 3.14f / 180.0f;
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <MPU9250_GetData+0x280>)
 80019f0:	7a1b      	ldrb	r3, [r3, #8]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	b21b      	sxth	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <MPU9250_GetData+0x280>)
 80019fa:	7a5b      	ldrb	r3, [r3, #9]
 80019fc:	4413      	add	r3, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff f91c 	bl	8000c3c <__aeabi_i2f>
 8001a04:	4603      	mov	r3, r0
 8001a06:	494f      	ldr	r1, [pc, #316]	; (8001b44 <MPU9250_GetData+0x294>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fa1f 	bl	8000e4c <__aeabi_fdiv>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	494d      	ldr	r1, [pc, #308]	; (8001b48 <MPU9250_GetData+0x298>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff f966 	bl	8000ce4 <__aeabi_fmul>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	494c      	ldr	r1, [pc, #304]	; (8001b4c <MPU9250_GetData+0x29c>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fa15 	bl	8000e4c <__aeabi_fdiv>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <MPU9250_GetData+0x2a0>)
 8001a28:	601a      	str	r2, [r3, #0]
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 16.4f * 3.14f / 180.0f;
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <MPU9250_GetData+0x280>)
 8001a2c:	7a9b      	ldrb	r3, [r3, #10]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <MPU9250_GetData+0x280>)
 8001a36:	7adb      	ldrb	r3, [r3, #11]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f8fe 	bl	8000c3c <__aeabi_i2f>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4940      	ldr	r1, [pc, #256]	; (8001b44 <MPU9250_GetData+0x294>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fa01 	bl	8000e4c <__aeabi_fdiv>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	493e      	ldr	r1, [pc, #248]	; (8001b48 <MPU9250_GetData+0x298>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f948 	bl	8000ce4 <__aeabi_fmul>
 8001a54:	4603      	mov	r3, r0
 8001a56:	493d      	ldr	r1, [pc, #244]	; (8001b4c <MPU9250_GetData+0x29c>)
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f9f7 	bl	8000e4c <__aeabi_fdiv>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <MPU9250_GetData+0x2a4>)
 8001a64:	601a      	str	r2, [r3, #0]
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 16.4f * 3.14f / 180.0f;
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <MPU9250_GetData+0x280>)
 8001a68:	7b1b      	ldrb	r3, [r3, #12]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <MPU9250_GetData+0x280>)
 8001a72:	7b5b      	ldrb	r3, [r3, #13]
 8001a74:	4413      	add	r3, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f8e0 	bl	8000c3c <__aeabi_i2f>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4931      	ldr	r1, [pc, #196]	; (8001b44 <MPU9250_GetData+0x294>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f9e3 	bl	8000e4c <__aeabi_fdiv>
 8001a86:	4603      	mov	r3, r0
 8001a88:	492f      	ldr	r1, [pc, #188]	; (8001b48 <MPU9250_GetData+0x298>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f92a 	bl	8000ce4 <__aeabi_fmul>
 8001a90:	4603      	mov	r3, r0
 8001a92:	492e      	ldr	r1, [pc, #184]	; (8001b4c <MPU9250_GetData+0x29c>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff f9d9 	bl	8000e4c <__aeabi_fdiv>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <MPU9250_GetData+0x2a8>)
 8001aa0:	601a      	str	r2, [r3, #0]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <MPU9250_GetData+0x288>)
 8001aa4:	681c      	ldr	r4, [r3, #0]
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <MPU9250_GetData+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f8c6 	bl	8000c3c <__aeabi_i2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f9c8 	bl	8000e4c <__aeabi_fdiv>
 8001abc:	4603      	mov	r3, r0
 8001abe:	491d      	ldr	r1, [pc, #116]	; (8001b34 <MPU9250_GetData+0x284>)
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f90f 	bl	8000ce4 <__aeabi_fmul>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff f800 	bl	8000ad0 <__aeabi_fsub>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b18      	ldr	r3, [pc, #96]	; (8001b38 <MPU9250_GetData+0x288>)
 8001ad6:	601a      	str	r2, [r3, #0]
	accelY = accelY - (accel_bias[1] / 16384.0f * 9.8f);
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MPU9250_GetData+0x28c>)
 8001ada:	681c      	ldr	r4, [r3, #0]
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MPU9250_GetData+0x2ac>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff f8ab 	bl	8000c3c <__aeabi_i2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f9ad 	bl	8000e4c <__aeabi_fdiv>
 8001af2:	4603      	mov	r3, r0
 8001af4:	490f      	ldr	r1, [pc, #60]	; (8001b34 <MPU9250_GetData+0x284>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f8f4 	bl	8000ce4 <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4619      	mov	r1, r3
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7fe ffe5 	bl	8000ad0 <__aeabi_fsub>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MPU9250_GetData+0x28c>)
 8001b0c:	601a      	str	r2, [r3, #0]
	accelZ = accelZ - (accel_bias[2] / 16384.0f * 9.8f);
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MPU9250_GetData+0x290>)
 8001b10:	681c      	ldr	r4, [r3, #0]
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MPU9250_GetData+0x2ac>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f890 	bl	8000c3c <__aeabi_i2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f992 	bl	8000e4c <__aeabi_fdiv>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4902      	ldr	r1, [pc, #8]	; (8001b34 <MPU9250_GetData+0x284>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	e017      	b.n	8001b60 <MPU9250_GetData+0x2b0>
 8001b30:	200000a4 	.word	0x200000a4
 8001b34:	411ccccd 	.word	0x411ccccd
 8001b38:	2000011c 	.word	0x2000011c
 8001b3c:	20000120 	.word	0x20000120
 8001b40:	20000124 	.word	0x20000124
 8001b44:	41833333 	.word	0x41833333
 8001b48:	4048f5c3 	.word	0x4048f5c3
 8001b4c:	43340000 	.word	0x43340000
 8001b50:	20000110 	.word	0x20000110
 8001b54:	20000114 	.word	0x20000114
 8001b58:	20000118 	.word	0x20000118
 8001b5c:	20000170 	.word	0x20000170
 8001b60:	f7ff f8c0 	bl	8000ce4 <__aeabi_fmul>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f7fe ffb1 	bl	8000ad0 <__aeabi_fsub>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b49      	ldr	r3, [pc, #292]	; (8001c98 <MPU9250_GetData+0x3e8>)
 8001b74:	601a      	str	r2, [r3, #0]
	gyroX_filtered = expRunningAverageGX(gyroX) - 0.0050;
 8001b76:	4b49      	ldr	r3, [pc, #292]	; (8001c9c <MPU9250_GetData+0x3ec>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fa8e 	bl	800109c <expRunningAverageGX>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fc48 	bl	8000418 <__aeabi_f2d>
 8001b88:	a33b      	add	r3, pc, #236	; (adr r3, 8001c78 <MPU9250_GetData+0x3c8>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fae3 	bl	8000158 <__aeabi_dsub>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7fe ff45 	bl	8000a28 <__aeabi_d2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a3f      	ldr	r2, [pc, #252]	; (8001ca0 <MPU9250_GetData+0x3f0>)
 8001ba2:	6013      	str	r3, [r2, #0]
	gyroY_filtered = expRunningAverageGY(gyroY) - 0.019;
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <MPU9250_GetData+0x3f4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fa9f 	bl	80010ec <expRunningAverageGY>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fc31 	bl	8000418 <__aeabi_f2d>
 8001bb6:	a332      	add	r3, pc, #200	; (adr r3, 8001c80 <MPU9250_GetData+0x3d0>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe facc 	bl	8000158 <__aeabi_dsub>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe ff2e 	bl	8000a28 <__aeabi_d2f>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a36      	ldr	r2, [pc, #216]	; (8001ca8 <MPU9250_GetData+0x3f8>)
 8001bd0:	6013      	str	r3, [r2, #0]
	gyroZ_filtered = expRunningAverageGZ(gyroZ) - 0.004;
 8001bd2:	4b36      	ldr	r3, [pc, #216]	; (8001cac <MPU9250_GetData+0x3fc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fab0 	bl	800113c <expRunningAverageGZ>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fc1a 	bl	8000418 <__aeabi_f2d>
 8001be4:	a328      	add	r3, pc, #160	; (adr r3, 8001c88 <MPU9250_GetData+0x3d8>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe fab5 	bl	8000158 <__aeabi_dsub>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f7fe ff17 	bl	8000a28 <__aeabi_d2f>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4a2c      	ldr	r2, [pc, #176]	; (8001cb0 <MPU9250_GetData+0x400>)
 8001bfe:	6013      	str	r3, [r2, #0]
	accelX_filtered = expRunningAverageAX(accelX) - 0.018;
 8001c00:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <MPU9250_GetData+0x404>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fac1 	bl	800118c <expRunningAverageAX>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc03 	bl	8000418 <__aeabi_f2d>
 8001c12:	a31f      	add	r3, pc, #124	; (adr r3, 8001c90 <MPU9250_GetData+0x3e0>)
 8001c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c18:	f7fe fa9e 	bl	8000158 <__aeabi_dsub>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ff00 	bl	8000a28 <__aeabi_d2f>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <MPU9250_GetData+0x408>)
 8001c2c:	6013      	str	r3, [r2, #0]
	accelY_filtered = expRunningAverageAY(accelY) - 0.004;
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <MPU9250_GetData+0x40c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fad2 	bl	80011dc <expRunningAverageAY>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fbec 	bl	8000418 <__aeabi_f2d>
 8001c40:	a311      	add	r3, pc, #68	; (adr r3, 8001c88 <MPU9250_GetData+0x3d8>)
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	f7fe fa87 	bl	8000158 <__aeabi_dsub>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4610      	mov	r0, r2
 8001c50:	4619      	mov	r1, r3
 8001c52:	f7fe fee9 	bl	8000a28 <__aeabi_d2f>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <MPU9250_GetData+0x410>)
 8001c5a:	6013      	str	r3, [r2, #0]
	accelZ_filtered = expRunningAverageAZ(accelZ);
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MPU9250_GetData+0x3e8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff fae3 	bl	800122c <expRunningAverageAZ>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <MPU9250_GetData+0x414>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	f3af 8000 	nop.w
 8001c78:	47ae147b 	.word	0x47ae147b
 8001c7c:	3f747ae1 	.word	0x3f747ae1
 8001c80:	6a7ef9db 	.word	0x6a7ef9db
 8001c84:	3f9374bc 	.word	0x3f9374bc
 8001c88:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c8c:	3f70624d 	.word	0x3f70624d
 8001c90:	8d4fdf3b 	.word	0x8d4fdf3b
 8001c94:	3f926e97 	.word	0x3f926e97
 8001c98:	20000124 	.word	0x20000124
 8001c9c:	20000110 	.word	0x20000110
 8001ca0:	20000128 	.word	0x20000128
 8001ca4:	20000114 	.word	0x20000114
 8001ca8:	2000012c 	.word	0x2000012c
 8001cac:	20000118 	.word	0x20000118
 8001cb0:	20000130 	.word	0x20000130
 8001cb4:	2000011c 	.word	0x2000011c
 8001cb8:	20000134 	.word	0x20000134
 8001cbc:	20000120 	.word	0x20000120
 8001cc0:	20000138 	.word	0x20000138
 8001cc4:	2000013c 	.word	0x2000013c

08001cc8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001ccc:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <MX_CAN_Init+0x64>)
 8001cce:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <MX_CAN_Init+0x68>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_CAN_Init+0x64>)
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_CAN_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_CAN_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_CAN_Init+0x64>)
 8001ce6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001cea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_CAN_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_CAN_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_CAN_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_CAN_Init+0x64>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_CAN_Init+0x64>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_CAN_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_CAN_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_CAN_Init+0x64>)
 8001d18:	f001 fa26 	bl	8003168 <HAL_CAN_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001d22:	f000 ffab 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200000e0 	.word	0x200000e0
 8001d30:	40006400 	.word	0x40006400

08001d34 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a24      	ldr	r2, [pc, #144]	; (8001de0 <HAL_CAN_MspInit+0xac>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d141      	bne.n	8001dd8 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_CAN_MspInit+0xb0>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	4a22      	ldr	r2, [pc, #136]	; (8001de4 <HAL_CAN_MspInit+0xb0>)
 8001d5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	61d3      	str	r3, [r2, #28]
 8001d60:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_CAN_MspInit+0xb0>)
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_CAN_MspInit+0xb0>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_CAN_MspInit+0xb0>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_CAN_MspInit+0xb0>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4619      	mov	r1, r3
 8001d98:	4813      	ldr	r0, [pc, #76]	; (8001de8 <HAL_CAN_MspInit+0xb4>)
 8001d9a:	f002 f849 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	480d      	ldr	r0, [pc, #52]	; (8001de8 <HAL_CAN_MspInit+0xb4>)
 8001db4:	f002 f83c 	bl	8003e30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2105      	movs	r1, #5
 8001dbc:	2013      	movs	r0, #19
 8001dbe:	f001 ff96 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001dc2:	2013      	movs	r0, #19
 8001dc4:	f001 ffaf 	bl	8003d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2105      	movs	r1, #5
 8001dcc:	2014      	movs	r0, #20
 8001dce:	f001 ff8e 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001dd2:	2014      	movs	r0, #20
 8001dd4:	f001 ffa7 	bl	8003d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40006400 	.word	0x40006400
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010800 	.word	0x40010800

08001dec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001df0:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <MX_FREERTOS_Init+0x28>)
 8001df2:	2100      	movs	r1, #0
 8001df4:	4808      	ldr	r0, [pc, #32]	; (8001e18 <MX_FREERTOS_Init+0x2c>)
 8001df6:	f003 ff27 	bl	8005c48 <osThreadNew>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <MX_FREERTOS_Init+0x30>)
 8001dfe:	6013      	str	r3, [r2, #0]

  /* creation of MPUTask */
  MPUTaskHandle = osThreadNew(StartMPUTask, NULL, &MPUTask_attributes);
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <MX_FREERTOS_Init+0x34>)
 8001e02:	2100      	movs	r1, #0
 8001e04:	4807      	ldr	r0, [pc, #28]	; (8001e24 <MX_FREERTOS_Init+0x38>)
 8001e06:	f003 ff1f 	bl	8005c48 <osThreadNew>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <MX_FREERTOS_Init+0x3c>)
 8001e0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	0800911c 	.word	0x0800911c
 8001e18:	08001e2d 	.word	0x08001e2d
 8001e1c:	20000180 	.word	0x20000180
 8001e20:	08009140 	.word	0x08009140
 8001e24:	08001e3d 	.word	0x08001e3d
 8001e28:	20000184 	.word	0x20000184

08001e2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f003 ffb1 	bl	8005d9c <osDelay>
 8001e3a:	e7fb      	b.n	8001e34 <StartDefaultTask+0x8>

08001e3c <StartMPUTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMPUTask */
void StartMPUTask(void *argument)
{
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b08e      	sub	sp, #56	; 0x38
 8001e40:	af04      	add	r7, sp, #16
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMPUTask */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 10;
 8001e44:	230a      	movs	r3, #10
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  xLastWakeTime = xTaskGetTickCount();
 8001e48:	f005 f91a 	bl	8007080 <xTaskGetTickCount>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {
	int16_t AccData[3], GyroData[3], MagData[3];
	MPU9250_GetData(AccData, GyroData, MagData);
 8001e50:	f107 0208 	add.w	r2, r7, #8
 8001e54:	f107 0110 	add.w	r1, r7, #16
 8001e58:	f107 0318 	add.w	r3, r7, #24
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fd27 	bl	80018b0 <MPU9250_GetData>
	accelX_average = accelX_filtered;
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <StartMPUTask+0x100>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a36      	ldr	r2, [pc, #216]	; (8001f40 <StartMPUTask+0x104>)
 8001e68:	6013      	str	r3, [r2, #0]
	accelY_average = accelY_filtered;
 8001e6a:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <StartMPUTask+0x108>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a36      	ldr	r2, [pc, #216]	; (8001f48 <StartMPUTask+0x10c>)
 8001e70:	6013      	str	r3, [r2, #0]
	accelZ_average = accelZ_filtered;
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <StartMPUTask+0x110>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a36      	ldr	r2, [pc, #216]	; (8001f50 <StartMPUTask+0x114>)
 8001e78:	6013      	str	r3, [r2, #0]
	gyroX_average = gyroX_filtered;
 8001e7a:	4b36      	ldr	r3, [pc, #216]	; (8001f54 <StartMPUTask+0x118>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a36      	ldr	r2, [pc, #216]	; (8001f58 <StartMPUTask+0x11c>)
 8001e80:	6013      	str	r3, [r2, #0]
	gyroY_average = gyroY_filtered;
 8001e82:	4b36      	ldr	r3, [pc, #216]	; (8001f5c <StartMPUTask+0x120>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a36      	ldr	r2, [pc, #216]	; (8001f60 <StartMPUTask+0x124>)
 8001e88:	6013      	str	r3, [r2, #0]
	gyroZ_average = gyroZ_filtered;
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <StartMPUTask+0x128>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a36      	ldr	r2, [pc, #216]	; (8001f68 <StartMPUTask+0x12c>)
 8001e90:	6013      	str	r3, [r2, #0]
	imu_filter(accelX_average, accelY_average, accelZ_average, gyroX_average, gyroY_average, 0);
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <StartMPUTask+0x104>)
 8001e94:	6818      	ldr	r0, [r3, #0]
 8001e96:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <StartMPUTask+0x10c>)
 8001e98:	6819      	ldr	r1, [r3, #0]
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <StartMPUTask+0x114>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <StartMPUTask+0x11c>)
 8001ea0:	681c      	ldr	r4, [r3, #0]
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <StartMPUTask+0x124>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f04f 0500 	mov.w	r5, #0
 8001eaa:	9501      	str	r5, [sp, #4]
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4623      	mov	r3, r4
 8001eb0:	f000 fad2 	bl	8002458 <imu_filter>
	yaw = 0;
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <StartMPUTask+0x130>)
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
	eulerAngles(q_est, &roll, &pitch, &yaw);
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	; (8001f70 <StartMPUTask+0x134>)
 8001ebe:	4a2b      	ldr	r2, [pc, #172]	; (8001f6c <StartMPUTask+0x130>)
 8001ec0:	9202      	str	r2, [sp, #8]
 8001ec2:	4a2c      	ldr	r2, [pc, #176]	; (8001f74 <StartMPUTask+0x138>)
 8001ec4:	9201      	str	r2, [sp, #4]
 8001ec6:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <StartMPUTask+0x13c>)
 8001ec8:	9200      	str	r2, [sp, #0]
 8001eca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ecc:	f000 fce0 	bl	8002890 <eulerAngles>
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <StartMPUTask+0x13c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
//	memcpy(can_data, &accelZ_average, 4);
//	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//	}

	memcpy(can_data, &roll, 4);
 8001ed4:	4a29      	ldr	r2, [pc, #164]	; (8001f7c <StartMPUTask+0x140>)
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <StartMPUTask+0x138>)
 8001eda:	681b      	ldr	r3, [r3, #0]
	memcpy(&can_data[4], &pitch, 4);
 8001edc:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <StartMPUTask+0x140>)
 8001ede:	6053      	str	r3, [r2, #4]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 8001ee0:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <StartMPUTask+0x144>)
 8001ee2:	4a26      	ldr	r2, [pc, #152]	; (8001f7c <StartMPUTask+0x140>)
 8001ee4:	4927      	ldr	r1, [pc, #156]	; (8001f84 <StartMPUTask+0x148>)
 8001ee6:	4828      	ldr	r0, [pc, #160]	; (8001f88 <StartMPUTask+0x14c>)
 8001ee8:	f001 fb46 	bl	8003578 <HAL_CAN_AddTxMessage>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <StartMPUTask+0xbe>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	4825      	ldr	r0, [pc, #148]	; (8001f8c <StartMPUTask+0x150>)
 8001ef6:	f002 f937 	bl	8004168 <HAL_GPIO_TogglePin>
	}
	osDelay(1);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f003 ff4e 	bl	8005d9c <osDelay>
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <StartMPUTask+0x130>)
 8001f02:	681b      	ldr	r3, [r3, #0]
	memcpy(can_data, &yaw, 4);
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <StartMPUTask+0x140>)
 8001f06:	6013      	str	r3, [r2, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <StartMPUTask+0x144>)
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <StartMPUTask+0x140>)
 8001f0c:	4920      	ldr	r1, [pc, #128]	; (8001f90 <StartMPUTask+0x154>)
 8001f0e:	481e      	ldr	r0, [pc, #120]	; (8001f88 <StartMPUTask+0x14c>)
 8001f10:	f001 fb32 	bl	8003578 <HAL_CAN_AddTxMessage>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <StartMPUTask+0xe6>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	481b      	ldr	r0, [pc, #108]	; (8001f8c <StartMPUTask+0x150>)
 8001f1e:	f002 f923 	bl	8004168 <HAL_GPIO_TogglePin>
	}
	count = HAL_GetTick();
 8001f22:	f001 f8f3 	bl	800310c <HAL_GetTick>
 8001f26:	4603      	mov	r3, r0
 8001f28:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <StartMPUTask+0x158>)
 8001f2a:	6013      	str	r3, [r2, #0]
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001f2c:	f107 0320 	add.w	r3, r7, #32
 8001f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fed6 	bl	8006ce4 <vTaskDelayUntil>
  {
 8001f38:	e78a      	b.n	8001e50 <StartMPUTask+0x14>
 8001f3a:	bf00      	nop
 8001f3c:	20000134 	.word	0x20000134
 8001f40:	20000140 	.word	0x20000140
 8001f44:	20000138 	.word	0x20000138
 8001f48:	20000144 	.word	0x20000144
 8001f4c:	2000013c 	.word	0x2000013c
 8001f50:	20000148 	.word	0x20000148
 8001f54:	20000128 	.word	0x20000128
 8001f58:	2000014c 	.word	0x2000014c
 8001f5c:	2000012c 	.word	0x2000012c
 8001f60:	20000150 	.word	0x20000150
 8001f64:	20000130 	.word	0x20000130
 8001f68:	20000154 	.word	0x20000154
 8001f6c:	20000160 	.word	0x20000160
 8001f70:	20000004 	.word	0x20000004
 8001f74:	2000015c 	.word	0x2000015c
 8001f78:	20000158 	.word	0x20000158
 8001f7c:	20000108 	.word	0x20000108
 8001f80:	20000228 	.word	0x20000228
 8001f84:	200001b0 	.word	0x200001b0
 8001f88:	200000e0 	.word	0x200000e0
 8001f8c:	40010c00 	.word	0x40010c00
 8001f90:	200001e0 	.word	0x200001e0
 8001f94:	2000017c 	.word	0x2000017c

08001f98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <MX_GPIO_Init+0xcc>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a2c      	ldr	r2, [pc, #176]	; (8002064 <MX_GPIO_Init+0xcc>)
 8001fb2:	f043 0320 	orr.w	r3, r3, #32
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <MX_GPIO_Init+0xcc>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <MX_GPIO_Init+0xcc>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a26      	ldr	r2, [pc, #152]	; (8002064 <MX_GPIO_Init+0xcc>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <MX_GPIO_Init+0xcc>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <MX_GPIO_Init+0xcc>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a20      	ldr	r2, [pc, #128]	; (8002064 <MX_GPIO_Init+0xcc>)
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MX_GPIO_Init+0xcc>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f248 3110 	movw	r1, #33552	; 0x8310
 8001ffa:	481b      	ldr	r0, [pc, #108]	; (8002068 <MX_GPIO_Init+0xd0>)
 8001ffc:	f002 f89c 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002000:	2200      	movs	r2, #0
 8002002:	2118      	movs	r1, #24
 8002004:	4819      	ldr	r0, [pc, #100]	; (800206c <MX_GPIO_Init+0xd4>)
 8002006:	f002 f897 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MPU_Pin;
 800200a:	2308      	movs	r3, #8
 800200c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800200e:	4b18      	ldr	r3, [pc, #96]	; (8002070 <MX_GPIO_Init+0xd8>)
 8002010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_MPU_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 0310 	add.w	r3, r7, #16
 800201a:	4619      	mov	r1, r3
 800201c:	4812      	ldr	r0, [pc, #72]	; (8002068 <MX_GPIO_Init+0xd0>)
 800201e:	f001 ff07 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin;
 8002022:	f248 3310 	movw	r3, #33552	; 0x8310
 8002026:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2302      	movs	r3, #2
 8002032:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 0310 	add.w	r3, r7, #16
 8002038:	4619      	mov	r1, r3
 800203a:	480b      	ldr	r0, [pc, #44]	; (8002068 <MX_GPIO_Init+0xd0>)
 800203c:	f001 fef8 	bl	8003e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8002040:	2318      	movs	r3, #24
 8002042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2302      	movs	r3, #2
 800204e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4619      	mov	r1, r3
 8002056:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_GPIO_Init+0xd4>)
 8002058:	f001 feea 	bl	8003e30 <HAL_GPIO_Init>

}
 800205c:	bf00      	nop
 800205e:	3720      	adds	r7, #32
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800
 800206c:	40010c00 	.word	0x40010c00
 8002070:	10110000 	.word	0x10110000

08002074 <quat_scalar>:

// Multiply two quaternions and return a copy of the result, prod = L * R
struct quaternion quat_mult (struct quaternion q_L, struct quaternion q_R);

// Multiply a reference of a quaternion by a scalar, q = s*q
static inline void quat_scalar(struct quaternion * q, float scalar){
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    q -> q1 *= scalar;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fe2d 	bl	8000ce4 <__aeabi_fmul>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	601a      	str	r2, [r3, #0]
    q -> q2 *= scalar;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	6839      	ldr	r1, [r7, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fe23 	bl	8000ce4 <__aeabi_fmul>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	605a      	str	r2, [r3, #4]
    q -> q3 *= scalar;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	6839      	ldr	r1, [r7, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fe19 	bl	8000ce4 <__aeabi_fmul>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	609a      	str	r2, [r3, #8]
    q -> q4 *= scalar;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fe0f 	bl	8000ce4 <__aeabi_fmul>
 80020c6:	4603      	mov	r3, r0
 80020c8:	461a      	mov	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	60da      	str	r2, [r3, #12]
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <quat_add>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
static inline void quat_add(struct quaternion * Sum, struct quaternion L, struct quaternion R){
 80020d6:	b084      	sub	sp, #16
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	f107 0014 	add.w	r0, r7, #20
 80020e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Sum -> q1 = L.q1 + R.q1;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fcf0 	bl	8000ad4 <__addsf3>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	601a      	str	r2, [r3, #0]
    Sum -> q2 = L.q2 + R.q2;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fce6 	bl	8000ad4 <__addsf3>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	605a      	str	r2, [r3, #4]
    Sum -> q3 = L.q3 + R.q3;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fcdc 	bl	8000ad4 <__addsf3>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]
    Sum -> q4 = L.q4 + R.q4;
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fcd2 	bl	8000ad4 <__addsf3>
 8002130:	4603      	mov	r3, r0
 8002132:	461a      	mov	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002142:	b004      	add	sp, #16
 8002144:	4770      	bx	lr

08002146 <quat_sub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
static inline void quat_sub(struct quaternion * Sum, struct quaternion L, struct quaternion R){
 8002146:	b084      	sub	sp, #16
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	f107 0014 	add.w	r0, r7, #20
 8002154:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Sum -> q1 = L.q1 - R.q1;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fcb6 	bl	8000ad0 <__aeabi_fsub>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	601a      	str	r2, [r3, #0]
    Sum -> q2 = L.q2 - R.q2;
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fcac 	bl	8000ad0 <__aeabi_fsub>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	605a      	str	r2, [r3, #4]
    Sum -> q3 = L.q3 - R.q3;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fca2 	bl	8000ad0 <__aeabi_fsub>
 800218c:	4603      	mov	r3, r0
 800218e:	461a      	mov	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
    Sum -> q4 = L.q4 - R.q4;
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fc98 	bl	8000ad0 <__aeabi_fsub>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021b2:	b004      	add	sp, #16
 80021b4:	4770      	bx	lr

080021b6 <quat_Norm>:

// norm of a quaternion is the same as a complex number
// sqrt( q1^2 + q2^2 + q3^2 + q4^2)
// the norm is also the sqrt(q * conjugate(q)), but thats a lot of operations in the quaternion multiplication
static inline float quat_Norm (struct quaternion q)
{
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	463c      	mov	r4, r7
 80021be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return sqrt(q.q1*q.q1 + q.q2*q.q2 + q.q3*q.q3 +q.q4*q.q4);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fd8b 	bl	8000ce4 <__aeabi_fmul>
 80021ce:	4603      	mov	r3, r0
 80021d0:	461c      	mov	r4, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe fd83 	bl	8000ce4 <__aeabi_fmul>
 80021de:	4603      	mov	r3, r0
 80021e0:	4619      	mov	r1, r3
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7fe fc76 	bl	8000ad4 <__addsf3>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461c      	mov	r4, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fd76 	bl	8000ce4 <__aeabi_fmul>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4619      	mov	r1, r3
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7fe fc69 	bl	8000ad4 <__addsf3>
 8002202:	4603      	mov	r3, r0
 8002204:	461c      	mov	r4, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fd69 	bl	8000ce4 <__aeabi_fmul>
 8002212:	4603      	mov	r3, r0
 8002214:	4619      	mov	r1, r3
 8002216:	4620      	mov	r0, r4
 8002218:	f7fe fc5c 	bl	8000ad4 <__addsf3>
 800221c:	4603      	mov	r3, r0
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f8fa 	bl	8000418 <__aeabi_f2d>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f006 fa26 	bl	800867c <sqrt>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fbf6 	bl	8000a28 <__aeabi_d2f>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bd90      	pop	{r4, r7, pc}

08002246 <quat_Normalization>:

// Normalizes pointer q by calling quat_Norm(q),
static inline void quat_Normalization(struct quaternion * q){
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
    float norm = quat_Norm(*q);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002252:	f7ff ffb0 	bl	80021b6 <quat_Norm>
 8002256:	60f8      	str	r0, [r7, #12]
    q -> q1 /= norm;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68f9      	ldr	r1, [r7, #12]
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fdf4 	bl	8000e4c <__aeabi_fdiv>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	601a      	str	r2, [r3, #0]
    q -> q2 /= norm;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fdea 	bl	8000e4c <__aeabi_fdiv>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	605a      	str	r2, [r3, #4]
    q -> q3 /= norm;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fde0 	bl	8000e4c <__aeabi_fdiv>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	609a      	str	r2, [r3, #8]
    q -> q4 /= norm;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	68f9      	ldr	r1, [r7, #12]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fdd6 	bl	8000e4c <__aeabi_fdiv>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	60da      	str	r2, [r3, #12]
}
 80022a8:	bf00      	nop
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <quat_mult>:

#include "madgwickFilter.h"

struct quaternion q_est = { 1, 0, 0, 0};       // initialize with as unit vector with real component  = 1

struct quaternion quat_mult (struct quaternion L, struct quaternion R){
 80022b0:	b084      	sub	sp, #16
 80022b2:	b590      	push	{r4, r7, lr}
 80022b4:	b087      	sub	sp, #28
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80022be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    
    
    struct quaternion product;
    product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe fd0b 	bl	8000ce4 <__aeabi_fmul>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461c      	mov	r4, r3
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fd03 	bl	8000ce4 <__aeabi_fmul>
 80022de:	4603      	mov	r3, r0
 80022e0:	4619      	mov	r1, r3
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7fe fbf4 	bl	8000ad0 <__aeabi_fsub>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461c      	mov	r4, r3
 80022ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022f0:	4611      	mov	r1, r2
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fcf6 	bl	8000ce4 <__aeabi_fmul>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4619      	mov	r1, r3
 80022fc:	4620      	mov	r0, r4
 80022fe:	f7fe fbe7 	bl	8000ad0 <__aeabi_fsub>
 8002302:	4603      	mov	r3, r0
 8002304:	461c      	mov	r4, r3
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f7fe fce9 	bl	8000ce4 <__aeabi_fmul>
 8002312:	4603      	mov	r3, r0
 8002314:	4619      	mov	r1, r3
 8002316:	4620      	mov	r0, r4
 8002318:	f7fe fbda 	bl	8000ad0 <__aeabi_fsub>
 800231c:	4603      	mov	r3, r0
 800231e:	60bb      	str	r3, [r7, #8]
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 8002320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002324:	4611      	mov	r1, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fcdc 	bl	8000ce4 <__aeabi_fmul>
 800232c:	4603      	mov	r3, r0
 800232e:	461c      	mov	r4, r3
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fcd4 	bl	8000ce4 <__aeabi_fmul>
 800233c:	4603      	mov	r3, r0
 800233e:	4619      	mov	r1, r3
 8002340:	4620      	mov	r0, r4
 8002342:	f7fe fbc7 	bl	8000ad4 <__addsf3>
 8002346:	4603      	mov	r3, r0
 8002348:	461c      	mov	r4, r3
 800234a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fcc7 	bl	8000ce4 <__aeabi_fmul>
 8002356:	4603      	mov	r3, r0
 8002358:	4619      	mov	r1, r3
 800235a:	4620      	mov	r0, r4
 800235c:	f7fe fbba 	bl	8000ad4 <__addsf3>
 8002360:	4603      	mov	r3, r0
 8002362:	461c      	mov	r4, r3
 8002364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002368:	4611      	mov	r1, r2
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fcba 	bl	8000ce4 <__aeabi_fmul>
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	4620      	mov	r0, r4
 8002376:	f7fe fbab 	bl	8000ad0 <__aeabi_fsub>
 800237a:	4603      	mov	r3, r0
 800237c:	60fb      	str	r3, [r7, #12]
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fcad 	bl	8000ce4 <__aeabi_fmul>
 800238a:	4603      	mov	r3, r0
 800238c:	461c      	mov	r4, r3
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fca5 	bl	8000ce4 <__aeabi_fmul>
 800239a:	4603      	mov	r3, r0
 800239c:	4619      	mov	r1, r3
 800239e:	4620      	mov	r0, r4
 80023a0:	f7fe fb96 	bl	8000ad0 <__aeabi_fsub>
 80023a4:	4603      	mov	r3, r0
 80023a6:	461c      	mov	r4, r3
 80023a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fc98 	bl	8000ce4 <__aeabi_fmul>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4619      	mov	r1, r3
 80023b8:	4620      	mov	r0, r4
 80023ba:	f7fe fb8b 	bl	8000ad4 <__addsf3>
 80023be:	4603      	mov	r3, r0
 80023c0:	461c      	mov	r4, r3
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fc8b 	bl	8000ce4 <__aeabi_fmul>
 80023ce:	4603      	mov	r3, r0
 80023d0:	4619      	mov	r1, r3
 80023d2:	4620      	mov	r0, r4
 80023d4:	f7fe fb7e 	bl	8000ad4 <__addsf3>
 80023d8:	4603      	mov	r3, r0
 80023da:	613b      	str	r3, [r7, #16]
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 80023dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fc7e 	bl	8000ce4 <__aeabi_fmul>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461c      	mov	r4, r3
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023f0:	4611      	mov	r1, r2
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fc76 	bl	8000ce4 <__aeabi_fmul>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4619      	mov	r1, r3
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7fe fb69 	bl	8000ad4 <__addsf3>
 8002402:	4603      	mov	r3, r0
 8002404:	461c      	mov	r4, r3
 8002406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fc69 	bl	8000ce4 <__aeabi_fmul>
 8002412:	4603      	mov	r3, r0
 8002414:	4619      	mov	r1, r3
 8002416:	4620      	mov	r0, r4
 8002418:	f7fe fb5a 	bl	8000ad0 <__aeabi_fsub>
 800241c:	4603      	mov	r3, r0
 800241e:	461c      	mov	r4, r3
 8002420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fc5c 	bl	8000ce4 <__aeabi_fmul>
 800242c:	4603      	mov	r3, r0
 800242e:	4619      	mov	r1, r3
 8002430:	4620      	mov	r0, r4
 8002432:	f7fe fb4f 	bl	8000ad4 <__addsf3>
 8002436:	4603      	mov	r3, r0
 8002438:	617b      	str	r3, [r7, #20]
    
    return product;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	461c      	mov	r4, r3
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002444:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002452:	b004      	add	sp, #16
 8002454:	4770      	bx	lr
	...

08002458 <imu_filter>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void imu_filter(float ax, float ay, float az, float gx, float gy, float gz){
 8002458:	b5b0      	push	{r4, r5, r7, lr}
 800245a:	b0b2      	sub	sp, #200	; 0xc8
 800245c:	af06      	add	r7, sp, #24
 800245e:	61f8      	str	r0, [r7, #28]
 8002460:	61b9      	str	r1, [r7, #24]
 8002462:	617a      	str	r2, [r7, #20]
 8002464:	613b      	str	r3, [r7, #16]
    
    //Variables and constants
    struct quaternion q_est_prev = q_est;
 8002466:	4bb7      	ldr	r3, [pc, #732]	; (8002744 <imu_filter+0x2ec>)
 8002468:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 800246c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800246e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0};            // used as a place holder in equations 42 and 43
 8002472:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    
    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 800249a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
 80024a4:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                     // jacobian matrix for gravity
 80024a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024aa:	2230      	movs	r2, #48	; 0x30
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f006 fd44 	bl	8008f3c <memset>
    
    struct quaternion gradient = {0};
 80024b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
    
    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.q1 = 0;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
    q_w.q2 = gx;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    q_w.q3 = gy;
 80024cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    q_w.q4 = gz;
 80024d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
    
    quat_scalar(&q_w, 0.5);                  // equation (12) dq/dt = (1/2)q*w
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fdc7 	bl	8002074 <quat_scalar>
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 80024e6:	463d      	mov	r5, r7
 80024e8:	ac01      	add	r4, sp, #4
 80024ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002500:	4628      	mov	r0, r5
 8002502:	f7ff fed5 	bl	80022b0 <quat_mult>
 8002506:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800250a:	463b      	mov	r3, r7
 800250c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800250e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     The matrix multiplcation can also be done hard coded to reduce code.
     
     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */
    
    quat_Normalization(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 8002512:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fe95 	bl	8002246 <quat_Normalization>
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 800251c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002520:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fbdc 	bl	8000ce4 <__aeabi_fmul>
 800252c:	4603      	mov	r3, r0
 800252e:	461c      	mov	r4, r3
 8002530:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002534:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe fbd2 	bl	8000ce4 <__aeabi_fmul>
 8002540:	4603      	mov	r3, r0
 8002542:	4619      	mov	r1, r3
 8002544:	4620      	mov	r0, r4
 8002546:	f7fe fac3 	bl	8000ad0 <__aeabi_fsub>
 800254a:	4603      	mov	r3, r0
 800254c:	4619      	mov	r1, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fac0 	bl	8000ad4 <__addsf3>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800255c:	4619      	mov	r1, r3
 800255e:	4610      	mov	r0, r2
 8002560:	f7fe fab6 	bl	8000ad0 <__aeabi_fsub>
 8002564:	4603      	mov	r3, r0
 8002566:	677b      	str	r3, [r7, #116]	; 0x74
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 8002568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800256c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fbb6 	bl	8000ce4 <__aeabi_fmul>
 8002578:	4603      	mov	r3, r0
 800257a:	461c      	mov	r4, r3
 800257c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002580:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fbac 	bl	8000ce4 <__aeabi_fmul>
 800258c:	4603      	mov	r3, r0
 800258e:	4619      	mov	r1, r3
 8002590:	4620      	mov	r0, r4
 8002592:	f7fe fa9f 	bl	8000ad4 <__addsf3>
 8002596:	4603      	mov	r3, r0
 8002598:	4619      	mov	r1, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fa9a 	bl	8000ad4 <__addsf3>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f7fe fa90 	bl	8000ad0 <__aeabi_fsub>
 80025b0:	4603      	mov	r3, r0
 80025b2:	67bb      	str	r3, [r7, #120]	; 0x78
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 80025b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80025bc:	4611      	mov	r1, r2
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fb90 	bl	8000ce4 <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ff26 	bl	8000418 <__aeabi_f2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	f04f 0000 	mov.w	r0, #0
 80025d4:	495c      	ldr	r1, [pc, #368]	; (8002748 <imu_filter+0x2f0>)
 80025d6:	f7fd fdbf 	bl	8000158 <__aeabi_dsub>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4614      	mov	r4, r2
 80025e0:	461d      	mov	r5, r3
 80025e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fb79 	bl	8000ce4 <__aeabi_fmul>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ff0f 	bl	8000418 <__aeabi_f2d>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4620      	mov	r0, r4
 8002600:	4629      	mov	r1, r5
 8002602:	f7fd fda9 	bl	8000158 <__aeabi_dsub>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	f7fd fda3 	bl	800015c <__adddf3>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4614      	mov	r4, r2
 800261c:	461d      	mov	r5, r3
 800261e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd fef8 	bl	8000418 <__aeabi_f2d>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fd92 	bl	8000158 <__aeabi_dsub>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe f9f4 	bl	8000a28 <__aeabi_d2f>
 8002640:	4603      	mov	r3, r0
 8002642:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
 8002644:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002648:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fb49 	bl	8000ce4 <__aeabi_fmul>
 8002652:	4603      	mov	r3, r0
 8002654:	647b      	str	r3, [r7, #68]	; 0x44
    J_g[0][1] =  2 * q_est_prev.q4;
 8002656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800265a:	4619      	mov	r1, r3
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fa39 	bl	8000ad4 <__addsf3>
 8002662:	4603      	mov	r3, r0
 8002664:	64bb      	str	r3, [r7, #72]	; 0x48
    J_g[0][2] = -2 * q_est_prev.q1;
 8002666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800266a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe fb38 	bl	8000ce4 <__aeabi_fmul>
 8002674:	4603      	mov	r3, r0
 8002676:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_g[0][3] =  2 * q_est_prev.q2;
 8002678:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800267c:	4619      	mov	r1, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fa28 	bl	8000ad4 <__addsf3>
 8002684:	4603      	mov	r3, r0
 8002686:	653b      	str	r3, [r7, #80]	; 0x50
    
    J_g[1][0] = 2 * q_est_prev.q2;
 8002688:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800268c:	4619      	mov	r1, r3
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fa20 	bl	8000ad4 <__addsf3>
 8002694:	4603      	mov	r3, r0
 8002696:	657b      	str	r3, [r7, #84]	; 0x54
    J_g[1][1] = 2 * q_est_prev.q1;
 8002698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800269c:	4619      	mov	r1, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fa18 	bl	8000ad4 <__addsf3>
 80026a4:	4603      	mov	r3, r0
 80026a6:	65bb      	str	r3, [r7, #88]	; 0x58
    J_g[1][2] = 2 * q_est_prev.q4;
 80026a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026ac:	4619      	mov	r1, r3
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fa10 	bl	8000ad4 <__addsf3>
 80026b4:	4603      	mov	r3, r0
 80026b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    J_g[1][3] = 2 * q_est_prev.q3;
 80026b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026bc:	4619      	mov	r1, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fa08 	bl	8000ad4 <__addsf3>
 80026c4:	4603      	mov	r3, r0
 80026c6:	663b      	str	r3, [r7, #96]	; 0x60
    
    J_g[2][0] = 0;
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	667b      	str	r3, [r7, #100]	; 0x64
    J_g[2][1] = -4 * q_est_prev.q2;
 80026ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026d2:	491e      	ldr	r1, [pc, #120]	; (800274c <imu_filter+0x2f4>)
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fb05 	bl	8000ce4 <__aeabi_fmul>
 80026da:	4603      	mov	r3, r0
 80026dc:	66bb      	str	r3, [r7, #104]	; 0x68
    J_g[2][2] = -4 * q_est_prev.q3;
 80026de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026e2:	491a      	ldr	r1, [pc, #104]	; (800274c <imu_filter+0x2f4>)
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fafd 	bl	8000ce4 <__aeabi_fmul>
 80026ea:	4603      	mov	r3, r0
 80026ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    J_g[2][3] = 0;
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	673b      	str	r3, [r7, #112]	; 0x70
    
    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 80026f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026f8:	4611      	mov	r1, r2
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe faf2 	bl	8000ce4 <__aeabi_fmul>
 8002700:	4603      	mov	r3, r0
 8002702:	461c      	mov	r4, r3
 8002704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002706:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe faea 	bl	8000ce4 <__aeabi_fmul>
 8002710:	4603      	mov	r3, r0
 8002712:	4619      	mov	r1, r3
 8002714:	4620      	mov	r0, r4
 8002716:	f7fe f9dd 	bl	8000ad4 <__addsf3>
 800271a:	4603      	mov	r3, r0
 800271c:	461c      	mov	r4, r3
 800271e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002720:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fadd 	bl	8000ce4 <__aeabi_fmul>
 800272a:	4603      	mov	r3, r0
 800272c:	4619      	mov	r1, r3
 800272e:	4620      	mov	r0, r4
 8002730:	f7fe f9d0 	bl	8000ad4 <__addsf3>
 8002734:	4603      	mov	r3, r0
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8002738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800273a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	e006      	b.n	8002750 <imu_filter+0x2f8>
 8002742:	bf00      	nop
 8002744:	20000004 	.word	0x20000004
 8002748:	3fe00000 	.word	0x3fe00000
 800274c:	c0800000 	.word	0xc0800000
 8002750:	f7fe fac8 	bl	8000ce4 <__aeabi_fmul>
 8002754:	4603      	mov	r3, r0
 8002756:	461c      	mov	r4, r3
 8002758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800275a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fac0 	bl	8000ce4 <__aeabi_fmul>
 8002764:	4603      	mov	r3, r0
 8002766:	4619      	mov	r1, r3
 8002768:	4620      	mov	r0, r4
 800276a:	f7fe f9b3 	bl	8000ad4 <__addsf3>
 800276e:	4603      	mov	r3, r0
 8002770:	461c      	mov	r4, r3
 8002772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002774:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7fe fab3 	bl	8000ce4 <__aeabi_fmul>
 800277e:	4603      	mov	r3, r0
 8002780:	4619      	mov	r1, r3
 8002782:	4620      	mov	r0, r4
 8002784:	f7fe f9a6 	bl	8000ad4 <__addsf3>
 8002788:	4603      	mov	r3, r0
 800278a:	63bb      	str	r3, [r7, #56]	; 0x38
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 800278c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe faa6 	bl	8000ce4 <__aeabi_fmul>
 8002798:	4603      	mov	r3, r0
 800279a:	461c      	mov	r4, r3
 800279c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fa9e 	bl	8000ce4 <__aeabi_fmul>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4619      	mov	r1, r3
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7fe f991 	bl	8000ad4 <__addsf3>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461c      	mov	r4, r3
 80027b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fa91 	bl	8000ce4 <__aeabi_fmul>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4619      	mov	r1, r3
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7fe f984 	bl	8000ad4 <__addsf3>
 80027cc:	4603      	mov	r3, r0
 80027ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 80027d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fa84 	bl	8000ce4 <__aeabi_fmul>
 80027dc:	4603      	mov	r3, r0
 80027de:	461c      	mov	r4, r3
 80027e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fa7c 	bl	8000ce4 <__aeabi_fmul>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4619      	mov	r1, r3
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7fe f96f 	bl	8000ad4 <__addsf3>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461c      	mov	r4, r3
 80027fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe fa6f 	bl	8000ce4 <__aeabi_fmul>
 8002806:	4603      	mov	r3, r0
 8002808:	4619      	mov	r1, r3
 800280a:	4620      	mov	r0, r4
 800280c:	f7fe f962 	bl	8000ad4 <__addsf3>
 8002810:	4603      	mov	r3, r0
 8002812:	643b      	str	r3, [r7, #64]	; 0x40
    
    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 8002814:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fd14 	bl	8002246 <quat_Normalization>
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    quat_scalar(&gradient, BETA);             // multiply normalized gradient by beta
 800281e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002822:	4918      	ldr	r1, [pc, #96]	; (8002884 <imu_filter+0x42c>)
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fc25 	bl	8002074 <quat_scalar>
    quat_sub(&q_est_dot, q_w, gradient);        // subtract above from q_w, the integrated gyro quaternion
 800282a:	f107 0590 	add.w	r5, r7, #144	; 0x90
 800282e:	ac01      	add	r4, sp, #4
 8002830:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002844:	4628      	mov	r0, r5
 8002846:	f7ff fc7e 	bl	8002146 <quat_sub>
    quat_scalar(&q_est_dot, DELTA_T);
 800284a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800284e:	490e      	ldr	r1, [pc, #56]	; (8002888 <imu_filter+0x430>)
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc0f 	bl	8002074 <quat_scalar>
    quat_add(&q_est, q_est_prev, q_est_dot);     // Integrate orientation rate to find position
 8002856:	ac01      	add	r4, sp, #4
 8002858:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800285c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800285e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800286c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286e:	4807      	ldr	r0, [pc, #28]	; (800288c <imu_filter+0x434>)
 8002870:	f7ff fc31 	bl	80020d6 <quat_add>
    quat_Normalization(&q_est);                 // normalize the orientation of the estimate
 8002874:	4805      	ldr	r0, [pc, #20]	; (800288c <imu_filter+0x434>)
 8002876:	f7ff fce6 	bl	8002246 <quat_Normalization>
                                                //(shown in diagram, plus always use unit quaternions for orientation)
   
}
 800287a:	bf00      	nop
 800287c:	37b0      	adds	r7, #176	; 0xb0
 800287e:	46bd      	mov	sp, r7
 8002880:	bdb0      	pop	{r4, r5, r7, pc}
 8002882:	bf00      	nop
 8002884:	3d9ac70e 	.word	0x3d9ac70e
 8002888:	3ba3d70a 	.word	0x3ba3d70a
 800288c:	20000004 	.word	0x20000004

08002890 <eulerAngles>:
 Assume right hand system
 Roll is about the x axis, represented as phi
 Pitch is about the y axis, represented as theta
 Yaw is about the z axis, represented as psi (trident looking greek symbol)
 */
void eulerAngles(struct quaternion q, float* roll, float* pitch, float* yaw){
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	463c      	mov	r4, r7
 8002898:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    *yaw = atan2f((2*q.q2*q.q3 - 2*q.q1*q.q4), (2*q.q1*q.q1 + 2*q.q2*q.q2 -1));  // equation (7)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4619      	mov	r1, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe f917 	bl	8000ad4 <__addsf3>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4619      	mov	r1, r3
 80028ae:	4610      	mov	r0, r2
 80028b0:	f7fe fa18 	bl	8000ce4 <__aeabi_fmul>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461c      	mov	r4, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe f909 	bl	8000ad4 <__addsf3>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f7fe fa0a 	bl	8000ce4 <__aeabi_fmul>
 80028d0:	4603      	mov	r3, r0
 80028d2:	4619      	mov	r1, r3
 80028d4:	4620      	mov	r0, r4
 80028d6:	f7fe f8fb 	bl	8000ad0 <__aeabi_fsub>
 80028da:	4603      	mov	r3, r0
 80028dc:	461c      	mov	r4, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe f8f6 	bl	8000ad4 <__addsf3>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	4610      	mov	r0, r2
 80028f2:	f7fe f9f7 	bl	8000ce4 <__aeabi_fmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461d      	mov	r5, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4619      	mov	r1, r3
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe f8e8 	bl	8000ad4 <__addsf3>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f7fe f9e9 	bl	8000ce4 <__aeabi_fmul>
 8002912:	4603      	mov	r3, r0
 8002914:	4619      	mov	r1, r3
 8002916:	4628      	mov	r0, r5
 8002918:	f7fe f8dc 	bl	8000ad4 <__addsf3>
 800291c:	4603      	mov	r3, r0
 800291e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f8d4 	bl	8000ad0 <__aeabi_fsub>
 8002928:	4603      	mov	r3, r0
 800292a:	4619      	mov	r1, r3
 800292c:	4620      	mov	r0, r4
 800292e:	f005 fee9 	bl	8008704 <atan2f>
 8002932:	4602      	mov	r2, r0
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	601a      	str	r2, [r3, #0]
    *pitch = -asinf(2*q.q2*q.q4 + 2*q.q1*q.q3);                                  // equatino (8)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4619      	mov	r1, r3
 800293c:	4618      	mov	r0, r3
 800293e:	f7fe f8c9 	bl	8000ad4 <__addsf3>
 8002942:	4603      	mov	r3, r0
 8002944:	461a      	mov	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4619      	mov	r1, r3
 800294a:	4610      	mov	r0, r2
 800294c:	f7fe f9ca 	bl	8000ce4 <__aeabi_fmul>
 8002950:	4603      	mov	r3, r0
 8002952:	461c      	mov	r4, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f8bb 	bl	8000ad4 <__addsf3>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f7fe f9bc 	bl	8000ce4 <__aeabi_fmul>
 800296c:	4603      	mov	r3, r0
 800296e:	4619      	mov	r1, r3
 8002970:	4620      	mov	r0, r4
 8002972:	f7fe f8af 	bl	8000ad4 <__addsf3>
 8002976:	4603      	mov	r3, r0
 8002978:	4618      	mov	r0, r3
 800297a:	f005 fea3 	bl	80086c4 <asinf>
 800297e:	4603      	mov	r3, r0
 8002980:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	601a      	str	r2, [r3, #0]
    *roll  = atan2f((2*q.q3*q.q4 - 2*q.q1*q.q2), (2*q.q1*q.q1 + 2*q.q4*q.q4 -1));
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	4619      	mov	r1, r3
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe f8a1 	bl	8000ad4 <__addsf3>
 8002992:	4603      	mov	r3, r0
 8002994:	461a      	mov	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f7fe f9a2 	bl	8000ce4 <__aeabi_fmul>
 80029a0:	4603      	mov	r3, r0
 80029a2:	461c      	mov	r4, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	4619      	mov	r1, r3
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe f893 	bl	8000ad4 <__addsf3>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4619      	mov	r1, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f7fe f994 	bl	8000ce4 <__aeabi_fmul>
 80029bc:	4603      	mov	r3, r0
 80029be:	4619      	mov	r1, r3
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7fe f885 	bl	8000ad0 <__aeabi_fsub>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461c      	mov	r4, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe f880 	bl	8000ad4 <__addsf3>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f7fe f981 	bl	8000ce4 <__aeabi_fmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	461d      	mov	r5, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4619      	mov	r1, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f872 	bl	8000ad4 <__addsf3>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f7fe f973 	bl	8000ce4 <__aeabi_fmul>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4619      	mov	r1, r3
 8002a02:	4628      	mov	r0, r5
 8002a04:	f7fe f866 	bl	8000ad4 <__addsf3>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f85e 	bl	8000ad0 <__aeabi_fsub>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4619      	mov	r1, r3
 8002a18:	4620      	mov	r0, r4
 8002a1a:	f005 fe73 	bl	8008704 <atan2f>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	601a      	str	r2, [r3, #0]
    *yaw *= (180.0f / PI);
 8002a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	490f      	ldr	r1, [pc, #60]	; (8002a68 <eulerAngles+0x1d8>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe f95a 	bl	8000ce4 <__aeabi_fmul>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	601a      	str	r2, [r3, #0]
    *pitch *= (180.0f / PI);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	490a      	ldr	r1, [pc, #40]	; (8002a68 <eulerAngles+0x1d8>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe f950 	bl	8000ce4 <__aeabi_fmul>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	601a      	str	r2, [r3, #0]
    *roll *= (180.0f / PI);
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4905      	ldr	r1, [pc, #20]	; (8002a68 <eulerAngles+0x1d8>)
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe f946 	bl	8000ce4 <__aeabi_fmul>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	601a      	str	r2, [r3, #0]

}
 8002a60:	bf00      	nop
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bdb0      	pop	{r4, r5, r7, pc}
 8002a68:	42652ee0 	.word	0x42652ee0

08002a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a72:	f000 fb23 	bl	80030bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a76:	f000 f8ad 	bl	8002bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a7a:	f7ff fa8d 	bl	8001f98 <MX_GPIO_Init>
  MX_CAN_Init();
 8002a7e:	f7ff f923 	bl	8001cc8 <MX_CAN_Init>
  MX_SPI1_Init();
 8002a82:	f000 f901 	bl	8002c88 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a86:	f000 f935 	bl	8002cf4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 5; ++i) {
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	e002      	b.n	8002a96 <main+0x2a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3301      	adds	r3, #1
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	ddf9      	ble.n	8002a90 <main+0x24>
//	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	//HAL_Delay(500);
  }
  MPU9250_calibrate();
 8002a9c:	f7fe fd88 	bl	80015b0 <MPU9250_calibrate>
  HAL_Delay(2000);
 8002aa0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002aa4:	f000 fb3c 	bl	8003120 <HAL_Delay>
  MPU9250_Init();
 8002aa8:	f7fe fd02 	bl	80014b0 <MPU9250_Init>
  HAL_Delay(500);
 8002aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ab0:	f000 fb36 	bl	8003120 <HAL_Delay>

  TxHeaderRoll.StdId = headerIdRoll;
 8002ab4:	2211      	movs	r2, #17
 8002ab6:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <main+0x14c>)
 8002ab8:	601a      	str	r2, [r3, #0]
  TxHeaderRoll.ExtId = 0;
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <main+0x14c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
  TxHeaderRoll.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002ac0:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <main+0x14c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  TxHeaderRoll.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002ac6:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <main+0x14c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  TxHeaderRoll.DLC = 8;
 8002acc:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <main+0x14c>)
 8002ace:	2208      	movs	r2, #8
 8002ad0:	611a      	str	r2, [r3, #16]
  TxHeaderRoll.TransmitGlobalTime = 0;
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <main+0x14c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	751a      	strb	r2, [r3, #20]

  TxHeaderPitch.StdId = headerIdPitch;
 8002ad8:	2212      	movs	r2, #18
 8002ada:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <main+0x150>)
 8002adc:	601a      	str	r2, [r3, #0]
  TxHeaderPitch.ExtId = 0;
 8002ade:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <main+0x150>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	605a      	str	r2, [r3, #4]
  TxHeaderPitch.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002ae4:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <main+0x150>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  TxHeaderPitch.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002aea:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <main+0x150>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  TxHeaderPitch.DLC = 4;
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <main+0x150>)
 8002af2:	2204      	movs	r2, #4
 8002af4:	611a      	str	r2, [r3, #16]
  TxHeaderPitch.TransmitGlobalTime = 0;
 8002af6:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <main+0x150>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	751a      	strb	r2, [r3, #20]

  TxHeaderYaw.StdId = headerIdYaw;
 8002afc:	2213      	movs	r2, #19
 8002afe:	4b30      	ldr	r3, [pc, #192]	; (8002bc0 <main+0x154>)
 8002b00:	601a      	str	r2, [r3, #0]
  TxHeaderYaw.ExtId = 0;
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <main+0x154>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
  TxHeaderYaw.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <main+0x154>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  TxHeaderYaw.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <main+0x154>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  TxHeaderYaw.DLC = 4;
 8002b14:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <main+0x154>)
 8002b16:	2204      	movs	r2, #4
 8002b18:	611a      	str	r2, [r3, #16]
  TxHeaderYaw.TransmitGlobalTime = 0;
 8002b1a:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <main+0x154>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	751a      	strb	r2, [r3, #20]

  TxHeaderAccel.StdId = headerIdAccel;
 8002b20:	2214      	movs	r2, #20
 8002b22:	4b28      	ldr	r3, [pc, #160]	; (8002bc4 <main+0x158>)
 8002b24:	601a      	str	r2, [r3, #0]
  TxHeaderAccel.ExtId = 0;
 8002b26:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <main+0x158>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	605a      	str	r2, [r3, #4]
  TxHeaderAccel.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <main+0x158>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  TxHeaderAccel.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <main+0x158>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  TxHeaderAccel.DLC = 6;
 8002b38:	4b22      	ldr	r3, [pc, #136]	; (8002bc4 <main+0x158>)
 8002b3a:	2206      	movs	r2, #6
 8002b3c:	611a      	str	r2, [r3, #16]
  TxHeaderAccel.TransmitGlobalTime = 0;
 8002b3e:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <main+0x158>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	751a      	strb	r2, [r3, #20]

  TxHeaderGyro.StdId = headerIdGyro;
 8002b44:	2215      	movs	r2, #21
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <main+0x15c>)
 8002b48:	601a      	str	r2, [r3, #0]
  TxHeaderGyro.ExtId = 0;
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <main+0x15c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
  TxHeaderGyro.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002b50:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <main+0x15c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  TxHeaderGyro.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002b56:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <main+0x15c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  TxHeaderGyro.DLC = 6;
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <main+0x15c>)
 8002b5e:	2206      	movs	r2, #6
 8002b60:	611a      	str	r2, [r3, #16]
  TxHeaderGyro.TransmitGlobalTime = 0;
 8002b62:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <main+0x15c>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	751a      	strb	r2, [r3, #20]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <main+0x160>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <main+0x160>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <main+0x160>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <main+0x160>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <main+0x160>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <main+0x160>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <main+0x160>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8002b92:	490e      	ldr	r1, [pc, #56]	; (8002bcc <main+0x160>)
 8002b94:	480e      	ldr	r0, [pc, #56]	; (8002bd0 <main+0x164>)
 8002b96:	f000 fbe2 	bl	800335e <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 8002b9a:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <main+0x164>)
 8002b9c:	f000 fca8 	bl	80034f0 <HAL_CAN_Start>
  HAL_Delay(500);
 8002ba0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ba4:	f000 fabc 	bl	8003120 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002ba8:	f002 ffe8 	bl	8005b7c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002bac:	f7ff f91e 	bl	8001dec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002bb0:	f003 f816 	bl	8005be0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002bb4:	e7fe      	b.n	8002bb4 <main+0x148>
 8002bb6:	bf00      	nop
 8002bb8:	200001b0 	.word	0x200001b0
 8002bbc:	200001c8 	.word	0x200001c8
 8002bc0:	200001e0 	.word	0x200001e0
 8002bc4:	200001f8 	.word	0x200001f8
 8002bc8:	20000210 	.word	0x20000210
 8002bcc:	20000188 	.word	0x20000188
 8002bd0:	200000e0 	.word	0x200000e0

08002bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b090      	sub	sp, #64	; 0x40
 8002bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bda:	f107 0318 	add.w	r3, r7, #24
 8002bde:	2228      	movs	r2, #40	; 0x28
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f006 f9aa 	bl	8008f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	605a      	str	r2, [r3, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	60da      	str	r2, [r3, #12]
 8002bf4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c02:	2302      	movs	r3, #2
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002c06:	2300      	movs	r3, #0
 8002c08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002c0a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c10:	f107 0318 	add.w	r3, r7, #24
 8002c14:	4618      	mov	r0, r3
 8002c16:	f001 fac1 	bl	800419c <HAL_RCC_OscConfig>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002c20:	f000 f82c 	bl	8002c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c24:	230f      	movs	r3, #15
 8002c26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 fd2e 	bl	80046a0 <HAL_RCC_ClockConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002c4a:	f000 f817 	bl	8002c7c <Error_Handler>
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3740      	adds	r7, #64	; 0x40
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d101      	bne.n	8002c6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c6a:	f000 fa3d 	bl	80030e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40000800 	.word	0x40000800

08002c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <Error_Handler+0x8>
	...

08002c88 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <MX_SPI1_Init+0x64>)
 8002c8e:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <MX_SPI1_Init+0x68>)
 8002c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <MX_SPI1_Init+0x64>)
 8002c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c9a:	4b14      	ldr	r3, [pc, #80]	; (8002cec <MX_SPI1_Init+0x64>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <MX_SPI1_Init+0x64>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca6:	4b11      	ldr	r3, [pc, #68]	; (8002cec <MX_SPI1_Init+0x64>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <MX_SPI1_Init+0x64>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <MX_SPI1_Init+0x64>)
 8002cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <MX_SPI1_Init+0x64>)
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <MX_SPI1_Init+0x64>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <MX_SPI1_Init+0x64>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <MX_SPI1_Init+0x64>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <MX_SPI1_Init+0x64>)
 8002cd4:	220a      	movs	r2, #10
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cd8:	4804      	ldr	r0, [pc, #16]	; (8002cec <MX_SPI1_Init+0x64>)
 8002cda:	f001 fe95 	bl	8004a08 <HAL_SPI_Init>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ce4:	f7ff ffca 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	2000022c 	.word	0x2000022c
 8002cf0:	40013000 	.word	0x40013000

08002cf4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002cfa:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <MX_SPI2_Init+0x68>)
 8002cfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d28:	2208      	movs	r2, #8
 8002d2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d40:	220a      	movs	r2, #10
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d44:	4804      	ldr	r0, [pc, #16]	; (8002d58 <MX_SPI2_Init+0x64>)
 8002d46:	f001 fe5f 	bl	8004a08 <HAL_SPI_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d50:	f7ff ff94 	bl	8002c7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000284 	.word	0x20000284
 8002d5c:	40003800 	.word	0x40003800

08002d60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0318 	add.w	r3, r7, #24
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3b      	ldr	r2, [pc, #236]	; (8002e68 <HAL_SPI_MspInit+0x108>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d130      	bne.n	8002de2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d80:	4b3a      	ldr	r3, [pc, #232]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a39      	ldr	r2, [pc, #228]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002d86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	4b34      	ldr	r3, [pc, #208]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4a33      	ldr	r2, [pc, #204]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	6193      	str	r3, [r2, #24]
 8002da4:	4b31      	ldr	r3, [pc, #196]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002db0:	23a0      	movs	r3, #160	; 0xa0
 8002db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002db8:	2303      	movs	r3, #3
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbc:	f107 0318 	add.w	r3, r7, #24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	482b      	ldr	r0, [pc, #172]	; (8002e70 <HAL_SPI_MspInit+0x110>)
 8002dc4:	f001 f834 	bl	8003e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dc8:	2340      	movs	r3, #64	; 0x40
 8002dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd4:	f107 0318 	add.w	r3, r7, #24
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4825      	ldr	r0, [pc, #148]	; (8002e70 <HAL_SPI_MspInit+0x110>)
 8002ddc:	f001 f828 	bl	8003e30 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002de0:	e03e      	b.n	8002e60 <HAL_SPI_MspInit+0x100>
  else if(spiHandle->Instance==SPI2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <HAL_SPI_MspInit+0x114>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d139      	bne.n	8002e60 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df6:	61d3      	str	r3, [r2, #28]
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a18      	ldr	r2, [pc, #96]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002e0a:	f043 0308 	orr.w	r3, r3, #8
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_SPI_MspInit+0x10c>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002e1c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e26:	2303      	movs	r3, #3
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	f107 0318 	add.w	r3, r7, #24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4811      	ldr	r0, [pc, #68]	; (8002e78 <HAL_SPI_MspInit+0x118>)
 8002e32:	f000 fffd 	bl	8003e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e44:	f107 0318 	add.w	r3, r7, #24
 8002e48:	4619      	mov	r1, r3
 8002e4a:	480b      	ldr	r0, [pc, #44]	; (8002e78 <HAL_SPI_MspInit+0x118>)
 8002e4c:	f000 fff0 	bl	8003e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	2105      	movs	r1, #5
 8002e54:	2024      	movs	r0, #36	; 0x24
 8002e56:	f000 ff4a 	bl	8003cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002e5a:	2024      	movs	r0, #36	; 0x24
 8002e5c:	f000 ff63 	bl	8003d26 <HAL_NVIC_EnableIRQ>
}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40013000 	.word	0x40013000
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40010800 	.word	0x40010800
 8002e74:	40003800 	.word	0x40003800
 8002e78:	40010c00 	.word	0x40010c00

08002e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_MspInit+0x68>)
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_MspInit+0x68>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6193      	str	r3, [r2, #24]
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_MspInit+0x68>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_MspInit+0x68>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_MspInit+0x68>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	61d3      	str	r3, [r2, #28]
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_MspInit+0x68>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	210f      	movs	r1, #15
 8002eb6:	f06f 0001 	mvn.w	r0, #1
 8002eba:	f000 ff18 	bl	8003cee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_MspInit+0x6c>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <HAL_MspInit+0x6c>)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40010000 	.word	0x40010000

08002eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	4a33      	ldr	r2, [pc, #204]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	61d3      	str	r3, [r2, #28]
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_InitTick+0xe8>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f1a:	f107 0210 	add.w	r2, r7, #16
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 fd21 	bl	800496c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f34:	f001 fd06 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8002f38:	6378      	str	r0, [r7, #52]	; 0x34
 8002f3a:	e004      	b.n	8002f46 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f3c:	f001 fd02 	bl	8004944 <HAL_RCC_GetPCLK1Freq>
 8002f40:	4603      	mov	r3, r0
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_InitTick+0xec>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9b      	lsrs	r3, r3, #18
 8002f50:	3b01      	subs	r3, #1
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002f54:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <HAL_InitTick+0xf0>)
 8002f56:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_InitTick+0xf4>)
 8002f58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_InitTick+0xf0>)
 8002f5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f60:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002f62:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <HAL_InitTick+0xf0>)
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002f68:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <HAL_InitTick+0xf0>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_InitTick+0xf0>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_InitTick+0xf0>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002f7a:	4818      	ldr	r0, [pc, #96]	; (8002fdc <HAL_InitTick+0xf0>)
 8002f7c:	f002 fbb4 	bl	80056e8 <HAL_TIM_Base_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002f8e:	4813      	ldr	r0, [pc, #76]	; (8002fdc <HAL_InitTick+0xf0>)
 8002f90:	f002 fc02 	bl	8005798 <HAL_TIM_Base_Start_IT>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d111      	bne.n	8002fc6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fa2:	201e      	movs	r0, #30
 8002fa4:	f000 febf 	bl	8003d26 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b0f      	cmp	r3, #15
 8002fac:	d808      	bhi.n	8002fc0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	201e      	movs	r0, #30
 8002fb4:	f000 fe9b 	bl	8003cee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <HAL_InitTick+0xf8>)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e002      	b.n	8002fc6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3738      	adds	r7, #56	; 0x38
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	431bde83 	.word	0x431bde83
 8002fdc:	200002dc 	.word	0x200002dc
 8002fe0:	40000800 	.word	0x40000800
 8002fe4:	20000018 	.word	0x20000018

08002fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fec:	e7fe      	b.n	8002fec <NMI_Handler+0x4>

08002fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff2:	e7fe      	b.n	8002ff2 <HardFault_Handler+0x4>

08002ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff8:	e7fe      	b.n	8002ff8 <MemManage_Handler+0x4>

08002ffa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffe:	e7fe      	b.n	8002ffe <BusFault_Handler+0x4>

08003000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003004:	e7fe      	b.n	8003004 <UsageFault_Handler+0x4>

08003006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
	...

08003014 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800301a:	f000 fb87 	bl	800372c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200000e0 	.word	0x200000e0

08003028 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800302e:	f000 fb7d 	bl	800372c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200000e0 	.word	0x200000e0

0800303c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <TIM4_IRQHandler+0x10>)
 8003042:	f002 fbfb 	bl	800583c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200002dc 	.word	0x200002dc

08003050 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <SPI2_IRQHandler+0x10>)
 8003056:	f002 f94b 	bl	80052f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000284 	.word	0x20000284

08003064 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003070:	480c      	ldr	r0, [pc, #48]	; (80030a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003072:	490d      	ldr	r1, [pc, #52]	; (80030a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003074:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003078:	e002      	b.n	8003080 <LoopCopyDataInit>

0800307a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800307a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800307c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307e:	3304      	adds	r3, #4

08003080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003084:	d3f9      	bcc.n	800307a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003086:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003088:	4c0a      	ldr	r4, [pc, #40]	; (80030b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800308c:	e001      	b.n	8003092 <LoopFillZerobss>

0800308e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003090:	3204      	adds	r2, #4

08003092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003094:	d3fb      	bcc.n	800308e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003096:	f7ff ffe5 	bl	8003064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800309a:	f005 ff1b 	bl	8008ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800309e:	f7ff fce5 	bl	8002a6c <main>
  bx lr
 80030a2:	4770      	bx	lr
  ldr r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80030ac:	08009220 	.word	0x08009220
  ldr r2, =_sbss
 80030b0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80030b4:	20001d38 	.word	0x20001d38

080030b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030b8:	e7fe      	b.n	80030b8 <ADC1_2_IRQHandler>
	...

080030bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_Init+0x28>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_Init+0x28>)
 80030c6:	f043 0310 	orr.w	r3, r3, #16
 80030ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f000 fe03 	bl	8003cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d2:	200f      	movs	r0, #15
 80030d4:	f7ff ff0a 	bl	8002eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d8:	f7ff fed0 	bl	8002e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40022000 	.word	0x40022000

080030e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_IncTick+0x1c>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_IncTick+0x20>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4413      	add	r3, r2
 80030f8:	4a03      	ldr	r2, [pc, #12]	; (8003108 <HAL_IncTick+0x20>)
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	2000001c 	.word	0x2000001c
 8003108:	20000324 	.word	0x20000324

0800310c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return uwTick;
 8003110:	4b02      	ldr	r3, [pc, #8]	; (800311c <HAL_GetTick+0x10>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr
 800311c:	20000324 	.word	0x20000324

08003120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff fff0 	bl	800310c <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d005      	beq.n	8003146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_Delay+0x44>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003146:	bf00      	nop
 8003148:	f7ff ffe0 	bl	800310c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	429a      	cmp	r2, r3
 8003156:	d8f7      	bhi.n	8003148 <HAL_Delay+0x28>
  {
  }
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	2000001c 	.word	0x2000001c

08003168 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0ed      	b.n	8003356 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe fdd4 	bl	8001d34 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
  //CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);

  /* Get tick */
  tickstart = HAL_GetTick();
 800319c:	f7ff ffb6 	bl	800310c <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031a2:	e012      	b.n	80031ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a4:	f7ff ffb2 	bl	800310c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b0a      	cmp	r3, #10
 80031b0:	d90b      	bls.n	80031ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e0c5      	b.n	8003356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0e5      	beq.n	80031a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0202 	bic.w	r2, r2, #2
 80031e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e8:	f7ff ff90 	bl	800310c <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ee:	e012      	b.n	8003216 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031f0:	f7ff ff8c 	bl	800310c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b0a      	cmp	r3, #10
 80031fc:	d90b      	bls.n	8003216 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2205      	movs	r2, #5
 800320e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e09f      	b.n	8003356 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1e5      	bne.n	80031f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	7e1b      	ldrb	r3, [r3, #24]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d108      	bne.n	800323e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	e007      	b.n	800324e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800324c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7e5b      	ldrb	r3, [r3, #25]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d108      	bne.n	8003268 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e007      	b.n	8003278 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003276:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	7e9b      	ldrb	r3, [r3, #26]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d108      	bne.n	8003292 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0220 	orr.w	r2, r2, #32
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e007      	b.n	80032a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0220 	bic.w	r2, r2, #32
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	7edb      	ldrb	r3, [r3, #27]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d108      	bne.n	80032bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0210 	bic.w	r2, r2, #16
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0210 	orr.w	r2, r2, #16
 80032ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	7f1b      	ldrb	r3, [r3, #28]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0208 	orr.w	r2, r2, #8
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	e007      	b.n	80032f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0208 	bic.w	r2, r2, #8
 80032f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7f5b      	ldrb	r3, [r3, #29]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d108      	bne.n	8003310 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0204 	orr.w	r2, r2, #4
 800330c:	601a      	str	r2, [r3, #0]
 800330e:	e007      	b.n	8003320 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0204 	bic.w	r2, r2, #4
 800331e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	ea42 0103 	orr.w	r1, r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	1e5a      	subs	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800335e:	b480      	push	{r7}
 8003360:	b087      	sub	sp, #28
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003374:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d003      	beq.n	8003384 <HAL_CAN_ConfigFilter+0x26>
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	2b02      	cmp	r3, #2
 8003380:	f040 80aa 	bne.w	80034d8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2201      	movs	r2, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	401a      	ands	r2, r3
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d123      	bne.n	8003406 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	401a      	ands	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3248      	adds	r2, #72	; 0x48
 80033e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033fc:	6979      	ldr	r1, [r7, #20]
 80033fe:	3348      	adds	r3, #72	; 0x48
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	440b      	add	r3, r1
 8003404:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d122      	bne.n	8003454 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	431a      	orrs	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800342e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	3248      	adds	r2, #72	; 0x48
 8003434:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003448:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800344a:	6979      	ldr	r1, [r7, #20]
 800344c:	3348      	adds	r3, #72	; 0x48
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43db      	mvns	r3, r3
 8003466:	401a      	ands	r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800346e:	e007      	b.n	8003480 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	431a      	orrs	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800349a:	e007      	b.n	80034ac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d107      	bne.n	80034c4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	431a      	orrs	r2, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e006      	b.n	80034e6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d12e      	bne.n	8003562 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800351c:	f7ff fdf6 	bl	800310c <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003522:	e012      	b.n	800354a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003524:	f7ff fdf2 	bl	800310c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b0a      	cmp	r3, #10
 8003530:	d90b      	bls.n	800354a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2205      	movs	r2, #5
 8003542:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e012      	b.n	8003570 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e5      	bne.n	8003524 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e006      	b.n	8003570 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003578:	b480      	push	{r7}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800358c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003596:	7ffb      	ldrb	r3, [r7, #31]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d003      	beq.n	80035a4 <HAL_CAN_AddTxMessage+0x2c>
 800359c:	7ffb      	ldrb	r3, [r7, #31]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	f040 80b8 	bne.w	8003714 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d105      	bne.n	80035c4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 80a0 	beq.w	8003704 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	0e1b      	lsrs	r3, r3, #24
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d907      	bls.n	80035e4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e09e      	b.n	8003722 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035e4:	2201      	movs	r2, #1
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	409a      	lsls	r2, r3
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003600:	68f9      	ldr	r1, [r7, #12]
 8003602:	6809      	ldr	r1, [r1, #0]
 8003604:	431a      	orrs	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3318      	adds	r3, #24
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	440b      	add	r3, r1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e00f      	b.n	8003632 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800361c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003622:	68f9      	ldr	r1, [r7, #12]
 8003624:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003626:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3318      	adds	r3, #24
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	440b      	add	r3, r1
 8003630:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3318      	adds	r3, #24
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	440b      	add	r3, r1
 8003642:	3304      	adds	r3, #4
 8003644:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	7d1b      	ldrb	r3, [r3, #20]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d111      	bne.n	8003672 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	3318      	adds	r3, #24
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	6811      	ldr	r1, [r2, #0]
 8003662:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	3318      	adds	r3, #24
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	440b      	add	r3, r1
 800366e:	3304      	adds	r3, #4
 8003670:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3307      	adds	r3, #7
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	061a      	lsls	r2, r3, #24
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3306      	adds	r3, #6
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3305      	adds	r3, #5
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	4313      	orrs	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	3204      	adds	r2, #4
 8003692:	7812      	ldrb	r2, [r2, #0]
 8003694:	4610      	mov	r0, r2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	6811      	ldr	r1, [r2, #0]
 800369a:	ea43 0200 	orr.w	r2, r3, r0
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	440b      	add	r3, r1
 80036a4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80036a8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3303      	adds	r3, #3
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	061a      	lsls	r2, r3, #24
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3302      	adds	r3, #2
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3301      	adds	r3, #1
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	4313      	orrs	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	7812      	ldrb	r2, [r2, #0]
 80036ca:	4610      	mov	r0, r2
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	6811      	ldr	r1, [r2, #0]
 80036d0:	ea43 0200 	orr.w	r2, r3, r0
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	440b      	add	r3, r1
 80036da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80036de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	3318      	adds	r3, #24
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	4413      	add	r3, r2
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	6811      	ldr	r1, [r2, #0]
 80036f2:	f043 0201 	orr.w	r2, r3, #1
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3318      	adds	r3, #24
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	440b      	add	r3, r1
 80036fe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e00e      	b.n	8003722 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e006      	b.n	8003722 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
  }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d07c      	beq.n	800386c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d023      	beq.n	80037c4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2201      	movs	r2, #1
 8003782:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f983 	bl	8003a9a <HAL_CAN_TxMailbox0CompleteCallback>
 8003794:	e016      	b.n	80037c4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d004      	beq.n	80037aa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
 80037a8:	e00c      	b.n	80037c4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
 80037bc:	e002      	b.n	80037c4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f986 	bl	8003ad0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d024      	beq.n	8003818 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f962 	bl	8003aac <HAL_CAN_TxMailbox1CompleteCallback>
 80037e8:	e016      	b.n	8003818 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
 80037fc:	e00c      	b.n	8003818 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003804:	2b00      	cmp	r3, #0
 8003806:	d004      	beq.n	8003812 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	e002      	b.n	8003818 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f965 	bl	8003ae2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d024      	beq.n	800386c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800382a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f941 	bl	8003abe <HAL_CAN_TxMailbox2CompleteCallback>
 800383c:	e016      	b.n	800386c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
 8003850:	e00c      	b.n	800386c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
 8003864:	e002      	b.n	800386c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f944 	bl	8003af4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003886:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2210      	movs	r2, #16
 800388e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d006      	beq.n	80038b2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2208      	movs	r2, #8
 80038aa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f933 	bl	8003b18 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f91b 	bl	8003b06 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2210      	movs	r2, #16
 80038f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00b      	beq.n	8003916 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2208      	movs	r2, #8
 800390e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f913 	bl	8003b3c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8fb 	bl	8003b2a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	d006      	beq.n	8003956 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2210      	movs	r2, #16
 800394e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8fc 	bl	8003b4e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2208      	movs	r2, #8
 8003970:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f8f4 	bl	8003b60 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d07b      	beq.n	8003a7a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d072      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	f043 0304 	orr.w	r3, r3, #4
 80039de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d043      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d03e      	beq.n	8003a72 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039fa:	2b60      	cmp	r3, #96	; 0x60
 80039fc:	d02b      	beq.n	8003a56 <HAL_CAN_IRQHandler+0x32a>
 80039fe:	2b60      	cmp	r3, #96	; 0x60
 8003a00:	d82e      	bhi.n	8003a60 <HAL_CAN_IRQHandler+0x334>
 8003a02:	2b50      	cmp	r3, #80	; 0x50
 8003a04:	d022      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x320>
 8003a06:	2b50      	cmp	r3, #80	; 0x50
 8003a08:	d82a      	bhi.n	8003a60 <HAL_CAN_IRQHandler+0x334>
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d019      	beq.n	8003a42 <HAL_CAN_IRQHandler+0x316>
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d826      	bhi.n	8003a60 <HAL_CAN_IRQHandler+0x334>
 8003a12:	2b30      	cmp	r3, #48	; 0x30
 8003a14:	d010      	beq.n	8003a38 <HAL_CAN_IRQHandler+0x30c>
 8003a16:	2b30      	cmp	r3, #48	; 0x30
 8003a18:	d822      	bhi.n	8003a60 <HAL_CAN_IRQHandler+0x334>
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d002      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x2f8>
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d005      	beq.n	8003a2e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a22:	e01d      	b.n	8003a60 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f043 0308 	orr.w	r3, r3, #8
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a2c:	e019      	b.n	8003a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	f043 0310 	orr.w	r3, r3, #16
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a36:	e014      	b.n	8003a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	f043 0320 	orr.w	r3, r3, #32
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a40:	e00f      	b.n	8003a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a4a:	e00a      	b.n	8003a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a54:	e005      	b.n	8003a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a5e:	e000      	b.n	8003a62 <HAL_CAN_IRQHandler+0x336>
            break;
 8003a60:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a70:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2204      	movs	r2, #4
 8003a78:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f870 	bl	8003b72 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a92:	bf00      	nop
 8003a94:	3728      	adds	r7, #40	; 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr

08003b72 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr

08003b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb6:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	60d3      	str	r3, [r2, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	f003 0307 	and.w	r3, r3, #7
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bc80      	pop	{r7}
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db0b      	blt.n	8003c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	4906      	ldr	r1, [pc, #24]	; (8003c1c <__NVIC_EnableIRQ+0x34>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2001      	movs	r0, #1
 8003c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	e000e100 	.word	0xe000e100

08003c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	6039      	str	r1, [r7, #0]
 8003c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	db0a      	blt.n	8003c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	490c      	ldr	r1, [pc, #48]	; (8003c6c <__NVIC_SetPriority+0x4c>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	0112      	lsls	r2, r2, #4
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	440b      	add	r3, r1
 8003c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c48:	e00a      	b.n	8003c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <__NVIC_SetPriority+0x50>)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	3b04      	subs	r3, #4
 8003c58:	0112      	lsls	r2, r2, #4
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	761a      	strb	r2, [r3, #24]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	e000e100 	.word	0xe000e100
 8003c70:	e000ed00 	.word	0xe000ed00

08003c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f1c3 0307 	rsb	r3, r3, #7
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	bf28      	it	cs
 8003c92:	2304      	movcs	r3, #4
 8003c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d902      	bls.n	8003ca4 <NVIC_EncodePriority+0x30>
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	3b03      	subs	r3, #3
 8003ca2:	e000      	b.n	8003ca6 <NVIC_EncodePriority+0x32>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	43d9      	mvns	r1, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	4313      	orrs	r3, r2
         );
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3724      	adds	r7, #36	; 0x24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff4f 	bl	8003b84 <__NVIC_SetPriorityGrouping>
}
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b086      	sub	sp, #24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d00:	f7ff ff64 	bl	8003bcc <__NVIC_GetPriorityGrouping>
 8003d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	6978      	ldr	r0, [r7, #20]
 8003d0c:	f7ff ffb2 	bl	8003c74 <NVIC_EncodePriority>
 8003d10:	4602      	mov	r2, r0
 8003d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff81 	bl	8003c20 <__NVIC_SetPriority>
}
 8003d1e:	bf00      	nop
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ff57 	bl	8003be8 <__NVIC_EnableIRQ>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d005      	beq.n	8003d66 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
 8003d64:	e051      	b.n	8003e0a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 020e 	bic.w	r2, r2, #14
 8003d74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a22      	ldr	r2, [pc, #136]	; (8003e14 <HAL_DMA_Abort_IT+0xd0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d029      	beq.n	8003de4 <HAL_DMA_Abort_IT+0xa0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a20      	ldr	r2, [pc, #128]	; (8003e18 <HAL_DMA_Abort_IT+0xd4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d022      	beq.n	8003de0 <HAL_DMA_Abort_IT+0x9c>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1f      	ldr	r2, [pc, #124]	; (8003e1c <HAL_DMA_Abort_IT+0xd8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d01a      	beq.n	8003dda <HAL_DMA_Abort_IT+0x96>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <HAL_DMA_Abort_IT+0xdc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d012      	beq.n	8003dd4 <HAL_DMA_Abort_IT+0x90>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <HAL_DMA_Abort_IT+0xe0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00a      	beq.n	8003dce <HAL_DMA_Abort_IT+0x8a>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1a      	ldr	r2, [pc, #104]	; (8003e28 <HAL_DMA_Abort_IT+0xe4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d102      	bne.n	8003dc8 <HAL_DMA_Abort_IT+0x84>
 8003dc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003dc6:	e00e      	b.n	8003de6 <HAL_DMA_Abort_IT+0xa2>
 8003dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dcc:	e00b      	b.n	8003de6 <HAL_DMA_Abort_IT+0xa2>
 8003dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dd2:	e008      	b.n	8003de6 <HAL_DMA_Abort_IT+0xa2>
 8003dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dd8:	e005      	b.n	8003de6 <HAL_DMA_Abort_IT+0xa2>
 8003dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dde:	e002      	b.n	8003de6 <HAL_DMA_Abort_IT+0xa2>
 8003de0:	2310      	movs	r3, #16
 8003de2:	e000      	b.n	8003de6 <HAL_DMA_Abort_IT+0xa2>
 8003de4:	2301      	movs	r3, #1
 8003de6:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HAL_DMA_Abort_IT+0xe8>)
 8003de8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	4798      	blx	r3
    } 
  }
  return status;
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40020008 	.word	0x40020008
 8003e18:	4002001c 	.word	0x4002001c
 8003e1c:	40020030 	.word	0x40020030
 8003e20:	40020044 	.word	0x40020044
 8003e24:	40020058 	.word	0x40020058
 8003e28:	4002006c 	.word	0x4002006c
 8003e2c:	40020000 	.word	0x40020000

08003e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b08b      	sub	sp, #44	; 0x2c
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e42:	e169      	b.n	8004118 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e44:	2201      	movs	r2, #1
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	f040 8158 	bne.w	8004112 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	4a9a      	ldr	r2, [pc, #616]	; (80040d0 <HAL_GPIO_Init+0x2a0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d05e      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e6c:	4a98      	ldr	r2, [pc, #608]	; (80040d0 <HAL_GPIO_Init+0x2a0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d875      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003e72:	4a98      	ldr	r2, [pc, #608]	; (80040d4 <HAL_GPIO_Init+0x2a4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d058      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e78:	4a96      	ldr	r2, [pc, #600]	; (80040d4 <HAL_GPIO_Init+0x2a4>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d86f      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003e7e:	4a96      	ldr	r2, [pc, #600]	; (80040d8 <HAL_GPIO_Init+0x2a8>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d052      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e84:	4a94      	ldr	r2, [pc, #592]	; (80040d8 <HAL_GPIO_Init+0x2a8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d869      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003e8a:	4a94      	ldr	r2, [pc, #592]	; (80040dc <HAL_GPIO_Init+0x2ac>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d04c      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e90:	4a92      	ldr	r2, [pc, #584]	; (80040dc <HAL_GPIO_Init+0x2ac>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d863      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003e96:	4a92      	ldr	r2, [pc, #584]	; (80040e0 <HAL_GPIO_Init+0x2b0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d046      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
 8003e9c:	4a90      	ldr	r2, [pc, #576]	; (80040e0 <HAL_GPIO_Init+0x2b0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d85d      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003ea2:	2b12      	cmp	r3, #18
 8003ea4:	d82a      	bhi.n	8003efc <HAL_GPIO_Init+0xcc>
 8003ea6:	2b12      	cmp	r3, #18
 8003ea8:	d859      	bhi.n	8003f5e <HAL_GPIO_Init+0x12e>
 8003eaa:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <HAL_GPIO_Init+0x80>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003f2b 	.word	0x08003f2b
 8003eb4:	08003f05 	.word	0x08003f05
 8003eb8:	08003f17 	.word	0x08003f17
 8003ebc:	08003f59 	.word	0x08003f59
 8003ec0:	08003f5f 	.word	0x08003f5f
 8003ec4:	08003f5f 	.word	0x08003f5f
 8003ec8:	08003f5f 	.word	0x08003f5f
 8003ecc:	08003f5f 	.word	0x08003f5f
 8003ed0:	08003f5f 	.word	0x08003f5f
 8003ed4:	08003f5f 	.word	0x08003f5f
 8003ed8:	08003f5f 	.word	0x08003f5f
 8003edc:	08003f5f 	.word	0x08003f5f
 8003ee0:	08003f5f 	.word	0x08003f5f
 8003ee4:	08003f5f 	.word	0x08003f5f
 8003ee8:	08003f5f 	.word	0x08003f5f
 8003eec:	08003f5f 	.word	0x08003f5f
 8003ef0:	08003f5f 	.word	0x08003f5f
 8003ef4:	08003f0d 	.word	0x08003f0d
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	4a79      	ldr	r2, [pc, #484]	; (80040e4 <HAL_GPIO_Init+0x2b4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d013      	beq.n	8003f2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f02:	e02c      	b.n	8003f5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	623b      	str	r3, [r7, #32]
          break;
 8003f0a:	e029      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	3304      	adds	r3, #4
 8003f12:	623b      	str	r3, [r7, #32]
          break;
 8003f14:	e024      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	623b      	str	r3, [r7, #32]
          break;
 8003f1e:	e01f      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	330c      	adds	r3, #12
 8003f26:	623b      	str	r3, [r7, #32]
          break;
 8003f28:	e01a      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f32:	2304      	movs	r3, #4
 8003f34:	623b      	str	r3, [r7, #32]
          break;
 8003f36:	e013      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f40:	2308      	movs	r3, #8
 8003f42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	611a      	str	r2, [r3, #16]
          break;
 8003f4a:	e009      	b.n	8003f60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	615a      	str	r2, [r3, #20]
          break;
 8003f56:	e003      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	623b      	str	r3, [r7, #32]
          break;
 8003f5c:	e000      	b.n	8003f60 <HAL_GPIO_Init+0x130>
          break;
 8003f5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2bff      	cmp	r3, #255	; 0xff
 8003f64:	d801      	bhi.n	8003f6a <HAL_GPIO_Init+0x13a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	e001      	b.n	8003f6e <HAL_GPIO_Init+0x13e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2bff      	cmp	r3, #255	; 0xff
 8003f74:	d802      	bhi.n	8003f7c <HAL_GPIO_Init+0x14c>
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	e002      	b.n	8003f82 <HAL_GPIO_Init+0x152>
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	3b08      	subs	r3, #8
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	210f      	movs	r1, #15
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	401a      	ands	r2, r3
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80b1 	beq.w	8004112 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fb0:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_GPIO_Init+0x2b8>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	4a4c      	ldr	r2, [pc, #304]	; (80040e8 <HAL_GPIO_Init+0x2b8>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6193      	str	r3, [r2, #24]
 8003fbc:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_GPIO_Init+0x2b8>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fc8:	4a48      	ldr	r2, [pc, #288]	; (80040ec <HAL_GPIO_Init+0x2bc>)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	3302      	adds	r3, #2
 8003fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	220f      	movs	r2, #15
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a40      	ldr	r2, [pc, #256]	; (80040f0 <HAL_GPIO_Init+0x2c0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d013      	beq.n	800401c <HAL_GPIO_Init+0x1ec>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a3f      	ldr	r2, [pc, #252]	; (80040f4 <HAL_GPIO_Init+0x2c4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00d      	beq.n	8004018 <HAL_GPIO_Init+0x1e8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a3e      	ldr	r2, [pc, #248]	; (80040f8 <HAL_GPIO_Init+0x2c8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <HAL_GPIO_Init+0x1e4>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a3d      	ldr	r2, [pc, #244]	; (80040fc <HAL_GPIO_Init+0x2cc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d101      	bne.n	8004010 <HAL_GPIO_Init+0x1e0>
 800400c:	2303      	movs	r3, #3
 800400e:	e006      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004010:	2304      	movs	r3, #4
 8004012:	e004      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004014:	2302      	movs	r3, #2
 8004016:	e002      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_GPIO_Init+0x1ee>
 800401c:	2300      	movs	r3, #0
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	f002 0203 	and.w	r2, r2, #3
 8004024:	0092      	lsls	r2, r2, #2
 8004026:	4093      	lsls	r3, r2
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800402e:	492f      	ldr	r1, [pc, #188]	; (80040ec <HAL_GPIO_Init+0x2bc>)
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d006      	beq.n	8004056 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004048:	4b2d      	ldr	r3, [pc, #180]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	492c      	ldr	r1, [pc, #176]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	600b      	str	r3, [r1, #0]
 8004054:	e006      	b.n	8004064 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004056:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	43db      	mvns	r3, r3
 800405e:	4928      	ldr	r1, [pc, #160]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 8004060:	4013      	ands	r3, r2
 8004062:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004070:	4b23      	ldr	r3, [pc, #140]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	4922      	ldr	r1, [pc, #136]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
 800407c:	e006      	b.n	800408c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	43db      	mvns	r3, r3
 8004086:	491e      	ldr	r1, [pc, #120]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 8004088:	4013      	ands	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d006      	beq.n	80040a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	4918      	ldr	r1, [pc, #96]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]
 80040a4:	e006      	b.n	80040b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	4914      	ldr	r1, [pc, #80]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d021      	beq.n	8004104 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	490e      	ldr	r1, [pc, #56]	; (8004100 <HAL_GPIO_Init+0x2d0>)
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60cb      	str	r3, [r1, #12]
 80040cc:	e021      	b.n	8004112 <HAL_GPIO_Init+0x2e2>
 80040ce:	bf00      	nop
 80040d0:	10320000 	.word	0x10320000
 80040d4:	10310000 	.word	0x10310000
 80040d8:	10220000 	.word	0x10220000
 80040dc:	10210000 	.word	0x10210000
 80040e0:	10120000 	.word	0x10120000
 80040e4:	10110000 	.word	0x10110000
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40010800 	.word	0x40010800
 80040f4:	40010c00 	.word	0x40010c00
 80040f8:	40011000 	.word	0x40011000
 80040fc:	40011400 	.word	0x40011400
 8004100:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <HAL_GPIO_Init+0x304>)
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	43db      	mvns	r3, r3
 800410c:	4909      	ldr	r1, [pc, #36]	; (8004134 <HAL_GPIO_Init+0x304>)
 800410e:	4013      	ands	r3, r2
 8004110:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	3301      	adds	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	f47f ae8e 	bne.w	8003e44 <HAL_GPIO_Init+0x14>
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	372c      	adds	r7, #44	; 0x2c
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr
 8004134:	40010400 	.word	0x40010400

08004138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
 8004144:	4613      	mov	r3, r2
 8004146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004154:	e003      	b.n	800415e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004156:	887b      	ldrh	r3, [r7, #2]
 8004158:	041a      	lsls	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	611a      	str	r2, [r3, #16]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	43d9      	mvns	r1, r3
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	400b      	ands	r3, r1
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	611a      	str	r2, [r3, #16]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
	...

0800419c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e272      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8087 	beq.w	80042ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041bc:	4b92      	ldr	r3, [pc, #584]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d00c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041c8:	4b8f      	ldr	r3, [pc, #572]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d112      	bne.n	80041fa <HAL_RCC_OscConfig+0x5e>
 80041d4:	4b8c      	ldr	r3, [pc, #560]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d10b      	bne.n	80041fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d06c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x12c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d168      	bne.n	80042c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e24c      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004202:	d106      	bne.n	8004212 <HAL_RCC_OscConfig+0x76>
 8004204:	4b80      	ldr	r3, [pc, #512]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7f      	ldr	r2, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e02e      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x98>
 800421a:	4b7b      	ldr	r3, [pc, #492]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7a      	ldr	r2, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b78      	ldr	r3, [pc, #480]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a77      	ldr	r2, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0xbc>
 800423e:	4b72      	ldr	r3, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a71      	ldr	r2, [pc, #452]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b6f      	ldr	r3, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6e      	ldr	r2, [pc, #440]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6a      	ldr	r2, [pc, #424]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a67      	ldr	r2, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fe ff48 	bl	800310c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7fe ff44 	bl	800310c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e200      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b5d      	ldr	r3, [pc, #372]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xe4>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fe ff34 	bl	800310c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fe ff30 	bl	800310c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1ec      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	4b53      	ldr	r3, [pc, #332]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x10c>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042d6:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042e2:	4b49      	ldr	r3, [pc, #292]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x18c>
 80042ee:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x176>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1c0      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4939      	ldr	r1, [pc, #228]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e03a      	b.n	800439e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fe fee9 	bl	800310c <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433e:	f7fe fee5 	bl	800310c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1a1      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4927      	ldr	r1, [pc, #156]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	e015      	b.n	800439e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fe fec8 	bl	800310c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004380:	f7fe fec4 	bl	800310c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e180      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d03a      	beq.n	8004420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d019      	beq.n	80043e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b8:	f7fe fea8 	bl	800310c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fe fea4 	bl	800310c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e160      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043de:	2001      	movs	r0, #1
 80043e0:	f000 faf4 	bl	80049cc <RCC_Delay>
 80043e4:	e01c      	b.n	8004420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ec:	f7fe fe8e 	bl	800310c <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f2:	e00f      	b.n	8004414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f4:	f7fe fe8a 	bl	800310c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d908      	bls.n	8004414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e146      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	42420000 	.word	0x42420000
 8004410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	4b92      	ldr	r3, [pc, #584]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e9      	bne.n	80043f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80a6 	beq.w	800457a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004432:	4b8b      	ldr	r3, [pc, #556]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4a87      	ldr	r2, [pc, #540]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	61d3      	str	r3, [r2, #28]
 800444a:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b82      	ldr	r3, [pc, #520]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b7f      	ldr	r3, [pc, #508]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a7e      	ldr	r2, [pc, #504]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f7fe fe4b 	bl	800310c <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fe fe47 	bl	800310c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b64      	cmp	r3, #100	; 0x64
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e103      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b75      	ldr	r3, [pc, #468]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x312>
 80044a0:	4b6f      	ldr	r3, [pc, #444]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4a6e      	ldr	r2, [pc, #440]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6213      	str	r3, [r2, #32]
 80044ac:	e02d      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x334>
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a69      	ldr	r2, [pc, #420]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a66      	ldr	r2, [pc, #408]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	6213      	str	r3, [r2, #32]
 80044ce:	e01c      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d10c      	bne.n	80044f2 <HAL_RCC_OscConfig+0x356>
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	4a60      	ldr	r2, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	6213      	str	r3, [r2, #32]
 80044e4:	4b5e      	ldr	r3, [pc, #376]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a5d      	ldr	r2, [pc, #372]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6213      	str	r3, [r2, #32]
 80044f0:	e00b      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044f2:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4a5a      	ldr	r2, [pc, #360]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6213      	str	r3, [r2, #32]
 80044fe:	4b58      	ldr	r3, [pc, #352]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a57      	ldr	r2, [pc, #348]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d015      	beq.n	800453e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004512:	f7fe fdfb 	bl	800310c <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	e00a      	b.n	8004530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fe fdf7 	bl	800310c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e0b1      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ee      	beq.n	800451a <HAL_RCC_OscConfig+0x37e>
 800453c:	e014      	b.n	8004568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453e:	f7fe fde5 	bl	800310c <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fe fde1 	bl	800310c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e09b      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455c:	4b40      	ldr	r3, [pc, #256]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ee      	bne.n	8004546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d105      	bne.n	800457a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456e:	4b3c      	ldr	r3, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4a3b      	ldr	r2, [pc, #236]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8087 	beq.w	8004692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b08      	cmp	r3, #8
 800458e:	d061      	beq.n	8004654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d146      	bne.n	8004626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004598:	4b33      	ldr	r3, [pc, #204]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fe fdb5 	bl	800310c <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fe fdb1 	bl	800310c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e06d      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b8:	4b29      	ldr	r3, [pc, #164]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d108      	bne.n	80045e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4921      	ldr	r1, [pc, #132]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a19      	ldr	r1, [r3, #32]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	430b      	orrs	r3, r1
 80045f2:	491b      	ldr	r1, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fe fd85 	bl	800310c <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004606:	f7fe fd81 	bl	800310c <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e03d      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x46a>
 8004624:	e035      	b.n	8004692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe fd6e 	bl	800310c <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fe fd6a 	bl	800310c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e026      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x498>
 8004652:	e01e      	b.n	8004692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e019      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
 8004668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCC_OscConfig+0x500>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	429a      	cmp	r2, r3
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d001      	beq.n	8004692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000

080046a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0d0      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b6a      	ldr	r3, [pc, #424]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d910      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b67      	ldr	r3, [pc, #412]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 0207 	bic.w	r2, r3, #7
 80046ca:	4965      	ldr	r1, [pc, #404]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b63      	ldr	r3, [pc, #396]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0b8      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046fc:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a58      	ldr	r2, [pc, #352]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004714:	4b53      	ldr	r3, [pc, #332]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a52      	ldr	r2, [pc, #328]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800471e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	494d      	ldr	r1, [pc, #308]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d040      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d115      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e07f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475e:	4b41      	ldr	r3, [pc, #260]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e073      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476e:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06b      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477e:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f023 0203 	bic.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4936      	ldr	r1, [pc, #216]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004790:	f7fe fcbc 	bl	800310c <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	e00a      	b.n	80047ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004798:	f7fe fcb8 	bl	800310c <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e053      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 020c 	and.w	r2, r3, #12
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	429a      	cmp	r2, r3
 80047be:	d1eb      	bne.n	8004798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d210      	bcs.n	80047f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 0207 	bic.w	r2, r3, #7
 80047d6:	4922      	ldr	r1, [pc, #136]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e032      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4916      	ldr	r1, [pc, #88]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800482e:	f000 f821 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004832:	4602      	mov	r2, r0
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	490a      	ldr	r1, [pc, #40]	; (8004868 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	5ccb      	ldrb	r3, [r1, r3]
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <HAL_RCC_ClockConfig+0x1cc>)
 8004848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1d0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fe fb4c 	bl	8002eec <HAL_InitTick>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40022000 	.word	0x40022000
 8004864:	40021000 	.word	0x40021000
 8004868:	08009164 	.word	0x08009164
 800486c:	20000014 	.word	0x20000014
 8004870:	20000018 	.word	0x20000018

08004874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004874:	b490      	push	{r4, r7}
 8004876:	b08a      	sub	sp, #40	; 0x28
 8004878:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800487a:	4b29      	ldr	r3, [pc, #164]	; (8004920 <HAL_RCC_GetSysClockFreq+0xac>)
 800487c:	1d3c      	adds	r4, r7, #4
 800487e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004884:	f240 2301 	movw	r3, #513	; 0x201
 8004888:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	2300      	movs	r3, #0
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800489e:	4b21      	ldr	r3, [pc, #132]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x40>
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0x46>
 80048b2:	e02b      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048b4:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048b6:	623b      	str	r3, [r7, #32]
      break;
 80048b8:	e02b      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	0c9b      	lsrs	r3, r3, #18
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	3328      	adds	r3, #40	; 0x28
 80048c4:	443b      	add	r3, r7
 80048c6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048ca:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d012      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	0c5b      	lsrs	r3, r3, #17
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	3328      	adds	r3, #40	; 0x28
 80048e2:	443b      	add	r3, r7
 80048e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	4a0e      	ldr	r2, [pc, #56]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048ee:	fb03 f202 	mul.w	r2, r3, r2
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	e004      	b.n	8004906 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	4a0b      	ldr	r2, [pc, #44]	; (800492c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	623b      	str	r3, [r7, #32]
      break;
 800490a:	e002      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800490c:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb4>)
 800490e:	623b      	str	r3, [r7, #32]
      break;
 8004910:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004912:	6a3b      	ldr	r3, [r7, #32]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3728      	adds	r7, #40	; 0x28
 8004918:	46bd      	mov	sp, r7
 800491a:	bc90      	pop	{r4, r7}
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	080090f4 	.word	0x080090f4
 8004924:	40021000 	.word	0x40021000
 8004928:	007a1200 	.word	0x007a1200
 800492c:	003d0900 	.word	0x003d0900

08004930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004934:	4b02      	ldr	r3, [pc, #8]	; (8004940 <HAL_RCC_GetHCLKFreq+0x10>)
 8004936:	681b      	ldr	r3, [r3, #0]
}
 8004938:	4618      	mov	r0, r3
 800493a:	46bd      	mov	sp, r7
 800493c:	bc80      	pop	{r7}
 800493e:	4770      	bx	lr
 8004940:	20000014 	.word	0x20000014

08004944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004948:	f7ff fff2 	bl	8004930 <HAL_RCC_GetHCLKFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	4903      	ldr	r1, [pc, #12]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	08009174 	.word	0x08009174

0800496c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	220f      	movs	r2, #15
 800497a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800497c:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_RCC_GetClockConfig+0x58>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 0203 	and.w	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004988:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <HAL_RCC_GetClockConfig+0x58>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RCC_GetClockConfig+0x58>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80049a0:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <HAL_RCC_GetClockConfig+0x58>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	08db      	lsrs	r3, r3, #3
 80049a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_GetClockConfig+0x5c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0207 	and.w	r2, r3, #7
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40022000 	.word	0x40022000

080049cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049d4:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <RCC_Delay+0x34>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a0a      	ldr	r2, [pc, #40]	; (8004a04 <RCC_Delay+0x38>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	0a5b      	lsrs	r3, r3, #9
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049e8:	bf00      	nop
  }
  while (Delay --);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1e5a      	subs	r2, r3, #1
 80049ee:	60fa      	str	r2, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1f9      	bne.n	80049e8 <RCC_Delay+0x1c>
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr
 8004a00:	20000014 	.word	0x20000014
 8004a04:	10624dd3 	.word	0x10624dd3

08004a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e076      	b.n	8004b08 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d108      	bne.n	8004a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2a:	d009      	beq.n	8004a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	61da      	str	r2, [r3, #28]
 8004a32:	e005      	b.n	8004a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fe f980 	bl	8002d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac4:	ea42 0103 	orr.w	r1, r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	0c1a      	lsrs	r2, r3, #16
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f002 0204 	and.w	r2, r2, #4
 8004ae6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_SPI_Transmit+0x22>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e126      	b.n	8004d80 <HAL_SPI_Transmit+0x270>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b3a:	f7fe fae7 	bl	800310c <HAL_GetTick>
 8004b3e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d002      	beq.n	8004b56 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b50:	2302      	movs	r3, #2
 8004b52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b54:	e10b      	b.n	8004d6e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_Transmit+0x52>
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b66:	e102      	b.n	8004d6e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bae:	d10f      	bne.n	8004bd0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b40      	cmp	r3, #64	; 0x40
 8004bdc:	d007      	beq.n	8004bee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf6:	d14b      	bne.n	8004c90 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_SPI_Transmit+0xf6>
 8004c00:	8afb      	ldrh	r3, [r7, #22]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d13e      	bne.n	8004c84 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	881a      	ldrh	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	1c9a      	adds	r2, r3, #2
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c2a:	e02b      	b.n	8004c84 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d112      	bne.n	8004c60 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	881a      	ldrh	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	1c9a      	adds	r2, r3, #2
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c5e:	e011      	b.n	8004c84 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c60:	f7fe fa54 	bl	800310c <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d803      	bhi.n	8004c78 <HAL_SPI_Transmit+0x168>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d102      	bne.n	8004c7e <HAL_SPI_Transmit+0x16e>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c82:	e074      	b.n	8004d6e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ce      	bne.n	8004c2c <HAL_SPI_Transmit+0x11c>
 8004c8e:	e04c      	b.n	8004d2a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_Transmit+0x18e>
 8004c98:	8afb      	ldrh	r3, [r7, #22]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d140      	bne.n	8004d20 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	330c      	adds	r3, #12
 8004ca8:	7812      	ldrb	r2, [r2, #0]
 8004caa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cc4:	e02c      	b.n	8004d20 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d113      	bne.n	8004cfc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	7812      	ldrb	r2, [r2, #0]
 8004ce0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cfa:	e011      	b.n	8004d20 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cfc:	f7fe fa06 	bl	800310c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d803      	bhi.n	8004d14 <HAL_SPI_Transmit+0x204>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d102      	bne.n	8004d1a <HAL_SPI_Transmit+0x20a>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d1e:	e026      	b.n	8004d6e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1cd      	bne.n	8004cc6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fcbc 	bl	80056ac <SPI_EndRxTxTransaction>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	77fb      	strb	r3, [r7, #31]
 8004d6a:	e000      	b.n	8004d6e <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	603b      	str	r3, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da4:	d112      	bne.n	8004dcc <HAL_SPI_Receive+0x44>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10e      	bne.n	8004dcc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2204      	movs	r2, #4
 8004db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 f8f1 	bl	8004faa <HAL_SPI_TransmitReceive>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	e0ea      	b.n	8004fa2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_SPI_Receive+0x52>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e0e3      	b.n	8004fa2 <HAL_SPI_Receive+0x21a>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de2:	f7fe f993 	bl	800310c <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d002      	beq.n	8004dfa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
 8004df6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004df8:	e0ca      	b.n	8004f90 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_SPI_Receive+0x7e>
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d102      	bne.n	8004e0c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e0a:	e0c1      	b.n	8004f90 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e52:	d10f      	bne.n	8004e74 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e72:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
 8004e80:	d007      	beq.n	8004e92 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e90:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d162      	bne.n	8004f60 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e9a:	e02e      	b.n	8004efa <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d115      	bne.n	8004ed6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f103 020c 	add.w	r2, r3, #12
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	7812      	ldrb	r2, [r2, #0]
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ed4:	e011      	b.n	8004efa <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed6:	f7fe f919 	bl	800310c <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d803      	bhi.n	8004eee <HAL_SPI_Receive+0x166>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d102      	bne.n	8004ef4 <HAL_SPI_Receive+0x16c>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d102      	bne.n	8004efa <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ef8:	e04a      	b.n	8004f90 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1cb      	bne.n	8004e9c <HAL_SPI_Receive+0x114>
 8004f04:	e031      	b.n	8004f6a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d113      	bne.n	8004f3c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	b292      	uxth	r2, r2
 8004f20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	1c9a      	adds	r2, r3, #2
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f3a:	e011      	b.n	8004f60 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f3c:	f7fe f8e6 	bl	800310c <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d803      	bhi.n	8004f54 <HAL_SPI_Receive+0x1cc>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d102      	bne.n	8004f5a <HAL_SPI_Receive+0x1d2>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f5e:	e017      	b.n	8004f90 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1cd      	bne.n	8004f06 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 fb4a 	bl	8005608 <SPI_EndRxTransaction>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]
 8004f8c:	e000      	b.n	8004f90 <HAL_SPI_Receive+0x208>
  }

error :
 8004f8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b08c      	sub	sp, #48	; 0x30
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d101      	bne.n	8004fd0 <HAL_SPI_TransmitReceive+0x26>
 8004fcc:	2302      	movs	r3, #2
 8004fce:	e18a      	b.n	80052e6 <HAL_SPI_TransmitReceive+0x33c>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd8:	f7fe f898 	bl	800310c <HAL_GetTick>
 8004fdc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fee:	887b      	ldrh	r3, [r7, #2]
 8004ff0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d00f      	beq.n	800501a <HAL_SPI_TransmitReceive+0x70>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005000:	d107      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x68>
 800500a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800500e:	2b04      	cmp	r3, #4
 8005010:	d003      	beq.n	800501a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005012:	2302      	movs	r3, #2
 8005014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005018:	e15b      	b.n	80052d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_SPI_TransmitReceive+0x82>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_SPI_TransmitReceive+0x82>
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d103      	bne.n	8005034 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005032:	e14e      	b.n	80052d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b04      	cmp	r3, #4
 800503e:	d003      	beq.n	8005048 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2205      	movs	r2, #5
 8005044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	887a      	ldrh	r2, [r7, #2]
 8005058:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	887a      	ldrh	r2, [r7, #2]
 800505e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	887a      	ldrh	r2, [r7, #2]
 800506a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d007      	beq.n	800509c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800509a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a4:	d178      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_SPI_TransmitReceive+0x10a>
 80050ae:	8b7b      	ldrh	r3, [r7, #26]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d166      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	881a      	ldrh	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	1c9a      	adds	r2, r3, #2
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d8:	e053      	b.n	8005182 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d11b      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x176>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <HAL_SPI_TransmitReceive+0x176>
 80050f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d113      	bne.n	8005120 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	881a      	ldrh	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	1c9a      	adds	r2, r3, #2
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29a      	uxth	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d119      	bne.n	8005162 <HAL_SPI_TransmitReceive+0x1b8>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d014      	beq.n	8005162 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	b292      	uxth	r2, r2
 8005144:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	1c9a      	adds	r2, r3, #2
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800515e:	2301      	movs	r3, #1
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005162:	f7fd ffd3 	bl	800310c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800516e:	429a      	cmp	r2, r3
 8005170:	d807      	bhi.n	8005182 <HAL_SPI_TransmitReceive+0x1d8>
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d003      	beq.n	8005182 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005180:	e0a7      	b.n	80052d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1a6      	bne.n	80050da <HAL_SPI_TransmitReceive+0x130>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1a1      	bne.n	80050da <HAL_SPI_TransmitReceive+0x130>
 8005196:	e07c      	b.n	8005292 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_SPI_TransmitReceive+0x1fc>
 80051a0:	8b7b      	ldrh	r3, [r7, #26]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d16b      	bne.n	800527e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051cc:	e057      	b.n	800527e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d11c      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x26c>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d017      	beq.n	8005216 <HAL_SPI_TransmitReceive+0x26c>
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d114      	bne.n	8005216 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	330c      	adds	r3, #12
 80051f6:	7812      	ldrb	r2, [r2, #0]
 80051f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	d119      	bne.n	8005258 <HAL_SPI_TransmitReceive+0x2ae>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d014      	beq.n	8005258 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005254:	2301      	movs	r3, #1
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005258:	f7fd ff58 	bl	800310c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005264:	429a      	cmp	r2, r3
 8005266:	d803      	bhi.n	8005270 <HAL_SPI_TransmitReceive+0x2c6>
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526e:	d102      	bne.n	8005276 <HAL_SPI_TransmitReceive+0x2cc>
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800527c:	e029      	b.n	80052d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1a2      	bne.n	80051ce <HAL_SPI_TransmitReceive+0x224>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d19d      	bne.n	80051ce <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005294:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fa08 	bl	80056ac <SPI_EndRxTxTransaction>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d006      	beq.n	80052b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052ae:	e010      	b.n	80052d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10b      	bne.n	80052d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	e000      	b.n	80052d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3730      	adds	r7, #48	; 0x30
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	099b      	lsrs	r3, r3, #6
 800530c:	f003 0301 	and.w	r3, r3, #1
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10f      	bne.n	8005334 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	099b      	lsrs	r3, r3, #6
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
    return;
 8005332:	e0be      	b.n	80054b2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	085b      	lsrs	r3, r3, #1
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <HAL_SPI_IRQHandler+0x66>
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	09db      	lsrs	r3, r3, #7
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4798      	blx	r3
    return;
 8005354:	e0ad      	b.n	80054b2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_SPI_IRQHandler+0x80>
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	099b      	lsrs	r3, r3, #6
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 80a1 	beq.w	80054b2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 809a 	beq.w	80054b2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	099b      	lsrs	r3, r3, #6
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d023      	beq.n	80053d2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b03      	cmp	r3, #3
 8005394:	d011      	beq.n	80053ba <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539a:	f043 0204 	orr.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	e00b      	b.n	80053d2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	693b      	ldr	r3, [r7, #16]
        return;
 80053d0:	e06f      	b.n	80054b2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d014      	beq.n	8005408 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f043 0201 	orr.w	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540c:	2b00      	cmp	r3, #0
 800540e:	d04f      	beq.n	80054b0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800541e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d104      	bne.n	800543c <HAL_SPI_IRQHandler+0x14c>
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d034      	beq.n	80054a6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0203 	bic.w	r2, r2, #3
 800544a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d011      	beq.n	8005478 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005458:	4a17      	ldr	r2, [pc, #92]	; (80054b8 <HAL_SPI_IRQHandler+0x1c8>)
 800545a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005460:	4618      	mov	r0, r3
 8005462:	f7fe fc6f 	bl	8003d44 <HAL_DMA_Abort_IT>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d005      	beq.n	8005478 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547c:	2b00      	cmp	r3, #0
 800547e:	d016      	beq.n	80054ae <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005484:	4a0c      	ldr	r2, [pc, #48]	; (80054b8 <HAL_SPI_IRQHandler+0x1c8>)
 8005486:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe fc59 	bl	8003d44 <HAL_DMA_Abort_IT>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80054a4:	e003      	b.n	80054ae <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f808 	bl	80054bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80054ac:	e000      	b.n	80054b0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80054ae:	bf00      	nop
    return;
 80054b0:	bf00      	nop
  }
}
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	080054cf 	.word	0x080054cf

080054bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f7ff ffe7 	bl	80054bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054ee:	bf00      	nop
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
	...

080054f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	603b      	str	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005508:	f7fd fe00 	bl	800310c <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	1a9b      	subs	r3, r3, r2
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	4413      	add	r3, r2
 8005516:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005518:	f7fd fdf8 	bl	800310c <HAL_GetTick>
 800551c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800551e:	4b39      	ldr	r3, [pc, #228]	; (8005604 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	015b      	lsls	r3, r3, #5
 8005524:	0d1b      	lsrs	r3, r3, #20
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800552e:	e054      	b.n	80055da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d050      	beq.n	80055da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005538:	f7fd fde8 	bl	800310c <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	429a      	cmp	r2, r3
 8005546:	d902      	bls.n	800554e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d13d      	bne.n	80055ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800555c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005566:	d111      	bne.n	800558c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005570:	d004      	beq.n	800557c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557a:	d107      	bne.n	800558c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005594:	d10f      	bne.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e017      	b.n	80055fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d19b      	bne.n	8005530 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000014 	.word	0x20000014

08005608 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800561c:	d111      	bne.n	8005642 <SPI_EndRxTransaction+0x3a>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005626:	d004      	beq.n	8005632 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005630:	d107      	bne.n	8005642 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005640:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800564a:	d117      	bne.n	800567c <SPI_EndRxTransaction+0x74>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005654:	d112      	bne.n	800567c <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2200      	movs	r2, #0
 800565e:	2101      	movs	r1, #1
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff ff49 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d01a      	beq.n	80056a2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005670:	f043 0220 	orr.w	r2, r3, #32
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e013      	b.n	80056a4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2200      	movs	r2, #0
 8005684:	2180      	movs	r1, #128	; 0x80
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff ff36 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	f043 0220 	orr.w	r2, r3, #32
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e000      	b.n	80056a4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2200      	movs	r2, #0
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f7ff ff18 	bl	80054f8 <SPI_WaitFlagStateUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d2:	f043 0220 	orr.w	r2, r3, #32
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e000      	b.n	80056e0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e041      	b.n	800577e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d106      	bne.n	8005714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f839 	bl	8005786 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	4610      	mov	r0, r2
 8005728:	f000 f9b4 	bl	8005a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr

08005798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d001      	beq.n	80057b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e03a      	b.n	8005826 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_TIM_Base_Start_IT+0x98>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00e      	beq.n	80057f0 <HAL_TIM_Base_Start_IT+0x58>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d009      	beq.n	80057f0 <HAL_TIM_Base_Start_IT+0x58>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a14      	ldr	r2, [pc, #80]	; (8005834 <HAL_TIM_Base_Start_IT+0x9c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <HAL_TIM_Base_Start_IT+0x58>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a13      	ldr	r2, [pc, #76]	; (8005838 <HAL_TIM_Base_Start_IT+0xa0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d111      	bne.n	8005814 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2b06      	cmp	r3, #6
 8005800:	d010      	beq.n	8005824 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005812:	e007      	b.n	8005824 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800

0800583c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b02      	cmp	r3, #2
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0202 	mvn.w	r2, #2
 8005868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f8ed 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f8e0 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f8ef 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0204 	mvn.w	r2, #4
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f8c3 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f8b6 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f8c5 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d122      	bne.n	8005940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b08      	cmp	r3, #8
 8005906:	d11b      	bne.n	8005940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0208 	mvn.w	r2, #8
 8005910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2204      	movs	r2, #4
 8005916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f899 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
 800592c:	e005      	b.n	800593a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 f88c 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f89b 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b10      	cmp	r3, #16
 800594c:	d122      	bne.n	8005994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b10      	cmp	r3, #16
 800595a:	d11b      	bne.n	8005994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0210 	mvn.w	r2, #16
 8005964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2208      	movs	r2, #8
 800596a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f86f 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
 8005980:	e005      	b.n	800598e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f862 	bl	8005a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f871 	bl	8005a70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d10e      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d107      	bne.n	80059c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f06f 0201 	mvn.w	r2, #1
 80059b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fd f94c 	bl	8002c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ca:	2b80      	cmp	r3, #128	; 0x80
 80059cc:	d10e      	bne.n	80059ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b80      	cmp	r3, #128	; 0x80
 80059da:	d107      	bne.n	80059ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8bf 	bl	8005b6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b40      	cmp	r3, #64	; 0x40
 80059f8:	d10e      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a04:	2b40      	cmp	r3, #64	; 0x40
 8005a06:	d107      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f835 	bl	8005a82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d10e      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d107      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0220 	mvn.w	r2, #32
 8005a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f88a 	bl	8005b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr

08005a82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a29      	ldr	r2, [pc, #164]	; (8005b4c <TIM_Base_SetConfig+0xb8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_Base_SetConfig+0x30>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ab2:	d007      	beq.n	8005ac4 <TIM_Base_SetConfig+0x30>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a26      	ldr	r2, [pc, #152]	; (8005b50 <TIM_Base_SetConfig+0xbc>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_Base_SetConfig+0x30>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a25      	ldr	r2, [pc, #148]	; (8005b54 <TIM_Base_SetConfig+0xc0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d108      	bne.n	8005ad6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a1c      	ldr	r2, [pc, #112]	; (8005b4c <TIM_Base_SetConfig+0xb8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00b      	beq.n	8005af6 <TIM_Base_SetConfig+0x62>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d007      	beq.n	8005af6 <TIM_Base_SetConfig+0x62>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <TIM_Base_SetConfig+0xbc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_Base_SetConfig+0x62>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a18      	ldr	r2, [pc, #96]	; (8005b54 <TIM_Base_SetConfig+0xc0>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d108      	bne.n	8005b08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a07      	ldr	r2, [pc, #28]	; (8005b4c <TIM_Base_SetConfig+0xb8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d103      	bne.n	8005b3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	691a      	ldr	r2, [r3, #16]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	615a      	str	r2, [r3, #20]
}
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr
 8005b4c:	40012c00 	.word	0x40012c00
 8005b50:	40000400 	.word	0x40000400
 8005b54:	40000800 	.word	0x40000800

08005b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bc80      	pop	{r7}
 8005b68:	4770      	bx	lr

08005b6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b82:	f3ef 8305 	mrs	r3, IPSR
 8005b86:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b92:	607b      	str	r3, [r7, #4]
  return(result);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d109      	bne.n	8005bae <osKernelInitialize+0x32>
 8005b9a:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <osKernelInitialize+0x60>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d109      	bne.n	8005bb6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d003      	beq.n	8005bb6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005bae:	f06f 0305 	mvn.w	r3, #5
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e00c      	b.n	8005bd0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <osKernelInitialize+0x60>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <osKernelInitialize+0x60>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e002      	b.n	8005bd0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005bca:	f04f 33ff 	mov.w	r3, #4294967295
 8005bce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bc80      	pop	{r7}
 8005bda:	4770      	bx	lr
 8005bdc:	20000328 	.word	0x20000328

08005be0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be6:	f3ef 8305 	mrs	r3, IPSR
 8005bea:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10f      	bne.n	8005c12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8005bf6:	607b      	str	r3, [r7, #4]
  return(result);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <osKernelStart+0x32>
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <osKernelStart+0x64>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d109      	bne.n	8005c1a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c06:	f3ef 8311 	mrs	r3, BASEPRI
 8005c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005c12:	f06f 0305 	mvn.w	r3, #5
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e00e      	b.n	8005c38 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <osKernelStart+0x64>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d107      	bne.n	8005c32 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <osKernelStart+0x64>)
 8005c24:	2202      	movs	r2, #2
 8005c26:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005c28:	f001 f90e 	bl	8006e48 <vTaskStartScheduler>
      stat = osOK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e002      	b.n	8005c38 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005c32:	f04f 33ff 	mov.w	r3, #4294967295
 8005c36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c38:	68fb      	ldr	r3, [r7, #12]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000328 	.word	0x20000328

08005c48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b092      	sub	sp, #72	; 0x48
 8005c4c:	af04      	add	r7, sp, #16
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c58:	f3ef 8305 	mrs	r3, IPSR
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f040 8094 	bne.w	8005d8e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c66:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6a:	623b      	str	r3, [r7, #32]
  return(result);
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f040 808d 	bne.w	8005d8e <osThreadNew+0x146>
 8005c74:	4b48      	ldr	r3, [pc, #288]	; (8005d98 <osThreadNew+0x150>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d106      	bne.n	8005c8a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c80:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 8082 	bne.w	8005d8e <osThreadNew+0x146>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d07e      	beq.n	8005d8e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005c94:	2318      	movs	r3, #24
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005c98:	2300      	movs	r3, #0
 8005c9a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005c9c:	f107 031b 	add.w	r3, r7, #27
 8005ca0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d045      	beq.n	8005d3a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <osThreadNew+0x74>
        name = attr->name;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <osThreadNew+0x9a>
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	2b38      	cmp	r3, #56	; 0x38
 8005cd4:	d805      	bhi.n	8005ce2 <osThreadNew+0x9a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <osThreadNew+0x9e>
        return (NULL);
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e054      	b.n	8005d90 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	089b      	lsrs	r3, r3, #2
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00e      	beq.n	8005d1c <osThreadNew+0xd4>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2bbb      	cmp	r3, #187	; 0xbb
 8005d04:	d90a      	bls.n	8005d1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d006      	beq.n	8005d1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <osThreadNew+0xd4>
        mem = 1;
 8005d16:	2301      	movs	r3, #1
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d1a:	e010      	b.n	8005d3e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10c      	bne.n	8005d3e <osThreadNew+0xf6>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d108      	bne.n	8005d3e <osThreadNew+0xf6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <osThreadNew+0xf6>
          mem = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d38:	e001      	b.n	8005d3e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d110      	bne.n	8005d66 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d4c:	9202      	str	r2, [sp, #8]
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fe12 	bl	8006984 <xTaskCreateStatic>
 8005d60:	4603      	mov	r3, r0
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e013      	b.n	8005d8e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d110      	bne.n	8005d8e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	f107 0314 	add.w	r3, r7, #20
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fe5c 	bl	8006a3c <xTaskCreate>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d001      	beq.n	8005d8e <osThreadNew+0x146>
          hTask = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d8e:	697b      	ldr	r3, [r7, #20]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3738      	adds	r7, #56	; 0x38
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	20000328 	.word	0x20000328

08005d9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da4:	f3ef 8305 	mrs	r3, IPSR
 8005da8:	613b      	str	r3, [r7, #16]
  return(result);
 8005daa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10f      	bne.n	8005dd0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db0:	f3ef 8310 	mrs	r3, PRIMASK
 8005db4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d109      	bne.n	8005dd0 <osDelay+0x34>
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <osDelay+0x58>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d109      	bne.n	8005dd8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dc4:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <osDelay+0x3c>
    stat = osErrorISR;
 8005dd0:	f06f 0305 	mvn.w	r3, #5
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	e007      	b.n	8005de8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fffc 	bl	8006de0 <vTaskDelay>
    }
  }

  return (stat);
 8005de8:	697b      	ldr	r3, [r7, #20]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000328 	.word	0x20000328

08005df8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4a06      	ldr	r2, [pc, #24]	; (8005e20 <vApplicationGetIdleTaskMemory+0x28>)
 8005e08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4a05      	ldr	r2, [pc, #20]	; (8005e24 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2280      	movs	r2, #128	; 0x80
 8005e14:	601a      	str	r2, [r3, #0]
}
 8005e16:	bf00      	nop
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr
 8005e20:	2000032c 	.word	0x2000032c
 8005e24:	200003e8 	.word	0x200003e8

08005e28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4a07      	ldr	r2, [pc, #28]	; (8005e54 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4a06      	ldr	r2, [pc, #24]	; (8005e58 <vApplicationGetTimerTaskMemory+0x30>)
 8005e3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e46:	601a      	str	r2, [r3, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bc80      	pop	{r7}
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	200005e8 	.word	0x200005e8
 8005e58:	200006a4 	.word	0x200006a4

08005e5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f103 0208 	add.w	r2, r3, #8
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f103 0208 	add.w	r2, r3, #8
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f103 0208 	add.w	r2, r3, #8
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc80      	pop	{r7}
 8005e98:	4770      	bx	lr

08005e9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	683a      	ldr	r2, [r7, #0]
 8005edc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	601a      	str	r2, [r3, #0]
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0e:	d103      	bne.n	8005f18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e00c      	b.n	8005f32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e002      	b.n	8005f26 <vListInsert+0x2e>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d2f6      	bcs.n	8005f20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr

08005f68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6892      	ldr	r2, [r2, #8]
 8005f7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6852      	ldr	r2, [r2, #4]
 8005f88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d103      	bne.n	8005f9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689a      	ldr	r2, [r3, #8]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	1e5a      	subs	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr
	...

08005fbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fe6:	f002 f871 	bl	80080cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	441a      	add	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	3b01      	subs	r3, #1
 8006018:	68f9      	ldr	r1, [r7, #12]
 800601a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800601c:	fb01 f303 	mul.w	r3, r1, r3
 8006020:	441a      	add	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	22ff      	movs	r2, #255	; 0xff
 800602a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	22ff      	movs	r2, #255	; 0xff
 8006032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d114      	bne.n	8006066 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01a      	beq.n	800607a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3310      	adds	r3, #16
 8006048:	4618      	mov	r0, r3
 800604a:	f001 f999 	bl	8007380 <xTaskRemoveFromEventList>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d012      	beq.n	800607a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <xQueueGenericReset+0xcc>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	e009      	b.n	800607a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3310      	adds	r3, #16
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fef6 	bl	8005e5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3324      	adds	r3, #36	; 0x24
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fef1 	bl	8005e5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800607a:	f002 f857 	bl	800812c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800607e:	2301      	movs	r3, #1
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08e      	sub	sp, #56	; 0x38
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10a      	bne.n	80060d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <xQueueGenericCreateStatic+0x52>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <xQueueGenericCreateStatic+0x56>
 80060de:	2301      	movs	r3, #1
 80060e0:	e000      	b.n	80060e4 <xQueueGenericCreateStatic+0x58>
 80060e2:	2300      	movs	r3, #0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10a      	bne.n	80060fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	623b      	str	r3, [r7, #32]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <xQueueGenericCreateStatic+0x7e>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <xQueueGenericCreateStatic+0x82>
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <xQueueGenericCreateStatic+0x84>
 800610e:	2300      	movs	r3, #0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	61fb      	str	r3, [r7, #28]
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800612a:	2350      	movs	r3, #80	; 0x50
 800612c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b50      	cmp	r3, #80	; 0x50
 8006132:	d00a      	beq.n	800614a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	61bb      	str	r3, [r7, #24]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00d      	beq.n	8006170 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800615c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	4613      	mov	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f805 	bl	800617a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006172:	4618      	mov	r0, r3
 8006174:	3730      	adds	r7, #48	; 0x30
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d103      	bne.n	8006196 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e002      	b.n	800619c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061a8:	2101      	movs	r1, #1
 80061aa:	69b8      	ldr	r0, [r7, #24]
 80061ac:	f7ff ff06 	bl	8005fbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	78fa      	ldrb	r2, [r7, #3]
 80061b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08e      	sub	sp, #56	; 0x38
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061ce:	2300      	movs	r3, #0
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10a      	bne.n	80061f2 <xQueueGenericSend+0x32>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061ee:	bf00      	nop
 80061f0:	e7fe      	b.n	80061f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d103      	bne.n	8006200 <xQueueGenericSend+0x40>
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <xQueueGenericSend+0x44>
 8006200:	2301      	movs	r3, #1
 8006202:	e000      	b.n	8006206 <xQueueGenericSend+0x46>
 8006204:	2300      	movs	r3, #0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10a      	bne.n	8006220 <xQueueGenericSend+0x60>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b02      	cmp	r3, #2
 8006224:	d103      	bne.n	800622e <xQueueGenericSend+0x6e>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <xQueueGenericSend+0x72>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <xQueueGenericSend+0x74>
 8006232:	2300      	movs	r3, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10a      	bne.n	800624e <xQueueGenericSend+0x8e>
	__asm volatile
 8006238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	623b      	str	r3, [r7, #32]
}
 800624a:	bf00      	nop
 800624c:	e7fe      	b.n	800624c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800624e:	f001 fa5d 	bl	800770c <xTaskGetSchedulerState>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <xQueueGenericSend+0x9e>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <xQueueGenericSend+0xa2>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <xQueueGenericSend+0xa4>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xQueueGenericSend+0xbe>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	61fb      	str	r3, [r7, #28]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800627e:	f001 ff25 	bl	80080cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628a:	429a      	cmp	r2, r3
 800628c:	d302      	bcc.n	8006294 <xQueueGenericSend+0xd4>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b02      	cmp	r3, #2
 8006292:	d129      	bne.n	80062e8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800629a:	f000 fa07 	bl	80066ac <prvCopyDataToQueue>
 800629e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d010      	beq.n	80062ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	3324      	adds	r3, #36	; 0x24
 80062ac:	4618      	mov	r0, r3
 80062ae:	f001 f867 	bl	8007380 <xTaskRemoveFromEventList>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d013      	beq.n	80062e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062b8:	4b3f      	ldr	r3, [pc, #252]	; (80063b8 <xQueueGenericSend+0x1f8>)
 80062ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	e00a      	b.n	80062e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062d0:	4b39      	ldr	r3, [pc, #228]	; (80063b8 <xQueueGenericSend+0x1f8>)
 80062d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d6:	601a      	str	r2, [r3, #0]
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062e0:	f001 ff24 	bl	800812c <vPortExitCritical>
				return pdPASS;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e063      	b.n	80063b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d103      	bne.n	80062f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062ee:	f001 ff1d 	bl	800812c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e05c      	b.n	80063b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d106      	bne.n	800630a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062fc:	f107 0314 	add.w	r3, r7, #20
 8006300:	4618      	mov	r0, r3
 8006302:	f001 f8a1 	bl	8007448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006306:	2301      	movs	r3, #1
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800630a:	f001 ff0f 	bl	800812c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800630e:	f000 fe0b 	bl	8006f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006312:	f001 fedb 	bl	80080cc <vPortEnterCritical>
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800631c:	b25b      	sxtb	r3, r3
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d103      	bne.n	800632c <xQueueGenericSend+0x16c>
 8006324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006332:	b25b      	sxtb	r3, r3
 8006334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006338:	d103      	bne.n	8006342 <xQueueGenericSend+0x182>
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006342:	f001 fef3 	bl	800812c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006346:	1d3a      	adds	r2, r7, #4
 8006348:	f107 0314 	add.w	r3, r7, #20
 800634c:	4611      	mov	r1, r2
 800634e:	4618      	mov	r0, r3
 8006350:	f001 f890 	bl	8007474 <xTaskCheckForTimeOut>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d124      	bne.n	80063a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800635a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800635c:	f000 fa9e 	bl	800689c <prvIsQueueFull>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d018      	beq.n	8006398 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	3310      	adds	r3, #16
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4611      	mov	r1, r2
 800636e:	4618      	mov	r0, r3
 8006370:	f000 ffb6 	bl	80072e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006376:	f000 fa29 	bl	80067cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800637a:	f000 fde3 	bl	8006f44 <xTaskResumeAll>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	f47f af7c 	bne.w	800627e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <xQueueGenericSend+0x1f8>)
 8006388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	e772      	b.n	800627e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800639a:	f000 fa17 	bl	80067cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800639e:	f000 fdd1 	bl	8006f44 <xTaskResumeAll>
 80063a2:	e76c      	b.n	800627e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063a6:	f000 fa11 	bl	80067cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063aa:	f000 fdcb 	bl	8006f44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063ae:	2300      	movs	r3, #0
		}
	}
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3738      	adds	r7, #56	; 0x38
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	e000ed04 	.word	0xe000ed04

080063bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b08e      	sub	sp, #56	; 0x38
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d103      	bne.n	80063f8 <xQueueGenericSendFromISR+0x3c>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <xQueueGenericSendFromISR+0x40>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <xQueueGenericSendFromISR+0x42>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	623b      	str	r3, [r7, #32]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b02      	cmp	r3, #2
 800641c:	d103      	bne.n	8006426 <xQueueGenericSendFromISR+0x6a>
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <xQueueGenericSendFromISR+0x6e>
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <xQueueGenericSendFromISR+0x70>
 800642a:	2300      	movs	r3, #0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	61fb      	str	r3, [r7, #28]
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006446:	f001 ff03 	bl	8008250 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800644a:	f3ef 8211 	mrs	r2, BASEPRI
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	61ba      	str	r2, [r7, #24]
 8006460:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006462:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646e:	429a      	cmp	r2, r3
 8006470:	d302      	bcc.n	8006478 <xQueueGenericSendFromISR+0xbc>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b02      	cmp	r3, #2
 8006476:	d12c      	bne.n	80064d2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800647e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006488:	f000 f910 	bl	80066ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800648c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d112      	bne.n	80064bc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	3324      	adds	r3, #36	; 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 ff6c 	bl	8007380 <xTaskRemoveFromEventList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e007      	b.n	80064cc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064c0:	3301      	adds	r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	b25a      	sxtb	r2, r3
 80064c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80064d0:	e001      	b.n	80064d6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3738      	adds	r7, #56	; 0x38
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08c      	sub	sp, #48	; 0x30
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10a      	bne.n	800651c <xQueueReceive+0x30>
	__asm volatile
 8006506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650a:	f383 8811 	msr	BASEPRI, r3
 800650e:	f3bf 8f6f 	isb	sy
 8006512:	f3bf 8f4f 	dsb	sy
 8006516:	623b      	str	r3, [r7, #32]
}
 8006518:	bf00      	nop
 800651a:	e7fe      	b.n	800651a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d103      	bne.n	800652a <xQueueReceive+0x3e>
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <xQueueReceive+0x42>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <xQueueReceive+0x44>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <xQueueReceive+0x5e>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	61fb      	str	r3, [r7, #28]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800654a:	f001 f8df 	bl	800770c <xTaskGetSchedulerState>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <xQueueReceive+0x6e>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <xQueueReceive+0x72>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <xQueueReceive+0x74>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <xQueueReceive+0x8e>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	61bb      	str	r3, [r7, #24]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800657a:	f001 fda7 	bl	80080cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	2b00      	cmp	r3, #0
 8006588:	d01f      	beq.n	80065ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658e:	f000 f8f7 	bl	8006780 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	1e5a      	subs	r2, r3, #1
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00f      	beq.n	80065c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	3310      	adds	r3, #16
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 feea 	bl	8007380 <xTaskRemoveFromEventList>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065b2:	4b3d      	ldr	r3, [pc, #244]	; (80066a8 <xQueueReceive+0x1bc>)
 80065b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065c2:	f001 fdb3 	bl	800812c <vPortExitCritical>
				return pdPASS;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e069      	b.n	800669e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065d0:	f001 fdac 	bl	800812c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065d4:	2300      	movs	r3, #0
 80065d6:	e062      	b.n	800669e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d106      	bne.n	80065ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065de:	f107 0310 	add.w	r3, r7, #16
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 ff30 	bl	8007448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065e8:	2301      	movs	r3, #1
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065ec:	f001 fd9e 	bl	800812c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065f0:	f000 fc9a 	bl	8006f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065f4:	f001 fd6a 	bl	80080cc <vPortEnterCritical>
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065fe:	b25b      	sxtb	r3, r3
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d103      	bne.n	800660e <xQueueReceive+0x122>
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006614:	b25b      	sxtb	r3, r3
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	d103      	bne.n	8006624 <xQueueReceive+0x138>
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006624:	f001 fd82 	bl	800812c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006628:	1d3a      	adds	r2, r7, #4
 800662a:	f107 0310 	add.w	r3, r7, #16
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f000 ff1f 	bl	8007474 <xTaskCheckForTimeOut>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d123      	bne.n	8006684 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800663c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663e:	f000 f917 	bl	8006870 <prvIsQueueEmpty>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d017      	beq.n	8006678 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	3324      	adds	r3, #36	; 0x24
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	4611      	mov	r1, r2
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fe45 	bl	80072e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006658:	f000 f8b8 	bl	80067cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800665c:	f000 fc72 	bl	8006f44 <xTaskResumeAll>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d189      	bne.n	800657a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006666:	4b10      	ldr	r3, [pc, #64]	; (80066a8 <xQueueReceive+0x1bc>)
 8006668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	e780      	b.n	800657a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800667a:	f000 f8a7 	bl	80067cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800667e:	f000 fc61 	bl	8006f44 <xTaskResumeAll>
 8006682:	e77a      	b.n	800657a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006686:	f000 f8a1 	bl	80067cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800668a:	f000 fc5b 	bl	8006f44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800668e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006690:	f000 f8ee 	bl	8006870 <prvIsQueueEmpty>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	f43f af6f 	beq.w	800657a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800669c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3730      	adds	r7, #48	; 0x30
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10d      	bne.n	80066e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d14d      	bne.n	800676e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 f836 	bl	8007748 <xTaskPriorityDisinherit>
 80066dc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	605a      	str	r2, [r3, #4]
 80066e4:	e043      	b.n	800676e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d119      	bne.n	8006720 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6898      	ldr	r0, [r3, #8]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	461a      	mov	r2, r3
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	f002 fc12 	bl	8008f20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	441a      	add	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	429a      	cmp	r2, r3
 8006714:	d32b      	bcc.n	800676e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	609a      	str	r2, [r3, #8]
 800671e:	e026      	b.n	800676e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68d8      	ldr	r0, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	461a      	mov	r2, r3
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	f002 fbf8 	bl	8008f20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	425b      	negs	r3, r3
 800673a:	441a      	add	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d207      	bcs.n	800675c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	425b      	negs	r3, r3
 8006756:	441a      	add	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d105      	bne.n	800676e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	3b01      	subs	r3, #1
 800676c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006776:	697b      	ldr	r3, [r7, #20]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d018      	beq.n	80067c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	441a      	add	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d303      	bcc.n	80067b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68d9      	ldr	r1, [r3, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	461a      	mov	r2, r3
 80067be:	6838      	ldr	r0, [r7, #0]
 80067c0:	f002 fbae 	bl	8008f20 <memcpy>
	}
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067d4:	f001 fc7a 	bl	80080cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067e0:	e011      	b.n	8006806 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d012      	beq.n	8006810 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3324      	adds	r3, #36	; 0x24
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fdc6 	bl	8007380 <xTaskRemoveFromEventList>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067fa:	f000 fe9d 	bl	8007538 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	3b01      	subs	r3, #1
 8006802:	b2db      	uxtb	r3, r3
 8006804:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800680a:	2b00      	cmp	r3, #0
 800680c:	dce9      	bgt.n	80067e2 <prvUnlockQueue+0x16>
 800680e:	e000      	b.n	8006812 <prvUnlockQueue+0x46>
					break;
 8006810:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	22ff      	movs	r2, #255	; 0xff
 8006816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800681a:	f001 fc87 	bl	800812c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800681e:	f001 fc55 	bl	80080cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006828:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800682a:	e011      	b.n	8006850 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d012      	beq.n	800685a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3310      	adds	r3, #16
 8006838:	4618      	mov	r0, r3
 800683a:	f000 fda1 	bl	8007380 <xTaskRemoveFromEventList>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006844:	f000 fe78 	bl	8007538 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	3b01      	subs	r3, #1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006854:	2b00      	cmp	r3, #0
 8006856:	dce9      	bgt.n	800682c <prvUnlockQueue+0x60>
 8006858:	e000      	b.n	800685c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800685a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	22ff      	movs	r2, #255	; 0xff
 8006860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006864:	f001 fc62 	bl	800812c <vPortExitCritical>
}
 8006868:	bf00      	nop
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006878:	f001 fc28 	bl	80080cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	2b00      	cmp	r3, #0
 8006882:	d102      	bne.n	800688a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	e001      	b.n	800688e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800688e:	f001 fc4d 	bl	800812c <vPortExitCritical>

	return xReturn;
 8006892:	68fb      	ldr	r3, [r7, #12]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068a4:	f001 fc12 	bl	80080cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d102      	bne.n	80068ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e001      	b.n	80068be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068be:	f001 fc35 	bl	800812c <vPortExitCritical>

	return xReturn;
 80068c2:	68fb      	ldr	r3, [r7, #12]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e014      	b.n	8006906 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068dc:	4a0e      	ldr	r2, [pc, #56]	; (8006918 <vQueueAddToRegistry+0x4c>)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10b      	bne.n	8006900 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068e8:	490b      	ldr	r1, [pc, #44]	; (8006918 <vQueueAddToRegistry+0x4c>)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068f2:	4a09      	ldr	r2, [pc, #36]	; (8006918 <vQueueAddToRegistry+0x4c>)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	4413      	add	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068fe:	e006      	b.n	800690e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	3301      	adds	r3, #1
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b07      	cmp	r3, #7
 800690a:	d9e7      	bls.n	80068dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800690c:	bf00      	nop
 800690e:	bf00      	nop
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr
 8006918:	20000aa4 	.word	0x20000aa4

0800691c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800692c:	f001 fbce 	bl	80080cc <vPortEnterCritical>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006936:	b25b      	sxtb	r3, r3
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d103      	bne.n	8006946 <vQueueWaitForMessageRestricted+0x2a>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800694c:	b25b      	sxtb	r3, r3
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	d103      	bne.n	800695c <vQueueWaitForMessageRestricted+0x40>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800695c:	f001 fbe6 	bl	800812c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	3324      	adds	r3, #36	; 0x24
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	4618      	mov	r0, r3
 8006972:	f000 fcd9 	bl	8007328 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006976:	6978      	ldr	r0, [r7, #20]
 8006978:	f7ff ff28 	bl	80067cc <prvUnlockQueue>
	}
 800697c:	bf00      	nop
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006984:	b580      	push	{r7, lr}
 8006986:	b08e      	sub	sp, #56	; 0x38
 8006988:	af04      	add	r7, sp, #16
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	623b      	str	r3, [r7, #32]
}
 80069aa:	bf00      	nop
 80069ac:	e7fe      	b.n	80069ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xTaskCreateStatic+0x46>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	61fb      	str	r3, [r7, #28]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ca:	23bc      	movs	r3, #188	; 0xbc
 80069cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2bbc      	cmp	r3, #188	; 0xbc
 80069d2:	d00a      	beq.n	80069ea <xTaskCreateStatic+0x66>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	61bb      	str	r3, [r7, #24]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01e      	beq.n	8006a2e <xTaskCreateStatic+0xaa>
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d01b      	beq.n	8006a2e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a08:	2300      	movs	r3, #0
 8006a0a:	9303      	str	r3, [sp, #12]
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	9302      	str	r3, [sp, #8]
 8006a10:	f107 0314 	add.w	r3, r7, #20
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	68b9      	ldr	r1, [r7, #8]
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f851 	bl	8006ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a28:	f000 f8ec 	bl	8006c04 <prvAddNewTaskToReadyList>
 8006a2c:	e001      	b.n	8006a32 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a32:	697b      	ldr	r3, [r7, #20]
	}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3728      	adds	r7, #40	; 0x28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08c      	sub	sp, #48	; 0x30
 8006a40:	af04      	add	r7, sp, #16
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 fc3b 	bl	80082cc <pvPortMalloc>
 8006a56:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00e      	beq.n	8006a7c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006a5e:	20bc      	movs	r0, #188	; 0xbc
 8006a60:	f001 fc34 	bl	80082cc <pvPortMalloc>
 8006a64:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
 8006a72:	e005      	b.n	8006a80 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a74:	6978      	ldr	r0, [r7, #20]
 8006a76:	f001 fced 	bl	8008454 <vPortFree>
 8006a7a:	e001      	b.n	8006a80 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d017      	beq.n	8006ab6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a8e:	88fa      	ldrh	r2, [r7, #6]
 8006a90:	2300      	movs	r3, #0
 8006a92:	9303      	str	r3, [sp, #12]
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	9302      	str	r3, [sp, #8]
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68b9      	ldr	r1, [r7, #8]
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f80f 	bl	8006ac8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aaa:	69f8      	ldr	r0, [r7, #28]
 8006aac:	f000 f8aa 	bl	8006c04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e002      	b.n	8006abc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8006aba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006abc:	69bb      	ldr	r3, [r7, #24]
	}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	461a      	mov	r2, r3
 8006ae0:	21a5      	movs	r1, #165	; 0xa5
 8006ae2:	f002 fa2b 	bl	8008f3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006af0:	3b01      	subs	r3, #1
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f023 0307 	bic.w	r3, r3, #7
 8006afe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	617b      	str	r3, [r7, #20]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e012      	b.n	8006b4c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	7819      	ldrb	r1, [r3, #0]
 8006b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	3334      	adds	r3, #52	; 0x34
 8006b36:	460a      	mov	r2, r1
 8006b38:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	4413      	add	r3, r2
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d006      	beq.n	8006b54 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	2b0f      	cmp	r3, #15
 8006b50:	d9e9      	bls.n	8006b26 <prvInitialiseNewTask+0x5e>
 8006b52:	e000      	b.n	8006b56 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006b54:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	2b37      	cmp	r3, #55	; 0x37
 8006b62:	d901      	bls.n	8006b68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b64:	2337      	movs	r3, #55	; 0x37
 8006b66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b72:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	2200      	movs	r2, #0
 8006b78:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff f98b 	bl	8005e9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	3318      	adds	r3, #24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff f986 	bl	8005e9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	3354      	adds	r3, #84	; 0x54
 8006bb8:	2260      	movs	r2, #96	; 0x60
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 f9bd 	bl	8008f3c <memset>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	4a0c      	ldr	r2, [pc, #48]	; (8006bf8 <prvInitialiseNewTask+0x130>)
 8006bc6:	659a      	str	r2, [r3, #88]	; 0x58
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	4a0c      	ldr	r2, [pc, #48]	; (8006bfc <prvInitialiseNewTask+0x134>)
 8006bcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	4a0b      	ldr	r2, [pc, #44]	; (8006c00 <prvInitialiseNewTask+0x138>)
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	68f9      	ldr	r1, [r7, #12]
 8006bd8:	69b8      	ldr	r0, [r7, #24]
 8006bda:	f001 f989 	bl	8007ef0 <pxPortInitialiseStack>
 8006bde:	4602      	mov	r2, r0
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf0:	bf00      	nop
 8006bf2:	3720      	adds	r7, #32
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	080091d8 	.word	0x080091d8
 8006bfc:	080091f8 	.word	0x080091f8
 8006c00:	080091b8 	.word	0x080091b8

08006c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c0c:	f001 fa5e 	bl	80080cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c10:	4b2d      	ldr	r3, [pc, #180]	; (8006cc8 <prvAddNewTaskToReadyList+0xc4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	4a2c      	ldr	r2, [pc, #176]	; (8006cc8 <prvAddNewTaskToReadyList+0xc4>)
 8006c18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c1a:	4b2c      	ldr	r3, [pc, #176]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d109      	bne.n	8006c36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c22:	4a2a      	ldr	r2, [pc, #168]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c28:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <prvAddNewTaskToReadyList+0xc4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d110      	bne.n	8006c52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c30:	f000 fca6 	bl	8007580 <prvInitialiseTaskLists>
 8006c34:	e00d      	b.n	8006c52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c36:	4b26      	ldr	r3, [pc, #152]	; (8006cd0 <prvAddNewTaskToReadyList+0xcc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d109      	bne.n	8006c52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c3e:	4b23      	ldr	r3, [pc, #140]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d802      	bhi.n	8006c52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c4c:	4a1f      	ldr	r2, [pc, #124]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c52:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <prvAddNewTaskToReadyList+0xd0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3301      	adds	r3, #1
 8006c58:	4a1e      	ldr	r2, [pc, #120]	; (8006cd4 <prvAddNewTaskToReadyList+0xd0>)
 8006c5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <prvAddNewTaskToReadyList+0xd0>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <prvAddNewTaskToReadyList+0xd4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d903      	bls.n	8006c78 <prvAddNewTaskToReadyList+0x74>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	4a18      	ldr	r2, [pc, #96]	; (8006cd8 <prvAddNewTaskToReadyList+0xd4>)
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4a15      	ldr	r2, [pc, #84]	; (8006cdc <prvAddNewTaskToReadyList+0xd8>)
 8006c86:	441a      	add	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f7ff f90f 	bl	8005eb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c94:	f001 fa4a 	bl	800812c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c98:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <prvAddNewTaskToReadyList+0xcc>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00e      	beq.n	8006cbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddNewTaskToReadyList+0xc8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d207      	bcs.n	8006cbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cae:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <prvAddNewTaskToReadyList+0xdc>)
 8006cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cbe:	bf00      	nop
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20000fb8 	.word	0x20000fb8
 8006ccc:	20000ae4 	.word	0x20000ae4
 8006cd0:	20000fc4 	.word	0x20000fc4
 8006cd4:	20000fd4 	.word	0x20000fd4
 8006cd8:	20000fc0 	.word	0x20000fc0
 8006cdc:	20000ae8 	.word	0x20000ae8
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	; 0x28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <vTaskDelayUntil+0x2a>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	617b      	str	r3, [r7, #20]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10a      	bne.n	8006d2a <vTaskDelayUntil+0x46>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	613b      	str	r3, [r7, #16]
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006d2a:	4b2a      	ldr	r3, [pc, #168]	; (8006dd4 <vTaskDelayUntil+0xf0>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <vTaskDelayUntil+0x64>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60fb      	str	r3, [r7, #12]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006d48:	f000 f8ee 	bl	8006f28 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006d4c:	4b22      	ldr	r3, [pc, #136]	; (8006dd8 <vTaskDelayUntil+0xf4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	4413      	add	r3, r2
 8006d5a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a3a      	ldr	r2, [r7, #32]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d20b      	bcs.n	8006d7e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d211      	bcs.n	8006d94 <vTaskDelayUntil+0xb0>
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d90d      	bls.n	8006d94 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7c:	e00a      	b.n	8006d94 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d303      	bcc.n	8006d90 <vTaskDelayUntil+0xac>
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d901      	bls.n	8006d94 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006d90:	2301      	movs	r3, #1
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d006      	beq.n	8006dae <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2100      	movs	r1, #0
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fd3b 	bl	8007824 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006dae:	f000 f8c9 	bl	8006f44 <xTaskResumeAll>
 8006db2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d107      	bne.n	8006dca <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006dba:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <vTaskDelayUntil+0xf8>)
 8006dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dca:	bf00      	nop
 8006dcc:	3728      	adds	r7, #40	; 0x28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000fe0 	.word	0x20000fe0
 8006dd8:	20000fbc 	.word	0x20000fbc
 8006ddc:	e000ed04 	.word	0xe000ed04

08006de0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006de8:	2300      	movs	r3, #0
 8006dea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d017      	beq.n	8006e22 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006df2:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <vTaskDelay+0x60>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <vTaskDelay+0x30>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60bb      	str	r3, [r7, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e10:	f000 f88a 	bl	8006f28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fd04 	bl	8007824 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e1c:	f000 f892 	bl	8006f44 <xTaskResumeAll>
 8006e20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d107      	bne.n	8006e38 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e28:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <vTaskDelay+0x64>)
 8006e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2e:	601a      	str	r2, [r3, #0]
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000fe0 	.word	0x20000fe0
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08a      	sub	sp, #40	; 0x28
 8006e4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e56:	463a      	mov	r2, r7
 8006e58:	1d39      	adds	r1, r7, #4
 8006e5a:	f107 0308 	add.w	r3, r7, #8
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe ffca 	bl	8005df8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	9202      	str	r2, [sp, #8]
 8006e6c:	9301      	str	r3, [sp, #4]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9300      	str	r3, [sp, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	460a      	mov	r2, r1
 8006e76:	4924      	ldr	r1, [pc, #144]	; (8006f08 <vTaskStartScheduler+0xc0>)
 8006e78:	4824      	ldr	r0, [pc, #144]	; (8006f0c <vTaskStartScheduler+0xc4>)
 8006e7a:	f7ff fd83 	bl	8006984 <xTaskCreateStatic>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	4a23      	ldr	r2, [pc, #140]	; (8006f10 <vTaskStartScheduler+0xc8>)
 8006e82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e84:	4b22      	ldr	r3, [pc, #136]	; (8006f10 <vTaskStartScheduler+0xc8>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	e001      	b.n	8006e96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d102      	bne.n	8006ea2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e9c:	f000 fd16 	bl	80078cc <xTimerCreateTimerTask>
 8006ea0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d11b      	bne.n	8006ee0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	613b      	str	r3, [r7, #16]
}
 8006eba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ebc:	4b15      	ldr	r3, [pc, #84]	; (8006f14 <vTaskStartScheduler+0xcc>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3354      	adds	r3, #84	; 0x54
 8006ec2:	4a15      	ldr	r2, [pc, #84]	; (8006f18 <vTaskStartScheduler+0xd0>)
 8006ec4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ec6:	4b15      	ldr	r3, [pc, #84]	; (8006f1c <vTaskStartScheduler+0xd4>)
 8006ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ecc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ece:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <vTaskStartScheduler+0xd8>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006ed4:	4b13      	ldr	r3, [pc, #76]	; (8006f24 <vTaskStartScheduler+0xdc>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eda:	f001 f885 	bl	8007fe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ede:	e00e      	b.n	8006efe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee6:	d10a      	bne.n	8006efe <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	60fb      	str	r3, [r7, #12]
}
 8006efa:	bf00      	nop
 8006efc:	e7fe      	b.n	8006efc <vTaskStartScheduler+0xb4>
}
 8006efe:	bf00      	nop
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	08009104 	.word	0x08009104
 8006f0c:	08007551 	.word	0x08007551
 8006f10:	20000fdc 	.word	0x20000fdc
 8006f14:	20000ae4 	.word	0x20000ae4
 8006f18:	20000024 	.word	0x20000024
 8006f1c:	20000fd8 	.word	0x20000fd8
 8006f20:	20000fc4 	.word	0x20000fc4
 8006f24:	20000fbc 	.word	0x20000fbc

08006f28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f2c:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <vTaskSuspendAll+0x18>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3301      	adds	r3, #1
 8006f32:	4a03      	ldr	r2, [pc, #12]	; (8006f40 <vTaskSuspendAll+0x18>)
 8006f34:	6013      	str	r3, [r2, #0]
}
 8006f36:	bf00      	nop
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000fe0 	.word	0x20000fe0

08006f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f52:	4b42      	ldr	r3, [pc, #264]	; (800705c <xTaskResumeAll+0x118>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	603b      	str	r3, [r7, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f70:	f001 f8ac 	bl	80080cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f74:	4b39      	ldr	r3, [pc, #228]	; (800705c <xTaskResumeAll+0x118>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	4a38      	ldr	r2, [pc, #224]	; (800705c <xTaskResumeAll+0x118>)
 8006f7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f7e:	4b37      	ldr	r3, [pc, #220]	; (800705c <xTaskResumeAll+0x118>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d162      	bne.n	800704c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f86:	4b36      	ldr	r3, [pc, #216]	; (8007060 <xTaskResumeAll+0x11c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d05e      	beq.n	800704c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f8e:	e02f      	b.n	8006ff0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006f90:	4b34      	ldr	r3, [pc, #208]	; (8007064 <xTaskResumeAll+0x120>)
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3318      	adds	r3, #24
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe ffe3 	bl	8005f68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe ffde 	bl	8005f68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb0:	4b2d      	ldr	r3, [pc, #180]	; (8007068 <xTaskResumeAll+0x124>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d903      	bls.n	8006fc0 <xTaskResumeAll+0x7c>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <xTaskResumeAll+0x124>)
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4a27      	ldr	r2, [pc, #156]	; (800706c <xTaskResumeAll+0x128>)
 8006fce:	441a      	add	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	f7fe ff6b 	bl	8005eb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	4b23      	ldr	r3, [pc, #140]	; (8007070 <xTaskResumeAll+0x12c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d302      	bcc.n	8006ff0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006fea:	4b22      	ldr	r3, [pc, #136]	; (8007074 <xTaskResumeAll+0x130>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ff0:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <xTaskResumeAll+0x120>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1cb      	bne.n	8006f90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ffe:	f000 fb61 	bl	80076c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007002:	4b1d      	ldr	r3, [pc, #116]	; (8007078 <xTaskResumeAll+0x134>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d010      	beq.n	8007030 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800700e:	f000 f845 	bl	800709c <xTaskIncrementTick>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007018:	4b16      	ldr	r3, [pc, #88]	; (8007074 <xTaskResumeAll+0x130>)
 800701a:	2201      	movs	r2, #1
 800701c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3b01      	subs	r3, #1
 8007022:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f1      	bne.n	800700e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800702a:	4b13      	ldr	r3, [pc, #76]	; (8007078 <xTaskResumeAll+0x134>)
 800702c:	2200      	movs	r2, #0
 800702e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007030:	4b10      	ldr	r3, [pc, #64]	; (8007074 <xTaskResumeAll+0x130>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800703c:	4b0f      	ldr	r3, [pc, #60]	; (800707c <xTaskResumeAll+0x138>)
 800703e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800704c:	f001 f86e 	bl	800812c <vPortExitCritical>

	return xAlreadyYielded;
 8007050:	68bb      	ldr	r3, [r7, #8]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000fe0 	.word	0x20000fe0
 8007060:	20000fb8 	.word	0x20000fb8
 8007064:	20000f78 	.word	0x20000f78
 8007068:	20000fc0 	.word	0x20000fc0
 800706c:	20000ae8 	.word	0x20000ae8
 8007070:	20000ae4 	.word	0x20000ae4
 8007074:	20000fcc 	.word	0x20000fcc
 8007078:	20000fc8 	.word	0x20000fc8
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007086:	4b04      	ldr	r3, [pc, #16]	; (8007098 <xTaskGetTickCount+0x18>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800708c:	687b      	ldr	r3, [r7, #4]
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr
 8007098:	20000fbc 	.word	0x20000fbc

0800709c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a6:	4b51      	ldr	r3, [pc, #324]	; (80071ec <xTaskIncrementTick+0x150>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 808e 	bne.w	80071cc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070b0:	4b4f      	ldr	r3, [pc, #316]	; (80071f0 <xTaskIncrementTick+0x154>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070b8:	4a4d      	ldr	r2, [pc, #308]	; (80071f0 <xTaskIncrementTick+0x154>)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d120      	bne.n	8007106 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070c4:	4b4b      	ldr	r3, [pc, #300]	; (80071f4 <xTaskIncrementTick+0x158>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80070ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	603b      	str	r3, [r7, #0]
}
 80070e0:	bf00      	nop
 80070e2:	e7fe      	b.n	80070e2 <xTaskIncrementTick+0x46>
 80070e4:	4b43      	ldr	r3, [pc, #268]	; (80071f4 <xTaskIncrementTick+0x158>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60fb      	str	r3, [r7, #12]
 80070ea:	4b43      	ldr	r3, [pc, #268]	; (80071f8 <xTaskIncrementTick+0x15c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a41      	ldr	r2, [pc, #260]	; (80071f4 <xTaskIncrementTick+0x158>)
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	4a41      	ldr	r2, [pc, #260]	; (80071f8 <xTaskIncrementTick+0x15c>)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	4b40      	ldr	r3, [pc, #256]	; (80071fc <xTaskIncrementTick+0x160>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	4a3f      	ldr	r2, [pc, #252]	; (80071fc <xTaskIncrementTick+0x160>)
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	f000 fadf 	bl	80076c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007106:	4b3e      	ldr	r3, [pc, #248]	; (8007200 <xTaskIncrementTick+0x164>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	429a      	cmp	r2, r3
 800710e:	d34e      	bcc.n	80071ae <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007110:	4b38      	ldr	r3, [pc, #224]	; (80071f4 <xTaskIncrementTick+0x158>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <xTaskIncrementTick+0x82>
 800711a:	2301      	movs	r3, #1
 800711c:	e000      	b.n	8007120 <xTaskIncrementTick+0x84>
 800711e:	2300      	movs	r3, #0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007124:	4b36      	ldr	r3, [pc, #216]	; (8007200 <xTaskIncrementTick+0x164>)
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	601a      	str	r2, [r3, #0]
					break;
 800712c:	e03f      	b.n	80071ae <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800712e:	4b31      	ldr	r3, [pc, #196]	; (80071f4 <xTaskIncrementTick+0x158>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	429a      	cmp	r2, r3
 8007144:	d203      	bcs.n	800714e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007146:	4a2e      	ldr	r2, [pc, #184]	; (8007200 <xTaskIncrementTick+0x164>)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6013      	str	r3, [r2, #0]
						break;
 800714c:	e02f      	b.n	80071ae <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	3304      	adds	r3, #4
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe ff08 	bl	8005f68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	3318      	adds	r3, #24
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe feff 	bl	8005f68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716e:	4b25      	ldr	r3, [pc, #148]	; (8007204 <xTaskIncrementTick+0x168>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	d903      	bls.n	800717e <xTaskIncrementTick+0xe2>
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	4a22      	ldr	r2, [pc, #136]	; (8007204 <xTaskIncrementTick+0x168>)
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007182:	4613      	mov	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	4413      	add	r3, r2
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <xTaskIncrementTick+0x16c>)
 800718c:	441a      	add	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	3304      	adds	r3, #4
 8007192:	4619      	mov	r1, r3
 8007194:	4610      	mov	r0, r2
 8007196:	f7fe fe8c 	bl	8005eb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719e:	4b1b      	ldr	r3, [pc, #108]	; (800720c <xTaskIncrementTick+0x170>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d3b3      	bcc.n	8007110 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071a8:	2301      	movs	r3, #1
 80071aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ac:	e7b0      	b.n	8007110 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071ae:	4b17      	ldr	r3, [pc, #92]	; (800720c <xTaskIncrementTick+0x170>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b4:	4914      	ldr	r1, [pc, #80]	; (8007208 <xTaskIncrementTick+0x16c>)
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d907      	bls.n	80071d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80071c6:	2301      	movs	r3, #1
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	e004      	b.n	80071d6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071cc:	4b10      	ldr	r3, [pc, #64]	; (8007210 <xTaskIncrementTick+0x174>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3301      	adds	r3, #1
 80071d2:	4a0f      	ldr	r2, [pc, #60]	; (8007210 <xTaskIncrementTick+0x174>)
 80071d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071d6:	4b0f      	ldr	r3, [pc, #60]	; (8007214 <xTaskIncrementTick+0x178>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d001      	beq.n	80071e2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80071de:	2301      	movs	r3, #1
 80071e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071e2:	697b      	ldr	r3, [r7, #20]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000fe0 	.word	0x20000fe0
 80071f0:	20000fbc 	.word	0x20000fbc
 80071f4:	20000f70 	.word	0x20000f70
 80071f8:	20000f74 	.word	0x20000f74
 80071fc:	20000fd0 	.word	0x20000fd0
 8007200:	20000fd8 	.word	0x20000fd8
 8007204:	20000fc0 	.word	0x20000fc0
 8007208:	20000ae8 	.word	0x20000ae8
 800720c:	20000ae4 	.word	0x20000ae4
 8007210:	20000fc8 	.word	0x20000fc8
 8007214:	20000fcc 	.word	0x20000fcc

08007218 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800721e:	4b2a      	ldr	r3, [pc, #168]	; (80072c8 <vTaskSwitchContext+0xb0>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007226:	4b29      	ldr	r3, [pc, #164]	; (80072cc <vTaskSwitchContext+0xb4>)
 8007228:	2201      	movs	r2, #1
 800722a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800722c:	e046      	b.n	80072bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800722e:	4b27      	ldr	r3, [pc, #156]	; (80072cc <vTaskSwitchContext+0xb4>)
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007234:	4b26      	ldr	r3, [pc, #152]	; (80072d0 <vTaskSwitchContext+0xb8>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	e010      	b.n	800725e <vTaskSwitchContext+0x46>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10a      	bne.n	8007258 <vTaskSwitchContext+0x40>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	607b      	str	r3, [r7, #4]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <vTaskSwitchContext+0x3e>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3b01      	subs	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	491d      	ldr	r1, [pc, #116]	; (80072d4 <vTaskSwitchContext+0xbc>)
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	440b      	add	r3, r1
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0e4      	beq.n	800723c <vTaskSwitchContext+0x24>
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4a15      	ldr	r2, [pc, #84]	; (80072d4 <vTaskSwitchContext+0xbc>)
 800727e:	4413      	add	r3, r2
 8007280:	60bb      	str	r3, [r7, #8]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	605a      	str	r2, [r3, #4]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	3308      	adds	r3, #8
 8007294:	429a      	cmp	r2, r3
 8007296:	d104      	bne.n	80072a2 <vTaskSwitchContext+0x8a>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	605a      	str	r2, [r3, #4]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	4a0b      	ldr	r2, [pc, #44]	; (80072d8 <vTaskSwitchContext+0xc0>)
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	4a08      	ldr	r2, [pc, #32]	; (80072d0 <vTaskSwitchContext+0xb8>)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072b2:	4b09      	ldr	r3, [pc, #36]	; (80072d8 <vTaskSwitchContext+0xc0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3354      	adds	r3, #84	; 0x54
 80072b8:	4a08      	ldr	r2, [pc, #32]	; (80072dc <vTaskSwitchContext+0xc4>)
 80072ba:	6013      	str	r3, [r2, #0]
}
 80072bc:	bf00      	nop
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bc80      	pop	{r7}
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20000fe0 	.word	0x20000fe0
 80072cc:	20000fcc 	.word	0x20000fcc
 80072d0:	20000fc0 	.word	0x20000fc0
 80072d4:	20000ae8 	.word	0x20000ae8
 80072d8:	20000ae4 	.word	0x20000ae4
 80072dc:	20000024 	.word	0x20000024

080072e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10a      	bne.n	8007306 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	60fb      	str	r3, [r7, #12]
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007306:	4b07      	ldr	r3, [pc, #28]	; (8007324 <vTaskPlaceOnEventList+0x44>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3318      	adds	r3, #24
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fe fdf2 	bl	8005ef8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007314:	2101      	movs	r1, #1
 8007316:	6838      	ldr	r0, [r7, #0]
 8007318:	f000 fa84 	bl	8007824 <prvAddCurrentTaskToDelayedList>
}
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000ae4 	.word	0x20000ae4

08007328 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d10a      	bne.n	8007350 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	617b      	str	r3, [r7, #20]
}
 800734c:	bf00      	nop
 800734e:	e7fe      	b.n	800734e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <vTaskPlaceOnEventListRestricted+0x54>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3318      	adds	r3, #24
 8007356:	4619      	mov	r1, r3
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f7fe fdaa 	bl	8005eb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007364:	f04f 33ff 	mov.w	r3, #4294967295
 8007368:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	68b8      	ldr	r0, [r7, #8]
 800736e:	f000 fa59 	bl	8007824 <prvAddCurrentTaskToDelayedList>
	}
 8007372:	bf00      	nop
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	20000ae4 	.word	0x20000ae4

08007380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	60fb      	str	r3, [r7, #12]
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	3318      	adds	r3, #24
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fdd9 	bl	8005f68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b6:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <xTaskRemoveFromEventList+0xb0>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11d      	bne.n	80073fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fdd0 	bl	8005f68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073cc:	4b19      	ldr	r3, [pc, #100]	; (8007434 <xTaskRemoveFromEventList+0xb4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d903      	bls.n	80073dc <xTaskRemoveFromEventList+0x5c>
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	4a16      	ldr	r2, [pc, #88]	; (8007434 <xTaskRemoveFromEventList+0xb4>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4a13      	ldr	r2, [pc, #76]	; (8007438 <xTaskRemoveFromEventList+0xb8>)
 80073ea:	441a      	add	r2, r3
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7fe fd5d 	bl	8005eb2 <vListInsertEnd>
 80073f8:	e005      	b.n	8007406 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	3318      	adds	r3, #24
 80073fe:	4619      	mov	r1, r3
 8007400:	480e      	ldr	r0, [pc, #56]	; (800743c <xTaskRemoveFromEventList+0xbc>)
 8007402:	f7fe fd56 	bl	8005eb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740a:	4b0d      	ldr	r3, [pc, #52]	; (8007440 <xTaskRemoveFromEventList+0xc0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	429a      	cmp	r2, r3
 8007412:	d905      	bls.n	8007420 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007414:	2301      	movs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007418:	4b0a      	ldr	r3, [pc, #40]	; (8007444 <xTaskRemoveFromEventList+0xc4>)
 800741a:	2201      	movs	r2, #1
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	e001      	b.n	8007424 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007424:	697b      	ldr	r3, [r7, #20]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3718      	adds	r7, #24
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000fe0 	.word	0x20000fe0
 8007434:	20000fc0 	.word	0x20000fc0
 8007438:	20000ae8 	.word	0x20000ae8
 800743c:	20000f78 	.word	0x20000f78
 8007440:	20000ae4 	.word	0x20000ae4
 8007444:	20000fcc 	.word	0x20000fcc

08007448 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <vTaskInternalSetTimeOutState+0x24>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007458:	4b05      	ldr	r3, [pc, #20]	; (8007470 <vTaskInternalSetTimeOutState+0x28>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	605a      	str	r2, [r3, #4]
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	bc80      	pop	{r7}
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	20000fd0 	.word	0x20000fd0
 8007470:	20000fbc 	.word	0x20000fbc

08007474 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	613b      	str	r3, [r7, #16]
}
 8007496:	bf00      	nop
 8007498:	e7fe      	b.n	8007498 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10a      	bne.n	80074b6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	60fb      	str	r3, [r7, #12]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80074b6:	f000 fe09 	bl	80080cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074ba:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <xTaskCheckForTimeOut+0xbc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d102      	bne.n	80074da <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	e023      	b.n	8007522 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4b15      	ldr	r3, [pc, #84]	; (8007534 <xTaskCheckForTimeOut+0xc0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d007      	beq.n	80074f6 <xTaskCheckForTimeOut+0x82>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d302      	bcc.n	80074f6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	e015      	b.n	8007522 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d20b      	bcs.n	8007518 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	1ad2      	subs	r2, r2, r3
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff ff9b 	bl	8007448 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	e004      	b.n	8007522 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800751e:	2301      	movs	r3, #1
 8007520:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007522:	f000 fe03 	bl	800812c <vPortExitCritical>

	return xReturn;
 8007526:	69fb      	ldr	r3, [r7, #28]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3720      	adds	r7, #32
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000fbc 	.word	0x20000fbc
 8007534:	20000fd0 	.word	0x20000fd0

08007538 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800753c:	4b03      	ldr	r3, [pc, #12]	; (800754c <vTaskMissedYield+0x14>)
 800753e:	2201      	movs	r2, #1
 8007540:	601a      	str	r2, [r3, #0]
}
 8007542:	bf00      	nop
 8007544:	46bd      	mov	sp, r7
 8007546:	bc80      	pop	{r7}
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000fcc 	.word	0x20000fcc

08007550 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007558:	f000 f852 	bl	8007600 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <prvIdleTask+0x28>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d9f9      	bls.n	8007558 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <prvIdleTask+0x2c>)
 8007566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007574:	e7f0      	b.n	8007558 <prvIdleTask+0x8>
 8007576:	bf00      	nop
 8007578:	20000ae8 	.word	0x20000ae8
 800757c:	e000ed04 	.word	0xe000ed04

08007580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007586:	2300      	movs	r3, #0
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	e00c      	b.n	80075a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4a12      	ldr	r2, [pc, #72]	; (80075e0 <prvInitialiseTaskLists+0x60>)
 8007598:	4413      	add	r3, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fc5e 	bl	8005e5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3301      	adds	r3, #1
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b37      	cmp	r3, #55	; 0x37
 80075aa:	d9ef      	bls.n	800758c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075ac:	480d      	ldr	r0, [pc, #52]	; (80075e4 <prvInitialiseTaskLists+0x64>)
 80075ae:	f7fe fc55 	bl	8005e5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075b2:	480d      	ldr	r0, [pc, #52]	; (80075e8 <prvInitialiseTaskLists+0x68>)
 80075b4:	f7fe fc52 	bl	8005e5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075b8:	480c      	ldr	r0, [pc, #48]	; (80075ec <prvInitialiseTaskLists+0x6c>)
 80075ba:	f7fe fc4f 	bl	8005e5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075be:	480c      	ldr	r0, [pc, #48]	; (80075f0 <prvInitialiseTaskLists+0x70>)
 80075c0:	f7fe fc4c 	bl	8005e5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075c4:	480b      	ldr	r0, [pc, #44]	; (80075f4 <prvInitialiseTaskLists+0x74>)
 80075c6:	f7fe fc49 	bl	8005e5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <prvInitialiseTaskLists+0x78>)
 80075cc:	4a05      	ldr	r2, [pc, #20]	; (80075e4 <prvInitialiseTaskLists+0x64>)
 80075ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <prvInitialiseTaskLists+0x7c>)
 80075d2:	4a05      	ldr	r2, [pc, #20]	; (80075e8 <prvInitialiseTaskLists+0x68>)
 80075d4:	601a      	str	r2, [r3, #0]
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000ae8 	.word	0x20000ae8
 80075e4:	20000f48 	.word	0x20000f48
 80075e8:	20000f5c 	.word	0x20000f5c
 80075ec:	20000f78 	.word	0x20000f78
 80075f0:	20000f8c 	.word	0x20000f8c
 80075f4:	20000fa4 	.word	0x20000fa4
 80075f8:	20000f70 	.word	0x20000f70
 80075fc:	20000f74 	.word	0x20000f74

08007600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007606:	e019      	b.n	800763c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007608:	f000 fd60 	bl	80080cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800760c:	4b10      	ldr	r3, [pc, #64]	; (8007650 <prvCheckTasksWaitingTermination+0x50>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe fca5 	bl	8005f68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800761e:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <prvCheckTasksWaitingTermination+0x54>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3b01      	subs	r3, #1
 8007624:	4a0b      	ldr	r2, [pc, #44]	; (8007654 <prvCheckTasksWaitingTermination+0x54>)
 8007626:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007628:	4b0b      	ldr	r3, [pc, #44]	; (8007658 <prvCheckTasksWaitingTermination+0x58>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3b01      	subs	r3, #1
 800762e:	4a0a      	ldr	r2, [pc, #40]	; (8007658 <prvCheckTasksWaitingTermination+0x58>)
 8007630:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007632:	f000 fd7b 	bl	800812c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f810 	bl	800765c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <prvCheckTasksWaitingTermination+0x58>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e1      	bne.n	8007608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007644:	bf00      	nop
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000f8c 	.word	0x20000f8c
 8007654:	20000fb8 	.word	0x20000fb8
 8007658:	20000fa0 	.word	0x20000fa0

0800765c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	3354      	adds	r3, #84	; 0x54
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fc7d 	bl	8008f68 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007674:	2b00      	cmp	r3, #0
 8007676:	d108      	bne.n	800768a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fee9 	bl	8008454 <vPortFree>
				vPortFree( pxTCB );
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fee6 	bl	8008454 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007688:	e018      	b.n	80076bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007690:	2b01      	cmp	r3, #1
 8007692:	d103      	bne.n	800769c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fedd 	bl	8008454 <vPortFree>
	}
 800769a:	e00f      	b.n	80076bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d00a      	beq.n	80076bc <prvDeleteTCB+0x60>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	60fb      	str	r3, [r7, #12]
}
 80076b8:	bf00      	nop
 80076ba:	e7fe      	b.n	80076ba <prvDeleteTCB+0x5e>
	}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ca:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <prvResetNextTaskUnblockTime+0x40>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <prvResetNextTaskUnblockTime+0x14>
 80076d4:	2301      	movs	r3, #1
 80076d6:	e000      	b.n	80076da <prvResetNextTaskUnblockTime+0x16>
 80076d8:	2300      	movs	r3, #0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <prvResetNextTaskUnblockTime+0x44>)
 80076e0:	f04f 32ff 	mov.w	r2, #4294967295
 80076e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076e6:	e008      	b.n	80076fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076e8:	4b06      	ldr	r3, [pc, #24]	; (8007704 <prvResetNextTaskUnblockTime+0x40>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	4a04      	ldr	r2, [pc, #16]	; (8007708 <prvResetNextTaskUnblockTime+0x44>)
 80076f8:	6013      	str	r3, [r2, #0]
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr
 8007704:	20000f70 	.word	0x20000f70
 8007708:	20000fd8 	.word	0x20000fd8

0800770c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007712:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <xTaskGetSchedulerState+0x34>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800771a:	2301      	movs	r3, #1
 800771c:	607b      	str	r3, [r7, #4]
 800771e:	e008      	b.n	8007732 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007720:	4b08      	ldr	r3, [pc, #32]	; (8007744 <xTaskGetSchedulerState+0x38>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007728:	2302      	movs	r3, #2
 800772a:	607b      	str	r3, [r7, #4]
 800772c:	e001      	b.n	8007732 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800772e:	2300      	movs	r3, #0
 8007730:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007732:	687b      	ldr	r3, [r7, #4]
	}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20000fc4 	.word	0x20000fc4
 8007744:	20000fe0 	.word	0x20000fe0

08007748 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d056      	beq.n	800780c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800775e:	4b2e      	ldr	r3, [pc, #184]	; (8007818 <xTaskPriorityDisinherit+0xd0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	429a      	cmp	r2, r3
 8007766:	d00a      	beq.n	800777e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	60fb      	str	r3, [r7, #12]
}
 800777a:	bf00      	nop
 800777c:	e7fe      	b.n	800777c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10a      	bne.n	800779c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	60bb      	str	r3, [r7, #8]
}
 8007798:	bf00      	nop
 800779a:	e7fe      	b.n	800779a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a0:	1e5a      	subs	r2, r3, #1
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d02c      	beq.n	800780c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d128      	bne.n	800780c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	3304      	adds	r3, #4
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fe fbd2 	bl	8005f68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077dc:	4b0f      	ldr	r3, [pc, #60]	; (800781c <xTaskPriorityDisinherit+0xd4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d903      	bls.n	80077ec <xTaskPriorityDisinherit+0xa4>
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	4a0c      	ldr	r2, [pc, #48]	; (800781c <xTaskPriorityDisinherit+0xd4>)
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f0:	4613      	mov	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4a09      	ldr	r2, [pc, #36]	; (8007820 <xTaskPriorityDisinherit+0xd8>)
 80077fa:	441a      	add	r2, r3
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	3304      	adds	r3, #4
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f7fe fb55 	bl	8005eb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007808:	2301      	movs	r3, #1
 800780a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800780c:	697b      	ldr	r3, [r7, #20]
	}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000ae4 	.word	0x20000ae4
 800781c:	20000fc0 	.word	0x20000fc0
 8007820:	20000ae8 	.word	0x20000ae8

08007824 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800782e:	4b21      	ldr	r3, [pc, #132]	; (80078b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007834:	4b20      	ldr	r3, [pc, #128]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3304      	adds	r3, #4
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fb94 	bl	8005f68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007846:	d10a      	bne.n	800785e <prvAddCurrentTaskToDelayedList+0x3a>
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d007      	beq.n	800785e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800784e:	4b1a      	ldr	r3, [pc, #104]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3304      	adds	r3, #4
 8007854:	4619      	mov	r1, r3
 8007856:	4819      	ldr	r0, [pc, #100]	; (80078bc <prvAddCurrentTaskToDelayedList+0x98>)
 8007858:	f7fe fb2b 	bl	8005eb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800785c:	e026      	b.n	80078ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4413      	add	r3, r2
 8007864:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	429a      	cmp	r2, r3
 8007874:	d209      	bcs.n	800788a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007876:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4b0f      	ldr	r3, [pc, #60]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3304      	adds	r3, #4
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7fe fb38 	bl	8005ef8 <vListInsert>
}
 8007888:	e010      	b.n	80078ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800788a:	4b0e      	ldr	r3, [pc, #56]	; (80078c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3304      	adds	r3, #4
 8007894:	4619      	mov	r1, r3
 8007896:	4610      	mov	r0, r2
 8007898:	f7fe fb2e 	bl	8005ef8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800789c:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d202      	bcs.n	80078ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078a6:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	6013      	str	r3, [r2, #0]
}
 80078ac:	bf00      	nop
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20000fbc 	.word	0x20000fbc
 80078b8:	20000ae4 	.word	0x20000ae4
 80078bc:	20000fa4 	.word	0x20000fa4
 80078c0:	20000f74 	.word	0x20000f74
 80078c4:	20000f70 	.word	0x20000f70
 80078c8:	20000fd8 	.word	0x20000fd8

080078cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08a      	sub	sp, #40	; 0x28
 80078d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078d6:	f000 facb 	bl	8007e70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078da:	4b1c      	ldr	r3, [pc, #112]	; (800794c <xTimerCreateTimerTask+0x80>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d021      	beq.n	8007926 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078ea:	1d3a      	adds	r2, r7, #4
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	f107 030c 	add.w	r3, r7, #12
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe fa97 	bl	8005e28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	9202      	str	r2, [sp, #8]
 8007902:	9301      	str	r3, [sp, #4]
 8007904:	2302      	movs	r3, #2
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	2300      	movs	r3, #0
 800790a:	460a      	mov	r2, r1
 800790c:	4910      	ldr	r1, [pc, #64]	; (8007950 <xTimerCreateTimerTask+0x84>)
 800790e:	4811      	ldr	r0, [pc, #68]	; (8007954 <xTimerCreateTimerTask+0x88>)
 8007910:	f7ff f838 	bl	8006984 <xTaskCreateStatic>
 8007914:	4603      	mov	r3, r0
 8007916:	4a10      	ldr	r2, [pc, #64]	; (8007958 <xTimerCreateTimerTask+0x8c>)
 8007918:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800791a:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <xTimerCreateTimerTask+0x8c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007922:	2301      	movs	r3, #1
 8007924:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10a      	bne.n	8007942 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	613b      	str	r3, [r7, #16]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007942:	697b      	ldr	r3, [r7, #20]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20001014 	.word	0x20001014
 8007950:	0800910c 	.word	0x0800910c
 8007954:	08007a79 	.word	0x08007a79
 8007958:	20001018 	.word	0x20001018

0800795c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08a      	sub	sp, #40	; 0x28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
 8007968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800796a:	2300      	movs	r3, #0
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10a      	bne.n	800798a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007978:	f383 8811 	msr	BASEPRI, r3
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	623b      	str	r3, [r7, #32]
}
 8007986:	bf00      	nop
 8007988:	e7fe      	b.n	8007988 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800798a:	4b1a      	ldr	r3, [pc, #104]	; (80079f4 <xTimerGenericCommand+0x98>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d02a      	beq.n	80079e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b05      	cmp	r3, #5
 80079a2:	dc18      	bgt.n	80079d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079a4:	f7ff feb2 	bl	800770c <xTaskGetSchedulerState>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d109      	bne.n	80079c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079ae:	4b11      	ldr	r3, [pc, #68]	; (80079f4 <xTimerGenericCommand+0x98>)
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	f107 0110 	add.w	r1, r7, #16
 80079b6:	2300      	movs	r3, #0
 80079b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ba:	f7fe fc01 	bl	80061c0 <xQueueGenericSend>
 80079be:	6278      	str	r0, [r7, #36]	; 0x24
 80079c0:	e012      	b.n	80079e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079c2:	4b0c      	ldr	r3, [pc, #48]	; (80079f4 <xTimerGenericCommand+0x98>)
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	f107 0110 	add.w	r1, r7, #16
 80079ca:	2300      	movs	r3, #0
 80079cc:	2200      	movs	r2, #0
 80079ce:	f7fe fbf7 	bl	80061c0 <xQueueGenericSend>
 80079d2:	6278      	str	r0, [r7, #36]	; 0x24
 80079d4:	e008      	b.n	80079e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <xTimerGenericCommand+0x98>)
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	f107 0110 	add.w	r1, r7, #16
 80079de:	2300      	movs	r3, #0
 80079e0:	683a      	ldr	r2, [r7, #0]
 80079e2:	f7fe fceb 	bl	80063bc <xQueueGenericSendFromISR>
 80079e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3728      	adds	r7, #40	; 0x28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20001014 	.word	0x20001014

080079f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a02:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <prvProcessExpiredTimer+0x7c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe faa9 	bl	8005f68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	69db      	ldr	r3, [r3, #28]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d122      	bne.n	8007a64 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	699a      	ldr	r2, [r3, #24]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	18d1      	adds	r1, r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	6978      	ldr	r0, [r7, #20]
 8007a2c:	f000 f8c8 	bl	8007bc0 <prvInsertTimerInActiveList>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d016      	beq.n	8007a64 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a36:	2300      	movs	r3, #0
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	2100      	movs	r1, #0
 8007a40:	6978      	ldr	r0, [r7, #20]
 8007a42:	f7ff ff8b 	bl	800795c <xTimerGenericCommand>
 8007a46:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10a      	bne.n	8007a64 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60fb      	str	r3, [r7, #12]
}
 8007a60:	bf00      	nop
 8007a62:	e7fe      	b.n	8007a62 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	6978      	ldr	r0, [r7, #20]
 8007a6a:	4798      	blx	r3
}
 8007a6c:	bf00      	nop
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	2000100c 	.word	0x2000100c

08007a78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a80:	f107 0308 	add.w	r3, r7, #8
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 f857 	bl	8007b38 <prvGetNextExpireTime>
 8007a8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f803 	bl	8007a9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a96:	f000 f8d5 	bl	8007c44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a9a:	e7f1      	b.n	8007a80 <prvTimerTask+0x8>

08007a9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007aa6:	f7ff fa3f 	bl	8006f28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aaa:	f107 0308 	add.w	r3, r7, #8
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f000 f866 	bl	8007b80 <prvSampleTimeNow>
 8007ab4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d130      	bne.n	8007b1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10a      	bne.n	8007ad8 <prvProcessTimerOrBlockTask+0x3c>
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d806      	bhi.n	8007ad8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007aca:	f7ff fa3b 	bl	8006f44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ace:	68f9      	ldr	r1, [r7, #12]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff ff91 	bl	80079f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ad6:	e024      	b.n	8007b22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d008      	beq.n	8007af0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ade:	4b13      	ldr	r3, [pc, #76]	; (8007b2c <prvProcessTimerOrBlockTask+0x90>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bf0c      	ite	eq
 8007ae8:	2301      	moveq	r3, #1
 8007aea:	2300      	movne	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007af0:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <prvProcessTimerOrBlockTask+0x94>)
 8007af2:	6818      	ldr	r0, [r3, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	4619      	mov	r1, r3
 8007afe:	f7fe ff0d 	bl	800691c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b02:	f7ff fa1f 	bl	8006f44 <xTaskResumeAll>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10a      	bne.n	8007b22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b0c:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <prvProcessTimerOrBlockTask+0x98>)
 8007b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	f3bf 8f6f 	isb	sy
}
 8007b1c:	e001      	b.n	8007b22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b1e:	f7ff fa11 	bl	8006f44 <xTaskResumeAll>
}
 8007b22:	bf00      	nop
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20001010 	.word	0x20001010
 8007b30:	20001014 	.word	0x20001014
 8007b34:	e000ed04 	.word	0xe000ed04

08007b38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b40:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <prvGetNextExpireTime+0x44>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bf0c      	ite	eq
 8007b4a:	2301      	moveq	r3, #1
 8007b4c:	2300      	movne	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d105      	bne.n	8007b6a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b5e:	4b07      	ldr	r3, [pc, #28]	; (8007b7c <prvGetNextExpireTime+0x44>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]
 8007b68:	e001      	b.n	8007b6e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	2000100c 	.word	0x2000100c

08007b80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b88:	f7ff fa7a 	bl	8007080 <xTaskGetTickCount>
 8007b8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b8e:	4b0b      	ldr	r3, [pc, #44]	; (8007bbc <prvSampleTimeNow+0x3c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d205      	bcs.n	8007ba4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b98:	f000 f908 	bl	8007dac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	e002      	b.n	8007baa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007baa:	4a04      	ldr	r2, [pc, #16]	; (8007bbc <prvSampleTimeNow+0x3c>)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	2000101c 	.word	0x2000101c

08007bc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d812      	bhi.n	8007c0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	1ad2      	subs	r2, r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d302      	bcc.n	8007bfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	e01b      	b.n	8007c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <prvInsertTimerInActiveList+0x7c>)
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f7fe f977 	bl	8005ef8 <vListInsert>
 8007c0a:	e012      	b.n	8007c32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d206      	bcs.n	8007c22 <prvInsertTimerInActiveList+0x62>
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d302      	bcc.n	8007c22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e007      	b.n	8007c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c22:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <prvInsertTimerInActiveList+0x80>)
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3304      	adds	r3, #4
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	f7fe f963 	bl	8005ef8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c32:	697b      	ldr	r3, [r7, #20]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20001010 	.word	0x20001010
 8007c40:	2000100c 	.word	0x2000100c

08007c44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08e      	sub	sp, #56	; 0x38
 8007c48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c4a:	e09d      	b.n	8007d88 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	da18      	bge.n	8007c84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c52:	1d3b      	adds	r3, r7, #4
 8007c54:	3304      	adds	r3, #4
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10a      	bne.n	8007c74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	f383 8811 	msr	BASEPRI, r3
 8007c66:	f3bf 8f6f 	isb	sy
 8007c6a:	f3bf 8f4f 	dsb	sy
 8007c6e:	61fb      	str	r3, [r7, #28]
}
 8007c70:	bf00      	nop
 8007c72:	e7fe      	b.n	8007c72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c7a:	6850      	ldr	r0, [r2, #4]
 8007c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c7e:	6892      	ldr	r2, [r2, #8]
 8007c80:	4611      	mov	r1, r2
 8007c82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	db7d      	blt.n	8007d86 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe f964 	bl	8005f68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ca0:	463b      	mov	r3, r7
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff ff6c 	bl	8007b80 <prvSampleTimeNow>
 8007ca8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b09      	cmp	r3, #9
 8007cae:	d86b      	bhi.n	8007d88 <prvProcessReceivedCommands+0x144>
 8007cb0:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <prvProcessReceivedCommands+0x74>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007ce1 	.word	0x08007ce1
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007ce1 	.word	0x08007ce1
 8007cc4:	08007d89 	.word	0x08007d89
 8007cc8:	08007d3d 	.word	0x08007d3d
 8007ccc:	08007d75 	.word	0x08007d75
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007ce1 	.word	0x08007ce1
 8007cd8:	08007d89 	.word	0x08007d89
 8007cdc:	08007d3d 	.word	0x08007d3d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	18d1      	adds	r1, r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cee:	f7ff ff67 	bl	8007bc0 <prvInsertTimerInActiveList>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d047      	beq.n	8007d88 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d13f      	bne.n	8007d88 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	441a      	add	r2, r3
 8007d10:	2300      	movs	r3, #0
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	2300      	movs	r3, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d1a:	f7ff fe1f 	bl	800795c <xTimerGenericCommand>
 8007d1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d130      	bne.n	8007d88 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	61bb      	str	r3, [r7, #24]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10a      	bne.n	8007d60 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	617b      	str	r3, [r7, #20]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	699a      	ldr	r2, [r3, #24]
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	18d1      	adds	r1, r2, r3
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d6e:	f7ff ff27 	bl	8007bc0 <prvInsertTimerInActiveList>
					break;
 8007d72:	e009      	b.n	8007d88 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d104      	bne.n	8007d88 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d80:	f000 fb68 	bl	8008454 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d84:	e000      	b.n	8007d88 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d86:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d88:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <prvProcessReceivedCommands+0x164>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	1d39      	adds	r1, r7, #4
 8007d8e:	2200      	movs	r2, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fe fbab 	bl	80064ec <xQueueReceive>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f47f af57 	bne.w	8007c4c <prvProcessReceivedCommands+0x8>
	}
}
 8007d9e:	bf00      	nop
 8007da0:	bf00      	nop
 8007da2:	3730      	adds	r7, #48	; 0x30
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	20001014 	.word	0x20001014

08007dac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007db2:	e045      	b.n	8007e40 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007db4:	4b2c      	ldr	r3, [pc, #176]	; (8007e68 <prvSwitchTimerLists+0xbc>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dbe:	4b2a      	ldr	r3, [pc, #168]	; (8007e68 <prvSwitchTimerLists+0xbc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3304      	adds	r3, #4
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7fe f8cb 	bl	8005f68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d12e      	bne.n	8007e40 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	699b      	ldr	r3, [r3, #24]
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	4413      	add	r3, r2
 8007dea:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d90e      	bls.n	8007e12 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e00:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <prvSwitchTimerLists+0xbc>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4610      	mov	r0, r2
 8007e0c:	f7fe f874 	bl	8005ef8 <vListInsert>
 8007e10:	e016      	b.n	8007e40 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e12:	2300      	movs	r3, #0
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	2300      	movs	r3, #0
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f7ff fd9d 	bl	800795c <xTimerGenericCommand>
 8007e22:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10a      	bne.n	8007e40 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	603b      	str	r3, [r7, #0]
}
 8007e3c:	bf00      	nop
 8007e3e:	e7fe      	b.n	8007e3e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e40:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <prvSwitchTimerLists+0xbc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1b4      	bne.n	8007db4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e4a:	4b07      	ldr	r3, [pc, #28]	; (8007e68 <prvSwitchTimerLists+0xbc>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e50:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <prvSwitchTimerLists+0xc0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a04      	ldr	r2, [pc, #16]	; (8007e68 <prvSwitchTimerLists+0xbc>)
 8007e56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e58:	4a04      	ldr	r2, [pc, #16]	; (8007e6c <prvSwitchTimerLists+0xc0>)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	6013      	str	r3, [r2, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	2000100c 	.word	0x2000100c
 8007e6c:	20001010 	.word	0x20001010

08007e70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e76:	f000 f929 	bl	80080cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e7a:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d120      	bne.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e82:	4814      	ldr	r0, [pc, #80]	; (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e84:	f7fd ffea 	bl	8005e5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e88:	4813      	ldr	r0, [pc, #76]	; (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e8a:	f7fd ffe7 	bl	8005e5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <prvCheckForValidListAndQueue+0x6c>)
 8007e90:	4a10      	ldr	r2, [pc, #64]	; (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e94:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <prvCheckForValidListAndQueue+0x70>)
 8007e96:	4a10      	ldr	r2, [pc, #64]	; (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <prvCheckForValidListAndQueue+0x74>)
 8007ea0:	4a11      	ldr	r2, [pc, #68]	; (8007ee8 <prvCheckForValidListAndQueue+0x78>)
 8007ea2:	2110      	movs	r1, #16
 8007ea4:	200a      	movs	r0, #10
 8007ea6:	f7fe f8f1 	bl	800608c <xQueueGenericCreateStatic>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4a08      	ldr	r2, [pc, #32]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007eb0:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	490b      	ldr	r1, [pc, #44]	; (8007eec <prvCheckForValidListAndQueue+0x7c>)
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fd04 	bl	80068cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ec4:	f000 f932 	bl	800812c <vPortExitCritical>
}
 8007ec8:	bf00      	nop
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20001014 	.word	0x20001014
 8007ed4:	20000fe4 	.word	0x20000fe4
 8007ed8:	20000ff8 	.word	0x20000ff8
 8007edc:	2000100c 	.word	0x2000100c
 8007ee0:	20001010 	.word	0x20001010
 8007ee4:	200010c0 	.word	0x200010c0
 8007ee8:	20001020 	.word	0x20001020
 8007eec:	08009114 	.word	0x08009114

08007ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b04      	subs	r3, #4
 8007f00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3b04      	subs	r3, #4
 8007f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f023 0201 	bic.w	r2, r3, #1
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3b04      	subs	r3, #4
 8007f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f20:	4a08      	ldr	r2, [pc, #32]	; (8007f44 <pxPortInitialiseStack+0x54>)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3b14      	subs	r3, #20
 8007f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3b20      	subs	r3, #32
 8007f36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f38:	68fb      	ldr	r3, [r7, #12]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr
 8007f44:	08007f49 	.word	0x08007f49

08007f48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f52:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <prvTaskExitError+0x54>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5a:	d00a      	beq.n	8007f72 <prvTaskExitError+0x2a>
	__asm volatile
 8007f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	60fb      	str	r3, [r7, #12]
}
 8007f6e:	bf00      	nop
 8007f70:	e7fe      	b.n	8007f70 <prvTaskExitError+0x28>
	__asm volatile
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	f383 8811 	msr	BASEPRI, r3
 8007f7a:	f3bf 8f6f 	isb	sy
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	60bb      	str	r3, [r7, #8]
}
 8007f84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f86:	bf00      	nop
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d0fc      	beq.n	8007f88 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f8e:	bf00      	nop
 8007f90:	bf00      	nop
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20000020 	.word	0x20000020

08007fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fa0:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <pxCurrentTCBConst2>)
 8007fa2:	6819      	ldr	r1, [r3, #0]
 8007fa4:	6808      	ldr	r0, [r1, #0]
 8007fa6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007faa:	f380 8809 	msr	PSP, r0
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f04f 0000 	mov.w	r0, #0
 8007fb6:	f380 8811 	msr	BASEPRI, r0
 8007fba:	f04e 0e0d 	orr.w	lr, lr, #13
 8007fbe:	4770      	bx	lr

08007fc0 <pxCurrentTCBConst2>:
 8007fc0:	20000ae4 	.word	0x20000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop

08007fc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007fc8:	4806      	ldr	r0, [pc, #24]	; (8007fe4 <prvPortStartFirstTask+0x1c>)
 8007fca:	6800      	ldr	r0, [r0, #0]
 8007fcc:	6800      	ldr	r0, [r0, #0]
 8007fce:	f380 8808 	msr	MSP, r0
 8007fd2:	b662      	cpsie	i
 8007fd4:	b661      	cpsie	f
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	df00      	svc	0
 8007fe0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fe2:	bf00      	nop
 8007fe4:	e000ed08 	.word	0xe000ed08

08007fe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fee:	4b32      	ldr	r3, [pc, #200]	; (80080b8 <xPortStartScheduler+0xd0>)
 8007ff0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	22ff      	movs	r2, #255	; 0xff
 8007ffe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008010:	b2da      	uxtb	r2, r3
 8008012:	4b2a      	ldr	r3, [pc, #168]	; (80080bc <xPortStartScheduler+0xd4>)
 8008014:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008016:	4b2a      	ldr	r3, [pc, #168]	; (80080c0 <xPortStartScheduler+0xd8>)
 8008018:	2207      	movs	r2, #7
 800801a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800801c:	e009      	b.n	8008032 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800801e:	4b28      	ldr	r3, [pc, #160]	; (80080c0 <xPortStartScheduler+0xd8>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3b01      	subs	r3, #1
 8008024:	4a26      	ldr	r2, [pc, #152]	; (80080c0 <xPortStartScheduler+0xd8>)
 8008026:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008028:	78fb      	ldrb	r3, [r7, #3]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	005b      	lsls	r3, r3, #1
 800802e:	b2db      	uxtb	r3, r3
 8008030:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	b2db      	uxtb	r3, r3
 8008036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803a:	2b80      	cmp	r3, #128	; 0x80
 800803c:	d0ef      	beq.n	800801e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800803e:	4b20      	ldr	r3, [pc, #128]	; (80080c0 <xPortStartScheduler+0xd8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f1c3 0307 	rsb	r3, r3, #7
 8008046:	2b04      	cmp	r3, #4
 8008048:	d00a      	beq.n	8008060 <xPortStartScheduler+0x78>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	60bb      	str	r3, [r7, #8]
}
 800805c:	bf00      	nop
 800805e:	e7fe      	b.n	800805e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008060:	4b17      	ldr	r3, [pc, #92]	; (80080c0 <xPortStartScheduler+0xd8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	4a16      	ldr	r2, [pc, #88]	; (80080c0 <xPortStartScheduler+0xd8>)
 8008068:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800806a:	4b15      	ldr	r3, [pc, #84]	; (80080c0 <xPortStartScheduler+0xd8>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008072:	4a13      	ldr	r2, [pc, #76]	; (80080c0 <xPortStartScheduler+0xd8>)
 8008074:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	b2da      	uxtb	r2, r3
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800807e:	4b11      	ldr	r3, [pc, #68]	; (80080c4 <xPortStartScheduler+0xdc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a10      	ldr	r2, [pc, #64]	; (80080c4 <xPortStartScheduler+0xdc>)
 8008084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008088:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800808a:	4b0e      	ldr	r3, [pc, #56]	; (80080c4 <xPortStartScheduler+0xdc>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a0d      	ldr	r2, [pc, #52]	; (80080c4 <xPortStartScheduler+0xdc>)
 8008090:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008094:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008096:	f000 f8b9 	bl	800820c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800809a:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <xPortStartScheduler+0xe0>)
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080a0:	f7ff ff92 	bl	8007fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080a4:	f7ff f8b8 	bl	8007218 <vTaskSwitchContext>
	prvTaskExitError();
 80080a8:	f7ff ff4e 	bl	8007f48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	e000e400 	.word	0xe000e400
 80080bc:	20001110 	.word	0x20001110
 80080c0:	20001114 	.word	0x20001114
 80080c4:	e000ed20 	.word	0xe000ed20
 80080c8:	20000020 	.word	0x20000020

080080cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	607b      	str	r3, [r7, #4]
}
 80080e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <vPortEnterCritical+0x58>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3301      	adds	r3, #1
 80080ec:	4a0d      	ldr	r2, [pc, #52]	; (8008124 <vPortEnterCritical+0x58>)
 80080ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080f0:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <vPortEnterCritical+0x58>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d10f      	bne.n	8008118 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080f8:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <vPortEnterCritical+0x5c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <vPortEnterCritical+0x4c>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	603b      	str	r3, [r7, #0]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <vPortEnterCritical+0x4a>
	}
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	bc80      	pop	{r7}
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000020 	.word	0x20000020
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008132:	4b11      	ldr	r3, [pc, #68]	; (8008178 <vPortExitCritical+0x4c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <vPortExitCritical+0x24>
	__asm volatile
 800813a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813e:	f383 8811 	msr	BASEPRI, r3
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	607b      	str	r3, [r7, #4]
}
 800814c:	bf00      	nop
 800814e:	e7fe      	b.n	800814e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008150:	4b09      	ldr	r3, [pc, #36]	; (8008178 <vPortExitCritical+0x4c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3b01      	subs	r3, #1
 8008156:	4a08      	ldr	r2, [pc, #32]	; (8008178 <vPortExitCritical+0x4c>)
 8008158:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800815a:	4b07      	ldr	r3, [pc, #28]	; (8008178 <vPortExitCritical+0x4c>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d105      	bne.n	800816e <vPortExitCritical+0x42>
 8008162:	2300      	movs	r3, #0
 8008164:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	f383 8811 	msr	BASEPRI, r3
}
 800816c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr
 8008178:	20000020 	.word	0x20000020
 800817c:	00000000 	.word	0x00000000

08008180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008180:	f3ef 8009 	mrs	r0, PSP
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	4b0d      	ldr	r3, [pc, #52]	; (80081c0 <pxCurrentTCBConst>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008190:	6010      	str	r0, [r2, #0]
 8008192:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008196:	f04f 0050 	mov.w	r0, #80	; 0x50
 800819a:	f380 8811 	msr	BASEPRI, r0
 800819e:	f7ff f83b 	bl	8007218 <vTaskSwitchContext>
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8811 	msr	BASEPRI, r0
 80081aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80081ae:	6819      	ldr	r1, [r3, #0]
 80081b0:	6808      	ldr	r0, [r1, #0]
 80081b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80081b6:	f380 8809 	msr	PSP, r0
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	4770      	bx	lr

080081c0 <pxCurrentTCBConst>:
 80081c0:	20000ae4 	.word	0x20000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	607b      	str	r3, [r7, #4]
}
 80081e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081e2:	f7fe ff5b 	bl	800709c <xTaskIncrementTick>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ec:	4b06      	ldr	r3, [pc, #24]	; (8008208 <SysTick_Handler+0x40>)
 80081ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <vPortSetupTimerInterrupt+0x30>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008216:	4b0a      	ldr	r3, [pc, #40]	; (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800821c:	4b09      	ldr	r3, [pc, #36]	; (8008244 <vPortSetupTimerInterrupt+0x38>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a09      	ldr	r2, [pc, #36]	; (8008248 <vPortSetupTimerInterrupt+0x3c>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	099b      	lsrs	r3, r3, #6
 8008228:	4a08      	ldr	r2, [pc, #32]	; (800824c <vPortSetupTimerInterrupt+0x40>)
 800822a:	3b01      	subs	r3, #1
 800822c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800822e:	4b03      	ldr	r3, [pc, #12]	; (800823c <vPortSetupTimerInterrupt+0x30>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr
 800823c:	e000e010 	.word	0xe000e010
 8008240:	e000e018 	.word	0xe000e018
 8008244:	20000014 	.word	0x20000014
 8008248:	10624dd3 	.word	0x10624dd3
 800824c:	e000e014 	.word	0xe000e014

08008250 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008256:	f3ef 8305 	mrs	r3, IPSR
 800825a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b0f      	cmp	r3, #15
 8008260:	d914      	bls.n	800828c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008262:	4a16      	ldr	r2, [pc, #88]	; (80082bc <vPortValidateInterruptPriority+0x6c>)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800826c:	4b14      	ldr	r3, [pc, #80]	; (80082c0 <vPortValidateInterruptPriority+0x70>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	7afa      	ldrb	r2, [r7, #11]
 8008272:	429a      	cmp	r2, r3
 8008274:	d20a      	bcs.n	800828c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	607b      	str	r3, [r7, #4]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800828c:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <vPortValidateInterruptPriority+0x74>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <vPortValidateInterruptPriority+0x78>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d90a      	bls.n	80082b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	f383 8811 	msr	BASEPRI, r3
 80082a4:	f3bf 8f6f 	isb	sy
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	603b      	str	r3, [r7, #0]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <vPortValidateInterruptPriority+0x60>
	}
 80082b2:	bf00      	nop
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr
 80082bc:	e000e3f0 	.word	0xe000e3f0
 80082c0:	20001110 	.word	0x20001110
 80082c4:	e000ed0c 	.word	0xe000ed0c
 80082c8:	20001114 	.word	0x20001114

080082cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b08a      	sub	sp, #40	; 0x28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082d8:	f7fe fe26 	bl	8006f28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082dc:	4b58      	ldr	r3, [pc, #352]	; (8008440 <pvPortMalloc+0x174>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082e4:	f000 f910 	bl	8008508 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082e8:	4b56      	ldr	r3, [pc, #344]	; (8008444 <pvPortMalloc+0x178>)
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4013      	ands	r3, r2
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f040 808e 	bne.w	8008412 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d01d      	beq.n	8008338 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082fc:	2208      	movs	r2, #8
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4413      	add	r3, r2
 8008302:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f003 0307 	and.w	r3, r3, #7
 800830a:	2b00      	cmp	r3, #0
 800830c:	d014      	beq.n	8008338 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f023 0307 	bic.w	r3, r3, #7
 8008314:	3308      	adds	r3, #8
 8008316:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <pvPortMalloc+0x6c>
	__asm volatile
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	f383 8811 	msr	BASEPRI, r3
 800832a:	f3bf 8f6f 	isb	sy
 800832e:	f3bf 8f4f 	dsb	sy
 8008332:	617b      	str	r3, [r7, #20]
}
 8008334:	bf00      	nop
 8008336:	e7fe      	b.n	8008336 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d069      	beq.n	8008412 <pvPortMalloc+0x146>
 800833e:	4b42      	ldr	r3, [pc, #264]	; (8008448 <pvPortMalloc+0x17c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d864      	bhi.n	8008412 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008348:	4b40      	ldr	r3, [pc, #256]	; (800844c <pvPortMalloc+0x180>)
 800834a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800834c:	4b3f      	ldr	r3, [pc, #252]	; (800844c <pvPortMalloc+0x180>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008352:	e004      	b.n	800835e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008356:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	429a      	cmp	r2, r3
 8008366:	d903      	bls.n	8008370 <pvPortMalloc+0xa4>
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1f1      	bne.n	8008354 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008370:	4b33      	ldr	r3, [pc, #204]	; (8008440 <pvPortMalloc+0x174>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008376:	429a      	cmp	r2, r3
 8008378:	d04b      	beq.n	8008412 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2208      	movs	r2, #8
 8008380:	4413      	add	r3, r2
 8008382:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	1ad2      	subs	r2, r2, r3
 8008394:	2308      	movs	r3, #8
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	429a      	cmp	r2, r3
 800839a:	d91f      	bls.n	80083dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800839c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4413      	add	r3, r2
 80083a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <pvPortMalloc+0xf8>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	613b      	str	r3, [r7, #16]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	1ad2      	subs	r2, r2, r3
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083d6:	69b8      	ldr	r0, [r7, #24]
 80083d8:	f000 f8f8 	bl	80085cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083dc:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <pvPortMalloc+0x17c>)
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	4a18      	ldr	r2, [pc, #96]	; (8008448 <pvPortMalloc+0x17c>)
 80083e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083ea:	4b17      	ldr	r3, [pc, #92]	; (8008448 <pvPortMalloc+0x17c>)
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	4b18      	ldr	r3, [pc, #96]	; (8008450 <pvPortMalloc+0x184>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d203      	bcs.n	80083fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <pvPortMalloc+0x17c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a15      	ldr	r2, [pc, #84]	; (8008450 <pvPortMalloc+0x184>)
 80083fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	4b10      	ldr	r3, [pc, #64]	; (8008444 <pvPortMalloc+0x178>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	431a      	orrs	r2, r3
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008412:	f7fe fd97 	bl	8006f44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f003 0307 	and.w	r3, r3, #7
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00a      	beq.n	8008436 <pvPortMalloc+0x16a>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <pvPortMalloc+0x168>
	return pvReturn;
 8008436:	69fb      	ldr	r3, [r7, #28]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3728      	adds	r7, #40	; 0x28
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20001d20 	.word	0x20001d20
 8008444:	20001d2c 	.word	0x20001d2c
 8008448:	20001d24 	.word	0x20001d24
 800844c:	20001d18 	.word	0x20001d18
 8008450:	20001d28 	.word	0x20001d28

08008454 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d048      	beq.n	80084f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008466:	2308      	movs	r3, #8
 8008468:	425b      	negs	r3, r3
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	4413      	add	r3, r2
 800846e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	4b21      	ldr	r3, [pc, #132]	; (8008500 <vPortFree+0xac>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4013      	ands	r3, r2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <vPortFree+0x44>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	60fb      	str	r3, [r7, #12]
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <vPortFree+0x62>
	__asm volatile
 80084a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	60bb      	str	r3, [r7, #8]
}
 80084b2:	bf00      	nop
 80084b4:	e7fe      	b.n	80084b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	685a      	ldr	r2, [r3, #4]
 80084ba:	4b11      	ldr	r3, [pc, #68]	; (8008500 <vPortFree+0xac>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4013      	ands	r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d019      	beq.n	80084f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d115      	bne.n	80084f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <vPortFree+0xac>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	43db      	mvns	r3, r3
 80084d6:	401a      	ands	r2, r3
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084dc:	f7fe fd24 	bl	8006f28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	4b07      	ldr	r3, [pc, #28]	; (8008504 <vPortFree+0xb0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4413      	add	r3, r2
 80084ea:	4a06      	ldr	r2, [pc, #24]	; (8008504 <vPortFree+0xb0>)
 80084ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084ee:	6938      	ldr	r0, [r7, #16]
 80084f0:	f000 f86c 	bl	80085cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80084f4:	f7fe fd26 	bl	8006f44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084f8:	bf00      	nop
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20001d2c 	.word	0x20001d2c
 8008504:	20001d24 	.word	0x20001d24

08008508 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800850e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008512:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008514:	4b27      	ldr	r3, [pc, #156]	; (80085b4 <prvHeapInit+0xac>)
 8008516:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f003 0307 	and.w	r3, r3, #7
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00c      	beq.n	800853c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3307      	adds	r3, #7
 8008526:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0307 	bic.w	r3, r3, #7
 800852e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	4a1f      	ldr	r2, [pc, #124]	; (80085b4 <prvHeapInit+0xac>)
 8008538:	4413      	add	r3, r2
 800853a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008540:	4a1d      	ldr	r2, [pc, #116]	; (80085b8 <prvHeapInit+0xb0>)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008546:	4b1c      	ldr	r3, [pc, #112]	; (80085b8 <prvHeapInit+0xb0>)
 8008548:	2200      	movs	r2, #0
 800854a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	4413      	add	r3, r2
 8008552:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008554:	2208      	movs	r2, #8
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	1a9b      	subs	r3, r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f023 0307 	bic.w	r3, r3, #7
 8008562:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4a15      	ldr	r2, [pc, #84]	; (80085bc <prvHeapInit+0xb4>)
 8008568:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800856a:	4b14      	ldr	r3, [pc, #80]	; (80085bc <prvHeapInit+0xb4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2200      	movs	r2, #0
 8008570:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008572:	4b12      	ldr	r3, [pc, #72]	; (80085bc <prvHeapInit+0xb4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2200      	movs	r2, #0
 8008578:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	1ad2      	subs	r2, r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008588:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <prvHeapInit+0xb4>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	4a0a      	ldr	r2, [pc, #40]	; (80085c0 <prvHeapInit+0xb8>)
 8008596:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	4a09      	ldr	r2, [pc, #36]	; (80085c4 <prvHeapInit+0xbc>)
 800859e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085a0:	4b09      	ldr	r3, [pc, #36]	; (80085c8 <prvHeapInit+0xc0>)
 80085a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085a6:	601a      	str	r2, [r3, #0]
}
 80085a8:	bf00      	nop
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20001118 	.word	0x20001118
 80085b8:	20001d18 	.word	0x20001d18
 80085bc:	20001d20 	.word	0x20001d20
 80085c0:	20001d28 	.word	0x20001d28
 80085c4:	20001d24 	.word	0x20001d24
 80085c8:	20001d2c 	.word	0x20001d2c

080085cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085d4:	4b27      	ldr	r3, [pc, #156]	; (8008674 <prvInsertBlockIntoFreeList+0xa8>)
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e002      	b.n	80085e0 <prvInsertBlockIntoFreeList+0x14>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d8f7      	bhi.n	80085da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	4413      	add	r3, r2
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d108      	bne.n	800860e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	685a      	ldr	r2, [r3, #4]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	441a      	add	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	441a      	add	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d118      	bne.n	8008654 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	4b14      	ldr	r3, [pc, #80]	; (8008678 <prvInsertBlockIntoFreeList+0xac>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d00d      	beq.n	800864a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	441a      	add	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	601a      	str	r2, [r3, #0]
 8008648:	e008      	b.n	800865c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <prvInsertBlockIntoFreeList+0xac>)
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	e003      	b.n	800865c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d002      	beq.n	800866a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	bc80      	pop	{r7}
 8008672:	4770      	bx	lr
 8008674:	20001d18 	.word	0x20001d18
 8008678:	20001d20 	.word	0x20001d20

0800867c <sqrt>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	4606      	mov	r6, r0
 8008680:	460f      	mov	r7, r1
 8008682:	f000 f841 	bl	8008708 <__ieee754_sqrt>
 8008686:	4632      	mov	r2, r6
 8008688:	4604      	mov	r4, r0
 800868a:	460d      	mov	r5, r1
 800868c:	463b      	mov	r3, r7
 800868e:	4630      	mov	r0, r6
 8008690:	4639      	mov	r1, r7
 8008692:	f7f8 f9b3 	bl	80009fc <__aeabi_dcmpun>
 8008696:	b990      	cbnz	r0, 80086be <sqrt+0x42>
 8008698:	2200      	movs	r2, #0
 800869a:	2300      	movs	r3, #0
 800869c:	4630      	mov	r0, r6
 800869e:	4639      	mov	r1, r7
 80086a0:	f7f8 f984 	bl	80009ac <__aeabi_dcmplt>
 80086a4:	b158      	cbz	r0, 80086be <sqrt+0x42>
 80086a6:	f000 fc0f 	bl	8008ec8 <__errno>
 80086aa:	2321      	movs	r3, #33	; 0x21
 80086ac:	2200      	movs	r2, #0
 80086ae:	6003      	str	r3, [r0, #0]
 80086b0:	2300      	movs	r3, #0
 80086b2:	4610      	mov	r0, r2
 80086b4:	4619      	mov	r1, r3
 80086b6:	f7f8 f831 	bl	800071c <__aeabi_ddiv>
 80086ba:	4604      	mov	r4, r0
 80086bc:	460d      	mov	r5, r1
 80086be:	4620      	mov	r0, r4
 80086c0:	4629      	mov	r1, r5
 80086c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086c4 <asinf>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4604      	mov	r4, r0
 80086c8:	f000 f8ce 	bl	8008868 <__ieee754_asinf>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4605      	mov	r5, r0
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7f8 fccd 	bl	8001070 <__aeabi_fcmpun>
 80086d6:	b980      	cbnz	r0, 80086fa <asinf+0x36>
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fbed 	bl	8008eb8 <fabsf>
 80086de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80086e2:	f7f8 fcbb 	bl	800105c <__aeabi_fcmpgt>
 80086e6:	b140      	cbz	r0, 80086fa <asinf+0x36>
 80086e8:	f000 fbee 	bl	8008ec8 <__errno>
 80086ec:	2321      	movs	r3, #33	; 0x21
 80086ee:	6003      	str	r3, [r0, #0]
 80086f0:	4803      	ldr	r0, [pc, #12]	; (8008700 <asinf+0x3c>)
 80086f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086f6:	f000 bbe3 	b.w	8008ec0 <nanf>
 80086fa:	4628      	mov	r0, r5
 80086fc:	bd38      	pop	{r3, r4, r5, pc}
 80086fe:	bf00      	nop
 8008700:	0800917c 	.word	0x0800917c

08008704 <atan2f>:
 8008704:	f000 b9f4 	b.w	8008af0 <__ieee754_atan2f>

08008708 <__ieee754_sqrt>:
 8008708:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008864 <__ieee754_sqrt+0x15c>
 800870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008710:	ea3c 0c01 	bics.w	ip, ip, r1
 8008714:	4606      	mov	r6, r0
 8008716:	460d      	mov	r5, r1
 8008718:	460c      	mov	r4, r1
 800871a:	460a      	mov	r2, r1
 800871c:	4607      	mov	r7, r0
 800871e:	4603      	mov	r3, r0
 8008720:	d10f      	bne.n	8008742 <__ieee754_sqrt+0x3a>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	f7f7 fecf 	bl	80004c8 <__aeabi_dmul>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4630      	mov	r0, r6
 8008730:	4629      	mov	r1, r5
 8008732:	f7f7 fd13 	bl	800015c <__adddf3>
 8008736:	4606      	mov	r6, r0
 8008738:	460d      	mov	r5, r1
 800873a:	4630      	mov	r0, r6
 800873c:	4629      	mov	r1, r5
 800873e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008742:	2900      	cmp	r1, #0
 8008744:	dc0e      	bgt.n	8008764 <__ieee754_sqrt+0x5c>
 8008746:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800874a:	ea5c 0707 	orrs.w	r7, ip, r7
 800874e:	d0f4      	beq.n	800873a <__ieee754_sqrt+0x32>
 8008750:	b141      	cbz	r1, 8008764 <__ieee754_sqrt+0x5c>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	f7f7 fcff 	bl	8000158 <__aeabi_dsub>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	f7f7 ffdd 	bl	800071c <__aeabi_ddiv>
 8008762:	e7e8      	b.n	8008736 <__ieee754_sqrt+0x2e>
 8008764:	1521      	asrs	r1, r4, #20
 8008766:	d075      	beq.n	8008854 <__ieee754_sqrt+0x14c>
 8008768:	07cc      	lsls	r4, r1, #31
 800876a:	f04f 0400 	mov.w	r4, #0
 800876e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008772:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008776:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800877a:	bf5e      	ittt	pl
 800877c:	0fd9      	lsrpl	r1, r3, #31
 800877e:	005b      	lslpl	r3, r3, #1
 8008780:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008784:	0fd9      	lsrs	r1, r3, #31
 8008786:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800878a:	2516      	movs	r5, #22
 800878c:	4620      	mov	r0, r4
 800878e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008792:	107f      	asrs	r7, r7, #1
 8008794:	005b      	lsls	r3, r3, #1
 8008796:	1846      	adds	r6, r0, r1
 8008798:	4296      	cmp	r6, r2
 800879a:	bfde      	ittt	le
 800879c:	1b92      	suble	r2, r2, r6
 800879e:	1870      	addle	r0, r6, r1
 80087a0:	1864      	addle	r4, r4, r1
 80087a2:	0052      	lsls	r2, r2, #1
 80087a4:	3d01      	subs	r5, #1
 80087a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80087aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80087ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087b2:	d1f0      	bne.n	8008796 <__ieee754_sqrt+0x8e>
 80087b4:	4629      	mov	r1, r5
 80087b6:	f04f 0e20 	mov.w	lr, #32
 80087ba:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80087be:	4282      	cmp	r2, r0
 80087c0:	eb06 0c05 	add.w	ip, r6, r5
 80087c4:	dc02      	bgt.n	80087cc <__ieee754_sqrt+0xc4>
 80087c6:	d113      	bne.n	80087f0 <__ieee754_sqrt+0xe8>
 80087c8:	459c      	cmp	ip, r3
 80087ca:	d811      	bhi.n	80087f0 <__ieee754_sqrt+0xe8>
 80087cc:	f1bc 0f00 	cmp.w	ip, #0
 80087d0:	eb0c 0506 	add.w	r5, ip, r6
 80087d4:	da43      	bge.n	800885e <__ieee754_sqrt+0x156>
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	db41      	blt.n	800885e <__ieee754_sqrt+0x156>
 80087da:	f100 0801 	add.w	r8, r0, #1
 80087de:	1a12      	subs	r2, r2, r0
 80087e0:	4640      	mov	r0, r8
 80087e2:	459c      	cmp	ip, r3
 80087e4:	bf88      	it	hi
 80087e6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80087ea:	eba3 030c 	sub.w	r3, r3, ip
 80087ee:	4431      	add	r1, r6
 80087f0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80087f4:	f1be 0e01 	subs.w	lr, lr, #1
 80087f8:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80087fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008800:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008804:	d1db      	bne.n	80087be <__ieee754_sqrt+0xb6>
 8008806:	4313      	orrs	r3, r2
 8008808:	d006      	beq.n	8008818 <__ieee754_sqrt+0x110>
 800880a:	1c48      	adds	r0, r1, #1
 800880c:	bf0b      	itete	eq
 800880e:	4671      	moveq	r1, lr
 8008810:	3101      	addne	r1, #1
 8008812:	3401      	addeq	r4, #1
 8008814:	f021 0101 	bicne.w	r1, r1, #1
 8008818:	1063      	asrs	r3, r4, #1
 800881a:	0849      	lsrs	r1, r1, #1
 800881c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008820:	07e2      	lsls	r2, r4, #31
 8008822:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008826:	bf48      	it	mi
 8008828:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800882c:	460e      	mov	r6, r1
 800882e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008832:	e782      	b.n	800873a <__ieee754_sqrt+0x32>
 8008834:	0ada      	lsrs	r2, r3, #11
 8008836:	3815      	subs	r0, #21
 8008838:	055b      	lsls	r3, r3, #21
 800883a:	2a00      	cmp	r2, #0
 800883c:	d0fa      	beq.n	8008834 <__ieee754_sqrt+0x12c>
 800883e:	02d5      	lsls	r5, r2, #11
 8008840:	d50a      	bpl.n	8008858 <__ieee754_sqrt+0x150>
 8008842:	f1c1 0420 	rsb	r4, r1, #32
 8008846:	fa23 f404 	lsr.w	r4, r3, r4
 800884a:	1e4d      	subs	r5, r1, #1
 800884c:	408b      	lsls	r3, r1
 800884e:	4322      	orrs	r2, r4
 8008850:	1b41      	subs	r1, r0, r5
 8008852:	e789      	b.n	8008768 <__ieee754_sqrt+0x60>
 8008854:	4608      	mov	r0, r1
 8008856:	e7f0      	b.n	800883a <__ieee754_sqrt+0x132>
 8008858:	0052      	lsls	r2, r2, #1
 800885a:	3101      	adds	r1, #1
 800885c:	e7ef      	b.n	800883e <__ieee754_sqrt+0x136>
 800885e:	4680      	mov	r8, r0
 8008860:	e7bd      	b.n	80087de <__ieee754_sqrt+0xd6>
 8008862:	bf00      	nop
 8008864:	7ff00000 	.word	0x7ff00000

08008868 <__ieee754_asinf>:
 8008868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008870:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008874:	4604      	mov	r4, r0
 8008876:	4605      	mov	r5, r0
 8008878:	d10c      	bne.n	8008894 <__ieee754_asinf+0x2c>
 800887a:	498d      	ldr	r1, [pc, #564]	; (8008ab0 <__ieee754_asinf+0x248>)
 800887c:	f7f8 fa32 	bl	8000ce4 <__aeabi_fmul>
 8008880:	498c      	ldr	r1, [pc, #560]	; (8008ab4 <__ieee754_asinf+0x24c>)
 8008882:	4605      	mov	r5, r0
 8008884:	4620      	mov	r0, r4
 8008886:	f7f8 fa2d 	bl	8000ce4 <__aeabi_fmul>
 800888a:	4601      	mov	r1, r0
 800888c:	4628      	mov	r0, r5
 800888e:	f7f8 f921 	bl	8000ad4 <__addsf3>
 8008892:	e006      	b.n	80088a2 <__ieee754_asinf+0x3a>
 8008894:	dd07      	ble.n	80088a6 <__ieee754_asinf+0x3e>
 8008896:	4601      	mov	r1, r0
 8008898:	f7f8 f91a 	bl	8000ad0 <__aeabi_fsub>
 800889c:	4601      	mov	r1, r0
 800889e:	f7f8 fad5 	bl	8000e4c <__aeabi_fdiv>
 80088a2:	4604      	mov	r4, r0
 80088a4:	e00e      	b.n	80088c4 <__ieee754_asinf+0x5c>
 80088a6:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 80088aa:	da58      	bge.n	800895e <__ieee754_asinf+0xf6>
 80088ac:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 80088b0:	da0b      	bge.n	80088ca <__ieee754_asinf+0x62>
 80088b2:	4981      	ldr	r1, [pc, #516]	; (8008ab8 <__ieee754_asinf+0x250>)
 80088b4:	f7f8 f90e 	bl	8000ad4 <__addsf3>
 80088b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80088bc:	f7f8 fbce 	bl	800105c <__aeabi_fcmpgt>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	d04c      	beq.n	800895e <__ieee754_asinf+0xf6>
 80088c4:	4620      	mov	r0, r4
 80088c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ca:	4601      	mov	r1, r0
 80088cc:	f7f8 fa0a 	bl	8000ce4 <__aeabi_fmul>
 80088d0:	4605      	mov	r5, r0
 80088d2:	497a      	ldr	r1, [pc, #488]	; (8008abc <__ieee754_asinf+0x254>)
 80088d4:	f7f8 fa06 	bl	8000ce4 <__aeabi_fmul>
 80088d8:	4979      	ldr	r1, [pc, #484]	; (8008ac0 <__ieee754_asinf+0x258>)
 80088da:	f7f8 f8fb 	bl	8000ad4 <__addsf3>
 80088de:	4629      	mov	r1, r5
 80088e0:	f7f8 fa00 	bl	8000ce4 <__aeabi_fmul>
 80088e4:	4977      	ldr	r1, [pc, #476]	; (8008ac4 <__ieee754_asinf+0x25c>)
 80088e6:	f7f8 f8f3 	bl	8000ad0 <__aeabi_fsub>
 80088ea:	4629      	mov	r1, r5
 80088ec:	f7f8 f9fa 	bl	8000ce4 <__aeabi_fmul>
 80088f0:	4975      	ldr	r1, [pc, #468]	; (8008ac8 <__ieee754_asinf+0x260>)
 80088f2:	f7f8 f8ef 	bl	8000ad4 <__addsf3>
 80088f6:	4629      	mov	r1, r5
 80088f8:	f7f8 f9f4 	bl	8000ce4 <__aeabi_fmul>
 80088fc:	4973      	ldr	r1, [pc, #460]	; (8008acc <__ieee754_asinf+0x264>)
 80088fe:	f7f8 f8e7 	bl	8000ad0 <__aeabi_fsub>
 8008902:	4629      	mov	r1, r5
 8008904:	f7f8 f9ee 	bl	8000ce4 <__aeabi_fmul>
 8008908:	4971      	ldr	r1, [pc, #452]	; (8008ad0 <__ieee754_asinf+0x268>)
 800890a:	f7f8 f8e3 	bl	8000ad4 <__addsf3>
 800890e:	4629      	mov	r1, r5
 8008910:	f7f8 f9e8 	bl	8000ce4 <__aeabi_fmul>
 8008914:	496f      	ldr	r1, [pc, #444]	; (8008ad4 <__ieee754_asinf+0x26c>)
 8008916:	4606      	mov	r6, r0
 8008918:	4628      	mov	r0, r5
 800891a:	f7f8 f9e3 	bl	8000ce4 <__aeabi_fmul>
 800891e:	496e      	ldr	r1, [pc, #440]	; (8008ad8 <__ieee754_asinf+0x270>)
 8008920:	f7f8 f8d6 	bl	8000ad0 <__aeabi_fsub>
 8008924:	4629      	mov	r1, r5
 8008926:	f7f8 f9dd 	bl	8000ce4 <__aeabi_fmul>
 800892a:	496c      	ldr	r1, [pc, #432]	; (8008adc <__ieee754_asinf+0x274>)
 800892c:	f7f8 f8d2 	bl	8000ad4 <__addsf3>
 8008930:	4629      	mov	r1, r5
 8008932:	f7f8 f9d7 	bl	8000ce4 <__aeabi_fmul>
 8008936:	496a      	ldr	r1, [pc, #424]	; (8008ae0 <__ieee754_asinf+0x278>)
 8008938:	f7f8 f8ca 	bl	8000ad0 <__aeabi_fsub>
 800893c:	4629      	mov	r1, r5
 800893e:	f7f8 f9d1 	bl	8000ce4 <__aeabi_fmul>
 8008942:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008946:	f7f8 f8c5 	bl	8000ad4 <__addsf3>
 800894a:	4601      	mov	r1, r0
 800894c:	4630      	mov	r0, r6
 800894e:	f7f8 fa7d 	bl	8000e4c <__aeabi_fdiv>
 8008952:	4621      	mov	r1, r4
 8008954:	f7f8 f9c6 	bl	8000ce4 <__aeabi_fmul>
 8008958:	4601      	mov	r1, r0
 800895a:	4620      	mov	r0, r4
 800895c:	e797      	b.n	800888e <__ieee754_asinf+0x26>
 800895e:	4620      	mov	r0, r4
 8008960:	f000 faaa 	bl	8008eb8 <fabsf>
 8008964:	4601      	mov	r1, r0
 8008966:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800896a:	f7f8 f8b1 	bl	8000ad0 <__aeabi_fsub>
 800896e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008972:	f7f8 f9b7 	bl	8000ce4 <__aeabi_fmul>
 8008976:	4606      	mov	r6, r0
 8008978:	4950      	ldr	r1, [pc, #320]	; (8008abc <__ieee754_asinf+0x254>)
 800897a:	f7f8 f9b3 	bl	8000ce4 <__aeabi_fmul>
 800897e:	4950      	ldr	r1, [pc, #320]	; (8008ac0 <__ieee754_asinf+0x258>)
 8008980:	f7f8 f8a8 	bl	8000ad4 <__addsf3>
 8008984:	4631      	mov	r1, r6
 8008986:	f7f8 f9ad 	bl	8000ce4 <__aeabi_fmul>
 800898a:	494e      	ldr	r1, [pc, #312]	; (8008ac4 <__ieee754_asinf+0x25c>)
 800898c:	f7f8 f8a0 	bl	8000ad0 <__aeabi_fsub>
 8008990:	4631      	mov	r1, r6
 8008992:	f7f8 f9a7 	bl	8000ce4 <__aeabi_fmul>
 8008996:	494c      	ldr	r1, [pc, #304]	; (8008ac8 <__ieee754_asinf+0x260>)
 8008998:	f7f8 f89c 	bl	8000ad4 <__addsf3>
 800899c:	4631      	mov	r1, r6
 800899e:	f7f8 f9a1 	bl	8000ce4 <__aeabi_fmul>
 80089a2:	494a      	ldr	r1, [pc, #296]	; (8008acc <__ieee754_asinf+0x264>)
 80089a4:	f7f8 f894 	bl	8000ad0 <__aeabi_fsub>
 80089a8:	4631      	mov	r1, r6
 80089aa:	f7f8 f99b 	bl	8000ce4 <__aeabi_fmul>
 80089ae:	4948      	ldr	r1, [pc, #288]	; (8008ad0 <__ieee754_asinf+0x268>)
 80089b0:	f7f8 f890 	bl	8000ad4 <__addsf3>
 80089b4:	4631      	mov	r1, r6
 80089b6:	f7f8 f995 	bl	8000ce4 <__aeabi_fmul>
 80089ba:	4946      	ldr	r1, [pc, #280]	; (8008ad4 <__ieee754_asinf+0x26c>)
 80089bc:	4681      	mov	r9, r0
 80089be:	4630      	mov	r0, r6
 80089c0:	f7f8 f990 	bl	8000ce4 <__aeabi_fmul>
 80089c4:	4944      	ldr	r1, [pc, #272]	; (8008ad8 <__ieee754_asinf+0x270>)
 80089c6:	f7f8 f883 	bl	8000ad0 <__aeabi_fsub>
 80089ca:	4631      	mov	r1, r6
 80089cc:	f7f8 f98a 	bl	8000ce4 <__aeabi_fmul>
 80089d0:	4942      	ldr	r1, [pc, #264]	; (8008adc <__ieee754_asinf+0x274>)
 80089d2:	f7f8 f87f 	bl	8000ad4 <__addsf3>
 80089d6:	4631      	mov	r1, r6
 80089d8:	f7f8 f984 	bl	8000ce4 <__aeabi_fmul>
 80089dc:	4940      	ldr	r1, [pc, #256]	; (8008ae0 <__ieee754_asinf+0x278>)
 80089de:	f7f8 f877 	bl	8000ad0 <__aeabi_fsub>
 80089e2:	4631      	mov	r1, r6
 80089e4:	f7f8 f97e 	bl	8000ce4 <__aeabi_fmul>
 80089e8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80089ec:	f7f8 f872 	bl	8000ad4 <__addsf3>
 80089f0:	4682      	mov	sl, r0
 80089f2:	4630      	mov	r0, r6
 80089f4:	f000 f902 	bl	8008bfc <__ieee754_sqrtf>
 80089f8:	4b3a      	ldr	r3, [pc, #232]	; (8008ae4 <__ieee754_asinf+0x27c>)
 80089fa:	4607      	mov	r7, r0
 80089fc:	4598      	cmp	r8, r3
 80089fe:	dd1a      	ble.n	8008a36 <__ieee754_asinf+0x1ce>
 8008a00:	4651      	mov	r1, sl
 8008a02:	4648      	mov	r0, r9
 8008a04:	f7f8 fa22 	bl	8000e4c <__aeabi_fdiv>
 8008a08:	4639      	mov	r1, r7
 8008a0a:	f7f8 f96b 	bl	8000ce4 <__aeabi_fmul>
 8008a0e:	4639      	mov	r1, r7
 8008a10:	f7f8 f860 	bl	8000ad4 <__addsf3>
 8008a14:	4601      	mov	r1, r0
 8008a16:	f7f8 f85d 	bl	8000ad4 <__addsf3>
 8008a1a:	4933      	ldr	r1, [pc, #204]	; (8008ae8 <__ieee754_asinf+0x280>)
 8008a1c:	f7f8 f85a 	bl	8000ad4 <__addsf3>
 8008a20:	4601      	mov	r1, r0
 8008a22:	4823      	ldr	r0, [pc, #140]	; (8008ab0 <__ieee754_asinf+0x248>)
 8008a24:	f7f8 f854 	bl	8000ad0 <__aeabi_fsub>
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	f73f af4a 	bgt.w	80088c4 <__ieee754_asinf+0x5c>
 8008a30:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008a34:	e735      	b.n	80088a2 <__ieee754_asinf+0x3a>
 8008a36:	4601      	mov	r1, r0
 8008a38:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8008a3c:	f7f8 f84a 	bl	8000ad4 <__addsf3>
 8008a40:	4651      	mov	r1, sl
 8008a42:	4604      	mov	r4, r0
 8008a44:	4648      	mov	r0, r9
 8008a46:	f7f8 fa01 	bl	8000e4c <__aeabi_fdiv>
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f7f8 f949 	bl	8000ce4 <__aeabi_fmul>
 8008a52:	f028 080f 	bic.w	r8, r8, #15
 8008a56:	4681      	mov	r9, r0
 8008a58:	4641      	mov	r1, r8
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	f7f8 f942 	bl	8000ce4 <__aeabi_fmul>
 8008a60:	4601      	mov	r1, r0
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7f8 f834 	bl	8000ad0 <__aeabi_fsub>
 8008a68:	4641      	mov	r1, r8
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f7f8 f831 	bl	8000ad4 <__addsf3>
 8008a72:	4601      	mov	r1, r0
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7f8 f9e9 	bl	8000e4c <__aeabi_fdiv>
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	f7f8 f82a 	bl	8000ad4 <__addsf3>
 8008a80:	4601      	mov	r1, r0
 8008a82:	480c      	ldr	r0, [pc, #48]	; (8008ab4 <__ieee754_asinf+0x24c>)
 8008a84:	f7f8 f824 	bl	8000ad0 <__aeabi_fsub>
 8008a88:	4601      	mov	r1, r0
 8008a8a:	4648      	mov	r0, r9
 8008a8c:	f7f8 f820 	bl	8000ad0 <__aeabi_fsub>
 8008a90:	4641      	mov	r1, r8
 8008a92:	4604      	mov	r4, r0
 8008a94:	4640      	mov	r0, r8
 8008a96:	f7f8 f81d 	bl	8000ad4 <__addsf3>
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	4813      	ldr	r0, [pc, #76]	; (8008aec <__ieee754_asinf+0x284>)
 8008a9e:	f7f8 f817 	bl	8000ad0 <__aeabi_fsub>
 8008aa2:	4601      	mov	r1, r0
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7f8 f813 	bl	8000ad0 <__aeabi_fsub>
 8008aaa:	4601      	mov	r1, r0
 8008aac:	480f      	ldr	r0, [pc, #60]	; (8008aec <__ieee754_asinf+0x284>)
 8008aae:	e7b9      	b.n	8008a24 <__ieee754_asinf+0x1bc>
 8008ab0:	3fc90fdb 	.word	0x3fc90fdb
 8008ab4:	b33bbd2e 	.word	0xb33bbd2e
 8008ab8:	7149f2ca 	.word	0x7149f2ca
 8008abc:	3811ef08 	.word	0x3811ef08
 8008ac0:	3a4f7f04 	.word	0x3a4f7f04
 8008ac4:	3d241146 	.word	0x3d241146
 8008ac8:	3e4e0aa8 	.word	0x3e4e0aa8
 8008acc:	3ea6b090 	.word	0x3ea6b090
 8008ad0:	3e2aaaab 	.word	0x3e2aaaab
 8008ad4:	3d9dc62e 	.word	0x3d9dc62e
 8008ad8:	3f303361 	.word	0x3f303361
 8008adc:	4001572d 	.word	0x4001572d
 8008ae0:	4019d139 	.word	0x4019d139
 8008ae4:	3f799999 	.word	0x3f799999
 8008ae8:	333bbd2e 	.word	0x333bbd2e
 8008aec:	3f490fdb 	.word	0x3f490fdb

08008af0 <__ieee754_atan2f>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008af6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008afa:	4603      	mov	r3, r0
 8008afc:	dc05      	bgt.n	8008b0a <__ieee754_atan2f+0x1a>
 8008afe:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008b02:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008b06:	4607      	mov	r7, r0
 8008b08:	dd04      	ble.n	8008b14 <__ieee754_atan2f+0x24>
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7f7 ffe2 	bl	8000ad4 <__addsf3>
 8008b10:	4603      	mov	r3, r0
 8008b12:	e011      	b.n	8008b38 <__ieee754_atan2f+0x48>
 8008b14:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8008b18:	d103      	bne.n	8008b22 <__ieee754_atan2f+0x32>
 8008b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b1e:	f000 b8bf 	b.w	8008ca0 <atanf>
 8008b22:	178c      	asrs	r4, r1, #30
 8008b24:	f004 0402 	and.w	r4, r4, #2
 8008b28:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008b2c:	b932      	cbnz	r2, 8008b3c <__ieee754_atan2f+0x4c>
 8008b2e:	2c02      	cmp	r4, #2
 8008b30:	d04c      	beq.n	8008bcc <__ieee754_atan2f+0xdc>
 8008b32:	2c03      	cmp	r4, #3
 8008b34:	d100      	bne.n	8008b38 <__ieee754_atan2f+0x48>
 8008b36:	4b29      	ldr	r3, [pc, #164]	; (8008bdc <__ieee754_atan2f+0xec>)
 8008b38:	4618      	mov	r0, r3
 8008b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b3c:	b91e      	cbnz	r6, 8008b46 <__ieee754_atan2f+0x56>
 8008b3e:	2f00      	cmp	r7, #0
 8008b40:	da4a      	bge.n	8008bd8 <__ieee754_atan2f+0xe8>
 8008b42:	4b27      	ldr	r3, [pc, #156]	; (8008be0 <__ieee754_atan2f+0xf0>)
 8008b44:	e7f8      	b.n	8008b38 <__ieee754_atan2f+0x48>
 8008b46:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008b4a:	d10e      	bne.n	8008b6a <__ieee754_atan2f+0x7a>
 8008b4c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008b50:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b54:	d105      	bne.n	8008b62 <__ieee754_atan2f+0x72>
 8008b56:	2c02      	cmp	r4, #2
 8008b58:	d83a      	bhi.n	8008bd0 <__ieee754_atan2f+0xe0>
 8008b5a:	4b22      	ldr	r3, [pc, #136]	; (8008be4 <__ieee754_atan2f+0xf4>)
 8008b5c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b60:	e7ea      	b.n	8008b38 <__ieee754_atan2f+0x48>
 8008b62:	2c02      	cmp	r4, #2
 8008b64:	d836      	bhi.n	8008bd4 <__ieee754_atan2f+0xe4>
 8008b66:	4b20      	ldr	r3, [pc, #128]	; (8008be8 <__ieee754_atan2f+0xf8>)
 8008b68:	e7f8      	b.n	8008b5c <__ieee754_atan2f+0x6c>
 8008b6a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008b6e:	d0e6      	beq.n	8008b3e <__ieee754_atan2f+0x4e>
 8008b70:	1b92      	subs	r2, r2, r6
 8008b72:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8008b76:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8008b7a:	da17      	bge.n	8008bac <__ieee754_atan2f+0xbc>
 8008b7c:	2900      	cmp	r1, #0
 8008b7e:	da01      	bge.n	8008b84 <__ieee754_atan2f+0x94>
 8008b80:	303c      	adds	r0, #60	; 0x3c
 8008b82:	db15      	blt.n	8008bb0 <__ieee754_atan2f+0xc0>
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7f8 f961 	bl	8000e4c <__aeabi_fdiv>
 8008b8a:	f000 f995 	bl	8008eb8 <fabsf>
 8008b8e:	f000 f887 	bl	8008ca0 <atanf>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2c01      	cmp	r4, #1
 8008b96:	d00d      	beq.n	8008bb4 <__ieee754_atan2f+0xc4>
 8008b98:	2c02      	cmp	r4, #2
 8008b9a:	d00e      	beq.n	8008bba <__ieee754_atan2f+0xca>
 8008b9c:	2c00      	cmp	r4, #0
 8008b9e:	d0cb      	beq.n	8008b38 <__ieee754_atan2f+0x48>
 8008ba0:	4912      	ldr	r1, [pc, #72]	; (8008bec <__ieee754_atan2f+0xfc>)
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7f7 ff96 	bl	8000ad4 <__addsf3>
 8008ba8:	4911      	ldr	r1, [pc, #68]	; (8008bf0 <__ieee754_atan2f+0x100>)
 8008baa:	e00c      	b.n	8008bc6 <__ieee754_atan2f+0xd6>
 8008bac:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <__ieee754_atan2f+0x104>)
 8008bae:	e7f1      	b.n	8008b94 <__ieee754_atan2f+0xa4>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	e7ef      	b.n	8008b94 <__ieee754_atan2f+0xa4>
 8008bb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bb8:	e7be      	b.n	8008b38 <__ieee754_atan2f+0x48>
 8008bba:	490c      	ldr	r1, [pc, #48]	; (8008bec <__ieee754_atan2f+0xfc>)
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7f7 ff89 	bl	8000ad4 <__addsf3>
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	480a      	ldr	r0, [pc, #40]	; (8008bf0 <__ieee754_atan2f+0x100>)
 8008bc6:	f7f7 ff83 	bl	8000ad0 <__aeabi_fsub>
 8008bca:	e7a1      	b.n	8008b10 <__ieee754_atan2f+0x20>
 8008bcc:	4b08      	ldr	r3, [pc, #32]	; (8008bf0 <__ieee754_atan2f+0x100>)
 8008bce:	e7b3      	b.n	8008b38 <__ieee754_atan2f+0x48>
 8008bd0:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <__ieee754_atan2f+0x108>)
 8008bd2:	e7b1      	b.n	8008b38 <__ieee754_atan2f+0x48>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	e7af      	b.n	8008b38 <__ieee754_atan2f+0x48>
 8008bd8:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <__ieee754_atan2f+0x104>)
 8008bda:	e7ad      	b.n	8008b38 <__ieee754_atan2f+0x48>
 8008bdc:	c0490fdb 	.word	0xc0490fdb
 8008be0:	bfc90fdb 	.word	0xbfc90fdb
 8008be4:	08009180 	.word	0x08009180
 8008be8:	0800918c 	.word	0x0800918c
 8008bec:	33bbbd2e 	.word	0x33bbbd2e
 8008bf0:	40490fdb 	.word	0x40490fdb
 8008bf4:	3fc90fdb 	.word	0x3fc90fdb
 8008bf8:	3f490fdb 	.word	0x3f490fdb

08008bfc <__ieee754_sqrtf>:
 8008bfc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008c00:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	4603      	mov	r3, r0
 8008c08:	4604      	mov	r4, r0
 8008c0a:	d309      	bcc.n	8008c20 <__ieee754_sqrtf+0x24>
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	f7f8 f869 	bl	8000ce4 <__aeabi_fmul>
 8008c12:	4601      	mov	r1, r0
 8008c14:	4620      	mov	r0, r4
 8008c16:	f7f7 ff5d 	bl	8000ad4 <__addsf3>
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	2a00      	cmp	r2, #0
 8008c22:	d0fb      	beq.n	8008c1c <__ieee754_sqrtf+0x20>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	da06      	bge.n	8008c36 <__ieee754_sqrtf+0x3a>
 8008c28:	4601      	mov	r1, r0
 8008c2a:	f7f7 ff51 	bl	8000ad0 <__aeabi_fsub>
 8008c2e:	4601      	mov	r1, r0
 8008c30:	f7f8 f90c 	bl	8000e4c <__aeabi_fdiv>
 8008c34:	e7f1      	b.n	8008c1a <__ieee754_sqrtf+0x1e>
 8008c36:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008c3a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008c3e:	d029      	beq.n	8008c94 <__ieee754_sqrtf+0x98>
 8008c40:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008c44:	07cb      	lsls	r3, r1, #31
 8008c46:	f04f 0300 	mov.w	r3, #0
 8008c4a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008c4e:	f04f 0419 	mov.w	r4, #25
 8008c52:	461e      	mov	r6, r3
 8008c54:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008c58:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008c5c:	bf58      	it	pl
 8008c5e:	0052      	lslpl	r2, r2, #1
 8008c60:	1040      	asrs	r0, r0, #1
 8008c62:	0052      	lsls	r2, r2, #1
 8008c64:	1875      	adds	r5, r6, r1
 8008c66:	4295      	cmp	r5, r2
 8008c68:	bfde      	ittt	le
 8008c6a:	186e      	addle	r6, r5, r1
 8008c6c:	1b52      	suble	r2, r2, r5
 8008c6e:	185b      	addle	r3, r3, r1
 8008c70:	3c01      	subs	r4, #1
 8008c72:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008c76:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008c7a:	d1f3      	bne.n	8008c64 <__ieee754_sqrtf+0x68>
 8008c7c:	b112      	cbz	r2, 8008c84 <__ieee754_sqrtf+0x88>
 8008c7e:	3301      	adds	r3, #1
 8008c80:	f023 0301 	bic.w	r3, r3, #1
 8008c84:	105c      	asrs	r4, r3, #1
 8008c86:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008c8a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008c8e:	e7c5      	b.n	8008c1c <__ieee754_sqrtf+0x20>
 8008c90:	005b      	lsls	r3, r3, #1
 8008c92:	3201      	adds	r2, #1
 8008c94:	0218      	lsls	r0, r3, #8
 8008c96:	d5fb      	bpl.n	8008c90 <__ieee754_sqrtf+0x94>
 8008c98:	3a01      	subs	r2, #1
 8008c9a:	1a89      	subs	r1, r1, r2
 8008c9c:	e7d0      	b.n	8008c40 <__ieee754_sqrtf+0x44>
	...

08008ca0 <atanf>:
 8008ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008ca8:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008cac:	4604      	mov	r4, r0
 8008cae:	4680      	mov	r8, r0
 8008cb0:	db0e      	blt.n	8008cd0 <atanf+0x30>
 8008cb2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008cb6:	dd04      	ble.n	8008cc2 <atanf+0x22>
 8008cb8:	4601      	mov	r1, r0
 8008cba:	f7f7 ff0b 	bl	8000ad4 <__addsf3>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	e003      	b.n	8008cca <atanf+0x2a>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	f300 80ce 	bgt.w	8008e64 <atanf+0x1c4>
 8008cc8:	4c67      	ldr	r4, [pc, #412]	; (8008e68 <atanf+0x1c8>)
 8008cca:	4620      	mov	r0, r4
 8008ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd0:	4b66      	ldr	r3, [pc, #408]	; (8008e6c <atanf+0x1cc>)
 8008cd2:	429d      	cmp	r5, r3
 8008cd4:	dc0e      	bgt.n	8008cf4 <atanf+0x54>
 8008cd6:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8008cda:	da08      	bge.n	8008cee <atanf+0x4e>
 8008cdc:	4964      	ldr	r1, [pc, #400]	; (8008e70 <atanf+0x1d0>)
 8008cde:	f7f7 fef9 	bl	8000ad4 <__addsf3>
 8008ce2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ce6:	f7f8 f9b9 	bl	800105c <__aeabi_fcmpgt>
 8008cea:	2800      	cmp	r0, #0
 8008cec:	d1ed      	bne.n	8008cca <atanf+0x2a>
 8008cee:	f04f 36ff 	mov.w	r6, #4294967295
 8008cf2:	e01c      	b.n	8008d2e <atanf+0x8e>
 8008cf4:	f000 f8e0 	bl	8008eb8 <fabsf>
 8008cf8:	4b5e      	ldr	r3, [pc, #376]	; (8008e74 <atanf+0x1d4>)
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	429d      	cmp	r5, r3
 8008cfe:	dc7c      	bgt.n	8008dfa <atanf+0x15a>
 8008d00:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008d04:	429d      	cmp	r5, r3
 8008d06:	dc67      	bgt.n	8008dd8 <atanf+0x138>
 8008d08:	4601      	mov	r1, r0
 8008d0a:	f7f7 fee3 	bl	8000ad4 <__addsf3>
 8008d0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008d12:	f7f7 fedd 	bl	8000ad0 <__aeabi_fsub>
 8008d16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f7f7 fed9 	bl	8000ad4 <__addsf3>
 8008d22:	4601      	mov	r1, r0
 8008d24:	4628      	mov	r0, r5
 8008d26:	f7f8 f891 	bl	8000e4c <__aeabi_fdiv>
 8008d2a:	2600      	movs	r6, #0
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	4621      	mov	r1, r4
 8008d30:	4620      	mov	r0, r4
 8008d32:	f7f7 ffd7 	bl	8000ce4 <__aeabi_fmul>
 8008d36:	4601      	mov	r1, r0
 8008d38:	4607      	mov	r7, r0
 8008d3a:	f7f7 ffd3 	bl	8000ce4 <__aeabi_fmul>
 8008d3e:	4605      	mov	r5, r0
 8008d40:	494d      	ldr	r1, [pc, #308]	; (8008e78 <atanf+0x1d8>)
 8008d42:	f7f7 ffcf 	bl	8000ce4 <__aeabi_fmul>
 8008d46:	494d      	ldr	r1, [pc, #308]	; (8008e7c <atanf+0x1dc>)
 8008d48:	f7f7 fec4 	bl	8000ad4 <__addsf3>
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	f7f7 ffc9 	bl	8000ce4 <__aeabi_fmul>
 8008d52:	494b      	ldr	r1, [pc, #300]	; (8008e80 <atanf+0x1e0>)
 8008d54:	f7f7 febe 	bl	8000ad4 <__addsf3>
 8008d58:	4629      	mov	r1, r5
 8008d5a:	f7f7 ffc3 	bl	8000ce4 <__aeabi_fmul>
 8008d5e:	4949      	ldr	r1, [pc, #292]	; (8008e84 <atanf+0x1e4>)
 8008d60:	f7f7 feb8 	bl	8000ad4 <__addsf3>
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7f7 ffbd 	bl	8000ce4 <__aeabi_fmul>
 8008d6a:	4947      	ldr	r1, [pc, #284]	; (8008e88 <atanf+0x1e8>)
 8008d6c:	f7f7 feb2 	bl	8000ad4 <__addsf3>
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 ffb7 	bl	8000ce4 <__aeabi_fmul>
 8008d76:	4945      	ldr	r1, [pc, #276]	; (8008e8c <atanf+0x1ec>)
 8008d78:	f7f7 feac 	bl	8000ad4 <__addsf3>
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	f7f7 ffb1 	bl	8000ce4 <__aeabi_fmul>
 8008d82:	4943      	ldr	r1, [pc, #268]	; (8008e90 <atanf+0x1f0>)
 8008d84:	4607      	mov	r7, r0
 8008d86:	4628      	mov	r0, r5
 8008d88:	f7f7 ffac 	bl	8000ce4 <__aeabi_fmul>
 8008d8c:	4941      	ldr	r1, [pc, #260]	; (8008e94 <atanf+0x1f4>)
 8008d8e:	f7f7 fe9f 	bl	8000ad0 <__aeabi_fsub>
 8008d92:	4629      	mov	r1, r5
 8008d94:	f7f7 ffa6 	bl	8000ce4 <__aeabi_fmul>
 8008d98:	493f      	ldr	r1, [pc, #252]	; (8008e98 <atanf+0x1f8>)
 8008d9a:	f7f7 fe99 	bl	8000ad0 <__aeabi_fsub>
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f7f7 ffa0 	bl	8000ce4 <__aeabi_fmul>
 8008da4:	493d      	ldr	r1, [pc, #244]	; (8008e9c <atanf+0x1fc>)
 8008da6:	f7f7 fe93 	bl	8000ad0 <__aeabi_fsub>
 8008daa:	4629      	mov	r1, r5
 8008dac:	f7f7 ff9a 	bl	8000ce4 <__aeabi_fmul>
 8008db0:	493b      	ldr	r1, [pc, #236]	; (8008ea0 <atanf+0x200>)
 8008db2:	f7f7 fe8d 	bl	8000ad0 <__aeabi_fsub>
 8008db6:	4629      	mov	r1, r5
 8008db8:	f7f7 ff94 	bl	8000ce4 <__aeabi_fmul>
 8008dbc:	4601      	mov	r1, r0
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	f7f7 fe88 	bl	8000ad4 <__addsf3>
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	f7f7 ff8d 	bl	8000ce4 <__aeabi_fmul>
 8008dca:	1c73      	adds	r3, r6, #1
 8008dcc:	4601      	mov	r1, r0
 8008dce:	d133      	bne.n	8008e38 <atanf+0x198>
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f7f7 fe7d 	bl	8000ad0 <__aeabi_fsub>
 8008dd6:	e772      	b.n	8008cbe <atanf+0x1e>
 8008dd8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008ddc:	f7f7 fe78 	bl	8000ad0 <__aeabi_fsub>
 8008de0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008de4:	4605      	mov	r5, r0
 8008de6:	4620      	mov	r0, r4
 8008de8:	f7f7 fe74 	bl	8000ad4 <__addsf3>
 8008dec:	4601      	mov	r1, r0
 8008dee:	4628      	mov	r0, r5
 8008df0:	f7f8 f82c 	bl	8000e4c <__aeabi_fdiv>
 8008df4:	2601      	movs	r6, #1
 8008df6:	4604      	mov	r4, r0
 8008df8:	e799      	b.n	8008d2e <atanf+0x8e>
 8008dfa:	4b2a      	ldr	r3, [pc, #168]	; (8008ea4 <atanf+0x204>)
 8008dfc:	429d      	cmp	r5, r3
 8008dfe:	dc14      	bgt.n	8008e2a <atanf+0x18a>
 8008e00:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008e04:	f7f7 fe64 	bl	8000ad0 <__aeabi_fsub>
 8008e08:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f7f7 ff68 	bl	8000ce4 <__aeabi_fmul>
 8008e14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008e18:	f7f7 fe5c 	bl	8000ad4 <__addsf3>
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7f8 f814 	bl	8000e4c <__aeabi_fdiv>
 8008e24:	2602      	movs	r6, #2
 8008e26:	4604      	mov	r4, r0
 8008e28:	e781      	b.n	8008d2e <atanf+0x8e>
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	481e      	ldr	r0, [pc, #120]	; (8008ea8 <atanf+0x208>)
 8008e2e:	f7f8 f80d 	bl	8000e4c <__aeabi_fdiv>
 8008e32:	2603      	movs	r6, #3
 8008e34:	4604      	mov	r4, r0
 8008e36:	e77a      	b.n	8008d2e <atanf+0x8e>
 8008e38:	4b1c      	ldr	r3, [pc, #112]	; (8008eac <atanf+0x20c>)
 8008e3a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008e3e:	f7f7 fe47 	bl	8000ad0 <__aeabi_fsub>
 8008e42:	4621      	mov	r1, r4
 8008e44:	f7f7 fe44 	bl	8000ad0 <__aeabi_fsub>
 8008e48:	4b19      	ldr	r3, [pc, #100]	; (8008eb0 <atanf+0x210>)
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008e50:	f7f7 fe3e 	bl	8000ad0 <__aeabi_fsub>
 8008e54:	f1b8 0f00 	cmp.w	r8, #0
 8008e58:	4604      	mov	r4, r0
 8008e5a:	f6bf af36 	bge.w	8008cca <atanf+0x2a>
 8008e5e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008e62:	e72c      	b.n	8008cbe <atanf+0x1e>
 8008e64:	4c13      	ldr	r4, [pc, #76]	; (8008eb4 <atanf+0x214>)
 8008e66:	e730      	b.n	8008cca <atanf+0x2a>
 8008e68:	bfc90fdb 	.word	0xbfc90fdb
 8008e6c:	3edfffff 	.word	0x3edfffff
 8008e70:	7149f2ca 	.word	0x7149f2ca
 8008e74:	3f97ffff 	.word	0x3f97ffff
 8008e78:	3c8569d7 	.word	0x3c8569d7
 8008e7c:	3d4bda59 	.word	0x3d4bda59
 8008e80:	3d886b35 	.word	0x3d886b35
 8008e84:	3dba2e6e 	.word	0x3dba2e6e
 8008e88:	3e124925 	.word	0x3e124925
 8008e8c:	3eaaaaab 	.word	0x3eaaaaab
 8008e90:	bd15a221 	.word	0xbd15a221
 8008e94:	3d6ef16b 	.word	0x3d6ef16b
 8008e98:	3d9d8795 	.word	0x3d9d8795
 8008e9c:	3de38e38 	.word	0x3de38e38
 8008ea0:	3e4ccccd 	.word	0x3e4ccccd
 8008ea4:	401bffff 	.word	0x401bffff
 8008ea8:	bf800000 	.word	0xbf800000
 8008eac:	080091a8 	.word	0x080091a8
 8008eb0:	08009198 	.word	0x08009198
 8008eb4:	3fc90fdb 	.word	0x3fc90fdb

08008eb8 <fabsf>:
 8008eb8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008ebc:	4770      	bx	lr
	...

08008ec0 <nanf>:
 8008ec0:	4800      	ldr	r0, [pc, #0]	; (8008ec4 <nanf+0x4>)
 8008ec2:	4770      	bx	lr
 8008ec4:	7fc00000 	.word	0x7fc00000

08008ec8 <__errno>:
 8008ec8:	4b01      	ldr	r3, [pc, #4]	; (8008ed0 <__errno+0x8>)
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	20000024 	.word	0x20000024

08008ed4 <__libc_init_array>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	2600      	movs	r6, #0
 8008ed8:	4d0c      	ldr	r5, [pc, #48]	; (8008f0c <__libc_init_array+0x38>)
 8008eda:	4c0d      	ldr	r4, [pc, #52]	; (8008f10 <__libc_init_array+0x3c>)
 8008edc:	1b64      	subs	r4, r4, r5
 8008ede:	10a4      	asrs	r4, r4, #2
 8008ee0:	42a6      	cmp	r6, r4
 8008ee2:	d109      	bne.n	8008ef8 <__libc_init_array+0x24>
 8008ee4:	f000 f8f0 	bl	80090c8 <_init>
 8008ee8:	2600      	movs	r6, #0
 8008eea:	4d0a      	ldr	r5, [pc, #40]	; (8008f14 <__libc_init_array+0x40>)
 8008eec:	4c0a      	ldr	r4, [pc, #40]	; (8008f18 <__libc_init_array+0x44>)
 8008eee:	1b64      	subs	r4, r4, r5
 8008ef0:	10a4      	asrs	r4, r4, #2
 8008ef2:	42a6      	cmp	r6, r4
 8008ef4:	d105      	bne.n	8008f02 <__libc_init_array+0x2e>
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efc:	4798      	blx	r3
 8008efe:	3601      	adds	r6, #1
 8008f00:	e7ee      	b.n	8008ee0 <__libc_init_array+0xc>
 8008f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f06:	4798      	blx	r3
 8008f08:	3601      	adds	r6, #1
 8008f0a:	e7f2      	b.n	8008ef2 <__libc_init_array+0x1e>
 8008f0c:	08009218 	.word	0x08009218
 8008f10:	08009218 	.word	0x08009218
 8008f14:	08009218 	.word	0x08009218
 8008f18:	0800921c 	.word	0x0800921c

08008f1c <__retarget_lock_acquire_recursive>:
 8008f1c:	4770      	bx	lr

08008f1e <__retarget_lock_release_recursive>:
 8008f1e:	4770      	bx	lr

08008f20 <memcpy>:
 8008f20:	440a      	add	r2, r1
 8008f22:	4291      	cmp	r1, r2
 8008f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f28:	d100      	bne.n	8008f2c <memcpy+0xc>
 8008f2a:	4770      	bx	lr
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f32:	4291      	cmp	r1, r2
 8008f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f38:	d1f9      	bne.n	8008f2e <memcpy+0xe>
 8008f3a:	bd10      	pop	{r4, pc}

08008f3c <memset>:
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	4402      	add	r2, r0
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d100      	bne.n	8008f46 <memset+0xa>
 8008f44:	4770      	bx	lr
 8008f46:	f803 1b01 	strb.w	r1, [r3], #1
 8008f4a:	e7f9      	b.n	8008f40 <memset+0x4>

08008f4c <cleanup_glue>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	460c      	mov	r4, r1
 8008f50:	6809      	ldr	r1, [r1, #0]
 8008f52:	4605      	mov	r5, r0
 8008f54:	b109      	cbz	r1, 8008f5a <cleanup_glue+0xe>
 8008f56:	f7ff fff9 	bl	8008f4c <cleanup_glue>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f62:	f000 b869 	b.w	8009038 <_free_r>
	...

08008f68 <_reclaim_reent>:
 8008f68:	4b2c      	ldr	r3, [pc, #176]	; (800901c <_reclaim_reent+0xb4>)
 8008f6a:	b570      	push	{r4, r5, r6, lr}
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4604      	mov	r4, r0
 8008f70:	4283      	cmp	r3, r0
 8008f72:	d051      	beq.n	8009018 <_reclaim_reent+0xb0>
 8008f74:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008f76:	b143      	cbz	r3, 8008f8a <_reclaim_reent+0x22>
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d14a      	bne.n	8009014 <_reclaim_reent+0xac>
 8008f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f80:	6819      	ldr	r1, [r3, #0]
 8008f82:	b111      	cbz	r1, 8008f8a <_reclaim_reent+0x22>
 8008f84:	4620      	mov	r0, r4
 8008f86:	f000 f857 	bl	8009038 <_free_r>
 8008f8a:	6961      	ldr	r1, [r4, #20]
 8008f8c:	b111      	cbz	r1, 8008f94 <_reclaim_reent+0x2c>
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 f852 	bl	8009038 <_free_r>
 8008f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f96:	b111      	cbz	r1, 8008f9e <_reclaim_reent+0x36>
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f000 f84d 	bl	8009038 <_free_r>
 8008f9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008fa0:	b111      	cbz	r1, 8008fa8 <_reclaim_reent+0x40>
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 f848 	bl	8009038 <_free_r>
 8008fa8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008faa:	b111      	cbz	r1, 8008fb2 <_reclaim_reent+0x4a>
 8008fac:	4620      	mov	r0, r4
 8008fae:	f000 f843 	bl	8009038 <_free_r>
 8008fb2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008fb4:	b111      	cbz	r1, 8008fbc <_reclaim_reent+0x54>
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 f83e 	bl	8009038 <_free_r>
 8008fbc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008fbe:	b111      	cbz	r1, 8008fc6 <_reclaim_reent+0x5e>
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 f839 	bl	8009038 <_free_r>
 8008fc6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008fc8:	b111      	cbz	r1, 8008fd0 <_reclaim_reent+0x68>
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 f834 	bl	8009038 <_free_r>
 8008fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fd2:	b111      	cbz	r1, 8008fda <_reclaim_reent+0x72>
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f000 f82f 	bl	8009038 <_free_r>
 8008fda:	69a3      	ldr	r3, [r4, #24]
 8008fdc:	b1e3      	cbz	r3, 8009018 <_reclaim_reent+0xb0>
 8008fde:	4620      	mov	r0, r4
 8008fe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fe2:	4798      	blx	r3
 8008fe4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008fe6:	b1b9      	cbz	r1, 8009018 <_reclaim_reent+0xb0>
 8008fe8:	4620      	mov	r0, r4
 8008fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fee:	f7ff bfad 	b.w	8008f4c <cleanup_glue>
 8008ff2:	5949      	ldr	r1, [r1, r5]
 8008ff4:	b941      	cbnz	r1, 8009008 <_reclaim_reent+0xa0>
 8008ff6:	3504      	adds	r5, #4
 8008ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ffa:	2d80      	cmp	r5, #128	; 0x80
 8008ffc:	68d9      	ldr	r1, [r3, #12]
 8008ffe:	d1f8      	bne.n	8008ff2 <_reclaim_reent+0x8a>
 8009000:	4620      	mov	r0, r4
 8009002:	f000 f819 	bl	8009038 <_free_r>
 8009006:	e7ba      	b.n	8008f7e <_reclaim_reent+0x16>
 8009008:	680e      	ldr	r6, [r1, #0]
 800900a:	4620      	mov	r0, r4
 800900c:	f000 f814 	bl	8009038 <_free_r>
 8009010:	4631      	mov	r1, r6
 8009012:	e7ef      	b.n	8008ff4 <_reclaim_reent+0x8c>
 8009014:	2500      	movs	r5, #0
 8009016:	e7ef      	b.n	8008ff8 <_reclaim_reent+0x90>
 8009018:	bd70      	pop	{r4, r5, r6, pc}
 800901a:	bf00      	nop
 800901c:	20000024 	.word	0x20000024

08009020 <__malloc_lock>:
 8009020:	4801      	ldr	r0, [pc, #4]	; (8009028 <__malloc_lock+0x8>)
 8009022:	f7ff bf7b 	b.w	8008f1c <__retarget_lock_acquire_recursive>
 8009026:	bf00      	nop
 8009028:	20001d30 	.word	0x20001d30

0800902c <__malloc_unlock>:
 800902c:	4801      	ldr	r0, [pc, #4]	; (8009034 <__malloc_unlock+0x8>)
 800902e:	f7ff bf76 	b.w	8008f1e <__retarget_lock_release_recursive>
 8009032:	bf00      	nop
 8009034:	20001d30 	.word	0x20001d30

08009038 <_free_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4605      	mov	r5, r0
 800903c:	2900      	cmp	r1, #0
 800903e:	d040      	beq.n	80090c2 <_free_r+0x8a>
 8009040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009044:	1f0c      	subs	r4, r1, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfb8      	it	lt
 800904a:	18e4      	addlt	r4, r4, r3
 800904c:	f7ff ffe8 	bl	8009020 <__malloc_lock>
 8009050:	4a1c      	ldr	r2, [pc, #112]	; (80090c4 <_free_r+0x8c>)
 8009052:	6813      	ldr	r3, [r2, #0]
 8009054:	b933      	cbnz	r3, 8009064 <_free_r+0x2c>
 8009056:	6063      	str	r3, [r4, #4]
 8009058:	6014      	str	r4, [r2, #0]
 800905a:	4628      	mov	r0, r5
 800905c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009060:	f7ff bfe4 	b.w	800902c <__malloc_unlock>
 8009064:	42a3      	cmp	r3, r4
 8009066:	d908      	bls.n	800907a <_free_r+0x42>
 8009068:	6820      	ldr	r0, [r4, #0]
 800906a:	1821      	adds	r1, r4, r0
 800906c:	428b      	cmp	r3, r1
 800906e:	bf01      	itttt	eq
 8009070:	6819      	ldreq	r1, [r3, #0]
 8009072:	685b      	ldreq	r3, [r3, #4]
 8009074:	1809      	addeq	r1, r1, r0
 8009076:	6021      	streq	r1, [r4, #0]
 8009078:	e7ed      	b.n	8009056 <_free_r+0x1e>
 800907a:	461a      	mov	r2, r3
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	b10b      	cbz	r3, 8009084 <_free_r+0x4c>
 8009080:	42a3      	cmp	r3, r4
 8009082:	d9fa      	bls.n	800907a <_free_r+0x42>
 8009084:	6811      	ldr	r1, [r2, #0]
 8009086:	1850      	adds	r0, r2, r1
 8009088:	42a0      	cmp	r0, r4
 800908a:	d10b      	bne.n	80090a4 <_free_r+0x6c>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	4401      	add	r1, r0
 8009090:	1850      	adds	r0, r2, r1
 8009092:	4283      	cmp	r3, r0
 8009094:	6011      	str	r1, [r2, #0]
 8009096:	d1e0      	bne.n	800905a <_free_r+0x22>
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	4401      	add	r1, r0
 800909e:	6011      	str	r1, [r2, #0]
 80090a0:	6053      	str	r3, [r2, #4]
 80090a2:	e7da      	b.n	800905a <_free_r+0x22>
 80090a4:	d902      	bls.n	80090ac <_free_r+0x74>
 80090a6:	230c      	movs	r3, #12
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	e7d6      	b.n	800905a <_free_r+0x22>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	1821      	adds	r1, r4, r0
 80090b0:	428b      	cmp	r3, r1
 80090b2:	bf01      	itttt	eq
 80090b4:	6819      	ldreq	r1, [r3, #0]
 80090b6:	685b      	ldreq	r3, [r3, #4]
 80090b8:	1809      	addeq	r1, r1, r0
 80090ba:	6021      	streq	r1, [r4, #0]
 80090bc:	6063      	str	r3, [r4, #4]
 80090be:	6054      	str	r4, [r2, #4]
 80090c0:	e7cb      	b.n	800905a <_free_r+0x22>
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20001d34 	.word	0x20001d34

080090c8 <_init>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	bf00      	nop
 80090cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ce:	bc08      	pop	{r3}
 80090d0:	469e      	mov	lr, r3
 80090d2:	4770      	bx	lr

080090d4 <_fini>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	bf00      	nop
 80090d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090da:	bc08      	pop	{r3}
 80090dc:	469e      	mov	lr, r3
 80090de:	4770      	bx	lr
