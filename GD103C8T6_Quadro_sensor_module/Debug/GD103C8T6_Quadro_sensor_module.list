
GD103C8T6_Quadro_sensor_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005efc  08005efc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08005efc  08005efc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005efc  08005efc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005efc  08005efc  00015efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000088  08005f8c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005f8c  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009419  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d0  00000000  00000000  000294ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f34  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae87  00000000  00000000  000445cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085804  00000000  00000000  0004f453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4c57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000281c  00000000  00000000  000d4ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e88 	.word	0x08005e88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08005e88 	.word	0x08005e88

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2f>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a2c:	bf24      	itt	cs
 8000a2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a36:	d90d      	bls.n	8000a54 <__aeabi_d2f+0x30>
 8000a38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a4c:	bf08      	it	eq
 8000a4e:	f020 0001 	biceq.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a58:	d121      	bne.n	8000a9e <__aeabi_d2f+0x7a>
 8000a5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a5e:	bfbc      	itt	lt
 8000a60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	4770      	bxlt	lr
 8000a66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a6e:	f1c2 0218 	rsb	r2, r2, #24
 8000a72:	f1c2 0c20 	rsb	ip, r2, #32
 8000a76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a7e:	bf18      	it	ne
 8000a80:	f040 0001 	orrne.w	r0, r0, #1
 8000a84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a90:	ea40 000c 	orr.w	r0, r0, ip
 8000a94:	fa23 f302 	lsr.w	r3, r3, r2
 8000a98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a9c:	e7cc      	b.n	8000a38 <__aeabi_d2f+0x14>
 8000a9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa2:	d107      	bne.n	8000ab4 <__aeabi_d2f+0x90>
 8000aa4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa8:	bf1e      	ittt	ne
 8000aaa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab2:	4770      	bxne	lr
 8000ab4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000abc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_frsub>:
 8000ac4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	e002      	b.n	8000ad0 <__addsf3>
 8000aca:	bf00      	nop

08000acc <__aeabi_fsub>:
 8000acc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad0 <__addsf3>:
 8000ad0:	0042      	lsls	r2, r0, #1
 8000ad2:	bf1f      	itttt	ne
 8000ad4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad8:	ea92 0f03 	teqne	r2, r3
 8000adc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae4:	d06a      	beq.n	8000bbc <__addsf3+0xec>
 8000ae6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aee:	bfc1      	itttt	gt
 8000af0:	18d2      	addgt	r2, r2, r3
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	4048      	eorgt	r0, r1
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	bfb8      	it	lt
 8000afa:	425b      	neglt	r3, r3
 8000afc:	2b19      	cmp	r3, #25
 8000afe:	bf88      	it	hi
 8000b00:	4770      	bxhi	lr
 8000b02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b1e:	bf18      	it	ne
 8000b20:	4249      	negne	r1, r1
 8000b22:	ea92 0f03 	teq	r2, r3
 8000b26:	d03f      	beq.n	8000ba8 <__addsf3+0xd8>
 8000b28:	f1a2 0201 	sub.w	r2, r2, #1
 8000b2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b30:	eb10 000c 	adds.w	r0, r0, ip
 8000b34:	f1c3 0320 	rsb	r3, r3, #32
 8000b38:	fa01 f103 	lsl.w	r1, r1, r3
 8000b3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__addsf3+0x78>
 8000b42:	4249      	negs	r1, r1
 8000b44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b4c:	d313      	bcc.n	8000b76 <__addsf3+0xa6>
 8000b4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b52:	d306      	bcc.n	8000b62 <__addsf3+0x92>
 8000b54:	0840      	lsrs	r0, r0, #1
 8000b56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5a:	f102 0201 	add.w	r2, r2, #1
 8000b5e:	2afe      	cmp	r2, #254	; 0xfe
 8000b60:	d251      	bcs.n	8000c06 <__addsf3+0x136>
 8000b62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6a:	bf08      	it	eq
 8000b6c:	f020 0001 	biceq.w	r0, r0, #1
 8000b70:	ea40 0003 	orr.w	r0, r0, r3
 8000b74:	4770      	bx	lr
 8000b76:	0049      	lsls	r1, r1, #1
 8000b78:	eb40 0000 	adc.w	r0, r0, r0
 8000b7c:	3a01      	subs	r2, #1
 8000b7e:	bf28      	it	cs
 8000b80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b84:	d2ed      	bcs.n	8000b62 <__addsf3+0x92>
 8000b86:	fab0 fc80 	clz	ip, r0
 8000b8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b96:	bfaa      	itet	ge
 8000b98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b9c:	4252      	neglt	r2, r2
 8000b9e:	4318      	orrge	r0, r3
 8000ba0:	bfbc      	itt	lt
 8000ba2:	40d0      	lsrlt	r0, r2
 8000ba4:	4318      	orrlt	r0, r3
 8000ba6:	4770      	bx	lr
 8000ba8:	f092 0f00 	teq	r2, #0
 8000bac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb0:	bf06      	itte	eq
 8000bb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bb6:	3201      	addeq	r2, #1
 8000bb8:	3b01      	subne	r3, #1
 8000bba:	e7b5      	b.n	8000b28 <__addsf3+0x58>
 8000bbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc4:	bf18      	it	ne
 8000bc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bca:	d021      	beq.n	8000c10 <__addsf3+0x140>
 8000bcc:	ea92 0f03 	teq	r2, r3
 8000bd0:	d004      	beq.n	8000bdc <__addsf3+0x10c>
 8000bd2:	f092 0f00 	teq	r2, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	4608      	moveq	r0, r1
 8000bda:	4770      	bx	lr
 8000bdc:	ea90 0f01 	teq	r0, r1
 8000be0:	bf1c      	itt	ne
 8000be2:	2000      	movne	r0, #0
 8000be4:	4770      	bxne	lr
 8000be6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bea:	d104      	bne.n	8000bf6 <__addsf3+0x126>
 8000bec:	0040      	lsls	r0, r0, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	4770      	bx	lr
 8000bf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfa:	bf3c      	itt	cc
 8000bfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bxcc	lr
 8000c02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0e:	4770      	bx	lr
 8000c10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c14:	bf16      	itet	ne
 8000c16:	4608      	movne	r0, r1
 8000c18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c1c:	4601      	movne	r1, r0
 8000c1e:	0242      	lsls	r2, r0, #9
 8000c20:	bf06      	itte	eq
 8000c22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c26:	ea90 0f01 	teqeq	r0, r1
 8000c2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_ui2f>:
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e004      	b.n	8000c40 <__aeabi_i2f+0x8>
 8000c36:	bf00      	nop

08000c38 <__aeabi_i2f>:
 8000c38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c3c:	bf48      	it	mi
 8000c3e:	4240      	negmi	r0, r0
 8000c40:	ea5f 0c00 	movs.w	ip, r0
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	e01c      	b.n	8000c8e <__aeabi_l2f+0x2a>

08000c54 <__aeabi_ul2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e00a      	b.n	8000c78 <__aeabi_l2f+0x14>
 8000c62:	bf00      	nop

08000c64 <__aeabi_l2f>:
 8000c64:	ea50 0201 	orrs.w	r2, r0, r1
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__aeabi_l2f+0x14>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	ea5f 0c01 	movs.w	ip, r1
 8000c7c:	bf02      	ittt	eq
 8000c7e:	4684      	moveq	ip, r0
 8000c80:	4601      	moveq	r1, r0
 8000c82:	2000      	moveq	r0, #0
 8000c84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c88:	bf08      	it	eq
 8000c8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c92:	fabc f28c 	clz	r2, ip
 8000c96:	3a08      	subs	r2, #8
 8000c98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c9c:	db10      	blt.n	8000cc0 <__aeabi_l2f+0x5c>
 8000c9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	f020 0001 	biceq.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	f102 0220 	add.w	r2, r2, #32
 8000cc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fmul>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d06f      	beq.n	8000dd8 <__aeabi_fmul+0xf8>
 8000cf8:	441a      	add	r2, r3
 8000cfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfe:	0240      	lsls	r0, r0, #9
 8000d00:	bf18      	it	ne
 8000d02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d06:	d01e      	beq.n	8000d46 <__aeabi_fmul+0x66>
 8000d08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d14:	fba0 3101 	umull	r3, r1, r0, r1
 8000d18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d20:	bf3e      	ittt	cc
 8000d22:	0049      	lslcc	r1, r1, #1
 8000d24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d28:	005b      	lslcc	r3, r3, #1
 8000d2a:	ea40 0001 	orr.w	r0, r0, r1
 8000d2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d32:	2afd      	cmp	r2, #253	; 0xfd
 8000d34:	d81d      	bhi.n	8000d72 <__aeabi_fmul+0x92>
 8000d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	4770      	bx	lr
 8000d46:	f090 0f00 	teq	r0, #0
 8000d4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	0249      	lsleq	r1, r1, #9
 8000d52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5a:	3a7f      	subs	r2, #127	; 0x7f
 8000d5c:	bfc2      	ittt	gt
 8000d5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d66:	4770      	bxgt	lr
 8000d68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	dc5d      	bgt.n	8000e30 <__aeabi_fmul+0x150>
 8000d74:	f112 0f19 	cmn.w	r2, #25
 8000d78:	bfdc      	itt	le
 8000d7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	4770      	bxle	lr
 8000d80:	f1c2 0200 	rsb	r2, r2, #0
 8000d84:	0041      	lsls	r1, r0, #1
 8000d86:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8a:	f1c2 0220 	rsb	r2, r2, #32
 8000d8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d96:	f140 0000 	adc.w	r0, r0, #0
 8000d9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9e:	bf08      	it	eq
 8000da0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da4:	4770      	bx	lr
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0040      	lsleq	r0, r0, #1
 8000db2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000db6:	3a01      	subeq	r2, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xce>
 8000dba:	ea40 000c 	orr.w	r0, r0, ip
 8000dbe:	f093 0f00 	teq	r3, #0
 8000dc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0049      	lsleq	r1, r1, #1
 8000dca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dce:	3b01      	subeq	r3, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xe6>
 8000dd2:	ea41 010c 	orr.w	r1, r1, ip
 8000dd6:	e78f      	b.n	8000cf8 <__aeabi_fmul+0x18>
 8000dd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	bf18      	it	ne
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d00a      	beq.n	8000dfe <__aeabi_fmul+0x11e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1d8      	bne.n	8000da6 <__aeabi_fmul+0xc6>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	bf17      	itett	ne
 8000e04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e08:	4608      	moveq	r0, r1
 8000e0a:	f091 0f00 	teqne	r1, #0
 8000e0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e12:	d014      	beq.n	8000e3e <__aeabi_fmul+0x15e>
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d101      	bne.n	8000e1e <__aeabi_fmul+0x13e>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d10f      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e1e:	ea93 0f0c 	teq	r3, ip
 8000e22:	d103      	bne.n	8000e2c <__aeabi_fmul+0x14c>
 8000e24:	024b      	lsls	r3, r1, #9
 8000e26:	bf18      	it	ne
 8000e28:	4608      	movne	r0, r1
 8000e2a:	d108      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e3c:	4770      	bx	lr
 8000e3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_fdiv>:
 8000e48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e50:	bf1e      	ittt	ne
 8000e52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e56:	ea92 0f0c 	teqne	r2, ip
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d069      	beq.n	8000f34 <__aeabi_fdiv+0xec>
 8000e60:	eba2 0203 	sub.w	r2, r2, r3
 8000e64:	ea80 0c01 	eor.w	ip, r0, r1
 8000e68:	0249      	lsls	r1, r1, #9
 8000e6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6e:	d037      	beq.n	8000ee0 <__aeabi_fdiv+0x98>
 8000e70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf38      	it	cc
 8000e84:	005b      	lslcc	r3, r3, #1
 8000e86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	bf24      	itt	cs
 8000e92:	1a5b      	subcs	r3, r3, r1
 8000e94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eaa:	bf24      	itt	cs
 8000eac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb8:	bf24      	itt	cs
 8000eba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ebe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eca:	d1e0      	bne.n	8000e8e <__aeabi_fdiv+0x46>
 8000ecc:	2afd      	cmp	r2, #253	; 0xfd
 8000ece:	f63f af50 	bhi.w	8000d72 <__aeabi_fmul+0x92>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee8:	327f      	adds	r2, #127	; 0x7f
 8000eea:	bfc2      	ittt	gt
 8000eec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef4:	4770      	bxgt	lr
 8000ef6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	3a01      	subs	r2, #1
 8000f00:	e737      	b.n	8000d72 <__aeabi_fmul+0x92>
 8000f02:	f092 0f00 	teq	r2, #0
 8000f06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0040      	lsleq	r0, r0, #1
 8000f0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f12:	3a01      	subeq	r2, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xc2>
 8000f16:	ea40 000c 	orr.w	r0, r0, ip
 8000f1a:	f093 0f00 	teq	r3, #0
 8000f1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0049      	lsleq	r1, r1, #1
 8000f26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2a:	3b01      	subeq	r3, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xda>
 8000f2e:	ea41 010c 	orr.w	r1, r1, ip
 8000f32:	e795      	b.n	8000e60 <__aeabi_fdiv+0x18>
 8000f34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d108      	bne.n	8000f50 <__aeabi_fdiv+0x108>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	f47f af7d 	bne.w	8000e3e <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	f47f af70 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e776      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	d104      	bne.n	8000f60 <__aeabi_fdiv+0x118>
 8000f56:	024b      	lsls	r3, r1, #9
 8000f58:	f43f af4c 	beq.w	8000df4 <__aeabi_fmul+0x114>
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f64:	bf18      	it	ne
 8000f66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6a:	d1ca      	bne.n	8000f02 <__aeabi_fdiv+0xba>
 8000f6c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f70:	f47f af5c 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f74:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f78:	f47f af3c 	bne.w	8000df4 <__aeabi_fmul+0x114>
 8000f7c:	e75f      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f7e:	bf00      	nop

08000f80 <__gesf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295
 8000f84:	e006      	b.n	8000f94 <__cmpsf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__lesf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpsf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpsf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000faa:	d011      	beq.n	8000fd0 <__cmpsf2+0x40>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb2:	bf18      	it	ne
 8000fb4:	ea90 0f01 	teqne	r0, r1
 8000fb8:	bf58      	it	pl
 8000fba:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fbe:	bf88      	it	hi
 8000fc0:	17c8      	asrhi	r0, r1, #31
 8000fc2:	bf38      	it	cc
 8000fc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc8:	bf18      	it	ne
 8000fca:	f040 0001 	orrne.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd4:	d102      	bne.n	8000fdc <__cmpsf2+0x4c>
 8000fd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fda:	d105      	bne.n	8000fe8 <__cmpsf2+0x58>
 8000fdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe0:	d1e4      	bne.n	8000fac <__cmpsf2+0x1c>
 8000fe2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe6:	d0e1      	beq.n	8000fac <__cmpsf2+0x1c>
 8000fe8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_cfrcmple>:
 8000ff0:	4684      	mov	ip, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4661      	mov	r1, ip
 8000ff6:	e7ff      	b.n	8000ff8 <__aeabi_cfcmpeq>

08000ff8 <__aeabi_cfcmpeq>:
 8000ff8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffa:	f7ff ffc9 	bl	8000f90 <__cmpsf2>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	bf48      	it	mi
 8001002:	f110 0f00 	cmnmi.w	r0, #0
 8001006:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001008 <__aeabi_fcmpeq>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff fff4 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001010:	bf0c      	ite	eq
 8001012:	2001      	moveq	r0, #1
 8001014:	2000      	movne	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmplt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffea 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmple>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffe0 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001038:	bf94      	ite	ls
 800103a:	2001      	movls	r0, #1
 800103c:	2000      	movhi	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpge>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffd2 	bl	8000ff0 <__aeabi_cfrcmple>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpgt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffc8 	bl	8000ff0 <__aeabi_cfrcmple>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpun>:
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__aeabi_fcmpun+0x14>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d108      	bne.n	8001092 <__aeabi_fcmpun+0x26>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d102      	bne.n	800108c <__aeabi_fcmpun+0x20>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d102      	bne.n	8001092 <__aeabi_fcmpun+0x26>
 800108c:	f04f 0000 	mov.w	r0, #0
 8001090:	4770      	bx	lr
 8001092:	f04f 0001 	mov.w	r0, #1
 8001096:	4770      	bx	lr

08001098 <filter>:

uint8_t _buffer[21];

static uint8_t _mag_adjust[3];

float filter(float val) { //функция фильтрации
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	Pc = P + varProcess;
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <filter+0xbc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a2c      	ldr	r2, [pc, #176]	; (8001158 <filter+0xc0>)
 80010a6:	6812      	ldr	r2, [r2, #0]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fd10 	bl	8000ad0 <__addsf3>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <filter+0xc4>)
 80010b6:	601a      	str	r2, [r3, #0]
	G = Pc/(Pc + varVolt);
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <filter+0xc4>)
 80010ba:	681c      	ldr	r4, [r3, #0]
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <filter+0xc4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a27      	ldr	r2, [pc, #156]	; (8001160 <filter+0xc8>)
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fd02 	bl	8000ad0 <__addsf3>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4619      	mov	r1, r3
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff feb9 	bl	8000e48 <__aeabi_fdiv>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <filter+0xcc>)
 80010dc:	601a      	str	r2, [r3, #0]
	P = (1-G)*Pc;
 80010de:	4b21      	ldr	r3, [pc, #132]	; (8001164 <filter+0xcc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80010e8:	f7ff fcf0 	bl	8000acc <__aeabi_fsub>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <filter+0xc4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	4610      	mov	r0, r2
 80010f8:	f7ff fdf2 	bl	8000ce0 <__aeabi_fmul>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <filter+0xbc>)
 8001102:	601a      	str	r2, [r3, #0]
	Xp = Xe;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <filter+0xd0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <filter+0xd4>)
 800110a:	6013      	str	r3, [r2, #0]
	Zp = Xp;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <filter+0xd4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a17      	ldr	r2, [pc, #92]	; (8001170 <filter+0xd8>)
 8001112:	6013      	str	r3, [r2, #0]
	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <filter+0xd8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fcd6 	bl	8000acc <__aeabi_fsub>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <filter+0xcc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4610      	mov	r0, r2
 800112c:	f7ff fdd8 	bl	8000ce0 <__aeabi_fmul>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <filter+0xd4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	4610      	mov	r0, r2
 800113c:	f7ff fcc8 	bl	8000ad0 <__addsf3>
 8001140:	4603      	mov	r3, r0
 8001142:	461a      	mov	r2, r3
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <filter+0xd0>)
 8001146:	601a      	str	r2, [r3, #0]
return(Xe);
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <filter+0xd0>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	20000004 	.word	0x20000004
 8001158:	20000000 	.word	0x20000000
 800115c:	200000a8 	.word	0x200000a8
 8001160:	200000a4 	.word	0x200000a4
 8001164:	200000ac 	.word	0x200000ac
 8001168:	200000b8 	.word	0x200000b8
 800116c:	200000b0 	.word	0x200000b0
 8001170:	200000b4 	.word	0x200000b4

08001174 <MPU9250_OnActivate>:

__weak void MPU9250_OnActivate()
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8001184:	f7ff fff6 	bl	8001174 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2110      	movs	r1, #16
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <MPU9250_Activate+0x18>)
 800118e:	f002 ff8b 	bl	80040a8 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40010800 	.word	0x40010800

0800119c <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2110      	movs	r1, #16
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <MPU9250_Deactivate+0x14>)
 80011a6:	f002 ff7f 	bl	80040a8 <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40010800 	.word	0x40010800

080011b4 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80011c2:	f107 020f 	add.w	r2, r7, #15
 80011c6:	1df9      	adds	r1, r7, #7
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	4806      	ldr	r0, [pc, #24]	; (80011ec <SPIx_WriteRead+0x38>)
 80011d2:	f003 fe54 	bl	8004e7e <HAL_SPI_TransmitReceive>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SPIx_WriteRead+0x2c>
	{
		return -1;
 80011dc:	23ff      	movs	r3, #255	; 0xff
 80011de:	e000      	b.n	80011e2 <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	2000023c 	.word	0x2000023c

080011f0 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *p_buffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
 80011fc:	4613      	mov	r3, r2
 80011fe:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001200:	f7ff ffbe 	bl	8001180 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ffd4 	bl	80011b4 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 800120c:	e00a      	b.n	8001224 <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*p_buffer);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffce 	bl	80011b4 <SPIx_WriteRead>
		NumByteToWrite--;
 8001218:	883b      	ldrh	r3, [r7, #0]
 800121a:	3b01      	subs	r3, #1
 800121c:	803b      	strh	r3, [r7, #0]
		p_buffer++;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3301      	adds	r3, #1
 8001222:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8001224:	883b      	ldrh	r3, [r7, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f1      	bne.n	800120e <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 800122a:	f7ff ffb7 	bl	800119c <MPU9250_Deactivate>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *p_buffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	70fb      	strb	r3, [r7, #3]
 8001244:	4613      	mov	r3, r2
 8001246:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001248:	f7ff ff9a 	bl	8001180 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001252:	b2db      	uxtb	r3, r3
 8001254:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 8001256:	f107 010f 	add.w	r1, r7, #15
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	2201      	movs	r2, #1
 8001260:	480b      	ldr	r0, [pc, #44]	; (8001290 <MPU_SPI_Read+0x58>)
 8001262:	f003 fbbf 	bl	80049e4 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&MPU9250_SPI, p_buffer, NumByteToRead, HAL_MAX_DELAY) == HAL_OK) {
 8001266:	883a      	ldrh	r2, [r7, #0]
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <MPU_SPI_Read+0x58>)
 8001270:	f003 fcf4 	bl	8004c5c <HAL_SPI_Receive>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <MPU_SPI_Read+0x4a>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800127a:	2110      	movs	r1, #16
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MPU_SPI_Read+0x5c>)
 800127e:	f002 ff2b 	bl	80040d8 <HAL_GPIO_TogglePin>
	}
	else {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	}
	MPU9250_Deactivate();
 8001282:	f7ff ff8b 	bl	800119c <MPU9250_Deactivate>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000023c 	.word	0x2000023c
 8001294:	40010c00 	.word	0x40010c00

08001298 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 80012a8:	79f9      	ldrb	r1, [r7, #7]
 80012aa:	1dbb      	adds	r3, r7, #6
 80012ac:	2201      	movs	r2, #1
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff9e 	bl	80011f0 <MPU_SPI_Write>
	HAL_Delay(10);
 80012b4:	200a      	movs	r0, #10
 80012b6:	f001 feb5 	bl	8003024 <HAL_Delay>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	603a      	str	r2, [r7, #0]
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	460b      	mov	r3, r1
 80012d0:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4619      	mov	r1, r3
 80012da:	6838      	ldr	r0, [r7, #0]
 80012dc:	f7ff ffac 	bl	8001238 <MPU_SPI_Read>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80012f8:	210c      	movs	r1, #12
 80012fa:	2025      	movs	r0, #37	; 0x25
 80012fc:	f7ff ffcc 	bl	8001298 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	4619      	mov	r1, r3
 8001304:	2026      	movs	r0, #38	; 0x26
 8001306:	f7ff ffc7 	bl	8001298 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	4619      	mov	r1, r3
 800130e:	2063      	movs	r0, #99	; 0x63
 8001310:	f7ff ffc2 	bl	8001298 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8001314:	2181      	movs	r1, #129	; 0x81
 8001316:	2027      	movs	r0, #39	; 0x27
 8001318:	f7ff ffbe 	bl	8001298 <writeRegister>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	603a      	str	r2, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
 8001330:	460b      	mov	r3, r1
 8001332:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8001334:	218c      	movs	r1, #140	; 0x8c
 8001336:	2025      	movs	r0, #37	; 0x25
 8001338:	f7ff ffae 	bl	8001298 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4619      	mov	r1, r3
 8001340:	2026      	movs	r0, #38	; 0x26
 8001342:	f7ff ffa9 	bl	8001298 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8001346:	79bb      	ldrb	r3, [r7, #6]
 8001348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4619      	mov	r1, r3
 8001350:	2027      	movs	r0, #39	; 0x27
 8001352:	f7ff ffa1 	bl	8001298 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8001356:	2001      	movs	r0, #1
 8001358:	f001 fe64 	bl	8003024 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800135c:	79bb      	ldrb	r3, [r7, #6]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	2049      	movs	r0, #73	; 0x49
 8001364:	f7ff ffad 	bl	80012c2 <readRegisters>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I, 1, _buffer);
 8001374:	4a04      	ldr	r2, [pc, #16]	; (8001388 <whoAmI+0x18>)
 8001376:	2101      	movs	r1, #1
 8001378:	2075      	movs	r0, #117	; 0x75
 800137a:	f7ff ffa2 	bl	80012c2 <readRegisters>

	// return the register value
	return _buffer[0];
 800137e:	4b02      	ldr	r3, [pc, #8]	; (8001388 <whoAmI+0x18>)
 8001380:	781b      	ldrb	r3, [r3, #0]
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000bc 	.word	0x200000bc

0800138c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I, 1, _buffer);
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <whoAmIAK8963+0x18>)
 8001392:	2101      	movs	r1, #1
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff ffc5 	bl	8001324 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 800139a:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <whoAmIAK8963+0x18>)
 800139c:	781b      	ldrb	r3, [r3, #0]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200000bc 	.word	0x200000bc

080013a8 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80013ae:	2101      	movs	r1, #1
 80013b0:	206b      	movs	r0, #107	; 0x6b
 80013b2:	f7ff ff71 	bl	8001298 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80013b6:	2120      	movs	r1, #32
 80013b8:	206a      	movs	r0, #106	; 0x6a
 80013ba:	f7ff ff6d 	bl	8001298 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80013be:	210d      	movs	r1, #13
 80013c0:	2024      	movs	r0, #36	; 0x24
 80013c2:	f7ff ff69 	bl	8001298 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 80013c6:	2100      	movs	r1, #0
 80013c8:	200a      	movs	r0, #10
 80013ca:	f7ff ff8d 	bl	80012e8 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1, PWR_RESET);
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	206b      	movs	r0, #107	; 0x6b
 80013d2:	f7ff ff61 	bl	8001298 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80013d6:	200a      	movs	r0, #10
 80013d8:	f001 fe24 	bl	8003024 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2, AK8963_RESET);
 80013dc:	2101      	movs	r1, #1
 80013de:	200b      	movs	r0, #11
 80013e0:	f7ff ff82 	bl	80012e8 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80013e4:	2101      	movs	r1, #1
 80013e6:	206b      	movs	r0, #107	; 0x6b
 80013e8:	f7ff ff56 	bl	8001298 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80013ec:	f7ff ffc0 	bl	8001370 <whoAmI>
 80013f0:	4603      	mov	r3, r0
 80013f2:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	2b71      	cmp	r3, #113	; 0x71
 80013f8:	d004      	beq.n	8001404 <MPU9250_Init+0x5c>
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b73      	cmp	r3, #115	; 0x73
 80013fe:	d001      	beq.n	8001404 <MPU9250_Init+0x5c>
	{
		return 1;
 8001400:	2301      	movs	r3, #1
 8001402:	e051      	b.n	80014a8 <MPU9250_Init+0x100>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 8001404:	2100      	movs	r1, #0
 8001406:	206c      	movs	r0, #108	; 0x6c
 8001408:	f7ff ff46 	bl	8001298 <writeRegister>

	// setting accel range to 8G as default
	writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_8G);
 800140c:	2110      	movs	r1, #16
 800140e:	201c      	movs	r0, #28
 8001410:	f7ff ff42 	bl	8001298 <writeRegister>

	// setting the gyro range to 500DPS as default
	writeRegister(GYRO_CONFIG, GYRO_FS_SEL_500DPS);
 8001414:	2108      	movs	r1, #8
 8001416:	201b      	movs	r0, #27
 8001418:	f7ff ff3e 	bl	8001298 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2, DLPF_184);
 800141c:	2101      	movs	r1, #1
 800141e:	201d      	movs	r0, #29
 8001420:	f7ff ff3a 	bl	8001298 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG, DLPF_184);
 8001424:	2101      	movs	r1, #1
 8001426:	201a      	movs	r0, #26
 8001428:	f7ff ff36 	bl	8001298 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV, 0x00);
 800142c:	2100      	movs	r1, #0
 800142e:	2019      	movs	r0, #25
 8001430:	f7ff ff32 	bl	8001298 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8001434:	2120      	movs	r1, #32
 8001436:	206a      	movs	r0, #106	; 0x6a
 8001438:	f7ff ff2e 	bl	8001298 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 800143c:	210d      	movs	r1, #13
 800143e:	2024      	movs	r0, #36	; 0x24
 8001440:	f7ff ff2a 	bl	8001298 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8001444:	f7ff ffa2 	bl	800138c <whoAmIAK8963>
 8001448:	4603      	mov	r3, r0
 800144a:	2b48      	cmp	r3, #72	; 0x48
 800144c:	d001      	beq.n	8001452 <MPU9250_Init+0xaa>
	{
		return 1;
 800144e:	2301      	movs	r3, #1
 8001450:	e02a      	b.n	80014a8 <MPU9250_Init+0x100>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001452:	2100      	movs	r1, #0
 8001454:	200a      	movs	r0, #10
 8001456:	f7ff ff47 	bl	80012e8 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f001 fde2 	bl	8003024 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1, AK8963_FUSE_ROM);
 8001460:	210f      	movs	r1, #15
 8001462:	200a      	movs	r0, #10
 8001464:	f7ff ff40 	bl	80012e8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001468:	2064      	movs	r0, #100	; 0x64
 800146a:	f001 fddb 	bl	8003024 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <MPU9250_Init+0x108>)
 8001470:	2103      	movs	r1, #3
 8001472:	2010      	movs	r0, #16
 8001474:	f7ff ff56 	bl	8001324 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001478:	2100      	movs	r1, #0
 800147a:	200a      	movs	r0, #10
 800147c:	f7ff ff34 	bl	80012e8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001480:	2064      	movs	r0, #100	; 0x64
 8001482:	f001 fdcf 	bl	8003024 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1, AK8963_CNT_MEAS2);
 8001486:	2116      	movs	r1, #22
 8001488:	200a      	movs	r0, #10
 800148a:	f7ff ff2d 	bl	80012e8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800148e:	2064      	movs	r0, #100	; 0x64
 8001490:	f001 fdc8 	bl	8003024 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001494:	2101      	movs	r1, #1
 8001496:	206b      	movs	r0, #107	; 0x6b
 8001498:	f7ff fefe 	bl	8001298 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL, 7 , _buffer);
 800149c:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <MPU9250_Init+0x10c>)
 800149e:	2107      	movs	r1, #7
 80014a0:	2003      	movs	r0, #3
 80014a2:	f7ff ff3f 	bl	8001324 <readAK8963Registers>
//	writeRegister(GYRO_CONFIG, 0x08);
//	//accel config 8g
//	writeRegister(ACCEL_CONFIG, 0x10);

	// successful init, return 0
	return 0;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200000d4 	.word	0x200000d4
 80014b4:	200000bc 	.word	0x200000bc

080014b8 <MPU9250_calibrate>:
}

uint16_t ii, packet_count, fifo_count;

void MPU9250_calibrate()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    //uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    writeRegister(PWR_MGMNT_1, PWR_RESET); // Write a one to bit 7 reset bit; toggle reset device
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	206b      	movs	r0, #107	; 0x6b
 80014c2:	f7ff fee9 	bl	8001298 <writeRegister>
    HAL_Delay(100);
 80014c6:	2064      	movs	r0, #100	; 0x64
 80014c8:	f001 fdac 	bl	8003024 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80014cc:	2101      	movs	r1, #1
 80014ce:	206b      	movs	r0, #107	; 0x6b
 80014d0:	f7ff fee2 	bl	8001298 <writeRegister>
    writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 80014d4:	2100      	movs	r1, #0
 80014d6:	206c      	movs	r0, #108	; 0x6c
 80014d8:	f7ff fede 	bl	8001298 <writeRegister>
    HAL_Delay(200);
 80014dc:	20c8      	movs	r0, #200	; 0xc8
 80014de:	f001 fda1 	bl	8003024 <HAL_Delay>

    // Configure device for bias calculation
    writeRegister(INT_ENABLE, INT_DISABLE);   // Disable all interrupts
 80014e2:	2100      	movs	r1, #0
 80014e4:	2038      	movs	r0, #56	; 0x38
 80014e6:	f7ff fed7 	bl	8001298 <writeRegister>
    writeRegister(FIFO_EN, 0x00);      // Disable FIFO
 80014ea:	2100      	movs	r1, #0
 80014ec:	2023      	movs	r0, #35	; 0x23
 80014ee:	f7ff fed3 	bl	8001298 <writeRegister>
    writeRegister(PWR_MGMNT_1, SEN_ENABLE);   // Turn on internal clock source
 80014f2:	2100      	movs	r1, #0
 80014f4:	206b      	movs	r0, #107	; 0x6b
 80014f6:	f7ff fecf 	bl	8001298 <writeRegister>
    writeRegister(I2C_MST_CTRL, 0x00); // Disable I2C master
 80014fa:	2100      	movs	r1, #0
 80014fc:	2024      	movs	r0, #36	; 0x24
 80014fe:	f7ff fecb 	bl	8001298 <writeRegister>
    writeRegister(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001502:	2100      	movs	r1, #0
 8001504:	206a      	movs	r0, #106	; 0x6a
 8001506:	f7ff fec7 	bl	8001298 <writeRegister>
    writeRegister(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 800150a:	210c      	movs	r1, #12
 800150c:	206a      	movs	r0, #106	; 0x6a
 800150e:	f7ff fec3 	bl	8001298 <writeRegister>
    HAL_Delay(15);
 8001512:	200f      	movs	r0, #15
 8001514:	f001 fd86 	bl	8003024 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    writeRegister(CONFIG, DLPF_184);      // Set low-pass filter to 184 Hz
 8001518:	2101      	movs	r1, #1
 800151a:	201a      	movs	r0, #26
 800151c:	f7ff febc 	bl	8001298 <writeRegister>
    writeRegister(SMPDIV, 0x00);  // Set sample rate to 1 kHz
 8001520:	2100      	movs	r1, #0
 8001522:	2019      	movs	r0, #25
 8001524:	f7ff feb8 	bl	8001298 <writeRegister>
    writeRegister(GYRO_CONFIG, GYRO_FS_SEL_250DPS);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001528:	2100      	movs	r1, #0
 800152a:	201b      	movs	r0, #27
 800152c:	f7ff feb4 	bl	8001298 <writeRegister>
    writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_2G); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001530:	2100      	movs	r1, #0
 8001532:	201c      	movs	r0, #28
 8001534:	f7ff feb0 	bl	8001298 <writeRegister>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800153c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    writeRegister(USER_CTRL, 0x40);   // Enable FIFO
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	206a      	movs	r0, #106	; 0x6a
 8001542:	f7ff fea9 	bl	8001298 <writeRegister>
    writeRegister(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9250)
 8001546:	2178      	movs	r1, #120	; 0x78
 8001548:	2023      	movs	r0, #35	; 0x23
 800154a:	f7ff fea5 	bl	8001298 <writeRegister>
    HAL_Delay(28); // accumulate 40 samples in 27 milliseconds = 480 bytes
 800154e:	201c      	movs	r0, #28
 8001550:	f001 fd68 	bl	8003024 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    writeRegister(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001554:	2100      	movs	r1, #0
 8001556:	2023      	movs	r0, #35	; 0x23
 8001558:	f7ff fe9e 	bl	8001298 <writeRegister>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    uint8_t fifoCount_buffer[2];
    readRegisters(FIFO_COUNT, 2, fifoCount_buffer);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	461a      	mov	r2, r3
 8001562:	2102      	movs	r1, #2
 8001564:	2072      	movs	r0, #114	; 0x72
 8001566:	f7ff feac 	bl	80012c2 <readRegisters>

    fifo_count = (fifoCount_buffer[0] << 8) | fifoCount_buffer[1];
 800156a:	7f3b      	ldrb	r3, [r7, #28]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	7f7b      	ldrb	r3, [r7, #29]
 8001572:	b21b      	sxth	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b21b      	sxth	r3, r3
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b9b      	ldr	r3, [pc, #620]	; (80017e8 <MPU9250_calibrate+0x330>)
 800157c:	801a      	strh	r2, [r3, #0]
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 800157e:	4b9a      	ldr	r3, [pc, #616]	; (80017e8 <MPU9250_calibrate+0x330>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	4a9a      	ldr	r2, [pc, #616]	; (80017ec <MPU9250_calibrate+0x334>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b98      	ldr	r3, [pc, #608]	; (80017f0 <MPU9250_calibrate+0x338>)
 800158e:	801a      	strh	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++)
 8001590:	4b98      	ldr	r3, [pc, #608]	; (80017f4 <MPU9250_calibrate+0x33c>)
 8001592:	2200      	movs	r2, #0
 8001594:	801a      	strh	r2, [r3, #0]
 8001596:	e078      	b.n	800168a <MPU9250_calibrate+0x1d2>
    {
        int32_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
        readRegisters(FIFO_READ, 12, data);
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	461a      	mov	r2, r3
 80015b6:	210c      	movs	r1, #12
 80015b8:	2074      	movs	r0, #116	; 0x74
 80015ba:	f7ff fe82 	bl	80012c2 <readRegisters>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80015be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015ca:	b21b      	sxth	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	613b      	str	r3, [r7, #16]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80015d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	617b      	str	r3, [r7, #20]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80015e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	61bb      	str	r3, [r7, #24]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80015fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	b21a      	sxth	r2, r3
 8001602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21b      	sxth	r3, r3
 800160c:	607b      	str	r3, [r7, #4]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800160e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21b      	sxth	r3, r3
 8001620:	60bb      	str	r3, [r7, #8]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001622:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800162e:	b21b      	sxth	r3, r3
 8001630:	4313      	orrs	r3, r2
 8001632:	b21b      	sxth	r3, r3
 8001634:	60fb      	str	r3, [r7, #12]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001636:	4b70      	ldr	r3, [pc, #448]	; (80017f8 <MPU9250_calibrate+0x340>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4413      	add	r3, r2
 800163e:	4a6e      	ldr	r2, [pc, #440]	; (80017f8 <MPU9250_calibrate+0x340>)
 8001640:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 8001642:	4b6d      	ldr	r3, [pc, #436]	; (80017f8 <MPU9250_calibrate+0x340>)
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	4413      	add	r3, r2
 800164a:	4a6b      	ldr	r2, [pc, #428]	; (80017f8 <MPU9250_calibrate+0x340>)
 800164c:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 800164e:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <MPU9250_calibrate+0x340>)
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4413      	add	r3, r2
 8001656:	4a68      	ldr	r2, [pc, #416]	; (80017f8 <MPU9250_calibrate+0x340>)
 8001658:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 800165a:	4b68      	ldr	r3, [pc, #416]	; (80017fc <MPU9250_calibrate+0x344>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	4a66      	ldr	r2, [pc, #408]	; (80017fc <MPU9250_calibrate+0x344>)
 8001664:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001666:	4b65      	ldr	r3, [pc, #404]	; (80017fc <MPU9250_calibrate+0x344>)
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	4413      	add	r3, r2
 800166e:	4a63      	ldr	r2, [pc, #396]	; (80017fc <MPU9250_calibrate+0x344>)
 8001670:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001672:	4b62      	ldr	r3, [pc, #392]	; (80017fc <MPU9250_calibrate+0x344>)
 8001674:	689a      	ldr	r2, [r3, #8]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	4a60      	ldr	r2, [pc, #384]	; (80017fc <MPU9250_calibrate+0x344>)
 800167c:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <MPU9250_calibrate+0x33c>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <MPU9250_calibrate+0x33c>)
 8001688:	801a      	strh	r2, [r3, #0]
 800168a:	4b5a      	ldr	r3, [pc, #360]	; (80017f4 <MPU9250_calibrate+0x33c>)
 800168c:	881a      	ldrh	r2, [r3, #0]
 800168e:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <MPU9250_calibrate+0x338>)
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d380      	bcc.n	8001598 <MPU9250_calibrate+0xe0>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001696:	4b58      	ldr	r3, [pc, #352]	; (80017f8 <MPU9250_calibrate+0x340>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a55      	ldr	r2, [pc, #340]	; (80017f0 <MPU9250_calibrate+0x338>)
 800169c:	8812      	ldrh	r2, [r2, #0]
 800169e:	fb93 f3f2 	sdiv	r3, r3, r2
 80016a2:	4a55      	ldr	r2, [pc, #340]	; (80017f8 <MPU9250_calibrate+0x340>)
 80016a4:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 80016a6:	4b54      	ldr	r3, [pc, #336]	; (80017f8 <MPU9250_calibrate+0x340>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a51      	ldr	r2, [pc, #324]	; (80017f0 <MPU9250_calibrate+0x338>)
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80016b2:	4a51      	ldr	r2, [pc, #324]	; (80017f8 <MPU9250_calibrate+0x340>)
 80016b4:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 80016b6:	4b50      	ldr	r3, [pc, #320]	; (80017f8 <MPU9250_calibrate+0x340>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4a4d      	ldr	r2, [pc, #308]	; (80017f0 <MPU9250_calibrate+0x338>)
 80016bc:	8812      	ldrh	r2, [r2, #0]
 80016be:	fb93 f3f2 	sdiv	r3, r3, r2
 80016c2:	4a4d      	ldr	r2, [pc, #308]	; (80017f8 <MPU9250_calibrate+0x340>)
 80016c4:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 80016c6:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <MPU9250_calibrate+0x344>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <MPU9250_calibrate+0x338>)
 80016cc:	8812      	ldrh	r2, [r2, #0]
 80016ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80016d2:	4a4a      	ldr	r2, [pc, #296]	; (80017fc <MPU9250_calibrate+0x344>)
 80016d4:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 80016d6:	4b49      	ldr	r3, [pc, #292]	; (80017fc <MPU9250_calibrate+0x344>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a45      	ldr	r2, [pc, #276]	; (80017f0 <MPU9250_calibrate+0x338>)
 80016dc:	8812      	ldrh	r2, [r2, #0]
 80016de:	fb93 f3f2 	sdiv	r3, r3, r2
 80016e2:	4a46      	ldr	r2, [pc, #280]	; (80017fc <MPU9250_calibrate+0x344>)
 80016e4:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 80016e6:	4b45      	ldr	r3, [pc, #276]	; (80017fc <MPU9250_calibrate+0x344>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4a41      	ldr	r2, [pc, #260]	; (80017f0 <MPU9250_calibrate+0x338>)
 80016ec:	8812      	ldrh	r2, [r2, #0]
 80016ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80016f2:	4a42      	ldr	r2, [pc, #264]	; (80017fc <MPU9250_calibrate+0x344>)
 80016f4:	6093      	str	r3, [r2, #8]
    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80016f6:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <MPU9250_calibrate+0x340>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	dd06      	ble.n	800170c <MPU9250_calibrate+0x254>
 80016fe:	4b3e      	ldr	r3, [pc, #248]	; (80017f8 <MPU9250_calibrate+0x340>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	4a3c      	ldr	r2, [pc, #240]	; (80017f8 <MPU9250_calibrate+0x340>)
 8001708:	6093      	str	r3, [r2, #8]
 800170a:	e005      	b.n	8001718 <MPU9250_calibrate+0x260>
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 800170c:	4b3a      	ldr	r3, [pc, #232]	; (80017f8 <MPU9250_calibrate+0x340>)
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001712:	4413      	add	r3, r2
 8001714:	4a38      	ldr	r2, [pc, #224]	; (80017f8 <MPU9250_calibrate+0x340>)
 8001716:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001718:	4b38      	ldr	r3, [pc, #224]	; (80017fc <MPU9250_calibrate+0x344>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	425b      	negs	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	da00      	bge.n	8001724 <MPU9250_calibrate+0x26c>
 8001722:	3303      	adds	r3, #3
 8001724:	109b      	asrs	r3, r3, #2
 8001726:	121b      	asrs	r3, r3, #8
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f887 3020 	strb.w	r3, [r7, #32]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800172e:	4b33      	ldr	r3, [pc, #204]	; (80017fc <MPU9250_calibrate+0x344>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	425b      	negs	r3, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	da00      	bge.n	800173a <MPU9250_calibrate+0x282>
 8001738:	3303      	adds	r3, #3
 800173a:	109b      	asrs	r3, r3, #2
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <MPU9250_calibrate+0x344>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	425b      	negs	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	da00      	bge.n	800174e <MPU9250_calibrate+0x296>
 800174c:	3303      	adds	r3, #3
 800174e:	109b      	asrs	r3, r3, #2
 8001750:	121b      	asrs	r3, r3, #8
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <MPU9250_calibrate+0x344>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	425b      	negs	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	da00      	bge.n	8001764 <MPU9250_calibrate+0x2ac>
 8001762:	3303      	adds	r3, #3
 8001764:	109b      	asrs	r3, r3, #2
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 800176c:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MPU9250_calibrate+0x344>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	425b      	negs	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	da00      	bge.n	8001778 <MPU9250_calibrate+0x2c0>
 8001776:	3303      	adds	r3, #3
 8001778:	109b      	asrs	r3, r3, #2
 800177a:	121b      	asrs	r3, r3, #8
 800177c:	b2db      	uxtb	r3, r3
 800177e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001782:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <MPU9250_calibrate+0x344>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	425b      	negs	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	da00      	bge.n	800178e <MPU9250_calibrate+0x2d6>
 800178c:	3303      	adds	r3, #3
 800178e:	109b      	asrs	r3, r3, #2
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    // Push gyro biases to hardware registers
    writeRegister(XG_OFFSET_H, data[0]);
 8001796:	f897 3020 	ldrb.w	r3, [r7, #32]
 800179a:	4619      	mov	r1, r3
 800179c:	2013      	movs	r0, #19
 800179e:	f7ff fd7b 	bl	8001298 <writeRegister>
    writeRegister(XG_OFFSET_L, data[1]);
 80017a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017a6:	4619      	mov	r1, r3
 80017a8:	2014      	movs	r0, #20
 80017aa:	f7ff fd75 	bl	8001298 <writeRegister>
    writeRegister(YG_OFFSET_H, data[2]);
 80017ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017b2:	4619      	mov	r1, r3
 80017b4:	2015      	movs	r0, #21
 80017b6:	f7ff fd6f 	bl	8001298 <writeRegister>
    writeRegister(YG_OFFSET_L, data[3]);
 80017ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017be:	4619      	mov	r1, r3
 80017c0:	2016      	movs	r0, #22
 80017c2:	f7ff fd69 	bl	8001298 <writeRegister>
    writeRegister(ZG_OFFSET_H, data[4]);
 80017c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	2017      	movs	r0, #23
 80017ce:	f7ff fd63 	bl	8001298 <writeRegister>
    writeRegister(ZG_OFFSET_L, data[5]);
 80017d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80017d6:	4619      	mov	r1, r3
 80017d8:	2018      	movs	r0, #24
 80017da:	f7ff fd5d 	bl	8001298 <writeRegister>
//	acc_ofset_data_corrected[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
//	acc_ofset_data_corrected[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
//	acc_ofset_data_corrected[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
//	acc_ofset_data_corrected[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);

}
 80017de:	bf00      	nop
 80017e0:	3730      	adds	r7, #48	; 0x30
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200000dc 	.word	0x200000dc
 80017ec:	aaaaaaab 	.word	0xaaaaaaab
 80017f0:	200000da 	.word	0x200000da
 80017f4:	200000d8 	.word	0x200000d8
 80017f8:	2000022c 	.word	0x2000022c
 80017fc:	20000220 	.word	0x20000220

08001800 <MPU9250_GetData>:

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 800180c:	4a9d      	ldr	r2, [pc, #628]	; (8001a84 <MPU9250_GetData+0x284>)
 800180e:	2115      	movs	r1, #21
 8001810:	203b      	movs	r0, #59	; 0x3b
 8001812:	f7ff fd56 	bl	80012c2 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001816:	4b9b      	ldr	r3, [pc, #620]	; (8001a84 <MPU9250_GetData+0x284>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	b21a      	sxth	r2, r3
 800181e:	4b99      	ldr	r3, [pc, #612]	; (8001a84 <MPU9250_GetData+0x284>)
 8001820:	785b      	ldrb	r3, [r3, #1]
 8001822:	b21b      	sxth	r3, r3
 8001824:	4313      	orrs	r3, r2
 8001826:	b21a      	sxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800182c:	4b95      	ldr	r3, [pc, #596]	; (8001a84 <MPU9250_GetData+0x284>)
 800182e:	789b      	ldrb	r3, [r3, #2]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	b219      	sxth	r1, r3
 8001834:	4b93      	ldr	r3, [pc, #588]	; (8001a84 <MPU9250_GetData+0x284>)
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	b21a      	sxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3302      	adds	r3, #2
 800183e:	430a      	orrs	r2, r1
 8001840:	b212      	sxth	r2, r2
 8001842:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001844:	4b8f      	ldr	r3, [pc, #572]	; (8001a84 <MPU9250_GetData+0x284>)
 8001846:	791b      	ldrb	r3, [r3, #4]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	b219      	sxth	r1, r3
 800184c:	4b8d      	ldr	r3, [pc, #564]	; (8001a84 <MPU9250_GetData+0x284>)
 800184e:	795b      	ldrb	r3, [r3, #5]
 8001850:	b21a      	sxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3304      	adds	r3, #4
 8001856:	430a      	orrs	r2, r1
 8001858:	b212      	sxth	r2, r2
 800185a:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) |_buffer[9];
 800185c:	4b89      	ldr	r3, [pc, #548]	; (8001a84 <MPU9250_GetData+0x284>)
 800185e:	7a1b      	ldrb	r3, [r3, #8]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b21a      	sxth	r2, r3
 8001864:	4b87      	ldr	r3, [pc, #540]	; (8001a84 <MPU9250_GetData+0x284>)
 8001866:	7a5b      	ldrb	r3, [r3, #9]
 8001868:	b21b      	sxth	r3, r3
 800186a:	4313      	orrs	r3, r2
 800186c:	b21a      	sxth	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001872:	4b84      	ldr	r3, [pc, #528]	; (8001a84 <MPU9250_GetData+0x284>)
 8001874:	7a9b      	ldrb	r3, [r3, #10]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b219      	sxth	r1, r3
 800187a:	4b82      	ldr	r3, [pc, #520]	; (8001a84 <MPU9250_GetData+0x284>)
 800187c:	7adb      	ldrb	r3, [r3, #11]
 800187e:	b21a      	sxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3302      	adds	r3, #2
 8001884:	430a      	orrs	r2, r1
 8001886:	b212      	sxth	r2, r2
 8001888:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 800188a:	4b7e      	ldr	r3, [pc, #504]	; (8001a84 <MPU9250_GetData+0x284>)
 800188c:	7b1b      	ldrb	r3, [r3, #12]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	b219      	sxth	r1, r3
 8001892:	4b7c      	ldr	r3, [pc, #496]	; (8001a84 <MPU9250_GetData+0x284>)
 8001894:	7b5b      	ldrb	r3, [r3, #13]
 8001896:	b21a      	sxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3304      	adds	r3, #4
 800189c:	430a      	orrs	r2, r1
 800189e:	b212      	sxth	r2, r2
 80018a0:	801a      	strh	r2, [r3, #0]

	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 16384.0f * 9.8f;
 80018a2:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <MPU9250_GetData+0x284>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b75      	ldr	r3, [pc, #468]	; (8001a84 <MPU9250_GetData+0x284>)
 80018ae:	785b      	ldrb	r3, [r3, #1]
 80018b0:	4413      	add	r3, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f9c0 	bl	8000c38 <__aeabi_i2f>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fac2 	bl	8000e48 <__aeabi_fdiv>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4970      	ldr	r1, [pc, #448]	; (8001a88 <MPU9250_GetData+0x288>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fa09 	bl	8000ce0 <__aeabi_fmul>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b6e      	ldr	r3, [pc, #440]	; (8001a8c <MPU9250_GetData+0x28c>)
 80018d4:	601a      	str	r2, [r3, #0]
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 16384.0f * 9.8f;
 80018d6:	4b6b      	ldr	r3, [pc, #428]	; (8001a84 <MPU9250_GetData+0x284>)
 80018d8:	789b      	ldrb	r3, [r3, #2]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	b21b      	sxth	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	4b68      	ldr	r3, [pc, #416]	; (8001a84 <MPU9250_GetData+0x284>)
 80018e2:	78db      	ldrb	r3, [r3, #3]
 80018e4:	4413      	add	r3, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f9a6 	bl	8000c38 <__aeabi_i2f>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff faa8 	bl	8000e48 <__aeabi_fdiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4963      	ldr	r1, [pc, #396]	; (8001a88 <MPU9250_GetData+0x288>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f9ef 	bl	8000ce0 <__aeabi_fmul>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	4b62      	ldr	r3, [pc, #392]	; (8001a90 <MPU9250_GetData+0x290>)
 8001908:	601a      	str	r2, [r3, #0]
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 16384.0f * 9.8f;
 800190a:	4b5e      	ldr	r3, [pc, #376]	; (8001a84 <MPU9250_GetData+0x284>)
 800190c:	791b      	ldrb	r3, [r3, #4]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	b21b      	sxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	4b5b      	ldr	r3, [pc, #364]	; (8001a84 <MPU9250_GetData+0x284>)
 8001916:	795b      	ldrb	r3, [r3, #5]
 8001918:	4413      	add	r3, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f98c 	bl	8000c38 <__aeabi_i2f>
 8001920:	4603      	mov	r3, r0
 8001922:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fa8e 	bl	8000e48 <__aeabi_fdiv>
 800192c:	4603      	mov	r3, r0
 800192e:	4956      	ldr	r1, [pc, #344]	; (8001a88 <MPU9250_GetData+0x288>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff f9d5 	bl	8000ce0 <__aeabi_fmul>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <MPU9250_GetData+0x294>)
 800193c:	601a      	str	r2, [r3, #0]
//	accelX=((((int16_t)((uint16_t)_buffer[6] << 8) + _buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])))/4096.0f*9.8f;
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 65.5f * 3.14f / 180.0f;
 800193e:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <MPU9250_GetData+0x284>)
 8001940:	7a1b      	ldrb	r3, [r3, #8]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	b21b      	sxth	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	4b4e      	ldr	r3, [pc, #312]	; (8001a84 <MPU9250_GetData+0x284>)
 800194a:	7a5b      	ldrb	r3, [r3, #9]
 800194c:	4413      	add	r3, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f972 	bl	8000c38 <__aeabi_i2f>
 8001954:	4603      	mov	r3, r0
 8001956:	4950      	ldr	r1, [pc, #320]	; (8001a98 <MPU9250_GetData+0x298>)
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fa75 	bl	8000e48 <__aeabi_fdiv>
 800195e:	4603      	mov	r3, r0
 8001960:	494e      	ldr	r1, [pc, #312]	; (8001a9c <MPU9250_GetData+0x29c>)
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f9bc 	bl	8000ce0 <__aeabi_fmul>
 8001968:	4603      	mov	r3, r0
 800196a:	494d      	ldr	r1, [pc, #308]	; (8001aa0 <MPU9250_GetData+0x2a0>)
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fa6b 	bl	8000e48 <__aeabi_fdiv>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <MPU9250_GetData+0x2a4>)
 8001978:	601a      	str	r2, [r3, #0]
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 65.5f * 3.14f / 180.0f;
 800197a:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <MPU9250_GetData+0x284>)
 800197c:	7a9b      	ldrb	r3, [r3, #10]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21b      	sxth	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	4b3f      	ldr	r3, [pc, #252]	; (8001a84 <MPU9250_GetData+0x284>)
 8001986:	7adb      	ldrb	r3, [r3, #11]
 8001988:	4413      	add	r3, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f954 	bl	8000c38 <__aeabi_i2f>
 8001990:	4603      	mov	r3, r0
 8001992:	4941      	ldr	r1, [pc, #260]	; (8001a98 <MPU9250_GetData+0x298>)
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fa57 	bl	8000e48 <__aeabi_fdiv>
 800199a:	4603      	mov	r3, r0
 800199c:	493f      	ldr	r1, [pc, #252]	; (8001a9c <MPU9250_GetData+0x29c>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f99e 	bl	8000ce0 <__aeabi_fmul>
 80019a4:	4603      	mov	r3, r0
 80019a6:	493e      	ldr	r1, [pc, #248]	; (8001aa0 <MPU9250_GetData+0x2a0>)
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fa4d 	bl	8000e48 <__aeabi_fdiv>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b3d      	ldr	r3, [pc, #244]	; (8001aa8 <MPU9250_GetData+0x2a8>)
 80019b4:	601a      	str	r2, [r3, #0]
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 65.5f * 3.14f / 180.0f;
 80019b6:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <MPU9250_GetData+0x284>)
 80019b8:	7b1b      	ldrb	r3, [r3, #12]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	b21b      	sxth	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <MPU9250_GetData+0x284>)
 80019c2:	7b5b      	ldrb	r3, [r3, #13]
 80019c4:	4413      	add	r3, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f936 	bl	8000c38 <__aeabi_i2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4932      	ldr	r1, [pc, #200]	; (8001a98 <MPU9250_GetData+0x298>)
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fa39 	bl	8000e48 <__aeabi_fdiv>
 80019d6:	4603      	mov	r3, r0
 80019d8:	4930      	ldr	r1, [pc, #192]	; (8001a9c <MPU9250_GetData+0x29c>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f980 	bl	8000ce0 <__aeabi_fmul>
 80019e0:	4603      	mov	r3, r0
 80019e2:	492f      	ldr	r1, [pc, #188]	; (8001aa0 <MPU9250_GetData+0x2a0>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fa2f 	bl	8000e48 <__aeabi_fdiv>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <MPU9250_GetData+0x2ac>)
 80019f0:	601a      	str	r2, [r3, #0]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 80019f2:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <MPU9250_GetData+0x28c>)
 80019f4:	681c      	ldr	r4, [r3, #0]
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <MPU9250_GetData+0x2b0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f91c 	bl	8000c38 <__aeabi_i2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fa1e 	bl	8000e48 <__aeabi_fdiv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	491e      	ldr	r1, [pc, #120]	; (8001a88 <MPU9250_GetData+0x288>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f965 	bl	8000ce0 <__aeabi_fmul>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff f856 	bl	8000acc <__aeabi_fsub>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MPU9250_GetData+0x28c>)
 8001a26:	601a      	str	r2, [r3, #0]
	accelY = accelY - (accel_bias[1] / 16384.0f * 9.8f);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <MPU9250_GetData+0x290>)
 8001a2a:	681c      	ldr	r4, [r3, #0]
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <MPU9250_GetData+0x2b0>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f901 	bl	8000c38 <__aeabi_i2f>
 8001a36:	4603      	mov	r3, r0
 8001a38:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fa03 	bl	8000e48 <__aeabi_fdiv>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4910      	ldr	r1, [pc, #64]	; (8001a88 <MPU9250_GetData+0x288>)
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f94a 	bl	8000ce0 <__aeabi_fmul>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff f83b 	bl	8000acc <__aeabi_fsub>
 8001a56:	4603      	mov	r3, r0
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <MPU9250_GetData+0x290>)
 8001a5c:	601a      	str	r2, [r3, #0]
	accelZ = accelZ - (accel_bias[2] / 16384.0f * 9.8f);
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <MPU9250_GetData+0x294>)
 8001a60:	681c      	ldr	r4, [r3, #0]
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MPU9250_GetData+0x2b0>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f8e6 	bl	8000c38 <__aeabi_i2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff f9e8 	bl	8000e48 <__aeabi_fdiv>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4903      	ldr	r1, [pc, #12]	; (8001a88 <MPU9250_GetData+0x288>)
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f92f 	bl	8000ce0 <__aeabi_fmul>
 8001a82:	e017      	b.n	8001ab4 <MPU9250_GetData+0x2b4>
 8001a84:	200000bc 	.word	0x200000bc
 8001a88:	411ccccd 	.word	0x411ccccd
 8001a8c:	200001c0 	.word	0x200001c0
 8001a90:	200001c4 	.word	0x200001c4
 8001a94:	200001c8 	.word	0x200001c8
 8001a98:	42830000 	.word	0x42830000
 8001a9c:	4048f5c3 	.word	0x4048f5c3
 8001aa0:	43340000 	.word	0x43340000
 8001aa4:	200001b4 	.word	0x200001b4
 8001aa8:	200001b8 	.word	0x200001b8
 8001aac:	200001bc 	.word	0x200001bc
 8001ab0:	2000022c 	.word	0x2000022c
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff f807 	bl	8000acc <__aeabi_fsub>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MPU9250_GetData+0x330>)
 8001ac4:	601a      	str	r2, [r3, #0]
	gyroX_filtered = filter(gyroX);
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MPU9250_GetData+0x334>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fae4 	bl	8001098 <filter>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <MPU9250_GetData+0x338>)
 8001ad4:	6013      	str	r3, [r2, #0]
	gyroY_filtered = filter(gyroY);
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MPU9250_GetData+0x33c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fadc 	bl	8001098 <filter>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a17      	ldr	r2, [pc, #92]	; (8001b40 <MPU9250_GetData+0x340>)
 8001ae4:	6013      	str	r3, [r2, #0]
	gyroZ_filtered = filter(gyroZ);
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <MPU9250_GetData+0x344>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fad4 	bl	8001098 <filter>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <MPU9250_GetData+0x348>)
 8001af4:	6013      	str	r3, [r2, #0]
	accelX_filtered = filter(accelX);
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <MPU9250_GetData+0x34c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff facc 	bl	8001098 <filter>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <MPU9250_GetData+0x350>)
 8001b04:	6013      	str	r3, [r2, #0]
	accelY_filtered = filter(accelY);
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MPU9250_GetData+0x354>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fac4 	bl	8001098 <filter>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <MPU9250_GetData+0x358>)
 8001b14:	6013      	str	r3, [r2, #0]
	accelZ_filtered = filter(accelZ);
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <MPU9250_GetData+0x330>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fabc 	bl	8001098 <filter>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <MPU9250_GetData+0x35c>)
 8001b24:	6013      	str	r3, [r2, #0]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200001c8 	.word	0x200001c8
 8001b34:	200001b4 	.word	0x200001b4
 8001b38:	200001cc 	.word	0x200001cc
 8001b3c:	200001b8 	.word	0x200001b8
 8001b40:	200001d0 	.word	0x200001d0
 8001b44:	200001bc 	.word	0x200001bc
 8001b48:	200001d4 	.word	0x200001d4
 8001b4c:	200001c0 	.word	0x200001c0
 8001b50:	200001d8 	.word	0x200001d8
 8001b54:	200001c4 	.word	0x200001c4
 8001b58:	200001dc 	.word	0x200001dc
 8001b5c:	200001e0 	.word	0x200001e0

08001b60 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <MX_CAN_Init+0x68>)
 8001b68:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001b6a:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b7e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001b82:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_CAN_Init+0x64>)
 8001bb0:	f001 fa5c 	bl	800306c <HAL_CAN_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001bba:	f001 f82e 	bl	8002c1a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200000e0 	.word	0x200000e0
 8001bc8:	40006400 	.word	0x40006400

08001bcc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <HAL_CAN_MspInit+0xac>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d141      	bne.n	8001c70 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bec:	4b23      	ldr	r3, [pc, #140]	; (8001c7c <HAL_CAN_MspInit+0xb0>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <HAL_CAN_MspInit+0xb0>)
 8001bf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	61d3      	str	r3, [r2, #28]
 8001bf8:	4b20      	ldr	r3, [pc, #128]	; (8001c7c <HAL_CAN_MspInit+0xb0>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_CAN_MspInit+0xb0>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_CAN_MspInit+0xb0>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_CAN_MspInit+0xb0>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4813      	ldr	r0, [pc, #76]	; (8001c80 <HAL_CAN_MspInit+0xb4>)
 8001c32:	f002 f8b5 	bl	8003da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480d      	ldr	r0, [pc, #52]	; (8001c80 <HAL_CAN_MspInit+0xb4>)
 8001c4c:	f002 f8a8 	bl	8003da0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	2013      	movs	r0, #19
 8001c56:	f001 fff6 	bl	8003c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001c5a:	2013      	movs	r0, #19
 8001c5c:	f002 f80f 	bl	8003c7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2014      	movs	r0, #20
 8001c66:	f001 ffee 	bl	8003c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001c6a:	2014      	movs	r0, #20
 8001c6c:	f002 f807 	bl	8003c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3720      	adds	r7, #32
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40006400 	.word	0x40006400
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40010800 	.word	0x40010800

08001c84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c98:	4b2d      	ldr	r3, [pc, #180]	; (8001d50 <MX_GPIO_Init+0xcc>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a2c      	ldr	r2, [pc, #176]	; (8001d50 <MX_GPIO_Init+0xcc>)
 8001c9e:	f043 0320 	orr.w	r3, r3, #32
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <MX_GPIO_Init+0xcc>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <MX_GPIO_Init+0xcc>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a26      	ldr	r2, [pc, #152]	; (8001d50 <MX_GPIO_Init+0xcc>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <MX_GPIO_Init+0xcc>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_GPIO_Init+0xcc>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a20      	ldr	r2, [pc, #128]	; (8001d50 <MX_GPIO_Init+0xcc>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <MX_GPIO_Init+0xcc>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	607b      	str	r3, [r7, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f248 3110 	movw	r1, #33552	; 0x8310
 8001ce6:	481b      	ldr	r0, [pc, #108]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001ce8:	f002 f9de 	bl	80040a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2118      	movs	r1, #24
 8001cf0:	4819      	ldr	r0, [pc, #100]	; (8001d58 <MX_GPIO_Init+0xd4>)
 8001cf2:	f002 f9d9 	bl	80040a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MPU_Pin;
 8001cf6:	2308      	movs	r3, #8
 8001cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_GPIO_Init+0xd8>)
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_MPU_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	4619      	mov	r1, r3
 8001d08:	4812      	ldr	r0, [pc, #72]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001d0a:	f002 f849 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin;
 8001d0e:	f248 3310 	movw	r3, #33552	; 0x8310
 8001d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d14:	2301      	movs	r3, #1
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	4619      	mov	r1, r3
 8001d26:	480b      	ldr	r0, [pc, #44]	; (8001d54 <MX_GPIO_Init+0xd0>)
 8001d28:	f002 f83a 	bl	8003da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001d2c:	2318      	movs	r3, #24
 8001d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	f107 0310 	add.w	r3, r7, #16
 8001d40:	4619      	mov	r1, r3
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_GPIO_Init+0xd4>)
 8001d44:	f002 f82c 	bl	8003da0 <HAL_GPIO_Init>

}
 8001d48:	bf00      	nop
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010800 	.word	0x40010800
 8001d58:	40010c00 	.word	0x40010c00
 8001d5c:	10110000 	.word	0x10110000

08001d60 <quat_scalar>:

// Multiply two quaternions and return a copy of the result, prod = L * R
struct quaternion quat_mult (struct quaternion q_L, struct quaternion q_R);

// Multiply a reference of a quaternion by a scalar, q = s*q
static inline void quat_scalar(struct quaternion * q, float scalar){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
    q -> q1 *= scalar;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6839      	ldr	r1, [r7, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe ffb5 	bl	8000ce0 <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	601a      	str	r2, [r3, #0]
    q -> q2 *= scalar;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	6839      	ldr	r1, [r7, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ffab 	bl	8000ce0 <__aeabi_fmul>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	605a      	str	r2, [r3, #4]
    q -> q3 *= scalar;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe ffa1 	bl	8000ce0 <__aeabi_fmul>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	609a      	str	r2, [r3, #8]
    q -> q4 *= scalar;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	6839      	ldr	r1, [r7, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe ff97 	bl	8000ce0 <__aeabi_fmul>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	60da      	str	r2, [r3, #12]
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <quat_add>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
static inline void quat_add(struct quaternion * Sum, struct quaternion L, struct quaternion R){
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	f107 0014 	add.w	r0, r7, #20
 8001dd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Sum -> q1 = L.q1 + R.q1;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fe78 	bl	8000ad0 <__addsf3>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	601a      	str	r2, [r3, #0]
    Sum -> q2 = L.q2 + R.q2;
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fe6e 	bl	8000ad0 <__addsf3>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	605a      	str	r2, [r3, #4]
    Sum -> q3 = L.q3 + R.q3;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fe64 	bl	8000ad0 <__addsf3>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
    Sum -> q4 = L.q4 + R.q4;
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e14:	4611      	mov	r1, r2
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fe5a 	bl	8000ad0 <__addsf3>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	60da      	str	r2, [r3, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e2e:	b004      	add	sp, #16
 8001e30:	4770      	bx	lr

08001e32 <quat_sub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
static inline void quat_sub(struct quaternion * Sum, struct quaternion L, struct quaternion R){
 8001e32:	b084      	sub	sp, #16
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	f107 0014 	add.w	r0, r7, #20
 8001e40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Sum -> q1 = L.q1 - R.q1;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fe3e 	bl	8000acc <__aeabi_fsub>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	601a      	str	r2, [r3, #0]
    Sum -> q2 = L.q2 - R.q2;
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fe34 	bl	8000acc <__aeabi_fsub>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	605a      	str	r2, [r3, #4]
    Sum -> q3 = L.q3 - R.q3;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fe2a 	bl	8000acc <__aeabi_fsub>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
    Sum -> q4 = L.q4 - R.q4;
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fe20 	bl	8000acc <__aeabi_fsub>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	461a      	mov	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e9e:	b004      	add	sp, #16
 8001ea0:	4770      	bx	lr

08001ea2 <quat_Norm>:

// norm of a quaternion is the same as a complex number
// sqrt( q1^2 + q2^2 + q3^2 + q4^2)
// the norm is also the sqrt(q * conjugate(q)), but thats a lot of operations in the quaternion multiplication
static inline float quat_Norm (struct quaternion q)
{
 8001ea2:	b590      	push	{r4, r7, lr}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	463c      	mov	r4, r7
 8001eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return sqrt(q.q1*q.q1 + q.q2*q.q2 + q.q3*q.q3 +q.q4*q.q4);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe ff13 	bl	8000ce0 <__aeabi_fmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461c      	mov	r4, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe ff0b 	bl	8000ce0 <__aeabi_fmul>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f7fe fdfe 	bl	8000ad0 <__addsf3>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461c      	mov	r4, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fefe 	bl	8000ce0 <__aeabi_fmul>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4620      	mov	r0, r4
 8001eea:	f7fe fdf1 	bl	8000ad0 <__addsf3>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461c      	mov	r4, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fef1 	bl	8000ce0 <__aeabi_fmul>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4620      	mov	r0, r4
 8001f04:	f7fe fde4 	bl	8000ad0 <__addsf3>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fa82 	bl	8000414 <__aeabi_f2d>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f003 fb50 	bl	80055bc <sqrt>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4610      	mov	r0, r2
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe fd7e 	bl	8000a24 <__aeabi_d2f>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}

08001f32 <quat_Normalization>:

// Normalizes pointer q by calling quat_Norm(q),
static inline void quat_Normalization(struct quaternion * q){
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
    float norm = quat_Norm(*q);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f3e:	f7ff ffb0 	bl	8001ea2 <quat_Norm>
 8001f42:	60f8      	str	r0, [r7, #12]
    q -> q1 /= norm;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68f9      	ldr	r1, [r7, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe ff7c 	bl	8000e48 <__aeabi_fdiv>
 8001f50:	4603      	mov	r3, r0
 8001f52:	461a      	mov	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	601a      	str	r2, [r3, #0]
    q -> q2 /= norm;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	68f9      	ldr	r1, [r7, #12]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe ff72 	bl	8000e48 <__aeabi_fdiv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	605a      	str	r2, [r3, #4]
    q -> q3 /= norm;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ff68 	bl	8000e48 <__aeabi_fdiv>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
    q -> q4 /= norm;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	68f9      	ldr	r1, [r7, #12]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe ff5e 	bl	8000e48 <__aeabi_fdiv>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	461a      	mov	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	60da      	str	r2, [r3, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <quat_mult>:

#include "madgwickFilter.h"

struct quaternion q_est = { 1, 0, 0, 0};       // initialize with as unit vector with real component  = 1

struct quaternion quat_mult (struct quaternion L, struct quaternion R){
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	b590      	push	{r4, r7, lr}
 8001fa0:	b087      	sub	sp, #28
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    
    
    struct quaternion product;
    product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fe93 	bl	8000ce0 <__aeabi_fmul>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	461c      	mov	r4, r3
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fe8b 	bl	8000ce0 <__aeabi_fmul>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7fe fd7c 	bl	8000acc <__aeabi_fsub>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461c      	mov	r4, r3
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fe7e 	bl	8000ce0 <__aeabi_fmul>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7fe fd6f 	bl	8000acc <__aeabi_fsub>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461c      	mov	r4, r3
 8001ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fe71 	bl	8000ce0 <__aeabi_fmul>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4619      	mov	r1, r3
 8002002:	4620      	mov	r0, r4
 8002004:	f7fe fd62 	bl	8000acc <__aeabi_fsub>
 8002008:	4603      	mov	r3, r0
 800200a:	60bb      	str	r3, [r7, #8]
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fe64 	bl	8000ce0 <__aeabi_fmul>
 8002018:	4603      	mov	r3, r0
 800201a:	461c      	mov	r4, r3
 800201c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fe5c 	bl	8000ce0 <__aeabi_fmul>
 8002028:	4603      	mov	r3, r0
 800202a:	4619      	mov	r1, r3
 800202c:	4620      	mov	r0, r4
 800202e:	f7fe fd4f 	bl	8000ad0 <__addsf3>
 8002032:	4603      	mov	r3, r0
 8002034:	461c      	mov	r4, r3
 8002036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800203a:	4611      	mov	r1, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fe4f 	bl	8000ce0 <__aeabi_fmul>
 8002042:	4603      	mov	r3, r0
 8002044:	4619      	mov	r1, r3
 8002046:	4620      	mov	r0, r4
 8002048:	f7fe fd42 	bl	8000ad0 <__addsf3>
 800204c:	4603      	mov	r3, r0
 800204e:	461c      	mov	r4, r3
 8002050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fe42 	bl	8000ce0 <__aeabi_fmul>
 800205c:	4603      	mov	r3, r0
 800205e:	4619      	mov	r1, r3
 8002060:	4620      	mov	r0, r4
 8002062:	f7fe fd33 	bl	8000acc <__aeabi_fsub>
 8002066:	4603      	mov	r3, r0
 8002068:	60fb      	str	r3, [r7, #12]
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fe35 	bl	8000ce0 <__aeabi_fmul>
 8002076:	4603      	mov	r3, r0
 8002078:	461c      	mov	r4, r3
 800207a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800207e:	4611      	mov	r1, r2
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe fe2d 	bl	8000ce0 <__aeabi_fmul>
 8002086:	4603      	mov	r3, r0
 8002088:	4619      	mov	r1, r3
 800208a:	4620      	mov	r0, r4
 800208c:	f7fe fd1e 	bl	8000acc <__aeabi_fsub>
 8002090:	4603      	mov	r3, r0
 8002092:	461c      	mov	r4, r3
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002096:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fe20 	bl	8000ce0 <__aeabi_fmul>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7fe fd13 	bl	8000ad0 <__addsf3>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461c      	mov	r4, r3
 80020ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7fe fe13 	bl	8000ce0 <__aeabi_fmul>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4619      	mov	r1, r3
 80020be:	4620      	mov	r0, r4
 80020c0:	f7fe fd06 	bl	8000ad0 <__addsf3>
 80020c4:	4603      	mov	r3, r0
 80020c6:	613b      	str	r3, [r7, #16]
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fe06 	bl	8000ce0 <__aeabi_fmul>
 80020d4:	4603      	mov	r3, r0
 80020d6:	461c      	mov	r4, r3
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fdfe 	bl	8000ce0 <__aeabi_fmul>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4619      	mov	r1, r3
 80020e8:	4620      	mov	r0, r4
 80020ea:	f7fe fcf1 	bl	8000ad0 <__addsf3>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461c      	mov	r4, r3
 80020f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fdf1 	bl	8000ce0 <__aeabi_fmul>
 80020fe:	4603      	mov	r3, r0
 8002100:	4619      	mov	r1, r3
 8002102:	4620      	mov	r0, r4
 8002104:	f7fe fce2 	bl	8000acc <__aeabi_fsub>
 8002108:	4603      	mov	r3, r0
 800210a:	461c      	mov	r4, r3
 800210c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002110:	4611      	mov	r1, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fde4 	bl	8000ce0 <__aeabi_fmul>
 8002118:	4603      	mov	r3, r0
 800211a:	4619      	mov	r1, r3
 800211c:	4620      	mov	r0, r4
 800211e:	f7fe fcd7 	bl	8000ad0 <__addsf3>
 8002122:	4603      	mov	r3, r0
 8002124:	617b      	str	r3, [r7, #20]
    
    return product;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	461c      	mov	r4, r3
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	371c      	adds	r7, #28
 8002138:	46bd      	mov	sp, r7
 800213a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800213e:	b004      	add	sp, #16
 8002140:	4770      	bx	lr
	...

08002144 <imu_filter>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void imu_filter(float ax, float ay, float az, float gx, float gy, float gz){
 8002144:	b5b0      	push	{r4, r5, r7, lr}
 8002146:	b0b2      	sub	sp, #200	; 0xc8
 8002148:	af06      	add	r7, sp, #24
 800214a:	61f8      	str	r0, [r7, #28]
 800214c:	61b9      	str	r1, [r7, #24]
 800214e:	617a      	str	r2, [r7, #20]
 8002150:	613b      	str	r3, [r7, #16]
    
    //Variables and constants
    struct quaternion q_est_prev = q_est;
 8002152:	4bb7      	ldr	r3, [pc, #732]	; (8002430 <imu_filter+0x2ec>)
 8002154:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8002158:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800215a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0};            // used as a place holder in equations 42 and 43
 800215e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    
    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 8002186:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                     // jacobian matrix for gravity
 8002192:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002196:	2230      	movs	r2, #48	; 0x30
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f003 fe6c 	bl	8005e78 <memset>
    
    struct quaternion gradient = {0};
 80021a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
    
    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.q1 = 0;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
    q_w.q2 = gx;
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
    q_w.q3 = gy;
 80021b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    q_w.q4 = gz;
 80021be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c2:	633b      	str	r3, [r7, #48]	; 0x30
    
    quat_scalar(&q_w, 0.5);                  // equation (12) dq/dt = (1/2)q*w
 80021c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fdc7 	bl	8001d60 <quat_scalar>
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 80021d2:	463d      	mov	r5, r7
 80021d4:	ac01      	add	r4, sp, #4
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ec:	4628      	mov	r0, r5
 80021ee:	f7ff fed5 	bl	8001f9c <quat_mult>
 80021f2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80021f6:	463b      	mov	r3, r7
 80021f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     The matrix multiplcation can also be done hard coded to reduce code.
     
     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */
    
    quat_Normalization(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 80021fe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fe95 	bl	8001f32 <quat_Normalization>
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 8002208:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800220c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fd64 	bl	8000ce0 <__aeabi_fmul>
 8002218:	4603      	mov	r3, r0
 800221a:	461c      	mov	r4, r3
 800221c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002220:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fd5a 	bl	8000ce0 <__aeabi_fmul>
 800222c:	4603      	mov	r3, r0
 800222e:	4619      	mov	r1, r3
 8002230:	4620      	mov	r0, r4
 8002232:	f7fe fc4b 	bl	8000acc <__aeabi_fsub>
 8002236:	4603      	mov	r3, r0
 8002238:	4619      	mov	r1, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fc48 	bl	8000ad0 <__addsf3>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7fe fc3e 	bl	8000acc <__aeabi_fsub>
 8002250:	4603      	mov	r3, r0
 8002252:	677b      	str	r3, [r7, #116]	; 0x74
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 8002254:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002258:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fd3e 	bl	8000ce0 <__aeabi_fmul>
 8002264:	4603      	mov	r3, r0
 8002266:	461c      	mov	r4, r3
 8002268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800226c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fd34 	bl	8000ce0 <__aeabi_fmul>
 8002278:	4603      	mov	r3, r0
 800227a:	4619      	mov	r1, r3
 800227c:	4620      	mov	r0, r4
 800227e:	f7fe fc27 	bl	8000ad0 <__addsf3>
 8002282:	4603      	mov	r3, r0
 8002284:	4619      	mov	r1, r3
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fc22 	bl	8000ad0 <__addsf3>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f7fe fc18 	bl	8000acc <__aeabi_fsub>
 800229c:	4603      	mov	r3, r0
 800229e:	67bb      	str	r3, [r7, #120]	; 0x78
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 80022a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022a4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fd18 	bl	8000ce0 <__aeabi_fmul>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f8ae 	bl	8000414 <__aeabi_f2d>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	f04f 0000 	mov.w	r0, #0
 80022c0:	495c      	ldr	r1, [pc, #368]	; (8002434 <imu_filter+0x2f0>)
 80022c2:	f7fd ff47 	bl	8000154 <__aeabi_dsub>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4614      	mov	r4, r2
 80022cc:	461d      	mov	r5, r3
 80022ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7fe fd01 	bl	8000ce0 <__aeabi_fmul>
 80022de:	4603      	mov	r3, r0
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f897 	bl	8000414 <__aeabi_f2d>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fd ff31 	bl	8000154 <__aeabi_dsub>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	f7fd ff2b 	bl	8000158 <__adddf3>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4614      	mov	r4, r2
 8002308:	461d      	mov	r5, r3
 800230a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f880 	bl	8000414 <__aeabi_f2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4620      	mov	r0, r4
 800231a:	4629      	mov	r1, r5
 800231c:	f7fd ff1a 	bl	8000154 <__aeabi_dsub>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fb7c 	bl	8000a24 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
 800232e:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
 8002330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002334:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe fcd1 	bl	8000ce0 <__aeabi_fmul>
 800233e:	4603      	mov	r3, r0
 8002340:	647b      	str	r3, [r7, #68]	; 0x44
    J_g[0][1] =  2 * q_est_prev.q4;
 8002342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002346:	4619      	mov	r1, r3
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fbc1 	bl	8000ad0 <__addsf3>
 800234e:	4603      	mov	r3, r0
 8002350:	64bb      	str	r3, [r7, #72]	; 0x48
    J_g[0][2] = -2 * q_est_prev.q1;
 8002352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002356:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fcc0 	bl	8000ce0 <__aeabi_fmul>
 8002360:	4603      	mov	r3, r0
 8002362:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_g[0][3] =  2 * q_est_prev.q2;
 8002364:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002368:	4619      	mov	r1, r3
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fbb0 	bl	8000ad0 <__addsf3>
 8002370:	4603      	mov	r3, r0
 8002372:	653b      	str	r3, [r7, #80]	; 0x50
    
    J_g[1][0] = 2 * q_est_prev.q2;
 8002374:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002378:	4619      	mov	r1, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fba8 	bl	8000ad0 <__addsf3>
 8002380:	4603      	mov	r3, r0
 8002382:	657b      	str	r3, [r7, #84]	; 0x54
    J_g[1][1] = 2 * q_est_prev.q1;
 8002384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002388:	4619      	mov	r1, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fba0 	bl	8000ad0 <__addsf3>
 8002390:	4603      	mov	r3, r0
 8002392:	65bb      	str	r3, [r7, #88]	; 0x58
    J_g[1][2] = 2 * q_est_prev.q4;
 8002394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002398:	4619      	mov	r1, r3
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe fb98 	bl	8000ad0 <__addsf3>
 80023a0:	4603      	mov	r3, r0
 80023a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    J_g[1][3] = 2 * q_est_prev.q3;
 80023a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023a8:	4619      	mov	r1, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fb90 	bl	8000ad0 <__addsf3>
 80023b0:	4603      	mov	r3, r0
 80023b2:	663b      	str	r3, [r7, #96]	; 0x60
    
    J_g[2][0] = 0;
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	667b      	str	r3, [r7, #100]	; 0x64
    J_g[2][1] = -4 * q_est_prev.q2;
 80023ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80023be:	491e      	ldr	r1, [pc, #120]	; (8002438 <imu_filter+0x2f4>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fc8d 	bl	8000ce0 <__aeabi_fmul>
 80023c6:	4603      	mov	r3, r0
 80023c8:	66bb      	str	r3, [r7, #104]	; 0x68
    J_g[2][2] = -4 * q_est_prev.q3;
 80023ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ce:	491a      	ldr	r1, [pc, #104]	; (8002438 <imu_filter+0x2f4>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fc85 	bl	8000ce0 <__aeabi_fmul>
 80023d6:	4603      	mov	r3, r0
 80023d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    J_g[2][3] = 0;
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	673b      	str	r3, [r7, #112]	; 0x70
    
    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 80023e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fc7a 	bl	8000ce0 <__aeabi_fmul>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461c      	mov	r4, r3
 80023f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fc72 	bl	8000ce0 <__aeabi_fmul>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4619      	mov	r1, r3
 8002400:	4620      	mov	r0, r4
 8002402:	f7fe fb65 	bl	8000ad0 <__addsf3>
 8002406:	4603      	mov	r3, r0
 8002408:	461c      	mov	r4, r3
 800240a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800240c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fc65 	bl	8000ce0 <__aeabi_fmul>
 8002416:	4603      	mov	r3, r0
 8002418:	4619      	mov	r1, r3
 800241a:	4620      	mov	r0, r4
 800241c:	f7fe fb58 	bl	8000ad0 <__addsf3>
 8002420:	4603      	mov	r3, r0
 8002422:	637b      	str	r3, [r7, #52]	; 0x34
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8002424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002426:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	e006      	b.n	800243c <imu_filter+0x2f8>
 800242e:	bf00      	nop
 8002430:	20000008 	.word	0x20000008
 8002434:	3fe00000 	.word	0x3fe00000
 8002438:	c0800000 	.word	0xc0800000
 800243c:	f7fe fc50 	bl	8000ce0 <__aeabi_fmul>
 8002440:	4603      	mov	r3, r0
 8002442:	461c      	mov	r4, r3
 8002444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002446:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fc48 	bl	8000ce0 <__aeabi_fmul>
 8002450:	4603      	mov	r3, r0
 8002452:	4619      	mov	r1, r3
 8002454:	4620      	mov	r0, r4
 8002456:	f7fe fb3b 	bl	8000ad0 <__addsf3>
 800245a:	4603      	mov	r3, r0
 800245c:	461c      	mov	r4, r3
 800245e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002460:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fc3b 	bl	8000ce0 <__aeabi_fmul>
 800246a:	4603      	mov	r3, r0
 800246c:	4619      	mov	r1, r3
 800246e:	4620      	mov	r0, r4
 8002470:	f7fe fb2e 	bl	8000ad0 <__addsf3>
 8002474:	4603      	mov	r3, r0
 8002476:	63bb      	str	r3, [r7, #56]	; 0x38
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8002478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe fc2e 	bl	8000ce0 <__aeabi_fmul>
 8002484:	4603      	mov	r3, r0
 8002486:	461c      	mov	r4, r3
 8002488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800248a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800248c:	4611      	mov	r1, r2
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe fc26 	bl	8000ce0 <__aeabi_fmul>
 8002494:	4603      	mov	r3, r0
 8002496:	4619      	mov	r1, r3
 8002498:	4620      	mov	r0, r4
 800249a:	f7fe fb19 	bl	8000ad0 <__addsf3>
 800249e:	4603      	mov	r3, r0
 80024a0:	461c      	mov	r4, r3
 80024a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fc19 	bl	8000ce0 <__aeabi_fmul>
 80024ae:	4603      	mov	r3, r0
 80024b0:	4619      	mov	r1, r3
 80024b2:	4620      	mov	r0, r4
 80024b4:	f7fe fb0c 	bl	8000ad0 <__addsf3>
 80024b8:	4603      	mov	r3, r0
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 80024bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fc0c 	bl	8000ce0 <__aeabi_fmul>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461c      	mov	r4, r3
 80024cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fc04 	bl	8000ce0 <__aeabi_fmul>
 80024d8:	4603      	mov	r3, r0
 80024da:	4619      	mov	r1, r3
 80024dc:	4620      	mov	r0, r4
 80024de:	f7fe faf7 	bl	8000ad0 <__addsf3>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461c      	mov	r4, r3
 80024e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80024ea:	4611      	mov	r1, r2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fbf7 	bl	8000ce0 <__aeabi_fmul>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4619      	mov	r1, r3
 80024f6:	4620      	mov	r0, r4
 80024f8:	f7fe faea 	bl	8000ad0 <__addsf3>
 80024fc:	4603      	mov	r3, r0
 80024fe:	643b      	str	r3, [r7, #64]	; 0x40
    
    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 8002500:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fd14 	bl	8001f32 <quat_Normalization>
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    quat_scalar(&gradient, BETA);             // multiply normalized gradient by beta
 800250a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800250e:	4918      	ldr	r1, [pc, #96]	; (8002570 <imu_filter+0x42c>)
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fc25 	bl	8001d60 <quat_scalar>
    quat_sub(&q_est_dot, q_w, gradient);        // subtract above from q_w, the integrated gyro quaternion
 8002516:	f107 0590 	add.w	r5, r7, #144	; 0x90
 800251a:	ac01      	add	r4, sp, #4
 800251c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002530:	4628      	mov	r0, r5
 8002532:	f7ff fc7e 	bl	8001e32 <quat_sub>
    quat_scalar(&q_est_dot, DELTA_T);
 8002536:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800253a:	490e      	ldr	r1, [pc, #56]	; (8002574 <imu_filter+0x430>)
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fc0f 	bl	8001d60 <quat_scalar>
    quat_add(&q_est, q_est_prev, q_est_dot);     // Integrate orientation rate to find position
 8002542:	ac01      	add	r4, sp, #4
 8002544:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800254a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800254e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002558:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255a:	4807      	ldr	r0, [pc, #28]	; (8002578 <imu_filter+0x434>)
 800255c:	f7ff fc31 	bl	8001dc2 <quat_add>
    quat_Normalization(&q_est);                 // normalize the orientation of the estimate
 8002560:	4805      	ldr	r0, [pc, #20]	; (8002578 <imu_filter+0x434>)
 8002562:	f7ff fce6 	bl	8001f32 <quat_Normalization>
                                                //(shown in diagram, plus always use unit quaternions for orientation)
   
}
 8002566:	bf00      	nop
 8002568:	37b0      	adds	r7, #176	; 0xb0
 800256a:	46bd      	mov	sp, r7
 800256c:	bdb0      	pop	{r4, r5, r7, pc}
 800256e:	bf00      	nop
 8002570:	3d9ac70e 	.word	0x3d9ac70e
 8002574:	3ca3d70a 	.word	0x3ca3d70a
 8002578:	20000008 	.word	0x20000008

0800257c <eulerAngles>:
 Assume right hand system
 Roll is about the x axis, represented as phi
 Pitch is about the y axis, represented as theta
 Yaw is about the z axis, represented as psi (trident looking greek symbol)
 */
void eulerAngles(struct quaternion q, float* roll, float* pitch, float* yaw){
 800257c:	b5b0      	push	{r4, r5, r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	463c      	mov	r4, r7
 8002584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    *yaw = atan2f((2*q.q2*q.q3 - 2*q.q1*q.q4), (2*q.q1*q.q1 + 2*q.q2*q.q2 -1));  // equation (7)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4619      	mov	r1, r3
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fa9f 	bl	8000ad0 <__addsf3>
 8002592:	4603      	mov	r3, r0
 8002594:	461a      	mov	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f7fe fba0 	bl	8000ce0 <__aeabi_fmul>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461c      	mov	r4, r3
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fa91 	bl	8000ad0 <__addsf3>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f7fe fb92 	bl	8000ce0 <__aeabi_fmul>
 80025bc:	4603      	mov	r3, r0
 80025be:	4619      	mov	r1, r3
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7fe fa83 	bl	8000acc <__aeabi_fsub>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461c      	mov	r4, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fa7e 	bl	8000ad0 <__addsf3>
 80025d4:	4603      	mov	r3, r0
 80025d6:	461a      	mov	r2, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f7fe fb7f 	bl	8000ce0 <__aeabi_fmul>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461d      	mov	r5, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4619      	mov	r1, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fa70 	bl	8000ad0 <__addsf3>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4610      	mov	r0, r2
 80025fa:	f7fe fb71 	bl	8000ce0 <__aeabi_fmul>
 80025fe:	4603      	mov	r3, r0
 8002600:	4619      	mov	r1, r3
 8002602:	4628      	mov	r0, r5
 8002604:	f7fe fa64 	bl	8000ad0 <__addsf3>
 8002608:	4603      	mov	r3, r0
 800260a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fa5c 	bl	8000acc <__aeabi_fsub>
 8002614:	4603      	mov	r3, r0
 8002616:	4619      	mov	r1, r3
 8002618:	4620      	mov	r0, r4
 800261a:	f003 f813 	bl	8005644 <atan2f>
 800261e:	4602      	mov	r2, r0
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	601a      	str	r2, [r3, #0]
    *pitch = -asinf(2*q.q2*q.q4 + 2*q.q1*q.q3);                                  // equatino (8)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4619      	mov	r1, r3
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fa51 	bl	8000ad0 <__addsf3>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f7fe fb52 	bl	8000ce0 <__aeabi_fmul>
 800263c:	4603      	mov	r3, r0
 800263e:	461c      	mov	r4, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fa43 	bl	8000ad0 <__addsf3>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f7fe fb44 	bl	8000ce0 <__aeabi_fmul>
 8002658:	4603      	mov	r3, r0
 800265a:	4619      	mov	r1, r3
 800265c:	4620      	mov	r0, r4
 800265e:	f7fe fa37 	bl	8000ad0 <__addsf3>
 8002662:	4603      	mov	r3, r0
 8002664:	4618      	mov	r0, r3
 8002666:	f002 ffcd 	bl	8005604 <asinf>
 800266a:	4603      	mov	r3, r0
 800266c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	601a      	str	r2, [r3, #0]
    *roll  = atan2f((2*q.q3*q.q4 - 2*q.q1*q.q2), (2*q.q1*q.q1 + 2*q.q4*q.q4 -1));
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4619      	mov	r1, r3
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fa29 	bl	8000ad0 <__addsf3>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f7fe fb2a 	bl	8000ce0 <__aeabi_fmul>
 800268c:	4603      	mov	r3, r0
 800268e:	461c      	mov	r4, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fa1b 	bl	8000ad0 <__addsf3>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f7fe fb1c 	bl	8000ce0 <__aeabi_fmul>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4619      	mov	r1, r3
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7fe fa0d 	bl	8000acc <__aeabi_fsub>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461c      	mov	r4, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	4619      	mov	r1, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fa08 	bl	8000ad0 <__addsf3>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4619      	mov	r1, r3
 80026c8:	4610      	mov	r0, r2
 80026ca:	f7fe fb09 	bl	8000ce0 <__aeabi_fmul>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461d      	mov	r5, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe f9fa 	bl	8000ad0 <__addsf3>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4610      	mov	r0, r2
 80026e6:	f7fe fafb 	bl	8000ce0 <__aeabi_fmul>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4619      	mov	r1, r3
 80026ee:	4628      	mov	r0, r5
 80026f0:	f7fe f9ee 	bl	8000ad0 <__addsf3>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe f9e6 	bl	8000acc <__aeabi_fsub>
 8002700:	4603      	mov	r3, r0
 8002702:	4619      	mov	r1, r3
 8002704:	4620      	mov	r0, r4
 8002706:	f002 ff9d 	bl	8005644 <atan2f>
 800270a:	4602      	mov	r2, r0
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	601a      	str	r2, [r3, #0]
    
    *yaw *= (180.0f / PI);
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	490f      	ldr	r1, [pc, #60]	; (8002754 <eulerAngles+0x1d8>)
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fae2 	bl	8000ce0 <__aeabi_fmul>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002722:	601a      	str	r2, [r3, #0]
    *pitch *= (180.0f / PI);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	490a      	ldr	r1, [pc, #40]	; (8002754 <eulerAngles+0x1d8>)
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fad8 	bl	8000ce0 <__aeabi_fmul>
 8002730:	4603      	mov	r3, r0
 8002732:	461a      	mov	r2, r3
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	601a      	str	r2, [r3, #0]
    *roll *= (180.0f / PI);
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4905      	ldr	r1, [pc, #20]	; (8002754 <eulerAngles+0x1d8>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe face 	bl	8000ce0 <__aeabi_fmul>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	601a      	str	r2, [r3, #0]

}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bdb0      	pop	{r4, r5, r7, pc}
 8002754:	42652ee0 	.word	0x42652ee0

08002758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800275e:	f000 fbff 	bl	8002f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002762:	f000 fa19 	bl	8002b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002766:	f7ff fa8d 	bl	8001c84 <MX_GPIO_Init>
  MX_CAN_Init();
 800276a:	f7ff f9f9 	bl	8001b60 <MX_CAN_Init>
  MX_SPI1_Init();
 800276e:	f000 fa59 	bl	8002c24 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002772:	f000 fa8d 	bl	8002c90 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 5; ++i) {
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e002      	b.n	8002782 <main+0x2a>
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	3301      	adds	r3, #1
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	2b04      	cmp	r3, #4
 8002786:	ddf9      	ble.n	800277c <main+0x24>
//	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	//HAL_Delay(500);
  }
  MPU9250_calibrate();
 8002788:	f7fe fe96 	bl	80014b8 <MPU9250_calibrate>
  HAL_Delay(2000);
 800278c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002790:	f000 fc48 	bl	8003024 <HAL_Delay>
  MPU9250_Init();
 8002794:	f7fe fe08 	bl	80013a8 <MPU9250_Init>
  HAL_Delay(500);
 8002798:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800279c:	f000 fc42 	bl	8003024 <HAL_Delay>

  TxHeaderRoll.StdId = headerIdRoll;
 80027a0:	2211      	movs	r2, #17
 80027a2:	4b96      	ldr	r3, [pc, #600]	; (80029fc <main+0x2a4>)
 80027a4:	601a      	str	r2, [r3, #0]
  TxHeaderRoll.ExtId = 0;
 80027a6:	4b95      	ldr	r3, [pc, #596]	; (80029fc <main+0x2a4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	605a      	str	r2, [r3, #4]
  TxHeaderRoll.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 80027ac:	4b93      	ldr	r3, [pc, #588]	; (80029fc <main+0x2a4>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
  TxHeaderRoll.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80027b2:	4b92      	ldr	r3, [pc, #584]	; (80029fc <main+0x2a4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  TxHeaderRoll.DLC = 4;
 80027b8:	4b90      	ldr	r3, [pc, #576]	; (80029fc <main+0x2a4>)
 80027ba:	2204      	movs	r2, #4
 80027bc:	611a      	str	r2, [r3, #16]
  TxHeaderRoll.TransmitGlobalTime = 0;
 80027be:	4b8f      	ldr	r3, [pc, #572]	; (80029fc <main+0x2a4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	751a      	strb	r2, [r3, #20]

  TxHeaderPitch.StdId = headerIdPitch;
 80027c4:	2212      	movs	r2, #18
 80027c6:	4b8e      	ldr	r3, [pc, #568]	; (8002a00 <main+0x2a8>)
 80027c8:	601a      	str	r2, [r3, #0]
  TxHeaderPitch.ExtId = 0;
 80027ca:	4b8d      	ldr	r3, [pc, #564]	; (8002a00 <main+0x2a8>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
  TxHeaderPitch.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 80027d0:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <main+0x2a8>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  TxHeaderPitch.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80027d6:	4b8a      	ldr	r3, [pc, #552]	; (8002a00 <main+0x2a8>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
  TxHeaderPitch.DLC = 4;
 80027dc:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <main+0x2a8>)
 80027de:	2204      	movs	r2, #4
 80027e0:	611a      	str	r2, [r3, #16]
  TxHeaderPitch.TransmitGlobalTime = 0;
 80027e2:	4b87      	ldr	r3, [pc, #540]	; (8002a00 <main+0x2a8>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	751a      	strb	r2, [r3, #20]

  TxHeaderYaw.StdId = headerIdYaw;
 80027e8:	2213      	movs	r2, #19
 80027ea:	4b86      	ldr	r3, [pc, #536]	; (8002a04 <main+0x2ac>)
 80027ec:	601a      	str	r2, [r3, #0]
  TxHeaderYaw.ExtId = 0;
 80027ee:	4b85      	ldr	r3, [pc, #532]	; (8002a04 <main+0x2ac>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	605a      	str	r2, [r3, #4]
  TxHeaderYaw.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 80027f4:	4b83      	ldr	r3, [pc, #524]	; (8002a04 <main+0x2ac>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  TxHeaderYaw.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80027fa:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <main+0x2ac>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  TxHeaderYaw.DLC = 4;
 8002800:	4b80      	ldr	r3, [pc, #512]	; (8002a04 <main+0x2ac>)
 8002802:	2204      	movs	r2, #4
 8002804:	611a      	str	r2, [r3, #16]
  TxHeaderYaw.TransmitGlobalTime = 0;
 8002806:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <main+0x2ac>)
 8002808:	2200      	movs	r2, #0
 800280a:	751a      	strb	r2, [r3, #20]

  TxHeaderAccel.StdId = headerIdAccel;
 800280c:	2214      	movs	r2, #20
 800280e:	4b7e      	ldr	r3, [pc, #504]	; (8002a08 <main+0x2b0>)
 8002810:	601a      	str	r2, [r3, #0]
  TxHeaderAccel.ExtId = 0;
 8002812:	4b7d      	ldr	r3, [pc, #500]	; (8002a08 <main+0x2b0>)
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
  TxHeaderAccel.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002818:	4b7b      	ldr	r3, [pc, #492]	; (8002a08 <main+0x2b0>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  TxHeaderAccel.IDE = CAN_ID_STD;   // CAN_ID_EXT
 800281e:	4b7a      	ldr	r3, [pc, #488]	; (8002a08 <main+0x2b0>)
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
  TxHeaderAccel.DLC = 6;
 8002824:	4b78      	ldr	r3, [pc, #480]	; (8002a08 <main+0x2b0>)
 8002826:	2206      	movs	r2, #6
 8002828:	611a      	str	r2, [r3, #16]
  TxHeaderAccel.TransmitGlobalTime = 0;
 800282a:	4b77      	ldr	r3, [pc, #476]	; (8002a08 <main+0x2b0>)
 800282c:	2200      	movs	r2, #0
 800282e:	751a      	strb	r2, [r3, #20]

  TxHeaderGyro.StdId = headerIdGyro;
 8002830:	2215      	movs	r2, #21
 8002832:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <main+0x2b4>)
 8002834:	601a      	str	r2, [r3, #0]
  TxHeaderGyro.ExtId = 0;
 8002836:	4b75      	ldr	r3, [pc, #468]	; (8002a0c <main+0x2b4>)
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  TxHeaderGyro.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 800283c:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <main+0x2b4>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  TxHeaderGyro.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002842:	4b72      	ldr	r3, [pc, #456]	; (8002a0c <main+0x2b4>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  TxHeaderGyro.DLC = 6;
 8002848:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <main+0x2b4>)
 800284a:	2206      	movs	r2, #6
 800284c:	611a      	str	r2, [r3, #16]
  TxHeaderGyro.TransmitGlobalTime = 0;
 800284e:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <main+0x2b4>)
 8002850:	2200      	movs	r2, #0
 8002852:	751a      	strb	r2, [r3, #20]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002854:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <main+0x2b8>)
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 800285a:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <main+0x2b8>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8002860:	4b6b      	ldr	r3, [pc, #428]	; (8002a10 <main+0x2b8>)
 8002862:	2200      	movs	r2, #0
 8002864:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8002866:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <main+0x2b8>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 800286c:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <main+0x2b8>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002872:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <main+0x2b8>)
 8002874:	2201      	movs	r2, #1
 8002876:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 8002878:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <main+0x2b8>)
 800287a:	2201      	movs	r2, #1
 800287c:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800287e:	4964      	ldr	r1, [pc, #400]	; (8002a10 <main+0x2b8>)
 8002880:	4864      	ldr	r0, [pc, #400]	; (8002a14 <main+0x2bc>)
 8002882:	f000 fcf6 	bl	8003272 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 8002886:	4863      	ldr	r0, [pc, #396]	; (8002a14 <main+0x2bc>)
 8002888:	f000 fdbc 	bl	8003404 <HAL_CAN_Start>
  HAL_Delay(500);
 800288c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002890:	f000 fbc8 	bl	8003024 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	int16_t AccData[3], GyroData[3], MagData[3];
	//for (int i = 0; i < 10; ++i) {
	  MPU9250_GetData(AccData, GyroData, MagData);
 8002894:	1d3a      	adds	r2, r7, #4
 8002896:	f107 010c 	add.w	r1, r7, #12
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe ffae 	bl	8001800 <MPU9250_GetData>
	  accelX_summ += accelX_filtered;
 80028a4:	4b5c      	ldr	r3, [pc, #368]	; (8002a18 <main+0x2c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a5c      	ldr	r2, [pc, #368]	; (8002a1c <main+0x2c4>)
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4611      	mov	r1, r2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe f90e 	bl	8000ad0 <__addsf3>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b57      	ldr	r3, [pc, #348]	; (8002a18 <main+0x2c0>)
 80028ba:	601a      	str	r2, [r3, #0]
	  accelY_summ += accelY_filtered;
 80028bc:	4b58      	ldr	r3, [pc, #352]	; (8002a20 <main+0x2c8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <main+0x2cc>)
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f902 	bl	8000ad0 <__addsf3>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <main+0x2c8>)
 80028d2:	601a      	str	r2, [r3, #0]
	  accelZ_summ += accelZ_filtered;
 80028d4:	4b54      	ldr	r3, [pc, #336]	; (8002a28 <main+0x2d0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a54      	ldr	r2, [pc, #336]	; (8002a2c <main+0x2d4>)
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe f8f6 	bl	8000ad0 <__addsf3>
 80028e4:	4603      	mov	r3, r0
 80028e6:	461a      	mov	r2, r3
 80028e8:	4b4f      	ldr	r3, [pc, #316]	; (8002a28 <main+0x2d0>)
 80028ea:	601a      	str	r2, [r3, #0]
	  gyroX_summ += gyroX_filtered;
 80028ec:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <main+0x2d8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a50      	ldr	r2, [pc, #320]	; (8002a34 <main+0x2dc>)
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe f8ea 	bl	8000ad0 <__addsf3>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <main+0x2d8>)
 8002902:	601a      	str	r2, [r3, #0]
	  gyroY_summ += gyroY_filtered;
 8002904:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <main+0x2e0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a4c      	ldr	r2, [pc, #304]	; (8002a3c <main+0x2e4>)
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe f8de 	bl	8000ad0 <__addsf3>
 8002914:	4603      	mov	r3, r0
 8002916:	461a      	mov	r2, r3
 8002918:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <main+0x2e0>)
 800291a:	601a      	str	r2, [r3, #0]
	  gyroZ_summ += gyroZ_filtered;
 800291c:	4b48      	ldr	r3, [pc, #288]	; (8002a40 <main+0x2e8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a48      	ldr	r2, [pc, #288]	; (8002a44 <main+0x2ec>)
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe f8d2 	bl	8000ad0 <__addsf3>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <main+0x2e8>)
 8002932:	601a      	str	r2, [r3, #0]
	  //HAL_Delay(1);
	//}
	accelX_average = accelX_summ / 10;
 8002934:	4b38      	ldr	r3, [pc, #224]	; (8002a18 <main+0x2c0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4943      	ldr	r1, [pc, #268]	; (8002a48 <main+0x2f0>)
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fa84 	bl	8000e48 <__aeabi_fdiv>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <main+0x2f4>)
 8002946:	601a      	str	r2, [r3, #0]
	accelY_average = accelY_summ / 10;
 8002948:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <main+0x2c8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	493e      	ldr	r1, [pc, #248]	; (8002a48 <main+0x2f0>)
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe fa7a 	bl	8000e48 <__aeabi_fdiv>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <main+0x2f8>)
 800295a:	601a      	str	r2, [r3, #0]
	accelZ_average = accelZ_summ / 10;
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <main+0x2d0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4939      	ldr	r1, [pc, #228]	; (8002a48 <main+0x2f0>)
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fa70 	bl	8000e48 <__aeabi_fdiv>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <main+0x2fc>)
 800296e:	601a      	str	r2, [r3, #0]
	gyroX_average = gyroX_summ / 10;
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <main+0x2d8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4934      	ldr	r1, [pc, #208]	; (8002a48 <main+0x2f0>)
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fa66 	bl	8000e48 <__aeabi_fdiv>
 800297c:	4603      	mov	r3, r0
 800297e:	461a      	mov	r2, r3
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <main+0x300>)
 8002982:	601a      	str	r2, [r3, #0]
	gyroY_average = gyroY_summ / 10;
 8002984:	4b2c      	ldr	r3, [pc, #176]	; (8002a38 <main+0x2e0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	492f      	ldr	r1, [pc, #188]	; (8002a48 <main+0x2f0>)
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fa5c 	bl	8000e48 <__aeabi_fdiv>
 8002990:	4603      	mov	r3, r0
 8002992:	461a      	mov	r2, r3
 8002994:	4b31      	ldr	r3, [pc, #196]	; (8002a5c <main+0x304>)
 8002996:	601a      	str	r2, [r3, #0]
	gyroZ_average = gyroZ_summ / 10;
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <main+0x2e8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	492a      	ldr	r1, [pc, #168]	; (8002a48 <main+0x2f0>)
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fe fa52 	bl	8000e48 <__aeabi_fdiv>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b2d      	ldr	r3, [pc, #180]	; (8002a60 <main+0x308>)
 80029aa:	601a      	str	r2, [r3, #0]
	accelX_summ = 0;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <main+0x2c0>)
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
	accelY_summ = 0;
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <main+0x2c8>)
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
	accelZ_summ = 0;
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <main+0x2d0>)
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
	gyroX_summ = 0;
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <main+0x2d8>)
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
	gyroY_summ = 0;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <main+0x2e0>)
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
	gyroZ_summ = 0;
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <main+0x2e8>)
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

	imu_filter(accelX_average, accelY_average, accelZ_average, gyroX_average, gyroY_average, gyroZ_average);
 80029dc:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <main+0x2f4>)
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <main+0x2f8>)
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <main+0x2fc>)
 80029e6:	681c      	ldr	r4, [r3, #0]
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <main+0x300>)
 80029ea:	681d      	ldr	r5, [r3, #0]
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <main+0x304>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <main+0x308>)
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	9201      	str	r2, [sp, #4]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	462b      	mov	r3, r5
 80029fa:	e033      	b.n	8002a64 <main+0x30c>
 80029fc:	20000130 	.word	0x20000130
 8002a00:	20000148 	.word	0x20000148
 8002a04:	20000160 	.word	0x20000160
 8002a08:	20000178 	.word	0x20000178
 8002a0c:	20000190 	.word	0x20000190
 8002a10:	20000108 	.word	0x20000108
 8002a14:	200000e0 	.word	0x200000e0
 8002a18:	200001e4 	.word	0x200001e4
 8002a1c:	200001d8 	.word	0x200001d8
 8002a20:	200001e8 	.word	0x200001e8
 8002a24:	200001dc 	.word	0x200001dc
 8002a28:	200001ec 	.word	0x200001ec
 8002a2c:	200001e0 	.word	0x200001e0
 8002a30:	200001fc 	.word	0x200001fc
 8002a34:	200001cc 	.word	0x200001cc
 8002a38:	20000200 	.word	0x20000200
 8002a3c:	200001d0 	.word	0x200001d0
 8002a40:	20000204 	.word	0x20000204
 8002a44:	200001d4 	.word	0x200001d4
 8002a48:	41200000 	.word	0x41200000
 8002a4c:	200001f0 	.word	0x200001f0
 8002a50:	200001f4 	.word	0x200001f4
 8002a54:	200001f8 	.word	0x200001f8
 8002a58:	20000208 	.word	0x20000208
 8002a5c:	2000020c 	.word	0x2000020c
 8002a60:	20000210 	.word	0x20000210
 8002a64:	4622      	mov	r2, r4
 8002a66:	f7ff fb6d 	bl	8002144 <imu_filter>
	eulerAngles(q_est, &roll, &pitch, &yaw);
 8002a6a:	4b3b      	ldr	r3, [pc, #236]	; (8002b58 <main+0x400>)
 8002a6c:	4a3b      	ldr	r2, [pc, #236]	; (8002b5c <main+0x404>)
 8002a6e:	9202      	str	r2, [sp, #8]
 8002a70:	4a3b      	ldr	r2, [pc, #236]	; (8002b60 <main+0x408>)
 8002a72:	9201      	str	r2, [sp, #4]
 8002a74:	4a3b      	ldr	r2, [pc, #236]	; (8002b64 <main+0x40c>)
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a7a:	f7ff fd7f 	bl	800257c <eulerAngles>
//	can_data[0] = _buffer[0];
//	can_data[1] = _buffer[1];

	memcpy(can_data, &_buffer[8], 6);
 8002a7e:	2206      	movs	r2, #6
 8002a80:	4939      	ldr	r1, [pc, #228]	; (8002b68 <main+0x410>)
 8002a82:	483a      	ldr	r0, [pc, #232]	; (8002b6c <main+0x414>)
 8002a84:	f003 f9ea 	bl	8005e5c <memcpy>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderGyro, can_data, &TxMailbox) == HAL_OK) {
 8002a88:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <main+0x418>)
 8002a8a:	4a38      	ldr	r2, [pc, #224]	; (8002b6c <main+0x414>)
 8002a8c:	4939      	ldr	r1, [pc, #228]	; (8002b74 <main+0x41c>)
 8002a8e:	483a      	ldr	r0, [pc, #232]	; (8002b78 <main+0x420>)
 8002a90:	f000 fcfc 	bl	800348c <HAL_CAN_AddTxMessage>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <main+0x34a>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002a9a:	2108      	movs	r1, #8
 8002a9c:	4837      	ldr	r0, [pc, #220]	; (8002b7c <main+0x424>)
 8002a9e:	f001 fb1b 	bl	80040d8 <HAL_GPIO_TogglePin>
	}
	HAL_Delay(3);
 8002aa2:	2003      	movs	r0, #3
 8002aa4:	f000 fabe 	bl	8003024 <HAL_Delay>
	memcpy(can_data, &_buffer[0], 6);
 8002aa8:	2206      	movs	r2, #6
 8002aaa:	4935      	ldr	r1, [pc, #212]	; (8002b80 <main+0x428>)
 8002aac:	482f      	ldr	r0, [pc, #188]	; (8002b6c <main+0x414>)
 8002aae:	f003 f9d5 	bl	8005e5c <memcpy>
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderAccel, can_data, &TxMailbox) == HAL_OK) {
 8002ab2:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <main+0x418>)
 8002ab4:	4a2d      	ldr	r2, [pc, #180]	; (8002b6c <main+0x414>)
 8002ab6:	4933      	ldr	r1, [pc, #204]	; (8002b84 <main+0x42c>)
 8002ab8:	482f      	ldr	r0, [pc, #188]	; (8002b78 <main+0x420>)
 8002aba:	f000 fce7 	bl	800348c <HAL_CAN_AddTxMessage>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d103      	bne.n	8002acc <main+0x374>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002ac4:	2108      	movs	r1, #8
 8002ac6:	482d      	ldr	r0, [pc, #180]	; (8002b7c <main+0x424>)
 8002ac8:	f001 fb06 	bl	80040d8 <HAL_GPIO_TogglePin>
	}
	HAL_Delay(3);
 8002acc:	2003      	movs	r0, #3
 8002ace:	f000 faa9 	bl	8003024 <HAL_Delay>
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <main+0x40c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
	memcpy(can_data, &roll, 4);
 8002ad6:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <main+0x414>)
 8002ad8:	6013      	str	r3, [r2, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 8002ada:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <main+0x418>)
 8002adc:	4a23      	ldr	r2, [pc, #140]	; (8002b6c <main+0x414>)
 8002ade:	492a      	ldr	r1, [pc, #168]	; (8002b88 <main+0x430>)
 8002ae0:	4825      	ldr	r0, [pc, #148]	; (8002b78 <main+0x420>)
 8002ae2:	f000 fcd3 	bl	800348c <HAL_CAN_AddTxMessage>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <main+0x39c>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002aec:	2108      	movs	r1, #8
 8002aee:	4823      	ldr	r0, [pc, #140]	; (8002b7c <main+0x424>)
 8002af0:	f001 faf2 	bl	80040d8 <HAL_GPIO_TogglePin>
	}
	HAL_Delay(3);
 8002af4:	2003      	movs	r0, #3
 8002af6:	f000 fa95 	bl	8003024 <HAL_Delay>
 8002afa:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <main+0x408>)
 8002afc:	681b      	ldr	r3, [r3, #0]
	memcpy(can_data, &pitch, 4);
 8002afe:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <main+0x414>)
 8002b00:	6013      	str	r3, [r2, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderPitch, can_data, &TxMailbox) == HAL_OK) {
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <main+0x418>)
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <main+0x414>)
 8002b06:	4921      	ldr	r1, [pc, #132]	; (8002b8c <main+0x434>)
 8002b08:	481b      	ldr	r0, [pc, #108]	; (8002b78 <main+0x420>)
 8002b0a:	f000 fcbf 	bl	800348c <HAL_CAN_AddTxMessage>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d103      	bne.n	8002b1c <main+0x3c4>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002b14:	2108      	movs	r1, #8
 8002b16:	4819      	ldr	r0, [pc, #100]	; (8002b7c <main+0x424>)
 8002b18:	f001 fade 	bl	80040d8 <HAL_GPIO_TogglePin>
	}
	HAL_Delay(3);
 8002b1c:	2003      	movs	r0, #3
 8002b1e:	f000 fa81 	bl	8003024 <HAL_Delay>
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <main+0x404>)
 8002b24:	681b      	ldr	r3, [r3, #0]
	memcpy(can_data, &yaw, 4);
 8002b26:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <main+0x414>)
 8002b28:	6013      	str	r3, [r2, #0]
//	can_data[0] = packet_count;
//	can_data[1] = 0;
//	can_data[2] = 0;
//	can_data[3] = 0;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <main+0x418>)
 8002b2c:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <main+0x414>)
 8002b2e:	4918      	ldr	r1, [pc, #96]	; (8002b90 <main+0x438>)
 8002b30:	4811      	ldr	r0, [pc, #68]	; (8002b78 <main+0x420>)
 8002b32:	f000 fcab 	bl	800348c <HAL_CAN_AddTxMessage>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d103      	bne.n	8002b44 <main+0x3ec>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002b3c:	2108      	movs	r1, #8
 8002b3e:	480f      	ldr	r0, [pc, #60]	; (8002b7c <main+0x424>)
 8002b40:	f001 faca 	bl	80040d8 <HAL_GPIO_TogglePin>
	}
	HAL_Delay(3);
 8002b44:	2003      	movs	r0, #3
 8002b46:	f000 fa6d 	bl	8003024 <HAL_Delay>
	count = HAL_GetTick();
 8002b4a:	f000 fa61 	bl	8003010 <HAL_GetTick>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4a10      	ldr	r2, [pc, #64]	; (8002b94 <main+0x43c>)
 8002b52:	6013      	str	r3, [r2, #0]
  {
 8002b54:	e69e      	b.n	8002894 <main+0x13c>
 8002b56:	bf00      	nop
 8002b58:	20000008 	.word	0x20000008
 8002b5c:	2000021c 	.word	0x2000021c
 8002b60:	20000218 	.word	0x20000218
 8002b64:	20000214 	.word	0x20000214
 8002b68:	200000c4 	.word	0x200000c4
 8002b6c:	200001ac 	.word	0x200001ac
 8002b70:	200001a8 	.word	0x200001a8
 8002b74:	20000190 	.word	0x20000190
 8002b78:	200000e0 	.word	0x200000e0
 8002b7c:	40010c00 	.word	0x40010c00
 8002b80:	200000bc 	.word	0x200000bc
 8002b84:	20000178 	.word	0x20000178
 8002b88:	20000130 	.word	0x20000130
 8002b8c:	20000148 	.word	0x20000148
 8002b90:	20000160 	.word	0x20000160
 8002b94:	20000238 	.word	0x20000238

08002b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b090      	sub	sp, #64	; 0x40
 8002b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b9e:	f107 0318 	add.w	r3, r7, #24
 8002ba2:	2228      	movs	r2, #40	; 0x28
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 f966 	bl	8005e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	60da      	str	r2, [r3, #12]
 8002bb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bc2:	2310      	movs	r3, #16
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002bce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bd4:	f107 0318 	add.w	r3, r7, #24
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f001 fa97 	bl	800410c <HAL_RCC_OscConfig>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002be4:	f000 f819 	bl	8002c1a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002be8:	230f      	movs	r3, #15
 8002bea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bec:	2302      	movs	r3, #2
 8002bee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 fd04 	bl	8004610 <HAL_RCC_ClockConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002c0e:	f000 f804 	bl	8002c1a <Error_Handler>
  }
}
 8002c12:	bf00      	nop
 8002c14:	3740      	adds	r7, #64	; 0x40
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c1e:	b672      	cpsid	i
}
 8002c20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <Error_Handler+0x8>

08002c24 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <MX_SPI1_Init+0x68>)
 8002c2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c2e:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c58:	2220      	movs	r2, #32
 8002c5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c68:	4b07      	ldr	r3, [pc, #28]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c70:	220a      	movs	r2, #10
 8002c72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c74:	4804      	ldr	r0, [pc, #16]	; (8002c88 <MX_SPI1_Init+0x64>)
 8002c76:	f001 fe31 	bl	80048dc <HAL_SPI_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c80:	f7ff ffcb 	bl	8002c1a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c84:	bf00      	nop
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000023c 	.word	0x2000023c
 8002c8c:	40013000 	.word	0x40013000

08002c90 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <MX_SPI2_Init+0x68>)
 8002c98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c9a:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ca0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd4:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002cda:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002cdc:	220a      	movs	r2, #10
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002ce0:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <MX_SPI2_Init+0x64>)
 8002ce2:	f001 fdfb 	bl	80048dc <HAL_SPI_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002cec:	f7ff ff95 	bl	8002c1a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20000294 	.word	0x20000294
 8002cf8:	40003800 	.word	0x40003800

08002cfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 0318 	add.w	r3, r7, #24
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <HAL_SPI_MspInit+0x108>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d130      	bne.n	8002d7e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a39      	ldr	r2, [pc, #228]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	4a33      	ldr	r2, [pc, #204]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	6193      	str	r3, [r2, #24]
 8002d40:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d4c:	23a0      	movs	r3, #160	; 0xa0
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d50:	2302      	movs	r3, #2
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d58:	f107 0318 	add.w	r3, r7, #24
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	482b      	ldr	r0, [pc, #172]	; (8002e0c <HAL_SPI_MspInit+0x110>)
 8002d60:	f001 f81e 	bl	8003da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d64:	2340      	movs	r3, #64	; 0x40
 8002d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	f107 0318 	add.w	r3, r7, #24
 8002d74:	4619      	mov	r1, r3
 8002d76:	4825      	ldr	r0, [pc, #148]	; (8002e0c <HAL_SPI_MspInit+0x110>)
 8002d78:	f001 f812 	bl	8003da0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002d7c:	e03e      	b.n	8002dfc <HAL_SPI_MspInit+0x100>
  else if(spiHandle->Instance==SPI2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a23      	ldr	r2, [pc, #140]	; (8002e10 <HAL_SPI_MspInit+0x114>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d139      	bne.n	8002dfc <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d88:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d92:	61d3      	str	r3, [r2, #28]
 8002d94:	4b1c      	ldr	r3, [pc, #112]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002da6:	f043 0308 	orr.w	r3, r3, #8
 8002daa:	6193      	str	r3, [r2, #24]
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <HAL_SPI_MspInit+0x10c>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002db8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc6:	f107 0318 	add.w	r3, r7, #24
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4811      	ldr	r0, [pc, #68]	; (8002e14 <HAL_SPI_MspInit+0x118>)
 8002dce:	f000 ffe7 	bl	8003da0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002dd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de0:	f107 0318 	add.w	r3, r7, #24
 8002de4:	4619      	mov	r1, r3
 8002de6:	480b      	ldr	r0, [pc, #44]	; (8002e14 <HAL_SPI_MspInit+0x118>)
 8002de8:	f000 ffda 	bl	8003da0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	2024      	movs	r0, #36	; 0x24
 8002df2:	f000 ff28 	bl	8003c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002df6:	2024      	movs	r0, #36	; 0x24
 8002df8:	f000 ff41 	bl	8003c7e <HAL_NVIC_EnableIRQ>
}
 8002dfc:	bf00      	nop
 8002dfe:	3728      	adds	r7, #40	; 0x28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40013000 	.word	0x40013000
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40010800 	.word	0x40010800
 8002e10:	40003800 	.word	0x40003800
 8002e14:	40010c00 	.word	0x40010c00

08002e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_MspInit+0x5c>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <HAL_MspInit+0x5c>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6193      	str	r3, [r2, #24]
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_MspInit+0x5c>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_MspInit+0x5c>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <HAL_MspInit+0x5c>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <HAL_MspInit+0x5c>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_MspInit+0x60>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	4a04      	ldr	r2, [pc, #16]	; (8002e78 <HAL_MspInit+0x60>)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40010000 	.word	0x40010000

08002e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e80:	e7fe      	b.n	8002e80 <NMI_Handler+0x4>

08002e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e86:	e7fe      	b.n	8002e86 <HardFault_Handler+0x4>

08002e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e8c:	e7fe      	b.n	8002e8c <MemManage_Handler+0x4>

08002e8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e92:	e7fe      	b.n	8002e92 <BusFault_Handler+0x4>

08002e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e98:	e7fe      	b.n	8002e98 <UsageFault_Handler+0x4>

08002e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bc80      	pop	{r7}
 8002ea4:	4770      	bx	lr

08002ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr

08002ebe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec2:	f000 f893 	bl	8002fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002ed2:	f000 fbb5 	bl	8003640 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200000e0 	.word	0x200000e0

08002ee0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002ee6:	f000 fbab 	bl	8003640 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200000e0 	.word	0x200000e0

08002ef4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <SPI2_IRQHandler+0x10>)
 8002efa:	f002 f963 	bl	80051c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000294 	.word	0x20000294

08002f08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f14:	480c      	ldr	r0, [pc, #48]	; (8002f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f16:	490d      	ldr	r1, [pc, #52]	; (8002f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f1c:	e002      	b.n	8002f24 <LoopCopyDataInit>

08002f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f22:	3304      	adds	r3, #4

08002f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f28:	d3f9      	bcc.n	8002f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f2c:	4c0a      	ldr	r4, [pc, #40]	; (8002f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f30:	e001      	b.n	8002f36 <LoopFillZerobss>

08002f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f34:	3204      	adds	r2, #4

08002f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f38:	d3fb      	bcc.n	8002f32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f3a:	f7ff ffe5 	bl	8002f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f3e:	f002 ff69 	bl	8005e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f42:	f7ff fc09 	bl	8002758 <main>
  bx lr
 8002f46:	4770      	bx	lr
  ldr r0, =_sdata
 8002f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f4c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002f50:	08005f04 	.word	0x08005f04
  ldr r2, =_sbss
 8002f54:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002f58:	200002f0 	.word	0x200002f0

08002f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f5c:	e7fe      	b.n	8002f5c <ADC1_2_IRQHandler>
	...

08002f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_Init+0x28>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <HAL_Init+0x28>)
 8002f6a:	f043 0310 	orr.w	r3, r3, #16
 8002f6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f70:	2003      	movs	r0, #3
 8002f72:	f000 fe5d 	bl	8003c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f76:	200f      	movs	r0, #15
 8002f78:	f000 f808 	bl	8002f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f7c:	f7ff ff4c 	bl	8002e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000

08002f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_InitTick+0x54>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <HAL_InitTick+0x58>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fe75 	bl	8003c9a <HAL_SYSTICK_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00e      	b.n	8002fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b0f      	cmp	r3, #15
 8002fbe:	d80a      	bhi.n	8002fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	f000 fe3d 	bl	8003c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fcc:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <HAL_InitTick+0x5c>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e000      	b.n	8002fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000018 	.word	0x20000018
 8002fe4:	20000020 	.word	0x20000020
 8002fe8:	2000001c 	.word	0x2000001c

08002fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_IncTick+0x1c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_IncTick+0x20>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a03      	ldr	r2, [pc, #12]	; (800300c <HAL_IncTick+0x20>)
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	20000020 	.word	0x20000020
 800300c:	200002ec 	.word	0x200002ec

08003010 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return uwTick;
 8003014:	4b02      	ldr	r3, [pc, #8]	; (8003020 <HAL_GetTick+0x10>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	4618      	mov	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	200002ec 	.word	0x200002ec

08003024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800302c:	f7ff fff0 	bl	8003010 <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d005      	beq.n	800304a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_Delay+0x44>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800304a:	bf00      	nop
 800304c:	f7ff ffe0 	bl	8003010 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	d8f7      	bhi.n	800304c <HAL_Delay+0x28>
  {
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000020 	.word	0x20000020

0800306c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0f5      	b.n	800326a <HAL_CAN_Init+0x1fe>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fe fd9e 	bl	8001bcc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0202 	bic.w	r2, r2, #2
 80030ae:	601a      	str	r2, [r3, #0]
  /* Get tick */
  tickstart = HAL_GetTick();
 80030b0:	f7ff ffae 	bl	8003010 <HAL_GetTick>
 80030b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030b6:	e012      	b.n	80030de <HAL_CAN_Init+0x72>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030b8:	f7ff ffaa 	bl	8003010 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b0a      	cmp	r3, #10
 80030c4:	d90b      	bls.n	80030de <HAL_CAN_Init+0x72>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2205      	movs	r2, #5
 80030d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e0c5      	b.n	800326a <HAL_CAN_Init+0x1fe>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0e5      	beq.n	80030b8 <HAL_CAN_Init+0x4c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0202 	bic.w	r2, r2, #2
 80030fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030fc:	f7ff ff88 	bl	8003010 <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003102:	e012      	b.n	800312a <HAL_CAN_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003104:	f7ff ff84 	bl	8003010 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b0a      	cmp	r3, #10
 8003110:	d90b      	bls.n	800312a <HAL_CAN_Init+0xbe>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2205      	movs	r2, #5
 8003122:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e09f      	b.n	800326a <HAL_CAN_Init+0x1fe>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e5      	bne.n	8003104 <HAL_CAN_Init+0x98>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7e1b      	ldrb	r3, [r3, #24]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d108      	bne.n	8003152 <HAL_CAN_Init+0xe6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e007      	b.n	8003162 <HAL_CAN_Init+0xf6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7e5b      	ldrb	r3, [r3, #25]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_CAN_Init+0x110>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e007      	b.n	800318c <HAL_CAN_Init+0x120>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7e9b      	ldrb	r3, [r3, #26]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d108      	bne.n	80031a6 <HAL_CAN_Init+0x13a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e007      	b.n	80031b6 <HAL_CAN_Init+0x14a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0220 	bic.w	r2, r2, #32
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7edb      	ldrb	r3, [r3, #27]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d108      	bne.n	80031d0 <HAL_CAN_Init+0x164>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0210 	bic.w	r2, r2, #16
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	e007      	b.n	80031e0 <HAL_CAN_Init+0x174>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0210 	orr.w	r2, r2, #16
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	7f1b      	ldrb	r3, [r3, #28]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d108      	bne.n	80031fa <HAL_CAN_Init+0x18e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0208 	orr.w	r2, r2, #8
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e007      	b.n	800320a <HAL_CAN_Init+0x19e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0208 	bic.w	r2, r2, #8
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	7f5b      	ldrb	r3, [r3, #29]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d108      	bne.n	8003224 <HAL_CAN_Init+0x1b8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0204 	orr.w	r2, r2, #4
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e007      	b.n	8003234 <HAL_CAN_Init+0x1c8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	ea42 0103 	orr.w	r1, r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	1e5a      	subs	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003272:	b480      	push	{r7}
 8003274:	b087      	sub	sp, #28
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003288:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d003      	beq.n	8003298 <HAL_CAN_ConfigFilter+0x26>
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	2b02      	cmp	r3, #2
 8003294:	f040 80aa 	bne.w	80033ec <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2201      	movs	r2, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	401a      	ands	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d123      	bne.n	800331a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	401a      	ands	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80032f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3248      	adds	r2, #72	; 0x48
 80032fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800330e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003310:	6979      	ldr	r1, [r7, #20]
 8003312:	3348      	adds	r3, #72	; 0x48
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d122      	bne.n	8003368 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	431a      	orrs	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003342:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3248      	adds	r2, #72	; 0x48
 8003348:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800335c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800335e:	6979      	ldr	r1, [r7, #20]
 8003360:	3348      	adds	r3, #72	; 0x48
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	43db      	mvns	r3, r3
 800337a:	401a      	ands	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003382:	e007      	b.n	8003394 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	431a      	orrs	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d109      	bne.n	80033b0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	43db      	mvns	r3, r3
 80033a6:	401a      	ands	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80033ae:	e007      	b.n	80033c0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	431a      	orrs	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	e006      	b.n	80033fa <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d12e      	bne.n	8003476 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003430:	f7ff fdee 	bl	8003010 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003436:	e012      	b.n	800345e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003438:	f7ff fdea 	bl	8003010 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b0a      	cmp	r3, #10
 8003444:	d90b      	bls.n	800345e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2205      	movs	r2, #5
 8003456:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e012      	b.n	8003484 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e5      	bne.n	8003438 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	e006      	b.n	8003484 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
  }
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80034aa:	7ffb      	ldrb	r3, [r7, #31]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d003      	beq.n	80034b8 <HAL_CAN_AddTxMessage+0x2c>
 80034b0:	7ffb      	ldrb	r3, [r7, #31]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	f040 80b8 	bne.w	8003628 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10a      	bne.n	80034d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80a0 	beq.w	8003618 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	0e1b      	lsrs	r3, r3, #24
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d907      	bls.n	80034f8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e09e      	b.n	8003636 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80034f8:	2201      	movs	r2, #1
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	409a      	lsls	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10d      	bne.n	8003526 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	6809      	ldr	r1, [r1, #0]
 8003518:	431a      	orrs	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	3318      	adds	r3, #24
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	440b      	add	r3, r1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e00f      	b.n	8003546 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003530:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800353a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3318      	adds	r3, #24
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	440b      	add	r3, r1
 8003544:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6819      	ldr	r1, [r3, #0]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	3318      	adds	r3, #24
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	440b      	add	r3, r1
 8003556:	3304      	adds	r3, #4
 8003558:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	7d1b      	ldrb	r3, [r3, #20]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d111      	bne.n	8003586 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3318      	adds	r3, #24
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	6811      	ldr	r1, [r2, #0]
 8003576:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3318      	adds	r3, #24
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	440b      	add	r3, r1
 8003582:	3304      	adds	r3, #4
 8003584:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3307      	adds	r3, #7
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	061a      	lsls	r2, r3, #24
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3306      	adds	r3, #6
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3305      	adds	r3, #5
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	4313      	orrs	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	3204      	adds	r2, #4
 80035a6:	7812      	ldrb	r2, [r2, #0]
 80035a8:	4610      	mov	r0, r2
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	6811      	ldr	r1, [r2, #0]
 80035ae:	ea43 0200 	orr.w	r2, r3, r0
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	440b      	add	r3, r1
 80035b8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80035bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3303      	adds	r3, #3
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	061a      	lsls	r2, r3, #24
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3302      	adds	r3, #2
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3301      	adds	r3, #1
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	4313      	orrs	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	7812      	ldrb	r2, [r2, #0]
 80035de:	4610      	mov	r0, r2
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	6811      	ldr	r1, [r2, #0]
 80035e4:	ea43 0200 	orr.w	r2, r3, r0
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80035f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3318      	adds	r3, #24
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	4413      	add	r3, r2
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	6811      	ldr	r1, [r2, #0]
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3318      	adds	r3, #24
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	440b      	add	r3, r1
 8003612:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	e00e      	b.n	8003636 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e006      	b.n	8003636 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
  }
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003648:	2300      	movs	r3, #0
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d07c      	beq.n	8003780 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d023      	beq.n	80036d8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2201      	movs	r2, #1
 8003696:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f983 	bl	80039ae <HAL_CAN_TxMailbox0CompleteCallback>
 80036a8:	e016      	b.n	80036d8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d004      	beq.n	80036be <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
 80036bc:	e00c      	b.n	80036d8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
 80036d0:	e002      	b.n	80036d8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f986 	bl	80039e4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d024      	beq.n	800372c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f962 	bl	80039c0 <HAL_CAN_TxMailbox1CompleteCallback>
 80036fc:	e016      	b.n	800372c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	e00c      	b.n	800372c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	e002      	b.n	800372c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f965 	bl	80039f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800373e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f941 	bl	80039d2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003750:	e016      	b.n	8003780 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
 8003764:	e00c      	b.n	8003780 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d004      	beq.n	800377a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
 8003778:	e002      	b.n	8003780 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f944 	bl	8003a08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800379a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2210      	movs	r2, #16
 80037a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d006      	beq.n	80037c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2208      	movs	r2, #8
 80037be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f933 	bl	8003a2c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d009      	beq.n	80037e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f91b 	bl	8003a1a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00c      	beq.n	8003808 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2210      	movs	r2, #16
 8003806:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b00      	cmp	r3, #0
 800381a:	d006      	beq.n	800382a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2208      	movs	r2, #8
 8003822:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f913 	bl	8003a50 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f003 0310 	and.w	r3, r3, #16
 8003830:	2b00      	cmp	r3, #0
 8003832:	d009      	beq.n	8003848 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f8fb 	bl	8003a3e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	d006      	beq.n	800386a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2210      	movs	r2, #16
 8003862:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f8fc 	bl	8003a62 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00b      	beq.n	800388c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d006      	beq.n	800388c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2208      	movs	r2, #8
 8003884:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f8f4 	bl	8003a74 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d07b      	beq.n	800398e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d072      	beq.n	8003986 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d008      	beq.n	80038bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	f043 0301 	orr.w	r3, r3, #1
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	f043 0302 	orr.w	r3, r3, #2
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d043      	beq.n	8003986 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003904:	2b00      	cmp	r3, #0
 8003906:	d03e      	beq.n	8003986 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800390e:	2b60      	cmp	r3, #96	; 0x60
 8003910:	d02b      	beq.n	800396a <HAL_CAN_IRQHandler+0x32a>
 8003912:	2b60      	cmp	r3, #96	; 0x60
 8003914:	d82e      	bhi.n	8003974 <HAL_CAN_IRQHandler+0x334>
 8003916:	2b50      	cmp	r3, #80	; 0x50
 8003918:	d022      	beq.n	8003960 <HAL_CAN_IRQHandler+0x320>
 800391a:	2b50      	cmp	r3, #80	; 0x50
 800391c:	d82a      	bhi.n	8003974 <HAL_CAN_IRQHandler+0x334>
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d019      	beq.n	8003956 <HAL_CAN_IRQHandler+0x316>
 8003922:	2b40      	cmp	r3, #64	; 0x40
 8003924:	d826      	bhi.n	8003974 <HAL_CAN_IRQHandler+0x334>
 8003926:	2b30      	cmp	r3, #48	; 0x30
 8003928:	d010      	beq.n	800394c <HAL_CAN_IRQHandler+0x30c>
 800392a:	2b30      	cmp	r3, #48	; 0x30
 800392c:	d822      	bhi.n	8003974 <HAL_CAN_IRQHandler+0x334>
 800392e:	2b10      	cmp	r3, #16
 8003930:	d002      	beq.n	8003938 <HAL_CAN_IRQHandler+0x2f8>
 8003932:	2b20      	cmp	r3, #32
 8003934:	d005      	beq.n	8003942 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003936:	e01d      	b.n	8003974 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	f043 0308 	orr.w	r3, r3, #8
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003940:	e019      	b.n	8003976 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	f043 0310 	orr.w	r3, r3, #16
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800394a:	e014      	b.n	8003976 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	f043 0320 	orr.w	r3, r3, #32
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003954:	e00f      	b.n	8003976 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800395e:	e00a      	b.n	8003976 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003968:	e005      	b.n	8003976 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003972:	e000      	b.n	8003976 <HAL_CAN_IRQHandler+0x336>
            break;
 8003974:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699a      	ldr	r2, [r3, #24]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003984:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2204      	movs	r2, #4
 800398c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f870 	bl	8003a86 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80039a6:	bf00      	nop
 80039a8:	3728      	adds	r7, #40	; 0x28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aca:	4a04      	ldr	r2, [pc, #16]	; (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	60d3      	str	r3, [r2, #12]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	f003 0307 	and.w	r3, r3, #7
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	db0b      	blt.n	8003b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	f003 021f 	and.w	r2, r3, #31
 8003b14:	4906      	ldr	r1, [pc, #24]	; (8003b30 <__NVIC_EnableIRQ+0x34>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	db0a      	blt.n	8003b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	490c      	ldr	r1, [pc, #48]	; (8003b80 <__NVIC_SetPriority+0x4c>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	440b      	add	r3, r1
 8003b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b5c:	e00a      	b.n	8003b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4908      	ldr	r1, [pc, #32]	; (8003b84 <__NVIC_SetPriority+0x50>)
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3b04      	subs	r3, #4
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	440b      	add	r3, r1
 8003b72:	761a      	strb	r2, [r3, #24]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	e000e100 	.word	0xe000e100
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	bf28      	it	cs
 8003ba6:	2304      	movcs	r3, #4
 8003ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d902      	bls.n	8003bb8 <NVIC_EncodePriority+0x30>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3b03      	subs	r3, #3
 8003bb6:	e000      	b.n	8003bba <NVIC_EncodePriority+0x32>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	401a      	ands	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	43d9      	mvns	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	4313      	orrs	r3, r2
         );
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bfc:	d301      	bcc.n	8003c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e00f      	b.n	8003c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c02:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <SysTick_Config+0x40>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c0a:	210f      	movs	r1, #15
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c10:	f7ff ff90 	bl	8003b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <SysTick_Config+0x40>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c1a:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <SysTick_Config+0x40>)
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	e000e010 	.word	0xe000e010

08003c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ff2d 	bl	8003a98 <__NVIC_SetPriorityGrouping>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c58:	f7ff ff42 	bl	8003ae0 <__NVIC_GetPriorityGrouping>
 8003c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7ff ff90 	bl	8003b88 <NVIC_EncodePriority>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff5f 	bl	8003b34 <__NVIC_SetPriority>
}
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff35 	bl	8003afc <__NVIC_EnableIRQ>
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ffa2 	bl	8003bec <SysTick_Config>
 8003ca8:	4603      	mov	r3, r0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d005      	beq.n	8003cd6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2204      	movs	r2, #4
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
 8003cd4:	e051      	b.n	8003d7a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 020e 	bic.w	r2, r2, #14
 8003ce4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0201 	bic.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <HAL_DMA_Abort_IT+0xd0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d029      	beq.n	8003d54 <HAL_DMA_Abort_IT+0xa0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <HAL_DMA_Abort_IT+0xd4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d022      	beq.n	8003d50 <HAL_DMA_Abort_IT+0x9c>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_DMA_Abort_IT+0xd8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d01a      	beq.n	8003d4a <HAL_DMA_Abort_IT+0x96>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <HAL_DMA_Abort_IT+0xdc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d012      	beq.n	8003d44 <HAL_DMA_Abort_IT+0x90>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1c      	ldr	r2, [pc, #112]	; (8003d94 <HAL_DMA_Abort_IT+0xe0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00a      	beq.n	8003d3e <HAL_DMA_Abort_IT+0x8a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1a      	ldr	r2, [pc, #104]	; (8003d98 <HAL_DMA_Abort_IT+0xe4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d102      	bne.n	8003d38 <HAL_DMA_Abort_IT+0x84>
 8003d32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d36:	e00e      	b.n	8003d56 <HAL_DMA_Abort_IT+0xa2>
 8003d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d3c:	e00b      	b.n	8003d56 <HAL_DMA_Abort_IT+0xa2>
 8003d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d42:	e008      	b.n	8003d56 <HAL_DMA_Abort_IT+0xa2>
 8003d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d48:	e005      	b.n	8003d56 <HAL_DMA_Abort_IT+0xa2>
 8003d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d4e:	e002      	b.n	8003d56 <HAL_DMA_Abort_IT+0xa2>
 8003d50:	2310      	movs	r3, #16
 8003d52:	e000      	b.n	8003d56 <HAL_DMA_Abort_IT+0xa2>
 8003d54:	2301      	movs	r3, #1
 8003d56:	4a11      	ldr	r2, [pc, #68]	; (8003d9c <HAL_DMA_Abort_IT+0xe8>)
 8003d58:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
    } 
  }
  return status;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40020008 	.word	0x40020008
 8003d88:	4002001c 	.word	0x4002001c
 8003d8c:	40020030 	.word	0x40020030
 8003d90:	40020044 	.word	0x40020044
 8003d94:	40020058 	.word	0x40020058
 8003d98:	4002006c 	.word	0x4002006c
 8003d9c:	40020000 	.word	0x40020000

08003da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b08b      	sub	sp, #44	; 0x2c
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dae:	2300      	movs	r3, #0
 8003db0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db2:	e169      	b.n	8004088 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003db4:	2201      	movs	r2, #1
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69fa      	ldr	r2, [r7, #28]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	f040 8158 	bne.w	8004082 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4a9a      	ldr	r2, [pc, #616]	; (8004040 <HAL_GPIO_Init+0x2a0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d05e      	beq.n	8003e9a <HAL_GPIO_Init+0xfa>
 8003ddc:	4a98      	ldr	r2, [pc, #608]	; (8004040 <HAL_GPIO_Init+0x2a0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d875      	bhi.n	8003ece <HAL_GPIO_Init+0x12e>
 8003de2:	4a98      	ldr	r2, [pc, #608]	; (8004044 <HAL_GPIO_Init+0x2a4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d058      	beq.n	8003e9a <HAL_GPIO_Init+0xfa>
 8003de8:	4a96      	ldr	r2, [pc, #600]	; (8004044 <HAL_GPIO_Init+0x2a4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d86f      	bhi.n	8003ece <HAL_GPIO_Init+0x12e>
 8003dee:	4a96      	ldr	r2, [pc, #600]	; (8004048 <HAL_GPIO_Init+0x2a8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d052      	beq.n	8003e9a <HAL_GPIO_Init+0xfa>
 8003df4:	4a94      	ldr	r2, [pc, #592]	; (8004048 <HAL_GPIO_Init+0x2a8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d869      	bhi.n	8003ece <HAL_GPIO_Init+0x12e>
 8003dfa:	4a94      	ldr	r2, [pc, #592]	; (800404c <HAL_GPIO_Init+0x2ac>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d04c      	beq.n	8003e9a <HAL_GPIO_Init+0xfa>
 8003e00:	4a92      	ldr	r2, [pc, #584]	; (800404c <HAL_GPIO_Init+0x2ac>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d863      	bhi.n	8003ece <HAL_GPIO_Init+0x12e>
 8003e06:	4a92      	ldr	r2, [pc, #584]	; (8004050 <HAL_GPIO_Init+0x2b0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d046      	beq.n	8003e9a <HAL_GPIO_Init+0xfa>
 8003e0c:	4a90      	ldr	r2, [pc, #576]	; (8004050 <HAL_GPIO_Init+0x2b0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d85d      	bhi.n	8003ece <HAL_GPIO_Init+0x12e>
 8003e12:	2b12      	cmp	r3, #18
 8003e14:	d82a      	bhi.n	8003e6c <HAL_GPIO_Init+0xcc>
 8003e16:	2b12      	cmp	r3, #18
 8003e18:	d859      	bhi.n	8003ece <HAL_GPIO_Init+0x12e>
 8003e1a:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <HAL_GPIO_Init+0x80>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e9b 	.word	0x08003e9b
 8003e24:	08003e75 	.word	0x08003e75
 8003e28:	08003e87 	.word	0x08003e87
 8003e2c:	08003ec9 	.word	0x08003ec9
 8003e30:	08003ecf 	.word	0x08003ecf
 8003e34:	08003ecf 	.word	0x08003ecf
 8003e38:	08003ecf 	.word	0x08003ecf
 8003e3c:	08003ecf 	.word	0x08003ecf
 8003e40:	08003ecf 	.word	0x08003ecf
 8003e44:	08003ecf 	.word	0x08003ecf
 8003e48:	08003ecf 	.word	0x08003ecf
 8003e4c:	08003ecf 	.word	0x08003ecf
 8003e50:	08003ecf 	.word	0x08003ecf
 8003e54:	08003ecf 	.word	0x08003ecf
 8003e58:	08003ecf 	.word	0x08003ecf
 8003e5c:	08003ecf 	.word	0x08003ecf
 8003e60:	08003ecf 	.word	0x08003ecf
 8003e64:	08003e7d 	.word	0x08003e7d
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	4a79      	ldr	r2, [pc, #484]	; (8004054 <HAL_GPIO_Init+0x2b4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e72:	e02c      	b.n	8003ece <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	623b      	str	r3, [r7, #32]
          break;
 8003e7a:	e029      	b.n	8003ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	3304      	adds	r3, #4
 8003e82:	623b      	str	r3, [r7, #32]
          break;
 8003e84:	e024      	b.n	8003ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	623b      	str	r3, [r7, #32]
          break;
 8003e8e:	e01f      	b.n	8003ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	330c      	adds	r3, #12
 8003e96:	623b      	str	r3, [r7, #32]
          break;
 8003e98:	e01a      	b.n	8003ed0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d102      	bne.n	8003ea8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	623b      	str	r3, [r7, #32]
          break;
 8003ea6:	e013      	b.n	8003ed0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	611a      	str	r2, [r3, #16]
          break;
 8003eba:	e009      	b.n	8003ed0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	615a      	str	r2, [r3, #20]
          break;
 8003ec6:	e003      	b.n	8003ed0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	623b      	str	r3, [r7, #32]
          break;
 8003ecc:	e000      	b.n	8003ed0 <HAL_GPIO_Init+0x130>
          break;
 8003ece:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2bff      	cmp	r3, #255	; 0xff
 8003ed4:	d801      	bhi.n	8003eda <HAL_GPIO_Init+0x13a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	e001      	b.n	8003ede <HAL_GPIO_Init+0x13e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3304      	adds	r3, #4
 8003ede:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2bff      	cmp	r3, #255	; 0xff
 8003ee4:	d802      	bhi.n	8003eec <HAL_GPIO_Init+0x14c>
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	e002      	b.n	8003ef2 <HAL_GPIO_Init+0x152>
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	3b08      	subs	r3, #8
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	210f      	movs	r1, #15
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	401a      	ands	r2, r3
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80b1 	beq.w	8004082 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f20:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4a4c      	ldr	r2, [pc, #304]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6193      	str	r3, [r2, #24]
 8003f2c:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <HAL_GPIO_Init+0x2b8>)
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f38:	4a48      	ldr	r2, [pc, #288]	; (800405c <HAL_GPIO_Init+0x2bc>)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	220f      	movs	r2, #15
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a40      	ldr	r2, [pc, #256]	; (8004060 <HAL_GPIO_Init+0x2c0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_GPIO_Init+0x1ec>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a3f      	ldr	r2, [pc, #252]	; (8004064 <HAL_GPIO_Init+0x2c4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00d      	beq.n	8003f88 <HAL_GPIO_Init+0x1e8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a3e      	ldr	r2, [pc, #248]	; (8004068 <HAL_GPIO_Init+0x2c8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d007      	beq.n	8003f84 <HAL_GPIO_Init+0x1e4>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a3d      	ldr	r2, [pc, #244]	; (800406c <HAL_GPIO_Init+0x2cc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_GPIO_Init+0x1e0>
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e006      	b.n	8003f8e <HAL_GPIO_Init+0x1ee>
 8003f80:	2304      	movs	r3, #4
 8003f82:	e004      	b.n	8003f8e <HAL_GPIO_Init+0x1ee>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e002      	b.n	8003f8e <HAL_GPIO_Init+0x1ee>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_GPIO_Init+0x1ee>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	f002 0203 	and.w	r2, r2, #3
 8003f94:	0092      	lsls	r2, r2, #2
 8003f96:	4093      	lsls	r3, r2
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f9e:	492f      	ldr	r1, [pc, #188]	; (800405c <HAL_GPIO_Init+0x2bc>)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d006      	beq.n	8003fc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fb8:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	492c      	ldr	r1, [pc, #176]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	600b      	str	r3, [r1, #0]
 8003fc4:	e006      	b.n	8003fd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fc6:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	4928      	ldr	r1, [pc, #160]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fe0:	4b23      	ldr	r3, [pc, #140]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	4922      	ldr	r1, [pc, #136]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
 8003fec:	e006      	b.n	8003ffc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fee:	4b20      	ldr	r3, [pc, #128]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	491e      	ldr	r1, [pc, #120]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d006      	beq.n	8004016 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004008:	4b19      	ldr	r3, [pc, #100]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	4918      	ldr	r1, [pc, #96]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	608b      	str	r3, [r1, #8]
 8004014:	e006      	b.n	8004024 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004016:	4b16      	ldr	r3, [pc, #88]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	43db      	mvns	r3, r3
 800401e:	4914      	ldr	r1, [pc, #80]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8004020:	4013      	ands	r3, r2
 8004022:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d021      	beq.n	8004074 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	490e      	ldr	r1, [pc, #56]	; (8004070 <HAL_GPIO_Init+0x2d0>)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	60cb      	str	r3, [r1, #12]
 800403c:	e021      	b.n	8004082 <HAL_GPIO_Init+0x2e2>
 800403e:	bf00      	nop
 8004040:	10320000 	.word	0x10320000
 8004044:	10310000 	.word	0x10310000
 8004048:	10220000 	.word	0x10220000
 800404c:	10210000 	.word	0x10210000
 8004050:	10120000 	.word	0x10120000
 8004054:	10110000 	.word	0x10110000
 8004058:	40021000 	.word	0x40021000
 800405c:	40010000 	.word	0x40010000
 8004060:	40010800 	.word	0x40010800
 8004064:	40010c00 	.word	0x40010c00
 8004068:	40011000 	.word	0x40011000
 800406c:	40011400 	.word	0x40011400
 8004070:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_GPIO_Init+0x304>)
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	43db      	mvns	r3, r3
 800407c:	4909      	ldr	r1, [pc, #36]	; (80040a4 <HAL_GPIO_Init+0x304>)
 800407e:	4013      	ands	r3, r2
 8004080:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	3301      	adds	r3, #1
 8004086:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	fa22 f303 	lsr.w	r3, r2, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	f47f ae8e 	bne.w	8003db4 <HAL_GPIO_Init+0x14>
  }
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	372c      	adds	r7, #44	; 0x2c
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	40010400 	.word	0x40010400

080040a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
 80040b4:	4613      	mov	r3, r2
 80040b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040b8:	787b      	ldrb	r3, [r7, #1]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040c4:	e003      	b.n	80040ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040c6:	887b      	ldrh	r3, [r7, #2]
 80040c8:	041a      	lsls	r2, r3, #16
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	611a      	str	r2, [r3, #16]
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4013      	ands	r3, r2
 80040f0:	041a      	lsls	r2, r3, #16
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	43d9      	mvns	r1, r3
 80040f6:	887b      	ldrh	r3, [r7, #2]
 80040f8:	400b      	ands	r3, r1
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	611a      	str	r2, [r3, #16]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
	...

0800410c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e272      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8087 	beq.w	800423a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800412c:	4b92      	ldr	r3, [pc, #584]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b04      	cmp	r3, #4
 8004136:	d00c      	beq.n	8004152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004138:	4b8f      	ldr	r3, [pc, #572]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d112      	bne.n	800416a <HAL_RCC_OscConfig+0x5e>
 8004144:	4b8c      	ldr	r3, [pc, #560]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d10b      	bne.n	800416a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004152:	4b89      	ldr	r3, [pc, #548]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d06c      	beq.n	8004238 <HAL_RCC_OscConfig+0x12c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d168      	bne.n	8004238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e24c      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004172:	d106      	bne.n	8004182 <HAL_RCC_OscConfig+0x76>
 8004174:	4b80      	ldr	r3, [pc, #512]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a7f      	ldr	r2, [pc, #508]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800417a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	e02e      	b.n	80041e0 <HAL_RCC_OscConfig+0xd4>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x98>
 800418a:	4b7b      	ldr	r3, [pc, #492]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a7a      	ldr	r2, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	4b78      	ldr	r3, [pc, #480]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a77      	ldr	r2, [pc, #476]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800419c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e01d      	b.n	80041e0 <HAL_RCC_OscConfig+0xd4>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCC_OscConfig+0xbc>
 80041ae:	4b72      	ldr	r3, [pc, #456]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a71      	ldr	r2, [pc, #452]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	4b6f      	ldr	r3, [pc, #444]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a6e      	ldr	r2, [pc, #440]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e00b      	b.n	80041e0 <HAL_RCC_OscConfig+0xd4>
 80041c8:	4b6b      	ldr	r3, [pc, #428]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a6a      	ldr	r2, [pc, #424]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	4b68      	ldr	r3, [pc, #416]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a67      	ldr	r2, [pc, #412]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80041da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d013      	beq.n	8004210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fe ff12 	bl	8003010 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041f0:	f7fe ff0e 	bl	8003010 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	; 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e200      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	4b5d      	ldr	r3, [pc, #372]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCC_OscConfig+0xe4>
 800420e:	e014      	b.n	800423a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004210:	f7fe fefe 	bl	8003010 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004218:	f7fe fefa 	bl	8003010 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e1ec      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422a:	4b53      	ldr	r3, [pc, #332]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x10c>
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d063      	beq.n	800430e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004246:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00b      	beq.n	800426a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004252:	4b49      	ldr	r3, [pc, #292]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b08      	cmp	r3, #8
 800425c:	d11c      	bne.n	8004298 <HAL_RCC_OscConfig+0x18c>
 800425e:	4b46      	ldr	r3, [pc, #280]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d116      	bne.n	8004298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800426a:	4b43      	ldr	r3, [pc, #268]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_RCC_OscConfig+0x176>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d001      	beq.n	8004282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e1c0      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004282:	4b3d      	ldr	r3, [pc, #244]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4939      	ldr	r1, [pc, #228]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004296:	e03a      	b.n	800430e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d020      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a0:	4b36      	ldr	r3, [pc, #216]	; (800437c <HAL_RCC_OscConfig+0x270>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a6:	f7fe feb3 	bl	8003010 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ae:	f7fe feaf 	bl	8003010 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e1a1      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c0:	4b2d      	ldr	r3, [pc, #180]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0f0      	beq.n	80042ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042cc:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4927      	ldr	r1, [pc, #156]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	600b      	str	r3, [r1, #0]
 80042e0:	e015      	b.n	800430e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e2:	4b26      	ldr	r3, [pc, #152]	; (800437c <HAL_RCC_OscConfig+0x270>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe fe92 	bl	8003010 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f0:	f7fe fe8e 	bl	8003010 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e180      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f0      	bne.n	80042f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d03a      	beq.n	8004390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d019      	beq.n	8004356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004322:	4b17      	ldr	r3, [pc, #92]	; (8004380 <HAL_RCC_OscConfig+0x274>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004328:	f7fe fe72 	bl	8003010 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004330:	f7fe fe6e 	bl	8003010 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e160      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004342:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <HAL_RCC_OscConfig+0x26c>)
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800434e:	2001      	movs	r0, #1
 8004350:	f000 faa6 	bl	80048a0 <RCC_Delay>
 8004354:	e01c      	b.n	8004390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <HAL_RCC_OscConfig+0x274>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435c:	f7fe fe58 	bl	8003010 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004362:	e00f      	b.n	8004384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004364:	f7fe fe54 	bl	8003010 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d908      	bls.n	8004384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e146      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	42420000 	.word	0x42420000
 8004380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004384:	4b92      	ldr	r3, [pc, #584]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e9      	bne.n	8004364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80a6 	beq.w	80044ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800439e:	2300      	movs	r3, #0
 80043a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a2:	4b8b      	ldr	r3, [pc, #556]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ae:	4b88      	ldr	r3, [pc, #544]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	4a87      	ldr	r2, [pc, #540]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b8:	61d3      	str	r3, [r2, #28]
 80043ba:	4b85      	ldr	r3, [pc, #532]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c2:	60bb      	str	r3, [r7, #8]
 80043c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ca:	4b82      	ldr	r3, [pc, #520]	; (80045d4 <HAL_RCC_OscConfig+0x4c8>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d118      	bne.n	8004408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d6:	4b7f      	ldr	r3, [pc, #508]	; (80045d4 <HAL_RCC_OscConfig+0x4c8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7e      	ldr	r2, [pc, #504]	; (80045d4 <HAL_RCC_OscConfig+0x4c8>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e2:	f7fe fe15 	bl	8003010 <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e8:	e008      	b.n	80043fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ea:	f7fe fe11 	bl	8003010 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b64      	cmp	r3, #100	; 0x64
 80043f6:	d901      	bls.n	80043fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e103      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fc:	4b75      	ldr	r3, [pc, #468]	; (80045d4 <HAL_RCC_OscConfig+0x4c8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <HAL_RCC_OscConfig+0x312>
 8004410:	4b6f      	ldr	r3, [pc, #444]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	4a6e      	ldr	r2, [pc, #440]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004416:	f043 0301 	orr.w	r3, r3, #1
 800441a:	6213      	str	r3, [r2, #32]
 800441c:	e02d      	b.n	800447a <HAL_RCC_OscConfig+0x36e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x334>
 8004426:	4b6a      	ldr	r3, [pc, #424]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	4a69      	ldr	r2, [pc, #420]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	6213      	str	r3, [r2, #32]
 8004432:	4b67      	ldr	r3, [pc, #412]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	4a66      	ldr	r2, [pc, #408]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	6213      	str	r3, [r2, #32]
 800443e:	e01c      	b.n	800447a <HAL_RCC_OscConfig+0x36e>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b05      	cmp	r3, #5
 8004446:	d10c      	bne.n	8004462 <HAL_RCC_OscConfig+0x356>
 8004448:	4b61      	ldr	r3, [pc, #388]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4a60      	ldr	r2, [pc, #384]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	6213      	str	r3, [r2, #32]
 8004454:	4b5e      	ldr	r3, [pc, #376]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	4a5d      	ldr	r2, [pc, #372]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800445a:	f043 0301 	orr.w	r3, r3, #1
 800445e:	6213      	str	r3, [r2, #32]
 8004460:	e00b      	b.n	800447a <HAL_RCC_OscConfig+0x36e>
 8004462:	4b5b      	ldr	r3, [pc, #364]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	4a5a      	ldr	r2, [pc, #360]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	6213      	str	r3, [r2, #32]
 800446e:	4b58      	ldr	r3, [pc, #352]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	4a57      	ldr	r2, [pc, #348]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d015      	beq.n	80044ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004482:	f7fe fdc5 	bl	8003010 <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448a:	f7fe fdc1 	bl	8003010 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e0b1      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a0:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ee      	beq.n	800448a <HAL_RCC_OscConfig+0x37e>
 80044ac:	e014      	b.n	80044d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7fe fdaf 	bl	8003010 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b4:	e00a      	b.n	80044cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b6:	f7fe fdab 	bl	8003010 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e09b      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044cc:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1ee      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d105      	bne.n	80044ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044de:	4b3c      	ldr	r3, [pc, #240]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8087 	beq.w	8004602 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044f4:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 030c 	and.w	r3, r3, #12
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d061      	beq.n	80045c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d146      	bne.n	8004596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004508:	4b33      	ldr	r3, [pc, #204]	; (80045d8 <HAL_RCC_OscConfig+0x4cc>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7fe fd7f 	bl	8003010 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004516:	f7fe fd7b 	bl	8003010 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e06d      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004528:	4b29      	ldr	r3, [pc, #164]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d108      	bne.n	8004550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800453e:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	4921      	ldr	r1, [pc, #132]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800454c:	4313      	orrs	r3, r2
 800454e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004550:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a19      	ldr	r1, [r3, #32]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	430b      	orrs	r3, r1
 8004562:	491b      	ldr	r1, [pc, #108]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCC_OscConfig+0x4cc>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456e:	f7fe fd4f 	bl	8003010 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004576:	f7fe fd4b 	bl	8003010 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e03d      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x46a>
 8004594:	e035      	b.n	8004602 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004596:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <HAL_RCC_OscConfig+0x4cc>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fe fd38 	bl	8003010 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fe fd34 	bl	8003010 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e026      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x498>
 80045c2:	e01e      	b.n	8004602 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e019      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
 80045d0:	40021000 	.word	0x40021000
 80045d4:	40007000 	.word	0x40007000
 80045d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <HAL_RCC_OscConfig+0x500>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d001      	beq.n	8004602 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000

08004610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0d0      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d910      	bls.n	8004654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 0207 	bic.w	r2, r3, #7
 800463a:	4965      	ldr	r1, [pc, #404]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	4313      	orrs	r3, r2
 8004640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0b8      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d005      	beq.n	8004678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800466c:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a58      	ldr	r2, [pc, #352]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004672:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004684:	4b53      	ldr	r3, [pc, #332]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800468a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800468e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b50      	ldr	r3, [pc, #320]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	494d      	ldr	r1, [pc, #308]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d040      	beq.n	8004730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b6:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d115      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e07f      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ce:	4b41      	ldr	r3, [pc, #260]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e073      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046de:	4b3d      	ldr	r3, [pc, #244]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e06b      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ee:	4b39      	ldr	r3, [pc, #228]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f023 0203 	bic.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	4936      	ldr	r1, [pc, #216]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004700:	f7fe fc86 	bl	8003010 <HAL_GetTick>
 8004704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004706:	e00a      	b.n	800471e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fe fc82 	bl	8003010 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e053      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	4b2d      	ldr	r3, [pc, #180]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 020c 	and.w	r2, r3, #12
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	429a      	cmp	r2, r3
 800472e:	d1eb      	bne.n	8004708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d210      	bcs.n	8004760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 0207 	bic.w	r2, r3, #7
 8004746:	4922      	ldr	r1, [pc, #136]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e032      	b.n	80047c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800476c:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4916      	ldr	r1, [pc, #88]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0308 	and.w	r3, r3, #8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	490e      	ldr	r1, [pc, #56]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	4313      	orrs	r3, r2
 800479c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800479e:	f000 f821 	bl	80047e4 <HAL_RCC_GetSysClockFreq>
 80047a2:	4602      	mov	r2, r0
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	091b      	lsrs	r3, r3, #4
 80047aa:	f003 030f 	and.w	r3, r3, #15
 80047ae:	490a      	ldr	r1, [pc, #40]	; (80047d8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b0:	5ccb      	ldrb	r3, [r1, r3]
 80047b2:	fa22 f303 	lsr.w	r3, r2, r3
 80047b6:	4a09      	ldr	r2, [pc, #36]	; (80047dc <HAL_RCC_ClockConfig+0x1cc>)
 80047b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <HAL_RCC_ClockConfig+0x1d0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fbe4 	bl	8002f8c <HAL_InitTick>

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40022000 	.word	0x40022000
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08005eb0 	.word	0x08005eb0
 80047dc:	20000018 	.word	0x20000018
 80047e0:	2000001c 	.word	0x2000001c

080047e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e4:	b490      	push	{r4, r7}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047ea:	4b29      	ldr	r3, [pc, #164]	; (8004890 <HAL_RCC_GetSysClockFreq+0xac>)
 80047ec:	1d3c      	adds	r4, r7, #4
 80047ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80047f4:	f240 2301 	movw	r3, #513	; 0x201
 80047f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	2300      	movs	r3, #0
 8004800:	61bb      	str	r3, [r7, #24]
 8004802:	2300      	movs	r3, #0
 8004804:	627b      	str	r3, [r7, #36]	; 0x24
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800480e:	4b21      	ldr	r3, [pc, #132]	; (8004894 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b04      	cmp	r3, #4
 800481c:	d002      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x40>
 800481e:	2b08      	cmp	r3, #8
 8004820:	d003      	beq.n	800482a <HAL_RCC_GetSysClockFreq+0x46>
 8004822:	e02b      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004824:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004826:	623b      	str	r3, [r7, #32]
      break;
 8004828:	e02b      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	0c9b      	lsrs	r3, r3, #18
 800482e:	f003 030f 	and.w	r3, r3, #15
 8004832:	3328      	adds	r3, #40	; 0x28
 8004834:	443b      	add	r3, r7
 8004836:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800483a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d012      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	0c5b      	lsrs	r3, r3, #17
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	3328      	adds	r3, #40	; 0x28
 8004852:	443b      	add	r3, r7
 8004854:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004858:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	4a0e      	ldr	r2, [pc, #56]	; (8004898 <HAL_RCC_GetSysClockFreq+0xb4>)
 800485e:	fb03 f202 	mul.w	r2, r3, r2
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
 800486a:	e004      	b.n	8004876 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	4a0b      	ldr	r2, [pc, #44]	; (800489c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004870:	fb02 f303 	mul.w	r3, r2, r3
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	623b      	str	r3, [r7, #32]
      break;
 800487a:	e002      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800487c:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_RCC_GetSysClockFreq+0xb4>)
 800487e:	623b      	str	r3, [r7, #32]
      break;
 8004880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004882:	6a3b      	ldr	r3, [r7, #32]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	; 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bc90      	pop	{r4, r7}
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	08005ea0 	.word	0x08005ea0
 8004894:	40021000 	.word	0x40021000
 8004898:	007a1200 	.word	0x007a1200
 800489c:	003d0900 	.word	0x003d0900

080048a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048a8:	4b0a      	ldr	r3, [pc, #40]	; (80048d4 <RCC_Delay+0x34>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <RCC_Delay+0x38>)
 80048ae:	fba2 2303 	umull	r2, r3, r2, r3
 80048b2:	0a5b      	lsrs	r3, r3, #9
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048bc:	bf00      	nop
  }
  while (Delay --);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1e5a      	subs	r2, r3, #1
 80048c2:	60fa      	str	r2, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f9      	bne.n	80048bc <RCC_Delay+0x1c>
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	20000018 	.word	0x20000018
 80048d8:	10624dd3 	.word	0x10624dd3

080048dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e076      	b.n	80049dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d108      	bne.n	8004908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048fe:	d009      	beq.n	8004914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	61da      	str	r2, [r3, #28]
 8004906:	e005      	b.n	8004914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d106      	bne.n	8004934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fe f9e4 	bl	8002cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800494a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004998:	ea42 0103 	orr.w	r1, r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	0c1a      	lsrs	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f002 0204 	and.w	r2, r2, #4
 80049ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69da      	ldr	r2, [r3, #28]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	4613      	mov	r3, r2
 80049f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_SPI_Transmit+0x22>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e126      	b.n	8004c54 <HAL_SPI_Transmit+0x270>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a0e:	f7fe faff 	bl	8003010 <HAL_GetTick>
 8004a12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d002      	beq.n	8004a2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
 8004a26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a28:	e10b      	b.n	8004c42 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_SPI_Transmit+0x52>
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d102      	bne.n	8004a3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a3a:	e102      	b.n	8004c42 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	88fa      	ldrh	r2, [r7, #6]
 8004a5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a82:	d10f      	bne.n	8004aa4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aa2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d007      	beq.n	8004ac2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aca:	d14b      	bne.n	8004b64 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_SPI_Transmit+0xf6>
 8004ad4:	8afb      	ldrh	r3, [r7, #22]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d13e      	bne.n	8004b58 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004afe:	e02b      	b.n	8004b58 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d112      	bne.n	8004b34 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	881a      	ldrh	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	1c9a      	adds	r2, r3, #2
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b32:	e011      	b.n	8004b58 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b34:	f7fe fa6c 	bl	8003010 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d803      	bhi.n	8004b4c <HAL_SPI_Transmit+0x168>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4a:	d102      	bne.n	8004b52 <HAL_SPI_Transmit+0x16e>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b56:	e074      	b.n	8004c42 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1ce      	bne.n	8004b00 <HAL_SPI_Transmit+0x11c>
 8004b62:	e04c      	b.n	8004bfe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_SPI_Transmit+0x18e>
 8004b6c:	8afb      	ldrh	r3, [r7, #22]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d140      	bne.n	8004bf4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	7812      	ldrb	r2, [r2, #0]
 8004b7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b98:	e02c      	b.n	8004bf4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d113      	bne.n	8004bd0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	7812      	ldrb	r2, [r2, #0]
 8004bb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bce:	e011      	b.n	8004bf4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bd0:	f7fe fa1e 	bl	8003010 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d803      	bhi.n	8004be8 <HAL_SPI_Transmit+0x204>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d102      	bne.n	8004bee <HAL_SPI_Transmit+0x20a>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bf2:	e026      	b.n	8004c42 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1cd      	bne.n	8004b9a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 fcbc 	bl	8005580 <SPI_EndRxTxTransaction>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d002      	beq.n	8004c14 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e000      	b.n	8004c42 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c52:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c78:	d112      	bne.n	8004ca0 <HAL_SPI_Receive+0x44>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10e      	bne.n	8004ca0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2204      	movs	r2, #4
 8004c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f8f1 	bl	8004e7e <HAL_SPI_TransmitReceive>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	e0ea      	b.n	8004e76 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d101      	bne.n	8004cae <HAL_SPI_Receive+0x52>
 8004caa:	2302      	movs	r3, #2
 8004cac:	e0e3      	b.n	8004e76 <HAL_SPI_Receive+0x21a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb6:	f7fe f9ab 	bl	8003010 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d002      	beq.n	8004cce <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ccc:	e0ca      	b.n	8004e64 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Receive+0x7e>
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cde:	e0c1      	b.n	8004e64 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	88fa      	ldrh	r2, [r7, #6]
 8004cf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d26:	d10f      	bne.n	8004d48 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d46:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b40      	cmp	r3, #64	; 0x40
 8004d54:	d007      	beq.n	8004d66 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d64:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d162      	bne.n	8004e34 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d6e:	e02e      	b.n	8004dce <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d115      	bne.n	8004daa <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f103 020c 	add.w	r2, r3, #12
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	7812      	ldrb	r2, [r2, #0]
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004da8:	e011      	b.n	8004dce <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004daa:	f7fe f931 	bl	8003010 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d803      	bhi.n	8004dc2 <HAL_SPI_Receive+0x166>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d102      	bne.n	8004dc8 <HAL_SPI_Receive+0x16c>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dcc:	e04a      	b.n	8004e64 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1cb      	bne.n	8004d70 <HAL_SPI_Receive+0x114>
 8004dd8:	e031      	b.n	8004e3e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d113      	bne.n	8004e10 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	b292      	uxth	r2, r2
 8004df4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e0e:	e011      	b.n	8004e34 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e10:	f7fe f8fe 	bl	8003010 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d803      	bhi.n	8004e28 <HAL_SPI_Receive+0x1cc>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d102      	bne.n	8004e2e <HAL_SPI_Receive+0x1d2>
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e32:	e017      	b.n	8004e64 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1cd      	bne.n	8004dda <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	6839      	ldr	r1, [r7, #0]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 fb4a 	bl	80054dc <SPI_EndRxTransaction>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2220      	movs	r2, #32
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	75fb      	strb	r3, [r7, #23]
 8004e60:	e000      	b.n	8004e64 <HAL_SPI_Receive+0x208>
  }

error :
 8004e62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b08c      	sub	sp, #48	; 0x30
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_SPI_TransmitReceive+0x26>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e18a      	b.n	80051ba <HAL_SPI_TransmitReceive+0x33c>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eac:	f7fe f8b0 	bl	8003010 <HAL_GetTick>
 8004eb0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ec2:	887b      	ldrh	r3, [r7, #2]
 8004ec4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d00f      	beq.n	8004eee <HAL_SPI_TransmitReceive+0x70>
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed4:	d107      	bne.n	8004ee6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <HAL_SPI_TransmitReceive+0x68>
 8004ede:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d003      	beq.n	8004eee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eec:	e15b      	b.n	80051a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_SPI_TransmitReceive+0x82>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_TransmitReceive+0x82>
 8004efa:	887b      	ldrh	r3, [r7, #2]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d103      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f06:	e14e      	b.n	80051a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d003      	beq.n	8004f1c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2205      	movs	r2, #5
 8004f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	887a      	ldrh	r2, [r7, #2]
 8004f2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	887a      	ldrh	r2, [r7, #2]
 8004f32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	887a      	ldrh	r2, [r7, #2]
 8004f3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d007      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f78:	d178      	bne.n	800506c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_SPI_TransmitReceive+0x10a>
 8004f82:	8b7b      	ldrh	r3, [r7, #26]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d166      	bne.n	8005056 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	881a      	ldrh	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	1c9a      	adds	r2, r3, #2
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fac:	e053      	b.n	8005056 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d11b      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x176>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0x176>
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d113      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	881a      	ldrh	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	1c9a      	adds	r2, r3, #2
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d119      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x1b8>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d014      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	b292      	uxth	r2, r2
 8005018:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	1c9a      	adds	r2, r3, #2
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005032:	2301      	movs	r3, #1
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005036:	f7fd ffeb 	bl	8003010 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005042:	429a      	cmp	r2, r3
 8005044:	d807      	bhi.n	8005056 <HAL_SPI_TransmitReceive+0x1d8>
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d003      	beq.n	8005056 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005054:	e0a7      	b.n	80051a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1a6      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x130>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1a1      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x130>
 800506a:	e07c      	b.n	8005166 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_TransmitReceive+0x1fc>
 8005074:	8b7b      	ldrh	r3, [r7, #26]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d16b      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	7812      	ldrb	r2, [r2, #0]
 8005086:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005096:	b29b      	uxth	r3, r3
 8005098:	3b01      	subs	r3, #1
 800509a:	b29a      	uxth	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a0:	e057      	b.n	8005152 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d11c      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x26c>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d017      	beq.n	80050ea <HAL_SPI_TransmitReceive+0x26c>
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d114      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	7812      	ldrb	r2, [r2, #0]
 80050cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d119      	bne.n	800512c <HAL_SPI_TransmitReceive+0x2ae>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d014      	beq.n	800512c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005128:	2301      	movs	r3, #1
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800512c:	f7fd ff70 	bl	8003010 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005138:	429a      	cmp	r2, r3
 800513a:	d803      	bhi.n	8005144 <HAL_SPI_TransmitReceive+0x2c6>
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005142:	d102      	bne.n	800514a <HAL_SPI_TransmitReceive+0x2cc>
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005150:	e029      	b.n	80051a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1a2      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x224>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d19d      	bne.n	80050a2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fa08 	bl	8005580 <SPI_EndRxTxTransaction>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005182:	e010      	b.n	80051a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10b      	bne.n	80051a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800518c:	2300      	movs	r3, #0
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	617b      	str	r3, [r7, #20]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	e000      	b.n	80051a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3730      	adds	r7, #48	; 0x30
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10f      	bne.n	8005208 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00a      	beq.n	8005208 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	099b      	lsrs	r3, r3, #6
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	4798      	blx	r3
    return;
 8005206:	e0be      	b.n	8005386 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <HAL_SPI_IRQHandler+0x66>
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	09db      	lsrs	r3, r3, #7
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d004      	beq.n	800522a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
    return;
 8005228:	e0ad      	b.n	8005386 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_SPI_IRQHandler+0x80>
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	099b      	lsrs	r3, r3, #6
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a1 	beq.w	8005386 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 809a 	beq.w	8005386 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	099b      	lsrs	r3, r3, #6
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d023      	beq.n	80052a6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b03      	cmp	r3, #3
 8005268:	d011      	beq.n	800528e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	f043 0204 	orr.w	r2, r3, #4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	e00b      	b.n	80052a6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800528e:	2300      	movs	r3, #0
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	693b      	ldr	r3, [r7, #16]
        return;
 80052a4:	e06f      	b.n	8005386 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	095b      	lsrs	r3, r3, #5
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d014      	beq.n	80052dc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	f043 0201 	orr.w	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d04f      	beq.n	8005384 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052f2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d104      	bne.n	8005310 <HAL_SPI_IRQHandler+0x14c>
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	d034      	beq.n	800537a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0203 	bic.w	r2, r2, #3
 800531e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005324:	2b00      	cmp	r3, #0
 8005326:	d011      	beq.n	800534c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532c:	4a17      	ldr	r2, [pc, #92]	; (800538c <HAL_SPI_IRQHandler+0x1c8>)
 800532e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fcbd 	bl	8003cb4 <HAL_DMA_Abort_IT>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005344:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005350:	2b00      	cmp	r3, #0
 8005352:	d016      	beq.n	8005382 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005358:	4a0c      	ldr	r2, [pc, #48]	; (800538c <HAL_SPI_IRQHandler+0x1c8>)
 800535a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005360:	4618      	mov	r0, r3
 8005362:	f7fe fca7 	bl	8003cb4 <HAL_DMA_Abort_IT>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005370:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005378:	e003      	b.n	8005382 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f808 	bl	8005390 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005380:	e000      	b.n	8005384 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8005382:	bf00      	nop
    return;
 8005384:	bf00      	nop
  }
}
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	080053a3 	.word	0x080053a3

08005390 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b084      	sub	sp, #16
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ae:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff ffe7 	bl	8005390 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053dc:	f7fd fe18 	bl	8003010 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	4413      	add	r3, r2
 80053ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053ec:	f7fd fe10 	bl	8003010 <HAL_GetTick>
 80053f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053f2:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	015b      	lsls	r3, r3, #5
 80053f8:	0d1b      	lsrs	r3, r3, #20
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	fb02 f303 	mul.w	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005402:	e054      	b.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d050      	beq.n	80054ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800540c:	f7fd fe00 	bl	8003010 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	429a      	cmp	r2, r3
 800541a:	d902      	bls.n	8005422 <SPI_WaitFlagStateUntilTimeout+0x56>
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d13d      	bne.n	800549e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005430:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800543a:	d111      	bne.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x94>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005444:	d004      	beq.n	8005450 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544e:	d107      	bne.n	8005460 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800545e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005468:	d10f      	bne.n	800548a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e017      	b.n	80054ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4013      	ands	r3, r2
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf0c      	ite	eq
 80054be:	2301      	moveq	r3, #1
 80054c0:	2300      	movne	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d19b      	bne.n	8005404 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3720      	adds	r7, #32
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000018 	.word	0x20000018

080054dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af02      	add	r7, sp, #8
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f0:	d111      	bne.n	8005516 <SPI_EndRxTransaction+0x3a>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fa:	d004      	beq.n	8005506 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d107      	bne.n	8005516 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005514:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800551e:	d117      	bne.n	8005550 <SPI_EndRxTransaction+0x74>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005528:	d112      	bne.n	8005550 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2200      	movs	r2, #0
 8005532:	2101      	movs	r1, #1
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff ff49 	bl	80053cc <SPI_WaitFlagStateUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01a      	beq.n	8005576 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005544:	f043 0220 	orr.w	r2, r3, #32
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e013      	b.n	8005578 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2200      	movs	r2, #0
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff ff36 	bl	80053cc <SPI_WaitFlagStateUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556a:	f043 0220 	orr.w	r2, r3, #32
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e000      	b.n	8005578 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	2180      	movs	r1, #128	; 0x80
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff ff18 	bl	80053cc <SPI_WaitFlagStateUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e000      	b.n	80055b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <sqrt>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	4606      	mov	r6, r0
 80055c0:	460f      	mov	r7, r1
 80055c2:	f000 f841 	bl	8005648 <__ieee754_sqrt>
 80055c6:	4632      	mov	r2, r6
 80055c8:	4604      	mov	r4, r0
 80055ca:	460d      	mov	r5, r1
 80055cc:	463b      	mov	r3, r7
 80055ce:	4630      	mov	r0, r6
 80055d0:	4639      	mov	r1, r7
 80055d2:	f7fb fa11 	bl	80009f8 <__aeabi_dcmpun>
 80055d6:	b990      	cbnz	r0, 80055fe <sqrt+0x42>
 80055d8:	2200      	movs	r2, #0
 80055da:	2300      	movs	r3, #0
 80055dc:	4630      	mov	r0, r6
 80055de:	4639      	mov	r1, r7
 80055e0:	f7fb f9e2 	bl	80009a8 <__aeabi_dcmplt>
 80055e4:	b158      	cbz	r0, 80055fe <sqrt+0x42>
 80055e6:	f000 fc0f 	bl	8005e08 <__errno>
 80055ea:	2321      	movs	r3, #33	; 0x21
 80055ec:	2200      	movs	r2, #0
 80055ee:	6003      	str	r3, [r0, #0]
 80055f0:	2300      	movs	r3, #0
 80055f2:	4610      	mov	r0, r2
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7fb f88f 	bl	8000718 <__aeabi_ddiv>
 80055fa:	4604      	mov	r4, r0
 80055fc:	460d      	mov	r5, r1
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005604 <asinf>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4604      	mov	r4, r0
 8005608:	f000 f8ce 	bl	80057a8 <__ieee754_asinf>
 800560c:	4621      	mov	r1, r4
 800560e:	4605      	mov	r5, r0
 8005610:	4620      	mov	r0, r4
 8005612:	f7fb fd2b 	bl	800106c <__aeabi_fcmpun>
 8005616:	b980      	cbnz	r0, 800563a <asinf+0x36>
 8005618:	4620      	mov	r0, r4
 800561a:	f000 fbed 	bl	8005df8 <fabsf>
 800561e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005622:	f7fb fd19 	bl	8001058 <__aeabi_fcmpgt>
 8005626:	b140      	cbz	r0, 800563a <asinf+0x36>
 8005628:	f000 fbee 	bl	8005e08 <__errno>
 800562c:	2321      	movs	r3, #33	; 0x21
 800562e:	6003      	str	r3, [r0, #0]
 8005630:	4803      	ldr	r0, [pc, #12]	; (8005640 <asinf+0x3c>)
 8005632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005636:	f000 bbe3 	b.w	8005e00 <nanf>
 800563a:	4628      	mov	r0, r5
 800563c:	bd38      	pop	{r3, r4, r5, pc}
 800563e:	bf00      	nop
 8005640:	08005ec0 	.word	0x08005ec0

08005644 <atan2f>:
 8005644:	f000 b9f4 	b.w	8005a30 <__ieee754_atan2f>

08005648 <__ieee754_sqrt>:
 8005648:	f8df c158 	ldr.w	ip, [pc, #344]	; 80057a4 <__ieee754_sqrt+0x15c>
 800564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005650:	ea3c 0c01 	bics.w	ip, ip, r1
 8005654:	4606      	mov	r6, r0
 8005656:	460d      	mov	r5, r1
 8005658:	460c      	mov	r4, r1
 800565a:	460a      	mov	r2, r1
 800565c:	4607      	mov	r7, r0
 800565e:	4603      	mov	r3, r0
 8005660:	d10f      	bne.n	8005682 <__ieee754_sqrt+0x3a>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	f7fa ff2d 	bl	80004c4 <__aeabi_dmul>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	4630      	mov	r0, r6
 8005670:	4629      	mov	r1, r5
 8005672:	f7fa fd71 	bl	8000158 <__adddf3>
 8005676:	4606      	mov	r6, r0
 8005678:	460d      	mov	r5, r1
 800567a:	4630      	mov	r0, r6
 800567c:	4629      	mov	r1, r5
 800567e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005682:	2900      	cmp	r1, #0
 8005684:	dc0e      	bgt.n	80056a4 <__ieee754_sqrt+0x5c>
 8005686:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800568a:	ea5c 0707 	orrs.w	r7, ip, r7
 800568e:	d0f4      	beq.n	800567a <__ieee754_sqrt+0x32>
 8005690:	b141      	cbz	r1, 80056a4 <__ieee754_sqrt+0x5c>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	f7fa fd5d 	bl	8000154 <__aeabi_dsub>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	f7fb f83b 	bl	8000718 <__aeabi_ddiv>
 80056a2:	e7e8      	b.n	8005676 <__ieee754_sqrt+0x2e>
 80056a4:	1521      	asrs	r1, r4, #20
 80056a6:	d075      	beq.n	8005794 <__ieee754_sqrt+0x14c>
 80056a8:	07cc      	lsls	r4, r1, #31
 80056aa:	f04f 0400 	mov.w	r4, #0
 80056ae:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80056b2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80056b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80056ba:	bf5e      	ittt	pl
 80056bc:	0fd9      	lsrpl	r1, r3, #31
 80056be:	005b      	lslpl	r3, r3, #1
 80056c0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80056c4:	0fd9      	lsrs	r1, r3, #31
 80056c6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80056ca:	2516      	movs	r5, #22
 80056cc:	4620      	mov	r0, r4
 80056ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056d2:	107f      	asrs	r7, r7, #1
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	1846      	adds	r6, r0, r1
 80056d8:	4296      	cmp	r6, r2
 80056da:	bfde      	ittt	le
 80056dc:	1b92      	suble	r2, r2, r6
 80056de:	1870      	addle	r0, r6, r1
 80056e0:	1864      	addle	r4, r4, r1
 80056e2:	0052      	lsls	r2, r2, #1
 80056e4:	3d01      	subs	r5, #1
 80056e6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80056ea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80056ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80056f2:	d1f0      	bne.n	80056d6 <__ieee754_sqrt+0x8e>
 80056f4:	4629      	mov	r1, r5
 80056f6:	f04f 0e20 	mov.w	lr, #32
 80056fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80056fe:	4282      	cmp	r2, r0
 8005700:	eb06 0c05 	add.w	ip, r6, r5
 8005704:	dc02      	bgt.n	800570c <__ieee754_sqrt+0xc4>
 8005706:	d113      	bne.n	8005730 <__ieee754_sqrt+0xe8>
 8005708:	459c      	cmp	ip, r3
 800570a:	d811      	bhi.n	8005730 <__ieee754_sqrt+0xe8>
 800570c:	f1bc 0f00 	cmp.w	ip, #0
 8005710:	eb0c 0506 	add.w	r5, ip, r6
 8005714:	da43      	bge.n	800579e <__ieee754_sqrt+0x156>
 8005716:	2d00      	cmp	r5, #0
 8005718:	db41      	blt.n	800579e <__ieee754_sqrt+0x156>
 800571a:	f100 0801 	add.w	r8, r0, #1
 800571e:	1a12      	subs	r2, r2, r0
 8005720:	4640      	mov	r0, r8
 8005722:	459c      	cmp	ip, r3
 8005724:	bf88      	it	hi
 8005726:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800572a:	eba3 030c 	sub.w	r3, r3, ip
 800572e:	4431      	add	r1, r6
 8005730:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005734:	f1be 0e01 	subs.w	lr, lr, #1
 8005738:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800573c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005740:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005744:	d1db      	bne.n	80056fe <__ieee754_sqrt+0xb6>
 8005746:	4313      	orrs	r3, r2
 8005748:	d006      	beq.n	8005758 <__ieee754_sqrt+0x110>
 800574a:	1c48      	adds	r0, r1, #1
 800574c:	bf0b      	itete	eq
 800574e:	4671      	moveq	r1, lr
 8005750:	3101      	addne	r1, #1
 8005752:	3401      	addeq	r4, #1
 8005754:	f021 0101 	bicne.w	r1, r1, #1
 8005758:	1063      	asrs	r3, r4, #1
 800575a:	0849      	lsrs	r1, r1, #1
 800575c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005760:	07e2      	lsls	r2, r4, #31
 8005762:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005766:	bf48      	it	mi
 8005768:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800576c:	460e      	mov	r6, r1
 800576e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005772:	e782      	b.n	800567a <__ieee754_sqrt+0x32>
 8005774:	0ada      	lsrs	r2, r3, #11
 8005776:	3815      	subs	r0, #21
 8005778:	055b      	lsls	r3, r3, #21
 800577a:	2a00      	cmp	r2, #0
 800577c:	d0fa      	beq.n	8005774 <__ieee754_sqrt+0x12c>
 800577e:	02d5      	lsls	r5, r2, #11
 8005780:	d50a      	bpl.n	8005798 <__ieee754_sqrt+0x150>
 8005782:	f1c1 0420 	rsb	r4, r1, #32
 8005786:	fa23 f404 	lsr.w	r4, r3, r4
 800578a:	1e4d      	subs	r5, r1, #1
 800578c:	408b      	lsls	r3, r1
 800578e:	4322      	orrs	r2, r4
 8005790:	1b41      	subs	r1, r0, r5
 8005792:	e789      	b.n	80056a8 <__ieee754_sqrt+0x60>
 8005794:	4608      	mov	r0, r1
 8005796:	e7f0      	b.n	800577a <__ieee754_sqrt+0x132>
 8005798:	0052      	lsls	r2, r2, #1
 800579a:	3101      	adds	r1, #1
 800579c:	e7ef      	b.n	800577e <__ieee754_sqrt+0x136>
 800579e:	4680      	mov	r8, r0
 80057a0:	e7bd      	b.n	800571e <__ieee754_sqrt+0xd6>
 80057a2:	bf00      	nop
 80057a4:	7ff00000 	.word	0x7ff00000

080057a8 <__ieee754_asinf>:
 80057a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ac:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80057b0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80057b4:	4604      	mov	r4, r0
 80057b6:	4605      	mov	r5, r0
 80057b8:	d10c      	bne.n	80057d4 <__ieee754_asinf+0x2c>
 80057ba:	498d      	ldr	r1, [pc, #564]	; (80059f0 <__ieee754_asinf+0x248>)
 80057bc:	f7fb fa90 	bl	8000ce0 <__aeabi_fmul>
 80057c0:	498c      	ldr	r1, [pc, #560]	; (80059f4 <__ieee754_asinf+0x24c>)
 80057c2:	4605      	mov	r5, r0
 80057c4:	4620      	mov	r0, r4
 80057c6:	f7fb fa8b 	bl	8000ce0 <__aeabi_fmul>
 80057ca:	4601      	mov	r1, r0
 80057cc:	4628      	mov	r0, r5
 80057ce:	f7fb f97f 	bl	8000ad0 <__addsf3>
 80057d2:	e006      	b.n	80057e2 <__ieee754_asinf+0x3a>
 80057d4:	dd07      	ble.n	80057e6 <__ieee754_asinf+0x3e>
 80057d6:	4601      	mov	r1, r0
 80057d8:	f7fb f978 	bl	8000acc <__aeabi_fsub>
 80057dc:	4601      	mov	r1, r0
 80057de:	f7fb fb33 	bl	8000e48 <__aeabi_fdiv>
 80057e2:	4604      	mov	r4, r0
 80057e4:	e00e      	b.n	8005804 <__ieee754_asinf+0x5c>
 80057e6:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 80057ea:	da58      	bge.n	800589e <__ieee754_asinf+0xf6>
 80057ec:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 80057f0:	da0b      	bge.n	800580a <__ieee754_asinf+0x62>
 80057f2:	4981      	ldr	r1, [pc, #516]	; (80059f8 <__ieee754_asinf+0x250>)
 80057f4:	f7fb f96c 	bl	8000ad0 <__addsf3>
 80057f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80057fc:	f7fb fc2c 	bl	8001058 <__aeabi_fcmpgt>
 8005800:	2800      	cmp	r0, #0
 8005802:	d04c      	beq.n	800589e <__ieee754_asinf+0xf6>
 8005804:	4620      	mov	r0, r4
 8005806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580a:	4601      	mov	r1, r0
 800580c:	f7fb fa68 	bl	8000ce0 <__aeabi_fmul>
 8005810:	4605      	mov	r5, r0
 8005812:	497a      	ldr	r1, [pc, #488]	; (80059fc <__ieee754_asinf+0x254>)
 8005814:	f7fb fa64 	bl	8000ce0 <__aeabi_fmul>
 8005818:	4979      	ldr	r1, [pc, #484]	; (8005a00 <__ieee754_asinf+0x258>)
 800581a:	f7fb f959 	bl	8000ad0 <__addsf3>
 800581e:	4629      	mov	r1, r5
 8005820:	f7fb fa5e 	bl	8000ce0 <__aeabi_fmul>
 8005824:	4977      	ldr	r1, [pc, #476]	; (8005a04 <__ieee754_asinf+0x25c>)
 8005826:	f7fb f951 	bl	8000acc <__aeabi_fsub>
 800582a:	4629      	mov	r1, r5
 800582c:	f7fb fa58 	bl	8000ce0 <__aeabi_fmul>
 8005830:	4975      	ldr	r1, [pc, #468]	; (8005a08 <__ieee754_asinf+0x260>)
 8005832:	f7fb f94d 	bl	8000ad0 <__addsf3>
 8005836:	4629      	mov	r1, r5
 8005838:	f7fb fa52 	bl	8000ce0 <__aeabi_fmul>
 800583c:	4973      	ldr	r1, [pc, #460]	; (8005a0c <__ieee754_asinf+0x264>)
 800583e:	f7fb f945 	bl	8000acc <__aeabi_fsub>
 8005842:	4629      	mov	r1, r5
 8005844:	f7fb fa4c 	bl	8000ce0 <__aeabi_fmul>
 8005848:	4971      	ldr	r1, [pc, #452]	; (8005a10 <__ieee754_asinf+0x268>)
 800584a:	f7fb f941 	bl	8000ad0 <__addsf3>
 800584e:	4629      	mov	r1, r5
 8005850:	f7fb fa46 	bl	8000ce0 <__aeabi_fmul>
 8005854:	496f      	ldr	r1, [pc, #444]	; (8005a14 <__ieee754_asinf+0x26c>)
 8005856:	4606      	mov	r6, r0
 8005858:	4628      	mov	r0, r5
 800585a:	f7fb fa41 	bl	8000ce0 <__aeabi_fmul>
 800585e:	496e      	ldr	r1, [pc, #440]	; (8005a18 <__ieee754_asinf+0x270>)
 8005860:	f7fb f934 	bl	8000acc <__aeabi_fsub>
 8005864:	4629      	mov	r1, r5
 8005866:	f7fb fa3b 	bl	8000ce0 <__aeabi_fmul>
 800586a:	496c      	ldr	r1, [pc, #432]	; (8005a1c <__ieee754_asinf+0x274>)
 800586c:	f7fb f930 	bl	8000ad0 <__addsf3>
 8005870:	4629      	mov	r1, r5
 8005872:	f7fb fa35 	bl	8000ce0 <__aeabi_fmul>
 8005876:	496a      	ldr	r1, [pc, #424]	; (8005a20 <__ieee754_asinf+0x278>)
 8005878:	f7fb f928 	bl	8000acc <__aeabi_fsub>
 800587c:	4629      	mov	r1, r5
 800587e:	f7fb fa2f 	bl	8000ce0 <__aeabi_fmul>
 8005882:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005886:	f7fb f923 	bl	8000ad0 <__addsf3>
 800588a:	4601      	mov	r1, r0
 800588c:	4630      	mov	r0, r6
 800588e:	f7fb fadb 	bl	8000e48 <__aeabi_fdiv>
 8005892:	4621      	mov	r1, r4
 8005894:	f7fb fa24 	bl	8000ce0 <__aeabi_fmul>
 8005898:	4601      	mov	r1, r0
 800589a:	4620      	mov	r0, r4
 800589c:	e797      	b.n	80057ce <__ieee754_asinf+0x26>
 800589e:	4620      	mov	r0, r4
 80058a0:	f000 faaa 	bl	8005df8 <fabsf>
 80058a4:	4601      	mov	r1, r0
 80058a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80058aa:	f7fb f90f 	bl	8000acc <__aeabi_fsub>
 80058ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80058b2:	f7fb fa15 	bl	8000ce0 <__aeabi_fmul>
 80058b6:	4606      	mov	r6, r0
 80058b8:	4950      	ldr	r1, [pc, #320]	; (80059fc <__ieee754_asinf+0x254>)
 80058ba:	f7fb fa11 	bl	8000ce0 <__aeabi_fmul>
 80058be:	4950      	ldr	r1, [pc, #320]	; (8005a00 <__ieee754_asinf+0x258>)
 80058c0:	f7fb f906 	bl	8000ad0 <__addsf3>
 80058c4:	4631      	mov	r1, r6
 80058c6:	f7fb fa0b 	bl	8000ce0 <__aeabi_fmul>
 80058ca:	494e      	ldr	r1, [pc, #312]	; (8005a04 <__ieee754_asinf+0x25c>)
 80058cc:	f7fb f8fe 	bl	8000acc <__aeabi_fsub>
 80058d0:	4631      	mov	r1, r6
 80058d2:	f7fb fa05 	bl	8000ce0 <__aeabi_fmul>
 80058d6:	494c      	ldr	r1, [pc, #304]	; (8005a08 <__ieee754_asinf+0x260>)
 80058d8:	f7fb f8fa 	bl	8000ad0 <__addsf3>
 80058dc:	4631      	mov	r1, r6
 80058de:	f7fb f9ff 	bl	8000ce0 <__aeabi_fmul>
 80058e2:	494a      	ldr	r1, [pc, #296]	; (8005a0c <__ieee754_asinf+0x264>)
 80058e4:	f7fb f8f2 	bl	8000acc <__aeabi_fsub>
 80058e8:	4631      	mov	r1, r6
 80058ea:	f7fb f9f9 	bl	8000ce0 <__aeabi_fmul>
 80058ee:	4948      	ldr	r1, [pc, #288]	; (8005a10 <__ieee754_asinf+0x268>)
 80058f0:	f7fb f8ee 	bl	8000ad0 <__addsf3>
 80058f4:	4631      	mov	r1, r6
 80058f6:	f7fb f9f3 	bl	8000ce0 <__aeabi_fmul>
 80058fa:	4946      	ldr	r1, [pc, #280]	; (8005a14 <__ieee754_asinf+0x26c>)
 80058fc:	4681      	mov	r9, r0
 80058fe:	4630      	mov	r0, r6
 8005900:	f7fb f9ee 	bl	8000ce0 <__aeabi_fmul>
 8005904:	4944      	ldr	r1, [pc, #272]	; (8005a18 <__ieee754_asinf+0x270>)
 8005906:	f7fb f8e1 	bl	8000acc <__aeabi_fsub>
 800590a:	4631      	mov	r1, r6
 800590c:	f7fb f9e8 	bl	8000ce0 <__aeabi_fmul>
 8005910:	4942      	ldr	r1, [pc, #264]	; (8005a1c <__ieee754_asinf+0x274>)
 8005912:	f7fb f8dd 	bl	8000ad0 <__addsf3>
 8005916:	4631      	mov	r1, r6
 8005918:	f7fb f9e2 	bl	8000ce0 <__aeabi_fmul>
 800591c:	4940      	ldr	r1, [pc, #256]	; (8005a20 <__ieee754_asinf+0x278>)
 800591e:	f7fb f8d5 	bl	8000acc <__aeabi_fsub>
 8005922:	4631      	mov	r1, r6
 8005924:	f7fb f9dc 	bl	8000ce0 <__aeabi_fmul>
 8005928:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800592c:	f7fb f8d0 	bl	8000ad0 <__addsf3>
 8005930:	4682      	mov	sl, r0
 8005932:	4630      	mov	r0, r6
 8005934:	f000 f902 	bl	8005b3c <__ieee754_sqrtf>
 8005938:	4b3a      	ldr	r3, [pc, #232]	; (8005a24 <__ieee754_asinf+0x27c>)
 800593a:	4607      	mov	r7, r0
 800593c:	4598      	cmp	r8, r3
 800593e:	dd1a      	ble.n	8005976 <__ieee754_asinf+0x1ce>
 8005940:	4651      	mov	r1, sl
 8005942:	4648      	mov	r0, r9
 8005944:	f7fb fa80 	bl	8000e48 <__aeabi_fdiv>
 8005948:	4639      	mov	r1, r7
 800594a:	f7fb f9c9 	bl	8000ce0 <__aeabi_fmul>
 800594e:	4639      	mov	r1, r7
 8005950:	f7fb f8be 	bl	8000ad0 <__addsf3>
 8005954:	4601      	mov	r1, r0
 8005956:	f7fb f8bb 	bl	8000ad0 <__addsf3>
 800595a:	4933      	ldr	r1, [pc, #204]	; (8005a28 <__ieee754_asinf+0x280>)
 800595c:	f7fb f8b8 	bl	8000ad0 <__addsf3>
 8005960:	4601      	mov	r1, r0
 8005962:	4823      	ldr	r0, [pc, #140]	; (80059f0 <__ieee754_asinf+0x248>)
 8005964:	f7fb f8b2 	bl	8000acc <__aeabi_fsub>
 8005968:	2d00      	cmp	r5, #0
 800596a:	4604      	mov	r4, r0
 800596c:	f73f af4a 	bgt.w	8005804 <__ieee754_asinf+0x5c>
 8005970:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005974:	e735      	b.n	80057e2 <__ieee754_asinf+0x3a>
 8005976:	4601      	mov	r1, r0
 8005978:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800597c:	f7fb f8a8 	bl	8000ad0 <__addsf3>
 8005980:	4651      	mov	r1, sl
 8005982:	4604      	mov	r4, r0
 8005984:	4648      	mov	r0, r9
 8005986:	f7fb fa5f 	bl	8000e48 <__aeabi_fdiv>
 800598a:	4601      	mov	r1, r0
 800598c:	4620      	mov	r0, r4
 800598e:	f7fb f9a7 	bl	8000ce0 <__aeabi_fmul>
 8005992:	f028 080f 	bic.w	r8, r8, #15
 8005996:	4681      	mov	r9, r0
 8005998:	4641      	mov	r1, r8
 800599a:	4640      	mov	r0, r8
 800599c:	f7fb f9a0 	bl	8000ce0 <__aeabi_fmul>
 80059a0:	4601      	mov	r1, r0
 80059a2:	4630      	mov	r0, r6
 80059a4:	f7fb f892 	bl	8000acc <__aeabi_fsub>
 80059a8:	4641      	mov	r1, r8
 80059aa:	4604      	mov	r4, r0
 80059ac:	4638      	mov	r0, r7
 80059ae:	f7fb f88f 	bl	8000ad0 <__addsf3>
 80059b2:	4601      	mov	r1, r0
 80059b4:	4620      	mov	r0, r4
 80059b6:	f7fb fa47 	bl	8000e48 <__aeabi_fdiv>
 80059ba:	4601      	mov	r1, r0
 80059bc:	f7fb f888 	bl	8000ad0 <__addsf3>
 80059c0:	4601      	mov	r1, r0
 80059c2:	480c      	ldr	r0, [pc, #48]	; (80059f4 <__ieee754_asinf+0x24c>)
 80059c4:	f7fb f882 	bl	8000acc <__aeabi_fsub>
 80059c8:	4601      	mov	r1, r0
 80059ca:	4648      	mov	r0, r9
 80059cc:	f7fb f87e 	bl	8000acc <__aeabi_fsub>
 80059d0:	4641      	mov	r1, r8
 80059d2:	4604      	mov	r4, r0
 80059d4:	4640      	mov	r0, r8
 80059d6:	f7fb f87b 	bl	8000ad0 <__addsf3>
 80059da:	4601      	mov	r1, r0
 80059dc:	4813      	ldr	r0, [pc, #76]	; (8005a2c <__ieee754_asinf+0x284>)
 80059de:	f7fb f875 	bl	8000acc <__aeabi_fsub>
 80059e2:	4601      	mov	r1, r0
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7fb f871 	bl	8000acc <__aeabi_fsub>
 80059ea:	4601      	mov	r1, r0
 80059ec:	480f      	ldr	r0, [pc, #60]	; (8005a2c <__ieee754_asinf+0x284>)
 80059ee:	e7b9      	b.n	8005964 <__ieee754_asinf+0x1bc>
 80059f0:	3fc90fdb 	.word	0x3fc90fdb
 80059f4:	b33bbd2e 	.word	0xb33bbd2e
 80059f8:	7149f2ca 	.word	0x7149f2ca
 80059fc:	3811ef08 	.word	0x3811ef08
 8005a00:	3a4f7f04 	.word	0x3a4f7f04
 8005a04:	3d241146 	.word	0x3d241146
 8005a08:	3e4e0aa8 	.word	0x3e4e0aa8
 8005a0c:	3ea6b090 	.word	0x3ea6b090
 8005a10:	3e2aaaab 	.word	0x3e2aaaab
 8005a14:	3d9dc62e 	.word	0x3d9dc62e
 8005a18:	3f303361 	.word	0x3f303361
 8005a1c:	4001572d 	.word	0x4001572d
 8005a20:	4019d139 	.word	0x4019d139
 8005a24:	3f799999 	.word	0x3f799999
 8005a28:	333bbd2e 	.word	0x333bbd2e
 8005a2c:	3f490fdb 	.word	0x3f490fdb

08005a30 <__ieee754_atan2f>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005a36:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	dc05      	bgt.n	8005a4a <__ieee754_atan2f+0x1a>
 8005a3e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005a42:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005a46:	4607      	mov	r7, r0
 8005a48:	dd04      	ble.n	8005a54 <__ieee754_atan2f+0x24>
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fb f840 	bl	8000ad0 <__addsf3>
 8005a50:	4603      	mov	r3, r0
 8005a52:	e011      	b.n	8005a78 <__ieee754_atan2f+0x48>
 8005a54:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8005a58:	d103      	bne.n	8005a62 <__ieee754_atan2f+0x32>
 8005a5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a5e:	f000 b8bf 	b.w	8005be0 <atanf>
 8005a62:	178c      	asrs	r4, r1, #30
 8005a64:	f004 0402 	and.w	r4, r4, #2
 8005a68:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005a6c:	b932      	cbnz	r2, 8005a7c <__ieee754_atan2f+0x4c>
 8005a6e:	2c02      	cmp	r4, #2
 8005a70:	d04c      	beq.n	8005b0c <__ieee754_atan2f+0xdc>
 8005a72:	2c03      	cmp	r4, #3
 8005a74:	d100      	bne.n	8005a78 <__ieee754_atan2f+0x48>
 8005a76:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <__ieee754_atan2f+0xec>)
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a7c:	b91e      	cbnz	r6, 8005a86 <__ieee754_atan2f+0x56>
 8005a7e:	2f00      	cmp	r7, #0
 8005a80:	da4a      	bge.n	8005b18 <__ieee754_atan2f+0xe8>
 8005a82:	4b27      	ldr	r3, [pc, #156]	; (8005b20 <__ieee754_atan2f+0xf0>)
 8005a84:	e7f8      	b.n	8005a78 <__ieee754_atan2f+0x48>
 8005a86:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005a8a:	d10e      	bne.n	8005aaa <__ieee754_atan2f+0x7a>
 8005a8c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005a90:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a94:	d105      	bne.n	8005aa2 <__ieee754_atan2f+0x72>
 8005a96:	2c02      	cmp	r4, #2
 8005a98:	d83a      	bhi.n	8005b10 <__ieee754_atan2f+0xe0>
 8005a9a:	4b22      	ldr	r3, [pc, #136]	; (8005b24 <__ieee754_atan2f+0xf4>)
 8005a9c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005aa0:	e7ea      	b.n	8005a78 <__ieee754_atan2f+0x48>
 8005aa2:	2c02      	cmp	r4, #2
 8005aa4:	d836      	bhi.n	8005b14 <__ieee754_atan2f+0xe4>
 8005aa6:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <__ieee754_atan2f+0xf8>)
 8005aa8:	e7f8      	b.n	8005a9c <__ieee754_atan2f+0x6c>
 8005aaa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005aae:	d0e6      	beq.n	8005a7e <__ieee754_atan2f+0x4e>
 8005ab0:	1b92      	subs	r2, r2, r6
 8005ab2:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8005ab6:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8005aba:	da17      	bge.n	8005aec <__ieee754_atan2f+0xbc>
 8005abc:	2900      	cmp	r1, #0
 8005abe:	da01      	bge.n	8005ac4 <__ieee754_atan2f+0x94>
 8005ac0:	303c      	adds	r0, #60	; 0x3c
 8005ac2:	db15      	blt.n	8005af0 <__ieee754_atan2f+0xc0>
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fb f9bf 	bl	8000e48 <__aeabi_fdiv>
 8005aca:	f000 f995 	bl	8005df8 <fabsf>
 8005ace:	f000 f887 	bl	8005be0 <atanf>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2c01      	cmp	r4, #1
 8005ad6:	d00d      	beq.n	8005af4 <__ieee754_atan2f+0xc4>
 8005ad8:	2c02      	cmp	r4, #2
 8005ada:	d00e      	beq.n	8005afa <__ieee754_atan2f+0xca>
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	d0cb      	beq.n	8005a78 <__ieee754_atan2f+0x48>
 8005ae0:	4912      	ldr	r1, [pc, #72]	; (8005b2c <__ieee754_atan2f+0xfc>)
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fa fff4 	bl	8000ad0 <__addsf3>
 8005ae8:	4911      	ldr	r1, [pc, #68]	; (8005b30 <__ieee754_atan2f+0x100>)
 8005aea:	e00c      	b.n	8005b06 <__ieee754_atan2f+0xd6>
 8005aec:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <__ieee754_atan2f+0x104>)
 8005aee:	e7f1      	b.n	8005ad4 <__ieee754_atan2f+0xa4>
 8005af0:	2300      	movs	r3, #0
 8005af2:	e7ef      	b.n	8005ad4 <__ieee754_atan2f+0xa4>
 8005af4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005af8:	e7be      	b.n	8005a78 <__ieee754_atan2f+0x48>
 8005afa:	490c      	ldr	r1, [pc, #48]	; (8005b2c <__ieee754_atan2f+0xfc>)
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fa ffe7 	bl	8000ad0 <__addsf3>
 8005b02:	4601      	mov	r1, r0
 8005b04:	480a      	ldr	r0, [pc, #40]	; (8005b30 <__ieee754_atan2f+0x100>)
 8005b06:	f7fa ffe1 	bl	8000acc <__aeabi_fsub>
 8005b0a:	e7a1      	b.n	8005a50 <__ieee754_atan2f+0x20>
 8005b0c:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <__ieee754_atan2f+0x100>)
 8005b0e:	e7b3      	b.n	8005a78 <__ieee754_atan2f+0x48>
 8005b10:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <__ieee754_atan2f+0x108>)
 8005b12:	e7b1      	b.n	8005a78 <__ieee754_atan2f+0x48>
 8005b14:	2300      	movs	r3, #0
 8005b16:	e7af      	b.n	8005a78 <__ieee754_atan2f+0x48>
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <__ieee754_atan2f+0x104>)
 8005b1a:	e7ad      	b.n	8005a78 <__ieee754_atan2f+0x48>
 8005b1c:	c0490fdb 	.word	0xc0490fdb
 8005b20:	bfc90fdb 	.word	0xbfc90fdb
 8005b24:	08005ec4 	.word	0x08005ec4
 8005b28:	08005ed0 	.word	0x08005ed0
 8005b2c:	33bbbd2e 	.word	0x33bbbd2e
 8005b30:	40490fdb 	.word	0x40490fdb
 8005b34:	3fc90fdb 	.word	0x3fc90fdb
 8005b38:	3f490fdb 	.word	0x3f490fdb

08005b3c <__ieee754_sqrtf>:
 8005b3c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005b40:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4603      	mov	r3, r0
 8005b48:	4604      	mov	r4, r0
 8005b4a:	d309      	bcc.n	8005b60 <__ieee754_sqrtf+0x24>
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	f7fb f8c7 	bl	8000ce0 <__aeabi_fmul>
 8005b52:	4601      	mov	r1, r0
 8005b54:	4620      	mov	r0, r4
 8005b56:	f7fa ffbb 	bl	8000ad0 <__addsf3>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	2a00      	cmp	r2, #0
 8005b62:	d0fb      	beq.n	8005b5c <__ieee754_sqrtf+0x20>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	da06      	bge.n	8005b76 <__ieee754_sqrtf+0x3a>
 8005b68:	4601      	mov	r1, r0
 8005b6a:	f7fa ffaf 	bl	8000acc <__aeabi_fsub>
 8005b6e:	4601      	mov	r1, r0
 8005b70:	f7fb f96a 	bl	8000e48 <__aeabi_fdiv>
 8005b74:	e7f1      	b.n	8005b5a <__ieee754_sqrtf+0x1e>
 8005b76:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8005b7a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8005b7e:	d029      	beq.n	8005bd4 <__ieee754_sqrtf+0x98>
 8005b80:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8005b84:	07cb      	lsls	r3, r1, #31
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8005b8e:	f04f 0419 	mov.w	r4, #25
 8005b92:	461e      	mov	r6, r3
 8005b94:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8005b98:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b9c:	bf58      	it	pl
 8005b9e:	0052      	lslpl	r2, r2, #1
 8005ba0:	1040      	asrs	r0, r0, #1
 8005ba2:	0052      	lsls	r2, r2, #1
 8005ba4:	1875      	adds	r5, r6, r1
 8005ba6:	4295      	cmp	r5, r2
 8005ba8:	bfde      	ittt	le
 8005baa:	186e      	addle	r6, r5, r1
 8005bac:	1b52      	suble	r2, r2, r5
 8005bae:	185b      	addle	r3, r3, r1
 8005bb0:	3c01      	subs	r4, #1
 8005bb2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005bb6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005bba:	d1f3      	bne.n	8005ba4 <__ieee754_sqrtf+0x68>
 8005bbc:	b112      	cbz	r2, 8005bc4 <__ieee754_sqrtf+0x88>
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	f023 0301 	bic.w	r3, r3, #1
 8005bc4:	105c      	asrs	r4, r3, #1
 8005bc6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8005bca:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8005bce:	e7c5      	b.n	8005b5c <__ieee754_sqrtf+0x20>
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	3201      	adds	r2, #1
 8005bd4:	0218      	lsls	r0, r3, #8
 8005bd6:	d5fb      	bpl.n	8005bd0 <__ieee754_sqrtf+0x94>
 8005bd8:	3a01      	subs	r2, #1
 8005bda:	1a89      	subs	r1, r1, r2
 8005bdc:	e7d0      	b.n	8005b80 <__ieee754_sqrtf+0x44>
	...

08005be0 <atanf>:
 8005be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be4:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005be8:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8005bec:	4604      	mov	r4, r0
 8005bee:	4680      	mov	r8, r0
 8005bf0:	db0e      	blt.n	8005c10 <atanf+0x30>
 8005bf2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005bf6:	dd04      	ble.n	8005c02 <atanf+0x22>
 8005bf8:	4601      	mov	r1, r0
 8005bfa:	f7fa ff69 	bl	8000ad0 <__addsf3>
 8005bfe:	4604      	mov	r4, r0
 8005c00:	e003      	b.n	8005c0a <atanf+0x2a>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	f300 80ce 	bgt.w	8005da4 <atanf+0x1c4>
 8005c08:	4c67      	ldr	r4, [pc, #412]	; (8005da8 <atanf+0x1c8>)
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c10:	4b66      	ldr	r3, [pc, #408]	; (8005dac <atanf+0x1cc>)
 8005c12:	429d      	cmp	r5, r3
 8005c14:	dc0e      	bgt.n	8005c34 <atanf+0x54>
 8005c16:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8005c1a:	da08      	bge.n	8005c2e <atanf+0x4e>
 8005c1c:	4964      	ldr	r1, [pc, #400]	; (8005db0 <atanf+0x1d0>)
 8005c1e:	f7fa ff57 	bl	8000ad0 <__addsf3>
 8005c22:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005c26:	f7fb fa17 	bl	8001058 <__aeabi_fcmpgt>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	d1ed      	bne.n	8005c0a <atanf+0x2a>
 8005c2e:	f04f 36ff 	mov.w	r6, #4294967295
 8005c32:	e01c      	b.n	8005c6e <atanf+0x8e>
 8005c34:	f000 f8e0 	bl	8005df8 <fabsf>
 8005c38:	4b5e      	ldr	r3, [pc, #376]	; (8005db4 <atanf+0x1d4>)
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	429d      	cmp	r5, r3
 8005c3e:	dc7c      	bgt.n	8005d3a <atanf+0x15a>
 8005c40:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005c44:	429d      	cmp	r5, r3
 8005c46:	dc67      	bgt.n	8005d18 <atanf+0x138>
 8005c48:	4601      	mov	r1, r0
 8005c4a:	f7fa ff41 	bl	8000ad0 <__addsf3>
 8005c4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005c52:	f7fa ff3b 	bl	8000acc <__aeabi_fsub>
 8005c56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f7fa ff37 	bl	8000ad0 <__addsf3>
 8005c62:	4601      	mov	r1, r0
 8005c64:	4628      	mov	r0, r5
 8005c66:	f7fb f8ef 	bl	8000e48 <__aeabi_fdiv>
 8005c6a:	2600      	movs	r6, #0
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4620      	mov	r0, r4
 8005c72:	f7fb f835 	bl	8000ce0 <__aeabi_fmul>
 8005c76:	4601      	mov	r1, r0
 8005c78:	4607      	mov	r7, r0
 8005c7a:	f7fb f831 	bl	8000ce0 <__aeabi_fmul>
 8005c7e:	4605      	mov	r5, r0
 8005c80:	494d      	ldr	r1, [pc, #308]	; (8005db8 <atanf+0x1d8>)
 8005c82:	f7fb f82d 	bl	8000ce0 <__aeabi_fmul>
 8005c86:	494d      	ldr	r1, [pc, #308]	; (8005dbc <atanf+0x1dc>)
 8005c88:	f7fa ff22 	bl	8000ad0 <__addsf3>
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	f7fb f827 	bl	8000ce0 <__aeabi_fmul>
 8005c92:	494b      	ldr	r1, [pc, #300]	; (8005dc0 <atanf+0x1e0>)
 8005c94:	f7fa ff1c 	bl	8000ad0 <__addsf3>
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fb f821 	bl	8000ce0 <__aeabi_fmul>
 8005c9e:	4949      	ldr	r1, [pc, #292]	; (8005dc4 <atanf+0x1e4>)
 8005ca0:	f7fa ff16 	bl	8000ad0 <__addsf3>
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	f7fb f81b 	bl	8000ce0 <__aeabi_fmul>
 8005caa:	4947      	ldr	r1, [pc, #284]	; (8005dc8 <atanf+0x1e8>)
 8005cac:	f7fa ff10 	bl	8000ad0 <__addsf3>
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	f7fb f815 	bl	8000ce0 <__aeabi_fmul>
 8005cb6:	4945      	ldr	r1, [pc, #276]	; (8005dcc <atanf+0x1ec>)
 8005cb8:	f7fa ff0a 	bl	8000ad0 <__addsf3>
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	f7fb f80f 	bl	8000ce0 <__aeabi_fmul>
 8005cc2:	4943      	ldr	r1, [pc, #268]	; (8005dd0 <atanf+0x1f0>)
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f7fb f80a 	bl	8000ce0 <__aeabi_fmul>
 8005ccc:	4941      	ldr	r1, [pc, #260]	; (8005dd4 <atanf+0x1f4>)
 8005cce:	f7fa fefd 	bl	8000acc <__aeabi_fsub>
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7fb f804 	bl	8000ce0 <__aeabi_fmul>
 8005cd8:	493f      	ldr	r1, [pc, #252]	; (8005dd8 <atanf+0x1f8>)
 8005cda:	f7fa fef7 	bl	8000acc <__aeabi_fsub>
 8005cde:	4629      	mov	r1, r5
 8005ce0:	f7fa fffe 	bl	8000ce0 <__aeabi_fmul>
 8005ce4:	493d      	ldr	r1, [pc, #244]	; (8005ddc <atanf+0x1fc>)
 8005ce6:	f7fa fef1 	bl	8000acc <__aeabi_fsub>
 8005cea:	4629      	mov	r1, r5
 8005cec:	f7fa fff8 	bl	8000ce0 <__aeabi_fmul>
 8005cf0:	493b      	ldr	r1, [pc, #236]	; (8005de0 <atanf+0x200>)
 8005cf2:	f7fa feeb 	bl	8000acc <__aeabi_fsub>
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	f7fa fff2 	bl	8000ce0 <__aeabi_fmul>
 8005cfc:	4601      	mov	r1, r0
 8005cfe:	4638      	mov	r0, r7
 8005d00:	f7fa fee6 	bl	8000ad0 <__addsf3>
 8005d04:	4621      	mov	r1, r4
 8005d06:	f7fa ffeb 	bl	8000ce0 <__aeabi_fmul>
 8005d0a:	1c73      	adds	r3, r6, #1
 8005d0c:	4601      	mov	r1, r0
 8005d0e:	d133      	bne.n	8005d78 <atanf+0x198>
 8005d10:	4620      	mov	r0, r4
 8005d12:	f7fa fedb 	bl	8000acc <__aeabi_fsub>
 8005d16:	e772      	b.n	8005bfe <atanf+0x1e>
 8005d18:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d1c:	f7fa fed6 	bl	8000acc <__aeabi_fsub>
 8005d20:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d24:	4605      	mov	r5, r0
 8005d26:	4620      	mov	r0, r4
 8005d28:	f7fa fed2 	bl	8000ad0 <__addsf3>
 8005d2c:	4601      	mov	r1, r0
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f7fb f88a 	bl	8000e48 <__aeabi_fdiv>
 8005d34:	2601      	movs	r6, #1
 8005d36:	4604      	mov	r4, r0
 8005d38:	e799      	b.n	8005c6e <atanf+0x8e>
 8005d3a:	4b2a      	ldr	r3, [pc, #168]	; (8005de4 <atanf+0x204>)
 8005d3c:	429d      	cmp	r5, r3
 8005d3e:	dc14      	bgt.n	8005d6a <atanf+0x18a>
 8005d40:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005d44:	f7fa fec2 	bl	8000acc <__aeabi_fsub>
 8005d48:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f7fa ffc6 	bl	8000ce0 <__aeabi_fmul>
 8005d54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d58:	f7fa feba 	bl	8000ad0 <__addsf3>
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7fb f872 	bl	8000e48 <__aeabi_fdiv>
 8005d64:	2602      	movs	r6, #2
 8005d66:	4604      	mov	r4, r0
 8005d68:	e781      	b.n	8005c6e <atanf+0x8e>
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	481e      	ldr	r0, [pc, #120]	; (8005de8 <atanf+0x208>)
 8005d6e:	f7fb f86b 	bl	8000e48 <__aeabi_fdiv>
 8005d72:	2603      	movs	r6, #3
 8005d74:	4604      	mov	r4, r0
 8005d76:	e77a      	b.n	8005c6e <atanf+0x8e>
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <atanf+0x20c>)
 8005d7a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005d7e:	f7fa fea5 	bl	8000acc <__aeabi_fsub>
 8005d82:	4621      	mov	r1, r4
 8005d84:	f7fa fea2 	bl	8000acc <__aeabi_fsub>
 8005d88:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <atanf+0x210>)
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d90:	f7fa fe9c 	bl	8000acc <__aeabi_fsub>
 8005d94:	f1b8 0f00 	cmp.w	r8, #0
 8005d98:	4604      	mov	r4, r0
 8005d9a:	f6bf af36 	bge.w	8005c0a <atanf+0x2a>
 8005d9e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005da2:	e72c      	b.n	8005bfe <atanf+0x1e>
 8005da4:	4c13      	ldr	r4, [pc, #76]	; (8005df4 <atanf+0x214>)
 8005da6:	e730      	b.n	8005c0a <atanf+0x2a>
 8005da8:	bfc90fdb 	.word	0xbfc90fdb
 8005dac:	3edfffff 	.word	0x3edfffff
 8005db0:	7149f2ca 	.word	0x7149f2ca
 8005db4:	3f97ffff 	.word	0x3f97ffff
 8005db8:	3c8569d7 	.word	0x3c8569d7
 8005dbc:	3d4bda59 	.word	0x3d4bda59
 8005dc0:	3d886b35 	.word	0x3d886b35
 8005dc4:	3dba2e6e 	.word	0x3dba2e6e
 8005dc8:	3e124925 	.word	0x3e124925
 8005dcc:	3eaaaaab 	.word	0x3eaaaaab
 8005dd0:	bd15a221 	.word	0xbd15a221
 8005dd4:	3d6ef16b 	.word	0x3d6ef16b
 8005dd8:	3d9d8795 	.word	0x3d9d8795
 8005ddc:	3de38e38 	.word	0x3de38e38
 8005de0:	3e4ccccd 	.word	0x3e4ccccd
 8005de4:	401bffff 	.word	0x401bffff
 8005de8:	bf800000 	.word	0xbf800000
 8005dec:	08005eec 	.word	0x08005eec
 8005df0:	08005edc 	.word	0x08005edc
 8005df4:	3fc90fdb 	.word	0x3fc90fdb

08005df8 <fabsf>:
 8005df8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005dfc:	4770      	bx	lr
	...

08005e00 <nanf>:
 8005e00:	4800      	ldr	r0, [pc, #0]	; (8005e04 <nanf+0x4>)
 8005e02:	4770      	bx	lr
 8005e04:	7fc00000 	.word	0x7fc00000

08005e08 <__errno>:
 8005e08:	4b01      	ldr	r3, [pc, #4]	; (8005e10 <__errno+0x8>)
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	20000024 	.word	0x20000024

08005e14 <__libc_init_array>:
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	2600      	movs	r6, #0
 8005e18:	4d0c      	ldr	r5, [pc, #48]	; (8005e4c <__libc_init_array+0x38>)
 8005e1a:	4c0d      	ldr	r4, [pc, #52]	; (8005e50 <__libc_init_array+0x3c>)
 8005e1c:	1b64      	subs	r4, r4, r5
 8005e1e:	10a4      	asrs	r4, r4, #2
 8005e20:	42a6      	cmp	r6, r4
 8005e22:	d109      	bne.n	8005e38 <__libc_init_array+0x24>
 8005e24:	f000 f830 	bl	8005e88 <_init>
 8005e28:	2600      	movs	r6, #0
 8005e2a:	4d0a      	ldr	r5, [pc, #40]	; (8005e54 <__libc_init_array+0x40>)
 8005e2c:	4c0a      	ldr	r4, [pc, #40]	; (8005e58 <__libc_init_array+0x44>)
 8005e2e:	1b64      	subs	r4, r4, r5
 8005e30:	10a4      	asrs	r4, r4, #2
 8005e32:	42a6      	cmp	r6, r4
 8005e34:	d105      	bne.n	8005e42 <__libc_init_array+0x2e>
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
 8005e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e3c:	4798      	blx	r3
 8005e3e:	3601      	adds	r6, #1
 8005e40:	e7ee      	b.n	8005e20 <__libc_init_array+0xc>
 8005e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e46:	4798      	blx	r3
 8005e48:	3601      	adds	r6, #1
 8005e4a:	e7f2      	b.n	8005e32 <__libc_init_array+0x1e>
 8005e4c:	08005efc 	.word	0x08005efc
 8005e50:	08005efc 	.word	0x08005efc
 8005e54:	08005efc 	.word	0x08005efc
 8005e58:	08005f00 	.word	0x08005f00

08005e5c <memcpy>:
 8005e5c:	440a      	add	r2, r1
 8005e5e:	4291      	cmp	r1, r2
 8005e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e64:	d100      	bne.n	8005e68 <memcpy+0xc>
 8005e66:	4770      	bx	lr
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e6e:	4291      	cmp	r1, r2
 8005e70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e74:	d1f9      	bne.n	8005e6a <memcpy+0xe>
 8005e76:	bd10      	pop	{r4, pc}

08005e78 <memset>:
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4402      	add	r2, r0
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d100      	bne.n	8005e82 <memset+0xa>
 8005e80:	4770      	bx	lr
 8005e82:	f803 1b01 	strb.w	r1, [r3], #1
 8005e86:	e7f9      	b.n	8005e7c <memset+0x4>

08005e88 <_init>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

08005e94 <_fini>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr
