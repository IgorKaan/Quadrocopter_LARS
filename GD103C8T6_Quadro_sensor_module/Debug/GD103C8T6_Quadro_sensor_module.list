
GD103C8T6_Quadro_sensor_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091f8  080091f8  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080091f8  080091f8  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091f8  080091f8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f8  080091f8  000191f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091fc  080091fc  000191fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ccc  2000008c  0800928c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d58  0800928c  00021d58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0be  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb5  00000000  00000000  0003a173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003e028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b024  00000000  00000000  00040a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d01  00000000  00000000  0005ba74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097c6d  00000000  00000000  00074775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c3e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006318  00000000  00000000  0010c434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	080090a8 	.word	0x080090a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	080090a8 	.word	0x080090a8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <filter>:

uint8_t _buffer[21];

static uint8_t _mag_adjust[3];

float filter(float val) { //функция фильтрации
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	Pc = P + varProcess;
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <filter+0xbc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2c      	ldr	r2, [pc, #176]	; (800115c <filter+0xc0>)
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fd10 	bl	8000ad4 <__addsf3>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <filter+0xc4>)
 80010ba:	601a      	str	r2, [r3, #0]
	G = Pc/(Pc + varVolt);
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <filter+0xc4>)
 80010be:	681c      	ldr	r4, [r3, #0]
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <filter+0xc4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <filter+0xc8>)
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fd02 	bl	8000ad4 <__addsf3>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff feb9 	bl	8000e4c <__aeabi_fdiv>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <filter+0xcc>)
 80010e0:	601a      	str	r2, [r3, #0]
	P = (1-G)*Pc;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <filter+0xcc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80010ec:	f7ff fcf0 	bl	8000ad0 <__aeabi_fsub>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <filter+0xc4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4610      	mov	r0, r2
 80010fc:	f7ff fdf2 	bl	8000ce4 <__aeabi_fmul>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <filter+0xbc>)
 8001106:	601a      	str	r2, [r3, #0]
	Xp = Xe;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <filter+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a18      	ldr	r2, [pc, #96]	; (8001170 <filter+0xd4>)
 800110e:	6013      	str	r3, [r2, #0]
	Zp = Xp;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <filter+0xd4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <filter+0xd8>)
 8001116:	6013      	str	r3, [r2, #0]
	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <filter+0xd8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fcd6 	bl	8000ad0 <__aeabi_fsub>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <filter+0xcc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	4610      	mov	r0, r2
 8001130:	f7ff fdd8 	bl	8000ce4 <__aeabi_fmul>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <filter+0xd4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f7ff fcc8 	bl	8000ad4 <__addsf3>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <filter+0xd0>)
 800114a:	601a      	str	r2, [r3, #0]
return(Xe);
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <filter+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	20000004 	.word	0x20000004
 800115c:	20000000 	.word	0x20000000
 8001160:	200000ac 	.word	0x200000ac
 8001164:	200000a8 	.word	0x200000a8
 8001168:	200000b0 	.word	0x200000b0
 800116c:	200000bc 	.word	0x200000bc
 8001170:	200000b4 	.word	0x200000b4
 8001174:	200000b8 	.word	0x200000b8

08001178 <MPU9250_OnActivate>:

__weak void MPU9250_OnActivate()
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8001188:	f7ff fff6 	bl	8001178 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2110      	movs	r1, #16
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <MPU9250_Activate+0x18>)
 8001192:	f002 ffbf 	bl	8004114 <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40010800 	.word	0x40010800

080011a0 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2110      	movs	r1, #16
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <MPU9250_Deactivate+0x14>)
 80011aa:	f002 ffb3 	bl	8004114 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40010800 	.word	0x40010800

080011b8 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80011c6:	f107 020f 	add.w	r2, r7, #15
 80011ca:	1df9      	adds	r1, r7, #7
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <SPIx_WriteRead+0x38>)
 80011d6:	f003 fed6 	bl	8004f86 <HAL_SPI_TransmitReceive>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SPIx_WriteRead+0x2c>
	{
		return -1;
 80011e0:	23ff      	movs	r3, #255	; 0xff
 80011e2:	e000      	b.n	80011e6 <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000024c 	.word	0x2000024c

080011f4 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *p_buffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
 8001200:	4613      	mov	r3, r2
 8001202:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001204:	f7ff ffbe 	bl	8001184 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffd4 	bl	80011b8 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8001210:	e00a      	b.n	8001228 <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*p_buffer);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffce 	bl	80011b8 <SPIx_WriteRead>
		NumByteToWrite--;
 800121c:	883b      	ldrh	r3, [r7, #0]
 800121e:	3b01      	subs	r3, #1
 8001220:	803b      	strh	r3, [r7, #0]
		p_buffer++;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3301      	adds	r3, #1
 8001226:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8001228:	883b      	ldrh	r3, [r7, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f1      	bne.n	8001212 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 800122e:	f7ff ffb7 	bl	80011a0 <MPU9250_Deactivate>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *p_buffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
 8001248:	4613      	mov	r3, r2
 800124a:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 800124c:	f7ff ff9a 	bl	8001184 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001256:	b2db      	uxtb	r3, r3
 8001258:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 800125a:	f107 010f 	add.w	r1, r7, #15
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	2201      	movs	r2, #1
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <MPU_SPI_Read+0x48>)
 8001266:	f003 fc41 	bl	8004aec <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&MPU9250_SPI, p_buffer, NumByteToRead, HAL_MAX_DELAY) == HAL_OK) {
 800126a:	883a      	ldrh	r2, [r7, #0]
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <MPU_SPI_Read+0x48>)
 8001274:	f003 fd76 	bl	8004d64 <HAL_SPI_Receive>
	}
	else {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	}
	MPU9250_Deactivate();
 8001278:	f7ff ff92 	bl	80011a0 <MPU9250_Deactivate>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000024c 	.word	0x2000024c

08001288 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8001298:	79f9      	ldrb	r1, [r7, #7]
 800129a:	1dbb      	adds	r3, r7, #6
 800129c:	2201      	movs	r2, #1
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffa8 	bl	80011f4 <MPU_SPI_Write>
	HAL_Delay(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f001 ff29 	bl	80030fc <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	603a      	str	r2, [r7, #0]
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	460b      	mov	r3, r1
 80012c0:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4619      	mov	r1, r3
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f7ff ffb6 	bl	800123c <MPU_SPI_Read>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	4613      	mov	r3, r2
 80012e6:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80012e8:	210c      	movs	r1, #12
 80012ea:	2025      	movs	r0, #37	; 0x25
 80012ec:	f7ff ffcc 	bl	8001288 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4619      	mov	r1, r3
 80012f4:	2026      	movs	r0, #38	; 0x26
 80012f6:	f7ff ffc7 	bl	8001288 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	4619      	mov	r1, r3
 80012fe:	2063      	movs	r0, #99	; 0x63
 8001300:	f7ff ffc2 	bl	8001288 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8001304:	2181      	movs	r1, #129	; 0x81
 8001306:	2027      	movs	r0, #39	; 0x27
 8001308:	f7ff ffbe 	bl	8001288 <writeRegister>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	603a      	str	r2, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	460b      	mov	r3, r1
 8001322:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8001324:	218c      	movs	r1, #140	; 0x8c
 8001326:	2025      	movs	r0, #37	; 0x25
 8001328:	f7ff ffae 	bl	8001288 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4619      	mov	r1, r3
 8001330:	2026      	movs	r0, #38	; 0x26
 8001332:	f7ff ffa9 	bl	8001288 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	2027      	movs	r0, #39	; 0x27
 8001342:	f7ff ffa1 	bl	8001288 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8001346:	2001      	movs	r0, #1
 8001348:	f001 fed8 	bl	80030fc <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	2049      	movs	r0, #73	; 0x49
 8001354:	f7ff ffad 	bl	80012b2 <readRegisters>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I, 1, _buffer);
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <whoAmI+0x18>)
 8001366:	2101      	movs	r1, #1
 8001368:	2075      	movs	r0, #117	; 0x75
 800136a:	f7ff ffa2 	bl	80012b2 <readRegisters>

	// return the register value
	return _buffer[0];
 800136e:	4b02      	ldr	r3, [pc, #8]	; (8001378 <whoAmI+0x18>)
 8001370:	781b      	ldrb	r3, [r3, #0]
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000c0 	.word	0x200000c0

0800137c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I, 1, _buffer);
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <whoAmIAK8963+0x18>)
 8001382:	2101      	movs	r1, #1
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ffc5 	bl	8001314 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 800138a:	4b02      	ldr	r3, [pc, #8]	; (8001394 <whoAmIAK8963+0x18>)
 800138c:	781b      	ldrb	r3, [r3, #0]
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000c0 	.word	0x200000c0

08001398 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800139e:	2101      	movs	r1, #1
 80013a0:	206b      	movs	r0, #107	; 0x6b
 80013a2:	f7ff ff71 	bl	8001288 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80013a6:	2120      	movs	r1, #32
 80013a8:	206a      	movs	r0, #106	; 0x6a
 80013aa:	f7ff ff6d 	bl	8001288 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80013ae:	210d      	movs	r1, #13
 80013b0:	2024      	movs	r0, #36	; 0x24
 80013b2:	f7ff ff69 	bl	8001288 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 80013b6:	2100      	movs	r1, #0
 80013b8:	200a      	movs	r0, #10
 80013ba:	f7ff ff8d 	bl	80012d8 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1, PWR_RESET);
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	206b      	movs	r0, #107	; 0x6b
 80013c2:	f7ff ff61 	bl	8001288 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80013c6:	200a      	movs	r0, #10
 80013c8:	f001 fe98 	bl	80030fc <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2, AK8963_RESET);
 80013cc:	2101      	movs	r1, #1
 80013ce:	200b      	movs	r0, #11
 80013d0:	f7ff ff82 	bl	80012d8 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80013d4:	2101      	movs	r1, #1
 80013d6:	206b      	movs	r0, #107	; 0x6b
 80013d8:	f7ff ff56 	bl	8001288 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80013dc:	f7ff ffc0 	bl	8001360 <whoAmI>
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b71      	cmp	r3, #113	; 0x71
 80013e8:	d004      	beq.n	80013f4 <MPU9250_Init+0x5c>
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b73      	cmp	r3, #115	; 0x73
 80013ee:	d001      	beq.n	80013f4 <MPU9250_Init+0x5c>
	{
		return 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e051      	b.n	8001498 <MPU9250_Init+0x100>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 80013f4:	2100      	movs	r1, #0
 80013f6:	206c      	movs	r0, #108	; 0x6c
 80013f8:	f7ff ff46 	bl	8001288 <writeRegister>

	// setting accel range to 8G as default
	writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_8G);
 80013fc:	2110      	movs	r1, #16
 80013fe:	201c      	movs	r0, #28
 8001400:	f7ff ff42 	bl	8001288 <writeRegister>

	// setting the gyro range to 500DPS as default
	writeRegister(GYRO_CONFIG, GYRO_FS_SEL_500DPS);
 8001404:	2108      	movs	r1, #8
 8001406:	201b      	movs	r0, #27
 8001408:	f7ff ff3e 	bl	8001288 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2, DLPF_184);
 800140c:	2101      	movs	r1, #1
 800140e:	201d      	movs	r0, #29
 8001410:	f7ff ff3a 	bl	8001288 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG, DLPF_184);
 8001414:	2101      	movs	r1, #1
 8001416:	201a      	movs	r0, #26
 8001418:	f7ff ff36 	bl	8001288 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV, 0x00);
 800141c:	2100      	movs	r1, #0
 800141e:	2019      	movs	r0, #25
 8001420:	f7ff ff32 	bl	8001288 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8001424:	2120      	movs	r1, #32
 8001426:	206a      	movs	r0, #106	; 0x6a
 8001428:	f7ff ff2e 	bl	8001288 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 800142c:	210d      	movs	r1, #13
 800142e:	2024      	movs	r0, #36	; 0x24
 8001430:	f7ff ff2a 	bl	8001288 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8001434:	f7ff ffa2 	bl	800137c <whoAmIAK8963>
 8001438:	4603      	mov	r3, r0
 800143a:	2b48      	cmp	r3, #72	; 0x48
 800143c:	d001      	beq.n	8001442 <MPU9250_Init+0xaa>
	{
		return 1;
 800143e:	2301      	movs	r3, #1
 8001440:	e02a      	b.n	8001498 <MPU9250_Init+0x100>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001442:	2100      	movs	r1, #0
 8001444:	200a      	movs	r0, #10
 8001446:	f7ff ff47 	bl	80012d8 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 800144a:	2064      	movs	r0, #100	; 0x64
 800144c:	f001 fe56 	bl	80030fc <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1, AK8963_FUSE_ROM);
 8001450:	210f      	movs	r1, #15
 8001452:	200a      	movs	r0, #10
 8001454:	f7ff ff40 	bl	80012d8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001458:	2064      	movs	r0, #100	; 0x64
 800145a:	f001 fe4f 	bl	80030fc <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <MPU9250_Init+0x108>)
 8001460:	2103      	movs	r1, #3
 8001462:	2010      	movs	r0, #16
 8001464:	f7ff ff56 	bl	8001314 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001468:	2100      	movs	r1, #0
 800146a:	200a      	movs	r0, #10
 800146c:	f7ff ff34 	bl	80012d8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001470:	2064      	movs	r0, #100	; 0x64
 8001472:	f001 fe43 	bl	80030fc <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1, AK8963_CNT_MEAS2);
 8001476:	2116      	movs	r1, #22
 8001478:	200a      	movs	r0, #10
 800147a:	f7ff ff2d 	bl	80012d8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800147e:	2064      	movs	r0, #100	; 0x64
 8001480:	f001 fe3c 	bl	80030fc <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001484:	2101      	movs	r1, #1
 8001486:	206b      	movs	r0, #107	; 0x6b
 8001488:	f7ff fefe 	bl	8001288 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL, 7 , _buffer);
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <MPU9250_Init+0x10c>)
 800148e:	2107      	movs	r1, #7
 8001490:	2003      	movs	r0, #3
 8001492:	f7ff ff3f 	bl	8001314 <readAK8963Registers>
//	writeRegister(GYRO_CONFIG, 0x08);
//	//accel config 8g
//	writeRegister(ACCEL_CONFIG, 0x10);

	// successful init, return 0
	return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200000d8 	.word	0x200000d8
 80014a4:	200000c0 	.word	0x200000c0

080014a8 <MPU9250_calibrate>:
}

uint16_t ii, packet_count, fifo_count;

void MPU9250_calibrate()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    //uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    writeRegister(PWR_MGMNT_1, PWR_RESET); // Write a one to bit 7 reset bit; toggle reset device
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	206b      	movs	r0, #107	; 0x6b
 80014b2:	f7ff fee9 	bl	8001288 <writeRegister>
    HAL_Delay(100);
 80014b6:	2064      	movs	r0, #100	; 0x64
 80014b8:	f001 fe20 	bl	80030fc <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80014bc:	2101      	movs	r1, #1
 80014be:	206b      	movs	r0, #107	; 0x6b
 80014c0:	f7ff fee2 	bl	8001288 <writeRegister>
    writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 80014c4:	2100      	movs	r1, #0
 80014c6:	206c      	movs	r0, #108	; 0x6c
 80014c8:	f7ff fede 	bl	8001288 <writeRegister>
    HAL_Delay(200);
 80014cc:	20c8      	movs	r0, #200	; 0xc8
 80014ce:	f001 fe15 	bl	80030fc <HAL_Delay>

    // Configure device for bias calculation
    writeRegister(INT_ENABLE, INT_DISABLE);   // Disable all interrupts
 80014d2:	2100      	movs	r1, #0
 80014d4:	2038      	movs	r0, #56	; 0x38
 80014d6:	f7ff fed7 	bl	8001288 <writeRegister>
    writeRegister(FIFO_EN, 0x00);      // Disable FIFO
 80014da:	2100      	movs	r1, #0
 80014dc:	2023      	movs	r0, #35	; 0x23
 80014de:	f7ff fed3 	bl	8001288 <writeRegister>
    writeRegister(PWR_MGMNT_1, SEN_ENABLE);   // Turn on internal clock source
 80014e2:	2100      	movs	r1, #0
 80014e4:	206b      	movs	r0, #107	; 0x6b
 80014e6:	f7ff fecf 	bl	8001288 <writeRegister>
    writeRegister(I2C_MST_CTRL, 0x00); // Disable I2C master
 80014ea:	2100      	movs	r1, #0
 80014ec:	2024      	movs	r0, #36	; 0x24
 80014ee:	f7ff fecb 	bl	8001288 <writeRegister>
    writeRegister(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80014f2:	2100      	movs	r1, #0
 80014f4:	206a      	movs	r0, #106	; 0x6a
 80014f6:	f7ff fec7 	bl	8001288 <writeRegister>
    writeRegister(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80014fa:	210c      	movs	r1, #12
 80014fc:	206a      	movs	r0, #106	; 0x6a
 80014fe:	f7ff fec3 	bl	8001288 <writeRegister>
    HAL_Delay(15);
 8001502:	200f      	movs	r0, #15
 8001504:	f001 fdfa 	bl	80030fc <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    writeRegister(CONFIG, DLPF_184);      // Set low-pass filter to 184 Hz
 8001508:	2101      	movs	r1, #1
 800150a:	201a      	movs	r0, #26
 800150c:	f7ff febc 	bl	8001288 <writeRegister>
    writeRegister(SMPDIV, 0x00);  // Set sample rate to 1 kHz
 8001510:	2100      	movs	r1, #0
 8001512:	2019      	movs	r0, #25
 8001514:	f7ff feb8 	bl	8001288 <writeRegister>
    writeRegister(GYRO_CONFIG, GYRO_FS_SEL_250DPS);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001518:	2100      	movs	r1, #0
 800151a:	201b      	movs	r0, #27
 800151c:	f7ff feb4 	bl	8001288 <writeRegister>
    writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_2G); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001520:	2100      	movs	r1, #0
 8001522:	201c      	movs	r0, #28
 8001524:	f7ff feb0 	bl	8001288 <writeRegister>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800152c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    writeRegister(USER_CTRL, 0x40);   // Enable FIFO
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	206a      	movs	r0, #106	; 0x6a
 8001532:	f7ff fea9 	bl	8001288 <writeRegister>
    writeRegister(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9250)
 8001536:	2178      	movs	r1, #120	; 0x78
 8001538:	2023      	movs	r0, #35	; 0x23
 800153a:	f7ff fea5 	bl	8001288 <writeRegister>
    HAL_Delay(28); // accumulate 40 samples in 27 milliseconds = 480 bytes
 800153e:	201c      	movs	r0, #28
 8001540:	f001 fddc 	bl	80030fc <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    writeRegister(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001544:	2100      	movs	r1, #0
 8001546:	2023      	movs	r0, #35	; 0x23
 8001548:	f7ff fe9e 	bl	8001288 <writeRegister>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    uint8_t fifoCount_buffer[2];
    readRegisters(FIFO_COUNT, 2, fifoCount_buffer);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	461a      	mov	r2, r3
 8001552:	2102      	movs	r1, #2
 8001554:	2072      	movs	r0, #114	; 0x72
 8001556:	f7ff feac 	bl	80012b2 <readRegisters>

    fifo_count = (fifoCount_buffer[0] << 8) | fifoCount_buffer[1];
 800155a:	7f3b      	ldrb	r3, [r7, #28]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	7f7b      	ldrb	r3, [r7, #29]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b9b      	ldr	r3, [pc, #620]	; (80017d8 <MPU9250_calibrate+0x330>)
 800156c:	801a      	strh	r2, [r3, #0]
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 800156e:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <MPU9250_calibrate+0x330>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	4a9a      	ldr	r2, [pc, #616]	; (80017dc <MPU9250_calibrate+0x334>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b98      	ldr	r3, [pc, #608]	; (80017e0 <MPU9250_calibrate+0x338>)
 800157e:	801a      	strh	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++)
 8001580:	4b98      	ldr	r3, [pc, #608]	; (80017e4 <MPU9250_calibrate+0x33c>)
 8001582:	2200      	movs	r2, #0
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	e078      	b.n	800167a <MPU9250_calibrate+0x1d2>
    {
        int32_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
        readRegisters(FIFO_READ, 12, data);
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	461a      	mov	r2, r3
 80015a6:	210c      	movs	r1, #12
 80015a8:	2074      	movs	r0, #116	; 0x74
 80015aa:	f7ff fe82 	bl	80012b2 <readRegisters>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80015ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21b      	sxth	r3, r3
 80015c0:	613b      	str	r3, [r7, #16]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80015c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	617b      	str	r3, [r7, #20]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80015d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b21a      	sxth	r2, r3
 80015de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	61bb      	str	r3, [r7, #24]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80015ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	607b      	str	r3, [r7, #4]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80015fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21b      	sxth	r3, r3
 8001610:	60bb      	str	r3, [r7, #8]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001612:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	60fb      	str	r3, [r7, #12]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001626:	4b70      	ldr	r3, [pc, #448]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4413      	add	r3, r2
 800162e:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001630:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	4413      	add	r3, r2
 800163a:	4a6b      	ldr	r2, [pc, #428]	; (80017e8 <MPU9250_calibrate+0x340>)
 800163c:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 800163e:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4413      	add	r3, r2
 8001646:	4a68      	ldr	r2, [pc, #416]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001648:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 800164a:	4b68      	ldr	r3, [pc, #416]	; (80017ec <MPU9250_calibrate+0x344>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a66      	ldr	r2, [pc, #408]	; (80017ec <MPU9250_calibrate+0x344>)
 8001654:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001656:	4b65      	ldr	r3, [pc, #404]	; (80017ec <MPU9250_calibrate+0x344>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	4413      	add	r3, r2
 800165e:	4a63      	ldr	r2, [pc, #396]	; (80017ec <MPU9250_calibrate+0x344>)
 8001660:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001662:	4b62      	ldr	r3, [pc, #392]	; (80017ec <MPU9250_calibrate+0x344>)
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	4a60      	ldr	r2, [pc, #384]	; (80017ec <MPU9250_calibrate+0x344>)
 800166c:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 800166e:	4b5d      	ldr	r3, [pc, #372]	; (80017e4 <MPU9250_calibrate+0x33c>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <MPU9250_calibrate+0x33c>)
 8001678:	801a      	strh	r2, [r3, #0]
 800167a:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <MPU9250_calibrate+0x33c>)
 800167c:	881a      	ldrh	r2, [r3, #0]
 800167e:	4b58      	ldr	r3, [pc, #352]	; (80017e0 <MPU9250_calibrate+0x338>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d380      	bcc.n	8001588 <MPU9250_calibrate+0xe0>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001686:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a55      	ldr	r2, [pc, #340]	; (80017e0 <MPU9250_calibrate+0x338>)
 800168c:	8812      	ldrh	r2, [r2, #0]
 800168e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001692:	4a55      	ldr	r2, [pc, #340]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001694:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <MPU9250_calibrate+0x338>)
 800169c:	8812      	ldrh	r2, [r2, #0]
 800169e:	fb93 f3f2 	sdiv	r3, r3, r2
 80016a2:	4a51      	ldr	r2, [pc, #324]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016a4:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 80016a6:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4a4d      	ldr	r2, [pc, #308]	; (80017e0 <MPU9250_calibrate+0x338>)
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80016b2:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016b4:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <MPU9250_calibrate+0x344>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a49      	ldr	r2, [pc, #292]	; (80017e0 <MPU9250_calibrate+0x338>)
 80016bc:	8812      	ldrh	r2, [r2, #0]
 80016be:	fb93 f3f2 	sdiv	r3, r3, r2
 80016c2:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <MPU9250_calibrate+0x344>)
 80016c4:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <MPU9250_calibrate+0x344>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <MPU9250_calibrate+0x338>)
 80016cc:	8812      	ldrh	r2, [r2, #0]
 80016ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80016d2:	4a46      	ldr	r2, [pc, #280]	; (80017ec <MPU9250_calibrate+0x344>)
 80016d4:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 80016d6:	4b45      	ldr	r3, [pc, #276]	; (80017ec <MPU9250_calibrate+0x344>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	4a41      	ldr	r2, [pc, #260]	; (80017e0 <MPU9250_calibrate+0x338>)
 80016dc:	8812      	ldrh	r2, [r2, #0]
 80016de:	fb93 f3f2 	sdiv	r3, r3, r2
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <MPU9250_calibrate+0x344>)
 80016e4:	6093      	str	r3, [r2, #8]
    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	dd06      	ble.n	80016fc <MPU9250_calibrate+0x254>
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a3c      	ldr	r2, [pc, #240]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016f8:	6093      	str	r3, [r2, #8]
 80016fa:	e005      	b.n	8001708 <MPU9250_calibrate+0x260>
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 80016fc:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001702:	4413      	add	r3, r2
 8001704:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001706:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001708:	4b38      	ldr	r3, [pc, #224]	; (80017ec <MPU9250_calibrate+0x344>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	425b      	negs	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	da00      	bge.n	8001714 <MPU9250_calibrate+0x26c>
 8001712:	3303      	adds	r3, #3
 8001714:	109b      	asrs	r3, r3, #2
 8001716:	121b      	asrs	r3, r3, #8
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f887 3020 	strb.w	r3, [r7, #32]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800171e:	4b33      	ldr	r3, [pc, #204]	; (80017ec <MPU9250_calibrate+0x344>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	425b      	negs	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	da00      	bge.n	800172a <MPU9250_calibrate+0x282>
 8001728:	3303      	adds	r3, #3
 800172a:	109b      	asrs	r3, r3, #2
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <MPU9250_calibrate+0x344>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	425b      	negs	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	da00      	bge.n	800173e <MPU9250_calibrate+0x296>
 800173c:	3303      	adds	r3, #3
 800173e:	109b      	asrs	r3, r3, #2
 8001740:	121b      	asrs	r3, r3, #8
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <MPU9250_calibrate+0x344>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	425b      	negs	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	da00      	bge.n	8001754 <MPU9250_calibrate+0x2ac>
 8001752:	3303      	adds	r3, #3
 8001754:	109b      	asrs	r3, r3, #2
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <MPU9250_calibrate+0x344>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	425b      	negs	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	da00      	bge.n	8001768 <MPU9250_calibrate+0x2c0>
 8001766:	3303      	adds	r3, #3
 8001768:	109b      	asrs	r3, r3, #2
 800176a:	121b      	asrs	r3, r3, #8
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <MPU9250_calibrate+0x344>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	425b      	negs	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	da00      	bge.n	800177e <MPU9250_calibrate+0x2d6>
 800177c:	3303      	adds	r3, #3
 800177e:	109b      	asrs	r3, r3, #2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    // Push gyro biases to hardware registers
    writeRegister(XG_OFFSET_H, data[0]);
 8001786:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178a:	4619      	mov	r1, r3
 800178c:	2013      	movs	r0, #19
 800178e:	f7ff fd7b 	bl	8001288 <writeRegister>
    writeRegister(XG_OFFSET_L, data[1]);
 8001792:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001796:	4619      	mov	r1, r3
 8001798:	2014      	movs	r0, #20
 800179a:	f7ff fd75 	bl	8001288 <writeRegister>
    writeRegister(YG_OFFSET_H, data[2]);
 800179e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017a2:	4619      	mov	r1, r3
 80017a4:	2015      	movs	r0, #21
 80017a6:	f7ff fd6f 	bl	8001288 <writeRegister>
    writeRegister(YG_OFFSET_L, data[3]);
 80017aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017ae:	4619      	mov	r1, r3
 80017b0:	2016      	movs	r0, #22
 80017b2:	f7ff fd69 	bl	8001288 <writeRegister>
    writeRegister(ZG_OFFSET_H, data[4]);
 80017b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	2017      	movs	r0, #23
 80017be:	f7ff fd63 	bl	8001288 <writeRegister>
    writeRegister(ZG_OFFSET_L, data[5]);
 80017c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80017c6:	4619      	mov	r1, r3
 80017c8:	2018      	movs	r0, #24
 80017ca:	f7ff fd5d 	bl	8001288 <writeRegister>
//	acc_ofset_data_corrected[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
//	acc_ofset_data_corrected[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
//	acc_ofset_data_corrected[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
//	acc_ofset_data_corrected[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);

}
 80017ce:	bf00      	nop
 80017d0:	3730      	adds	r7, #48	; 0x30
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200000e0 	.word	0x200000e0
 80017dc:	aaaaaaab 	.word	0xaaaaaaab
 80017e0:	200000de 	.word	0x200000de
 80017e4:	200000dc 	.word	0x200000dc
 80017e8:	20000190 	.word	0x20000190
 80017ec:	20000184 	.word	0x20000184

080017f0 <MPU9250_GetData>:

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 80017fc:	4a9d      	ldr	r2, [pc, #628]	; (8001a74 <MPU9250_GetData+0x284>)
 80017fe:	2115      	movs	r1, #21
 8001800:	203b      	movs	r0, #59	; 0x3b
 8001802:	f7ff fd56 	bl	80012b2 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001806:	4b9b      	ldr	r3, [pc, #620]	; (8001a74 <MPU9250_GetData+0x284>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21a      	sxth	r2, r3
 800180e:	4b99      	ldr	r3, [pc, #612]	; (8001a74 <MPU9250_GetData+0x284>)
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	b21b      	sxth	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b21a      	sxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800181c:	4b95      	ldr	r3, [pc, #596]	; (8001a74 <MPU9250_GetData+0x284>)
 800181e:	789b      	ldrb	r3, [r3, #2]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b219      	sxth	r1, r3
 8001824:	4b93      	ldr	r3, [pc, #588]	; (8001a74 <MPU9250_GetData+0x284>)
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	b21a      	sxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3302      	adds	r3, #2
 800182e:	430a      	orrs	r2, r1
 8001830:	b212      	sxth	r2, r2
 8001832:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001834:	4b8f      	ldr	r3, [pc, #572]	; (8001a74 <MPU9250_GetData+0x284>)
 8001836:	791b      	ldrb	r3, [r3, #4]
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b219      	sxth	r1, r3
 800183c:	4b8d      	ldr	r3, [pc, #564]	; (8001a74 <MPU9250_GetData+0x284>)
 800183e:	795b      	ldrb	r3, [r3, #5]
 8001840:	b21a      	sxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	430a      	orrs	r2, r1
 8001848:	b212      	sxth	r2, r2
 800184a:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) |_buffer[9];
 800184c:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <MPU9250_GetData+0x284>)
 800184e:	7a1b      	ldrb	r3, [r3, #8]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	4b87      	ldr	r3, [pc, #540]	; (8001a74 <MPU9250_GetData+0x284>)
 8001856:	7a5b      	ldrb	r3, [r3, #9]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21a      	sxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001862:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <MPU9250_GetData+0x284>)
 8001864:	7a9b      	ldrb	r3, [r3, #10]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b219      	sxth	r1, r3
 800186a:	4b82      	ldr	r3, [pc, #520]	; (8001a74 <MPU9250_GetData+0x284>)
 800186c:	7adb      	ldrb	r3, [r3, #11]
 800186e:	b21a      	sxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3302      	adds	r3, #2
 8001874:	430a      	orrs	r2, r1
 8001876:	b212      	sxth	r2, r2
 8001878:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 800187a:	4b7e      	ldr	r3, [pc, #504]	; (8001a74 <MPU9250_GetData+0x284>)
 800187c:	7b1b      	ldrb	r3, [r3, #12]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b219      	sxth	r1, r3
 8001882:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <MPU9250_GetData+0x284>)
 8001884:	7b5b      	ldrb	r3, [r3, #13]
 8001886:	b21a      	sxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3304      	adds	r3, #4
 800188c:	430a      	orrs	r2, r1
 800188e:	b212      	sxth	r2, r2
 8001890:	801a      	strh	r2, [r3, #0]

	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 16384.0f * 9.8f;
 8001892:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <MPU9250_GetData+0x284>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	b21b      	sxth	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	4b75      	ldr	r3, [pc, #468]	; (8001a74 <MPU9250_GetData+0x284>)
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	4413      	add	r3, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f9ca 	bl	8000c3c <__aeabi_i2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff facc 	bl	8000e4c <__aeabi_fdiv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4970      	ldr	r1, [pc, #448]	; (8001a78 <MPU9250_GetData+0x288>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fa13 	bl	8000ce4 <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <MPU9250_GetData+0x28c>)
 80018c4:	601a      	str	r2, [r3, #0]
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 16384.0f * 9.8f;
 80018c6:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <MPU9250_GetData+0x284>)
 80018c8:	789b      	ldrb	r3, [r3, #2]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <MPU9250_GetData+0x284>)
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	4413      	add	r3, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f9b0 	bl	8000c3c <__aeabi_i2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fab2 	bl	8000e4c <__aeabi_fdiv>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4963      	ldr	r1, [pc, #396]	; (8001a78 <MPU9250_GetData+0x288>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f9f9 	bl	8000ce4 <__aeabi_fmul>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <MPU9250_GetData+0x290>)
 80018f8:	601a      	str	r2, [r3, #0]
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 16384.0f * 9.8f;
 80018fa:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <MPU9250_GetData+0x284>)
 80018fc:	791b      	ldrb	r3, [r3, #4]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b21b      	sxth	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <MPU9250_GetData+0x284>)
 8001906:	795b      	ldrb	r3, [r3, #5]
 8001908:	4413      	add	r3, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f996 	bl	8000c3c <__aeabi_i2f>
 8001910:	4603      	mov	r3, r0
 8001912:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa98 	bl	8000e4c <__aeabi_fdiv>
 800191c:	4603      	mov	r3, r0
 800191e:	4956      	ldr	r1, [pc, #344]	; (8001a78 <MPU9250_GetData+0x288>)
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f9df 	bl	8000ce4 <__aeabi_fmul>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <MPU9250_GetData+0x294>)
 800192c:	601a      	str	r2, [r3, #0]
//	accelX=((((int16_t)((uint16_t)_buffer[6] << 8) + _buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])))/4096.0f*9.8f;
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 65.5f * 3.14f / 180.0f;
 800192e:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <MPU9250_GetData+0x284>)
 8001930:	7a1b      	ldrb	r3, [r3, #8]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b21b      	sxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <MPU9250_GetData+0x284>)
 800193a:	7a5b      	ldrb	r3, [r3, #9]
 800193c:	4413      	add	r3, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f97c 	bl	8000c3c <__aeabi_i2f>
 8001944:	4603      	mov	r3, r0
 8001946:	4950      	ldr	r1, [pc, #320]	; (8001a88 <MPU9250_GetData+0x298>)
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fa7f 	bl	8000e4c <__aeabi_fdiv>
 800194e:	4603      	mov	r3, r0
 8001950:	494e      	ldr	r1, [pc, #312]	; (8001a8c <MPU9250_GetData+0x29c>)
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f9c6 	bl	8000ce4 <__aeabi_fmul>
 8001958:	4603      	mov	r3, r0
 800195a:	494d      	ldr	r1, [pc, #308]	; (8001a90 <MPU9250_GetData+0x2a0>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fa75 	bl	8000e4c <__aeabi_fdiv>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <MPU9250_GetData+0x2a4>)
 8001968:	601a      	str	r2, [r3, #0]
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 65.5f * 3.14f / 180.0f;
 800196a:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <MPU9250_GetData+0x284>)
 800196c:	7a9b      	ldrb	r3, [r3, #10]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21b      	sxth	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <MPU9250_GetData+0x284>)
 8001976:	7adb      	ldrb	r3, [r3, #11]
 8001978:	4413      	add	r3, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f95e 	bl	8000c3c <__aeabi_i2f>
 8001980:	4603      	mov	r3, r0
 8001982:	4941      	ldr	r1, [pc, #260]	; (8001a88 <MPU9250_GetData+0x298>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fa61 	bl	8000e4c <__aeabi_fdiv>
 800198a:	4603      	mov	r3, r0
 800198c:	493f      	ldr	r1, [pc, #252]	; (8001a8c <MPU9250_GetData+0x29c>)
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9a8 	bl	8000ce4 <__aeabi_fmul>
 8001994:	4603      	mov	r3, r0
 8001996:	493e      	ldr	r1, [pc, #248]	; (8001a90 <MPU9250_GetData+0x2a0>)
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fa57 	bl	8000e4c <__aeabi_fdiv>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <MPU9250_GetData+0x2a8>)
 80019a4:	601a      	str	r2, [r3, #0]
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 65.5f * 3.14f / 180.0f;
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <MPU9250_GetData+0x284>)
 80019a8:	7b1b      	ldrb	r3, [r3, #12]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <MPU9250_GetData+0x284>)
 80019b2:	7b5b      	ldrb	r3, [r3, #13]
 80019b4:	4413      	add	r3, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f940 	bl	8000c3c <__aeabi_i2f>
 80019bc:	4603      	mov	r3, r0
 80019be:	4932      	ldr	r1, [pc, #200]	; (8001a88 <MPU9250_GetData+0x298>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fa43 	bl	8000e4c <__aeabi_fdiv>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4930      	ldr	r1, [pc, #192]	; (8001a8c <MPU9250_GetData+0x29c>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f98a 	bl	8000ce4 <__aeabi_fmul>
 80019d0:	4603      	mov	r3, r0
 80019d2:	492f      	ldr	r1, [pc, #188]	; (8001a90 <MPU9250_GetData+0x2a0>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fa39 	bl	8000e4c <__aeabi_fdiv>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <MPU9250_GetData+0x2ac>)
 80019e0:	601a      	str	r2, [r3, #0]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <MPU9250_GetData+0x28c>)
 80019e4:	681c      	ldr	r4, [r3, #0]
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <MPU9250_GetData+0x2b0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f926 	bl	8000c3c <__aeabi_i2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fa28 	bl	8000e4c <__aeabi_fdiv>
 80019fc:	4603      	mov	r3, r0
 80019fe:	491e      	ldr	r1, [pc, #120]	; (8001a78 <MPU9250_GetData+0x288>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f96f 	bl	8000ce4 <__aeabi_fmul>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff f860 	bl	8000ad0 <__aeabi_fsub>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MPU9250_GetData+0x28c>)
 8001a16:	601a      	str	r2, [r3, #0]
	accelY = accelY - (accel_bias[1] / 16384.0f * 9.8f);
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MPU9250_GetData+0x290>)
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <MPU9250_GetData+0x2b0>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f90b 	bl	8000c3c <__aeabi_i2f>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fa0d 	bl	8000e4c <__aeabi_fdiv>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4910      	ldr	r1, [pc, #64]	; (8001a78 <MPU9250_GetData+0x288>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f954 	bl	8000ce4 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7ff f845 	bl	8000ad0 <__aeabi_fsub>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <MPU9250_GetData+0x290>)
 8001a4c:	601a      	str	r2, [r3, #0]
	accelZ = accelZ - (accel_bias[2] / 16384.0f * 9.8f);
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <MPU9250_GetData+0x294>)
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MPU9250_GetData+0x2b0>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f8f0 	bl	8000c3c <__aeabi_i2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f9f2 	bl	8000e4c <__aeabi_fdiv>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4903      	ldr	r1, [pc, #12]	; (8001a78 <MPU9250_GetData+0x288>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff f939 	bl	8000ce4 <__aeabi_fmul>
 8001a72:	e017      	b.n	8001aa4 <MPU9250_GetData+0x2b4>
 8001a74:	200000c0 	.word	0x200000c0
 8001a78:	411ccccd 	.word	0x411ccccd
 8001a7c:	20000120 	.word	0x20000120
 8001a80:	20000124 	.word	0x20000124
 8001a84:	20000128 	.word	0x20000128
 8001a88:	42830000 	.word	0x42830000
 8001a8c:	4048f5c3 	.word	0x4048f5c3
 8001a90:	43340000 	.word	0x43340000
 8001a94:	20000114 	.word	0x20000114
 8001a98:	20000118 	.word	0x20000118
 8001a9c:	2000011c 	.word	0x2000011c
 8001aa0:	20000190 	.word	0x20000190
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f811 	bl	8000ad0 <__aeabi_fsub>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MPU9250_GetData+0x330>)
 8001ab4:	601a      	str	r2, [r3, #0]
	gyroX_filtered = filter(gyroX);
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MPU9250_GetData+0x334>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff faee 	bl	800109c <filter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <MPU9250_GetData+0x338>)
 8001ac4:	6013      	str	r3, [r2, #0]
	gyroY_filtered = filter(gyroY);
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <MPU9250_GetData+0x33c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fae6 	bl	800109c <filter>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <MPU9250_GetData+0x340>)
 8001ad4:	6013      	str	r3, [r2, #0]
	gyroZ_filtered = filter(gyroZ);
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MPU9250_GetData+0x344>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fade 	bl	800109c <filter>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <MPU9250_GetData+0x348>)
 8001ae4:	6013      	str	r3, [r2, #0]
	accelX_filtered = filter(accelX);
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MPU9250_GetData+0x34c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fad6 	bl	800109c <filter>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <MPU9250_GetData+0x350>)
 8001af4:	6013      	str	r3, [r2, #0]
	accelY_filtered = filter(accelY);
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MPU9250_GetData+0x354>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff face 	bl	800109c <filter>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <MPU9250_GetData+0x358>)
 8001b04:	6013      	str	r3, [r2, #0]
	accelZ_filtered = filter(accelZ);
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MPU9250_GetData+0x330>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fac6 	bl	800109c <filter>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <MPU9250_GetData+0x35c>)
 8001b14:	6013      	str	r3, [r2, #0]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000128 	.word	0x20000128
 8001b24:	20000114 	.word	0x20000114
 8001b28:	2000012c 	.word	0x2000012c
 8001b2c:	20000118 	.word	0x20000118
 8001b30:	20000130 	.word	0x20000130
 8001b34:	2000011c 	.word	0x2000011c
 8001b38:	20000134 	.word	0x20000134
 8001b3c:	20000120 	.word	0x20000120
 8001b40:	20000138 	.word	0x20000138
 8001b44:	20000124 	.word	0x20000124
 8001b48:	2000013c 	.word	0x2000013c
 8001b4c:	20000140 	.word	0x20000140

08001b50 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <MX_CAN_Init+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b6e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001b72:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001ba0:	f001 fad0 	bl	8003144 <HAL_CAN_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001baa:	f001 f855 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200000e4 	.word	0x200000e4
 8001bb8:	40006400 	.word	0x40006400

08001bbc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a24      	ldr	r2, [pc, #144]	; (8001c68 <HAL_CAN_MspInit+0xac>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d141      	bne.n	8001c60 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001be6:	61d3      	str	r3, [r2, #28]
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4813      	ldr	r0, [pc, #76]	; (8001c70 <HAL_CAN_MspInit+0xb4>)
 8001c22:	f002 f8f3 	bl	8003e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <HAL_CAN_MspInit+0xb4>)
 8001c3c:	f002 f8e6 	bl	8003e0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2105      	movs	r1, #5
 8001c44:	2013      	movs	r0, #19
 8001c46:	f002 f840 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001c4a:	2013      	movs	r0, #19
 8001c4c:	f002 f859 	bl	8003d02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2105      	movs	r1, #5
 8001c54:	2014      	movs	r0, #20
 8001c56:	f002 f838 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001c5a:	2014      	movs	r0, #20
 8001c5c:	f002 f851 	bl	8003d02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40006400 	.word	0x40006400
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010800 	.word	0x40010800

08001c74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c78:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <MX_FREERTOS_Init+0x28>)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <MX_FREERTOS_Init+0x2c>)
 8001c7e:	f003 ffd1 	bl	8005c24 <osThreadNew>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <MX_FREERTOS_Init+0x30>)
 8001c86:	6013      	str	r3, [r2, #0]

  /* creation of MPUTask */
  MPUTaskHandle = osThreadNew(StartMPUTask, NULL, &MPUTask_attributes);
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <MX_FREERTOS_Init+0x34>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_FREERTOS_Init+0x38>)
 8001c8e:	f003 ffc9 	bl	8005c24 <osThreadNew>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <MX_FREERTOS_Init+0x3c>)
 8001c96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	080090fc 	.word	0x080090fc
 8001ca0:	08001cb5 	.word	0x08001cb5
 8001ca4:	200001a0 	.word	0x200001a0
 8001ca8:	08009120 	.word	0x08009120
 8001cac:	08001cc9 	.word	0x08001cc9
 8001cb0:	200001a4 	.word	0x200001a4

08001cb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f004 f85b 	bl	8005d78 <osDelay>
 8001cc2:	e7fb      	b.n	8001cbc <StartDefaultTask+0x8>
 8001cc4:	0000      	movs	r0, r0
	...

08001cc8 <StartMPUTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMPUTask */
void StartMPUTask(void *argument)
{
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b090      	sub	sp, #64	; 0x40
 8001ccc:	af04      	add	r7, sp, #16
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMPUTask */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 10;
 8001cd0:	230a      	movs	r3, #10
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  xLastWakeTime = xTaskGetTickCount();
 8001cd4:	f005 f9c2 	bl	800705c <xTaskGetTickCount>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	int16_t AccData[3], GyroData[3], MagData[3];
	for (int i = 0; i < 1; ++i) {
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce0:	e056      	b.n	8001d90 <StartMPUTask+0xc8>
	  MPU9250_GetData(AccData, GyroData, MagData);
 8001ce2:	f107 020c 	add.w	r2, r7, #12
 8001ce6:	f107 0114 	add.w	r1, r7, #20
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fd7e 	bl	80017f0 <MPU9250_GetData>
	  accelX_summ += accelX;
 8001cf4:	4b80      	ldr	r3, [pc, #512]	; (8001ef8 <StartMPUTask+0x230>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a80      	ldr	r2, [pc, #512]	; (8001efc <StartMPUTask+0x234>)
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fee8 	bl	8000ad4 <__addsf3>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b7b      	ldr	r3, [pc, #492]	; (8001ef8 <StartMPUTask+0x230>)
 8001d0a:	601a      	str	r2, [r3, #0]
	  accelY_summ += accelY;
 8001d0c:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <StartMPUTask+0x238>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a7c      	ldr	r2, [pc, #496]	; (8001f04 <StartMPUTask+0x23c>)
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fedc 	bl	8000ad4 <__addsf3>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b77      	ldr	r3, [pc, #476]	; (8001f00 <StartMPUTask+0x238>)
 8001d22:	601a      	str	r2, [r3, #0]
	  accelZ_summ += accelZ;
 8001d24:	4b78      	ldr	r3, [pc, #480]	; (8001f08 <StartMPUTask+0x240>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a78      	ldr	r2, [pc, #480]	; (8001f0c <StartMPUTask+0x244>)
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fed0 	bl	8000ad4 <__addsf3>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b73      	ldr	r3, [pc, #460]	; (8001f08 <StartMPUTask+0x240>)
 8001d3a:	601a      	str	r2, [r3, #0]
	  gyroX_summ += gyroX;
 8001d3c:	4b74      	ldr	r3, [pc, #464]	; (8001f10 <StartMPUTask+0x248>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a74      	ldr	r2, [pc, #464]	; (8001f14 <StartMPUTask+0x24c>)
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fec4 	bl	8000ad4 <__addsf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <StartMPUTask+0x248>)
 8001d52:	601a      	str	r2, [r3, #0]
	  gyroY_summ += gyroY;
 8001d54:	4b70      	ldr	r3, [pc, #448]	; (8001f18 <StartMPUTask+0x250>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a70      	ldr	r2, [pc, #448]	; (8001f1c <StartMPUTask+0x254>)
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe feb8 	bl	8000ad4 <__addsf3>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b6b      	ldr	r3, [pc, #428]	; (8001f18 <StartMPUTask+0x250>)
 8001d6a:	601a      	str	r2, [r3, #0]
	  gyroZ_summ += gyroZ;
 8001d6c:	4b6c      	ldr	r3, [pc, #432]	; (8001f20 <StartMPUTask+0x258>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6c      	ldr	r2, [pc, #432]	; (8001f24 <StartMPUTask+0x25c>)
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe feac 	bl	8000ad4 <__addsf3>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <StartMPUTask+0x258>)
 8001d82:	601a      	str	r2, [r3, #0]
	  osDelay(1);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f003 fff7 	bl	8005d78 <osDelay>
	for (int i = 0; i < 1; ++i) {
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	dda5      	ble.n	8001ce2 <StartMPUTask+0x1a>
	}
	accelX_average = accelX_summ / 1;
 8001d96:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <StartMPUTask+0x230>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a63      	ldr	r2, [pc, #396]	; (8001f28 <StartMPUTask+0x260>)
 8001d9c:	6013      	str	r3, [r2, #0]
	accelY_average = accelY_summ / 1;
 8001d9e:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <StartMPUTask+0x238>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a62      	ldr	r2, [pc, #392]	; (8001f2c <StartMPUTask+0x264>)
 8001da4:	6013      	str	r3, [r2, #0]
	accelZ_average = accelZ_summ / 1;
 8001da6:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <StartMPUTask+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a61      	ldr	r2, [pc, #388]	; (8001f30 <StartMPUTask+0x268>)
 8001dac:	6013      	str	r3, [r2, #0]
	gyroX_average = gyroX_summ / 1;
 8001dae:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <StartMPUTask+0x248>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a60      	ldr	r2, [pc, #384]	; (8001f34 <StartMPUTask+0x26c>)
 8001db4:	6013      	str	r3, [r2, #0]
	gyroY_average = gyroY_summ / 1;
 8001db6:	4b58      	ldr	r3, [pc, #352]	; (8001f18 <StartMPUTask+0x250>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a5f      	ldr	r2, [pc, #380]	; (8001f38 <StartMPUTask+0x270>)
 8001dbc:	6013      	str	r3, [r2, #0]
	gyroZ_average = (gyroZ_summ - 0.0245) / 1;
 8001dbe:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <StartMPUTask+0x258>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fb28 	bl	8000418 <__aeabi_f2d>
 8001dc8:	a349      	add	r3, pc, #292	; (adr r3, 8001ef0 <StartMPUTask+0x228>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe f9c3 	bl	8000158 <__aeabi_dsub>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe fe25 	bl	8000a28 <__aeabi_d2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <StartMPUTask+0x274>)
 8001de2:	6013      	str	r3, [r2, #0]
	accelX_summ = 0;
 8001de4:	4b44      	ldr	r3, [pc, #272]	; (8001ef8 <StartMPUTask+0x230>)
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
	accelY_summ = 0;
 8001dec:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <StartMPUTask+0x238>)
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	accelZ_summ = 0;
 8001df4:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <StartMPUTask+0x240>)
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
	gyroX_summ = 0;
 8001dfc:	4b44      	ldr	r3, [pc, #272]	; (8001f10 <StartMPUTask+0x248>)
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
	gyroY_summ = 0;
 8001e04:	4b44      	ldr	r3, [pc, #272]	; (8001f18 <StartMPUTask+0x250>)
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
	gyroZ_summ = 0;
 8001e0c:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <StartMPUTask+0x258>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

	imu_filter(accelX_average, accelY_average, accelZ_average, gyroX_average, gyroY_average, gyroZ_average);
 8001e14:	4b44      	ldr	r3, [pc, #272]	; (8001f28 <StartMPUTask+0x260>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <StartMPUTask+0x264>)
 8001e1a:	6819      	ldr	r1, [r3, #0]
 8001e1c:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <StartMPUTask+0x268>)
 8001e1e:	681c      	ldr	r4, [r3, #0]
 8001e20:	4b44      	ldr	r3, [pc, #272]	; (8001f34 <StartMPUTask+0x26c>)
 8001e22:	681d      	ldr	r5, [r3, #0]
 8001e24:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <StartMPUTask+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a44      	ldr	r2, [pc, #272]	; (8001f3c <StartMPUTask+0x274>)
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	9201      	str	r2, [sp, #4]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	462b      	mov	r3, r5
 8001e32:	4622      	mov	r2, r4
 8001e34:	f000 fafe 	bl	8002434 <imu_filter>
	eulerAngles(q_est, &roll, &pitch, &yaw);
 8001e38:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <StartMPUTask+0x278>)
 8001e3a:	4a42      	ldr	r2, [pc, #264]	; (8001f44 <StartMPUTask+0x27c>)
 8001e3c:	9202      	str	r2, [sp, #8]
 8001e3e:	4a42      	ldr	r2, [pc, #264]	; (8001f48 <StartMPUTask+0x280>)
 8001e40:	9201      	str	r2, [sp, #4]
 8001e42:	4a42      	ldr	r2, [pc, #264]	; (8001f4c <StartMPUTask+0x284>)
 8001e44:	9200      	str	r2, [sp, #0]
 8001e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e48:	f000 fd10 	bl	800286c <eulerAngles>
	yaw_corr = yaw / 2;
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <StartMPUTask+0x27c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fff9 	bl	8000e4c <__aeabi_fdiv>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <StartMPUTask+0x288>)
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <StartMPUTask+0x284>)
 8001e64:	681b      	ldr	r3, [r3, #0]
//	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderAccel, can_data, &TxMailbox) == HAL_OK) {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//		can++;
//	}
//	osDelay(1);
	memcpy(can_data, &roll, 4);
 8001e66:	4a3b      	ldr	r2, [pc, #236]	; (8001f54 <StartMPUTask+0x28c>)
 8001e68:	6013      	str	r3, [r2, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 8001e6a:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <StartMPUTask+0x290>)
 8001e6c:	4a39      	ldr	r2, [pc, #228]	; (8001f54 <StartMPUTask+0x28c>)
 8001e6e:	493b      	ldr	r1, [pc, #236]	; (8001f5c <StartMPUTask+0x294>)
 8001e70:	483b      	ldr	r0, [pc, #236]	; (8001f60 <StartMPUTask+0x298>)
 8001e72:	f001 fb6f 	bl	8003554 <HAL_CAN_AddTxMessage>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d103      	bne.n	8001e84 <StartMPUTask+0x1bc>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001e7c:	2108      	movs	r1, #8
 8001e7e:	4839      	ldr	r0, [pc, #228]	; (8001f64 <StartMPUTask+0x29c>)
 8001e80:	f002 f960 	bl	8004144 <HAL_GPIO_TogglePin>
	}
	osDelay(1);
 8001e84:	2001      	movs	r0, #1
 8001e86:	f003 ff77 	bl	8005d78 <osDelay>
 8001e8a:	4b2f      	ldr	r3, [pc, #188]	; (8001f48 <StartMPUTask+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
	memcpy(can_data, &pitch, 4);
 8001e8e:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <StartMPUTask+0x28c>)
 8001e90:	6013      	str	r3, [r2, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderPitch, can_data, &TxMailbox) == HAL_OK) {
 8001e92:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <StartMPUTask+0x290>)
 8001e94:	4a2f      	ldr	r2, [pc, #188]	; (8001f54 <StartMPUTask+0x28c>)
 8001e96:	4934      	ldr	r1, [pc, #208]	; (8001f68 <StartMPUTask+0x2a0>)
 8001e98:	4831      	ldr	r0, [pc, #196]	; (8001f60 <StartMPUTask+0x298>)
 8001e9a:	f001 fb5b 	bl	8003554 <HAL_CAN_AddTxMessage>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <StartMPUTask+0x1e4>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001ea4:	2108      	movs	r1, #8
 8001ea6:	482f      	ldr	r0, [pc, #188]	; (8001f64 <StartMPUTask+0x29c>)
 8001ea8:	f002 f94c 	bl	8004144 <HAL_GPIO_TogglePin>
	}
	osDelay(1);
 8001eac:	2001      	movs	r0, #1
 8001eae:	f003 ff63 	bl	8005d78 <osDelay>
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <StartMPUTask+0x27c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
	memcpy(can_data, &yaw, 4);
 8001eb6:	4a27      	ldr	r2, [pc, #156]	; (8001f54 <StartMPUTask+0x28c>)
 8001eb8:	6013      	str	r3, [r2, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
 8001eba:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <StartMPUTask+0x290>)
 8001ebc:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <StartMPUTask+0x28c>)
 8001ebe:	492b      	ldr	r1, [pc, #172]	; (8001f6c <StartMPUTask+0x2a4>)
 8001ec0:	4827      	ldr	r0, [pc, #156]	; (8001f60 <StartMPUTask+0x298>)
 8001ec2:	f001 fb47 	bl	8003554 <HAL_CAN_AddTxMessage>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d103      	bne.n	8001ed4 <StartMPUTask+0x20c>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001ecc:	2108      	movs	r1, #8
 8001ece:	4825      	ldr	r0, [pc, #148]	; (8001f64 <StartMPUTask+0x29c>)
 8001ed0:	f002 f938 	bl	8004144 <HAL_GPIO_TogglePin>
	}
	count = HAL_GetTick();
 8001ed4:	f001 f908 	bl	80030e8 <HAL_GetTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <StartMPUTask+0x2a8>)
 8001edc:	6013      	str	r3, [r2, #0]
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f004 feeb 	bl	8006cc0 <vTaskDelayUntil>
  {
 8001eea:	e6f7      	b.n	8001cdc <StartMPUTask+0x14>
 8001eec:	f3af 8000 	nop.w
 8001ef0:	2b020c4a 	.word	0x2b020c4a
 8001ef4:	3f991687 	.word	0x3f991687
 8001ef8:	20000144 	.word	0x20000144
 8001efc:	20000120 	.word	0x20000120
 8001f00:	20000148 	.word	0x20000148
 8001f04:	20000124 	.word	0x20000124
 8001f08:	2000014c 	.word	0x2000014c
 8001f0c:	20000128 	.word	0x20000128
 8001f10:	2000015c 	.word	0x2000015c
 8001f14:	20000114 	.word	0x20000114
 8001f18:	20000160 	.word	0x20000160
 8001f1c:	20000118 	.word	0x20000118
 8001f20:	20000164 	.word	0x20000164
 8001f24:	2000011c 	.word	0x2000011c
 8001f28:	20000150 	.word	0x20000150
 8001f2c:	20000154 	.word	0x20000154
 8001f30:	20000158 	.word	0x20000158
 8001f34:	20000168 	.word	0x20000168
 8001f38:	2000016c 	.word	0x2000016c
 8001f3c:	20000170 	.word	0x20000170
 8001f40:	20000008 	.word	0x20000008
 8001f44:	2000017c 	.word	0x2000017c
 8001f48:	20000178 	.word	0x20000178
 8001f4c:	20000174 	.word	0x20000174
 8001f50:	20000180 	.word	0x20000180
 8001f54:	2000010c 	.word	0x2000010c
 8001f58:	20000248 	.word	0x20000248
 8001f5c:	200001d0 	.word	0x200001d0
 8001f60:	200000e4 	.word	0x200000e4
 8001f64:	40010c00 	.word	0x40010c00
 8001f68:	200001e8 	.word	0x200001e8
 8001f6c:	20000200 	.word	0x20000200
 8001f70:	2000019c 	.word	0x2000019c

08001f74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <MX_GPIO_Init+0xcc>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <MX_GPIO_Init+0xcc>)
 8001f8e:	f043 0320 	orr.w	r3, r3, #32
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <MX_GPIO_Init+0xcc>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <MX_GPIO_Init+0xcc>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a26      	ldr	r2, [pc, #152]	; (8002040 <MX_GPIO_Init+0xcc>)
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <MX_GPIO_Init+0xcc>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	4b21      	ldr	r3, [pc, #132]	; (8002040 <MX_GPIO_Init+0xcc>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a20      	ldr	r2, [pc, #128]	; (8002040 <MX_GPIO_Init+0xcc>)
 8001fbe:	f043 0308 	orr.w	r3, r3, #8
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <MX_GPIO_Init+0xcc>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f248 3110 	movw	r1, #33552	; 0x8310
 8001fd6:	481b      	ldr	r0, [pc, #108]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001fd8:	f002 f89c 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2118      	movs	r1, #24
 8001fe0:	4819      	ldr	r0, [pc, #100]	; (8002048 <MX_GPIO_Init+0xd4>)
 8001fe2:	f002 f897 	bl	8004114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MPU_Pin;
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <MX_GPIO_Init+0xd8>)
 8001fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_MPU_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4812      	ldr	r0, [pc, #72]	; (8002044 <MX_GPIO_Init+0xd0>)
 8001ffa:	f001 ff07 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin;
 8001ffe:	f248 3310 	movw	r3, #33552	; 0x8310
 8002002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002004:	2301      	movs	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2302      	movs	r3, #2
 800200e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	4619      	mov	r1, r3
 8002016:	480b      	ldr	r0, [pc, #44]	; (8002044 <MX_GPIO_Init+0xd0>)
 8002018:	f001 fef8 	bl	8003e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 800201c:	2318      	movs	r3, #24
 800201e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002020:	2301      	movs	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2302      	movs	r3, #2
 800202a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	4619      	mov	r1, r3
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_GPIO_Init+0xd4>)
 8002034:	f001 feea 	bl	8003e0c <HAL_GPIO_Init>

}
 8002038:	bf00      	nop
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	40010800 	.word	0x40010800
 8002048:	40010c00 	.word	0x40010c00
 800204c:	10110000 	.word	0x10110000

08002050 <quat_scalar>:

// Multiply two quaternions and return a copy of the result, prod = L * R
struct quaternion quat_mult (struct quaternion q_L, struct quaternion q_R);

// Multiply a reference of a quaternion by a scalar, q = s*q
static inline void quat_scalar(struct quaternion * q, float scalar){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
    q -> q1 *= scalar;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6839      	ldr	r1, [r7, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fe3f 	bl	8000ce4 <__aeabi_fmul>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
    q -> q2 *= scalar;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	6839      	ldr	r1, [r7, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fe35 	bl	8000ce4 <__aeabi_fmul>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	605a      	str	r2, [r3, #4]
    q -> q3 *= scalar;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	6839      	ldr	r1, [r7, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fe2b 	bl	8000ce4 <__aeabi_fmul>
 800208e:	4603      	mov	r3, r0
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	609a      	str	r2, [r3, #8]
    q -> q4 *= scalar;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	6839      	ldr	r1, [r7, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fe21 	bl	8000ce4 <__aeabi_fmul>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60da      	str	r2, [r3, #12]
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <quat_add>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
static inline void quat_add(struct quaternion * Sum, struct quaternion L, struct quaternion R){
 80020b2:	b084      	sub	sp, #16
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	f107 0014 	add.w	r0, r7, #20
 80020c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Sum -> q1 = L.q1 + R.q1;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	4611      	mov	r1, r2
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fd02 	bl	8000ad4 <__addsf3>
 80020d0:	4603      	mov	r3, r0
 80020d2:	461a      	mov	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	601a      	str	r2, [r3, #0]
    Sum -> q2 = L.q2 + R.q2;
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fcf8 	bl	8000ad4 <__addsf3>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	605a      	str	r2, [r3, #4]
    Sum -> q3 = L.q3 + R.q3;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fcee 	bl	8000ad4 <__addsf3>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	609a      	str	r2, [r3, #8]
    Sum -> q4 = L.q4 + R.q4;
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fce4 	bl	8000ad4 <__addsf3>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	60da      	str	r2, [r3, #12]
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800211e:	b004      	add	sp, #16
 8002120:	4770      	bx	lr

08002122 <quat_sub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
static inline void quat_sub(struct quaternion * Sum, struct quaternion L, struct quaternion R){
 8002122:	b084      	sub	sp, #16
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	f107 0014 	add.w	r0, r7, #20
 8002130:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Sum -> q1 = L.q1 - R.q1;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	4611      	mov	r1, r2
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fcc8 	bl	8000ad0 <__aeabi_fsub>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	601a      	str	r2, [r3, #0]
    Sum -> q2 = L.q2 - R.q2;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fcbe 	bl	8000ad0 <__aeabi_fsub>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]
    Sum -> q3 = L.q3 - R.q3;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fcb4 	bl	8000ad0 <__aeabi_fsub>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	609a      	str	r2, [r3, #8]
    Sum -> q4 = L.q4 - R.q4;
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fcaa 	bl	8000ad0 <__aeabi_fsub>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800218e:	b004      	add	sp, #16
 8002190:	4770      	bx	lr

08002192 <quat_Norm>:

// norm of a quaternion is the same as a complex number
// sqrt( q1^2 + q2^2 + q3^2 + q4^2)
// the norm is also the sqrt(q * conjugate(q)), but thats a lot of operations in the quaternion multiplication
static inline float quat_Norm (struct quaternion q)
{
 8002192:	b590      	push	{r4, r7, lr}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	463c      	mov	r4, r7
 800219a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return sqrt(q.q1*q.q1 + q.q2*q.q2 + q.q3*q.q3 +q.q4*q.q4);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fd9d 	bl	8000ce4 <__aeabi_fmul>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461c      	mov	r4, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe fd95 	bl	8000ce4 <__aeabi_fmul>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4619      	mov	r1, r3
 80021be:	4620      	mov	r0, r4
 80021c0:	f7fe fc88 	bl	8000ad4 <__addsf3>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461c      	mov	r4, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fd88 	bl	8000ce4 <__aeabi_fmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4620      	mov	r0, r4
 80021da:	f7fe fc7b 	bl	8000ad4 <__addsf3>
 80021de:	4603      	mov	r3, r0
 80021e0:	461c      	mov	r4, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe fd7b 	bl	8000ce4 <__aeabi_fmul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4619      	mov	r1, r3
 80021f2:	4620      	mov	r0, r4
 80021f4:	f7fe fc6e 	bl	8000ad4 <__addsf3>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f90c 	bl	8000418 <__aeabi_f2d>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f006 fa28 	bl	800865c <sqrt>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fc08 	bl	8000a28 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}

08002222 <quat_Normalization>:

// Normalizes pointer q by calling quat_Norm(q),
static inline void quat_Normalization(struct quaternion * q){
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
    float norm = quat_Norm(*q);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800222e:	f7ff ffb0 	bl	8002192 <quat_Norm>
 8002232:	60f8      	str	r0, [r7, #12]
    q -> q1 /= norm;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68f9      	ldr	r1, [r7, #12]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fe06 	bl	8000e4c <__aeabi_fdiv>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	601a      	str	r2, [r3, #0]
    q -> q2 /= norm;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68f9      	ldr	r1, [r7, #12]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fdfc 	bl	8000e4c <__aeabi_fdiv>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	605a      	str	r2, [r3, #4]
    q -> q3 /= norm;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	68f9      	ldr	r1, [r7, #12]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fdf2 	bl	8000e4c <__aeabi_fdiv>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
    q -> q4 /= norm;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	68f9      	ldr	r1, [r7, #12]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe fde8 	bl	8000e4c <__aeabi_fdiv>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	60da      	str	r2, [r3, #12]
}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <quat_mult>:

#include "madgwickFilter.h"

struct quaternion q_est = { 1, 0, 0, 0};       // initialize with as unit vector with real component  = 1

struct quaternion quat_mult (struct quaternion L, struct quaternion R){
 800228c:	b084      	sub	sp, #16
 800228e:	b590      	push	{r4, r7, lr}
 8002290:	b087      	sub	sp, #28
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800229a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    
    
    struct quaternion product;
    product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe fd1d 	bl	8000ce4 <__aeabi_fmul>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461c      	mov	r4, r3
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fd15 	bl	8000ce4 <__aeabi_fmul>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4619      	mov	r1, r3
 80022be:	4620      	mov	r0, r4
 80022c0:	f7fe fc06 	bl	8000ad0 <__aeabi_fsub>
 80022c4:	4603      	mov	r3, r0
 80022c6:	461c      	mov	r4, r3
 80022c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fd08 	bl	8000ce4 <__aeabi_fmul>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4619      	mov	r1, r3
 80022d8:	4620      	mov	r0, r4
 80022da:	f7fe fbf9 	bl	8000ad0 <__aeabi_fsub>
 80022de:	4603      	mov	r3, r0
 80022e0:	461c      	mov	r4, r3
 80022e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fcfb 	bl	8000ce4 <__aeabi_fmul>
 80022ee:	4603      	mov	r3, r0
 80022f0:	4619      	mov	r1, r3
 80022f2:	4620      	mov	r0, r4
 80022f4:	f7fe fbec 	bl	8000ad0 <__aeabi_fsub>
 80022f8:	4603      	mov	r3, r0
 80022fa:	60bb      	str	r3, [r7, #8]
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002300:	4611      	mov	r1, r2
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fcee 	bl	8000ce4 <__aeabi_fmul>
 8002308:	4603      	mov	r3, r0
 800230a:	461c      	mov	r4, r3
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fce6 	bl	8000ce4 <__aeabi_fmul>
 8002318:	4603      	mov	r3, r0
 800231a:	4619      	mov	r1, r3
 800231c:	4620      	mov	r0, r4
 800231e:	f7fe fbd9 	bl	8000ad4 <__addsf3>
 8002322:	4603      	mov	r3, r0
 8002324:	461c      	mov	r4, r3
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe fcd9 	bl	8000ce4 <__aeabi_fmul>
 8002332:	4603      	mov	r3, r0
 8002334:	4619      	mov	r1, r3
 8002336:	4620      	mov	r0, r4
 8002338:	f7fe fbcc 	bl	8000ad4 <__addsf3>
 800233c:	4603      	mov	r3, r0
 800233e:	461c      	mov	r4, r3
 8002340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002344:	4611      	mov	r1, r2
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fccc 	bl	8000ce4 <__aeabi_fmul>
 800234c:	4603      	mov	r3, r0
 800234e:	4619      	mov	r1, r3
 8002350:	4620      	mov	r0, r4
 8002352:	f7fe fbbd 	bl	8000ad0 <__aeabi_fsub>
 8002356:	4603      	mov	r3, r0
 8002358:	60fb      	str	r3, [r7, #12]
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 800235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe fcbf 	bl	8000ce4 <__aeabi_fmul>
 8002366:	4603      	mov	r3, r0
 8002368:	461c      	mov	r4, r3
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe fcb7 	bl	8000ce4 <__aeabi_fmul>
 8002376:	4603      	mov	r3, r0
 8002378:	4619      	mov	r1, r3
 800237a:	4620      	mov	r0, r4
 800237c:	f7fe fba8 	bl	8000ad0 <__aeabi_fsub>
 8002380:	4603      	mov	r3, r0
 8002382:	461c      	mov	r4, r3
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fcaa 	bl	8000ce4 <__aeabi_fmul>
 8002390:	4603      	mov	r3, r0
 8002392:	4619      	mov	r1, r3
 8002394:	4620      	mov	r0, r4
 8002396:	f7fe fb9d 	bl	8000ad4 <__addsf3>
 800239a:	4603      	mov	r3, r0
 800239c:	461c      	mov	r4, r3
 800239e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fc9d 	bl	8000ce4 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	4619      	mov	r1, r3
 80023ae:	4620      	mov	r0, r4
 80023b0:	f7fe fb90 	bl	8000ad4 <__addsf3>
 80023b4:	4603      	mov	r3, r0
 80023b6:	613b      	str	r3, [r7, #16]
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fc90 	bl	8000ce4 <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461c      	mov	r4, r3
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fc88 	bl	8000ce4 <__aeabi_fmul>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4619      	mov	r1, r3
 80023d8:	4620      	mov	r0, r4
 80023da:	f7fe fb7b 	bl	8000ad4 <__addsf3>
 80023de:	4603      	mov	r3, r0
 80023e0:	461c      	mov	r4, r3
 80023e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fc7b 	bl	8000ce4 <__aeabi_fmul>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7fe fb6c 	bl	8000ad0 <__aeabi_fsub>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461c      	mov	r4, r3
 80023fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fc6e 	bl	8000ce4 <__aeabi_fmul>
 8002408:	4603      	mov	r3, r0
 800240a:	4619      	mov	r1, r3
 800240c:	4620      	mov	r0, r4
 800240e:	f7fe fb61 	bl	8000ad4 <__addsf3>
 8002412:	4603      	mov	r3, r0
 8002414:	617b      	str	r3, [r7, #20]
    
    return product;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	461c      	mov	r4, r3
 800241a:	f107 0308 	add.w	r3, r7, #8
 800241e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002420:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800242e:	b004      	add	sp, #16
 8002430:	4770      	bx	lr
	...

08002434 <imu_filter>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void imu_filter(float ax, float ay, float az, float gx, float gy, float gz){
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	b0b2      	sub	sp, #200	; 0xc8
 8002438:	af06      	add	r7, sp, #24
 800243a:	61f8      	str	r0, [r7, #28]
 800243c:	61b9      	str	r1, [r7, #24]
 800243e:	617a      	str	r2, [r7, #20]
 8002440:	613b      	str	r3, [r7, #16]
    
    //Variables and constants
    struct quaternion q_est_prev = q_est;
 8002442:	4bb7      	ldr	r3, [pc, #732]	; (8002720 <imu_filter+0x2ec>)
 8002444:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8002448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800244a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0};            // used as a place holder in equations 42 and 43
 800244e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    
    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 8002476:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                     // jacobian matrix for gravity
 8002482:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002486:	2230      	movs	r2, #48	; 0x30
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f006 fd46 	bl	8008f1c <memset>
    
    struct quaternion gradient = {0};
 8002490:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
    
    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.q1 = 0;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
    q_w.q2 = gx;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	62bb      	str	r3, [r7, #40]	; 0x28
    q_w.q3 = gy;
 80024a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    q_w.q4 = gz;
 80024ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
    
    quat_scalar(&q_w, 0.5);                  // equation (12) dq/dt = (1/2)q*w
 80024b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fdc7 	bl	8002050 <quat_scalar>
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 80024c2:	463d      	mov	r5, r7
 80024c4:	ac01      	add	r4, sp, #4
 80024c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024dc:	4628      	mov	r0, r5
 80024de:	f7ff fed5 	bl	800228c <quat_mult>
 80024e2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80024e6:	463b      	mov	r3, r7
 80024e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     The matrix multiplcation can also be done hard coded to reduce code.
     
     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */
    
    quat_Normalization(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 80024ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fe95 	bl	8002222 <quat_Normalization>
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 80024f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fbee 	bl	8000ce4 <__aeabi_fmul>
 8002508:	4603      	mov	r3, r0
 800250a:	461c      	mov	r4, r3
 800250c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002510:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fbe4 	bl	8000ce4 <__aeabi_fmul>
 800251c:	4603      	mov	r3, r0
 800251e:	4619      	mov	r1, r3
 8002520:	4620      	mov	r0, r4
 8002522:	f7fe fad5 	bl	8000ad0 <__aeabi_fsub>
 8002526:	4603      	mov	r3, r0
 8002528:	4619      	mov	r1, r3
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fad2 	bl	8000ad4 <__addsf3>
 8002530:	4603      	mov	r3, r0
 8002532:	461a      	mov	r2, r3
 8002534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f7fe fac8 	bl	8000ad0 <__aeabi_fsub>
 8002540:	4603      	mov	r3, r0
 8002542:	677b      	str	r3, [r7, #116]	; 0x74
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 8002544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002548:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe fbc8 	bl	8000ce4 <__aeabi_fmul>
 8002554:	4603      	mov	r3, r0
 8002556:	461c      	mov	r4, r3
 8002558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800255c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fbbe 	bl	8000ce4 <__aeabi_fmul>
 8002568:	4603      	mov	r3, r0
 800256a:	4619      	mov	r1, r3
 800256c:	4620      	mov	r0, r4
 800256e:	f7fe fab1 	bl	8000ad4 <__addsf3>
 8002572:	4603      	mov	r3, r0
 8002574:	4619      	mov	r1, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe faac 	bl	8000ad4 <__addsf3>
 800257c:	4603      	mov	r3, r0
 800257e:	461a      	mov	r2, r3
 8002580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f7fe faa2 	bl	8000ad0 <__aeabi_fsub>
 800258c:	4603      	mov	r3, r0
 800258e:	67bb      	str	r3, [r7, #120]	; 0x78
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8002590:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002594:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f7fe fba2 	bl	8000ce4 <__aeabi_fmul>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ff38 	bl	8000418 <__aeabi_f2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	f04f 0000 	mov.w	r0, #0
 80025b0:	495c      	ldr	r1, [pc, #368]	; (8002724 <imu_filter+0x2f0>)
 80025b2:	f7fd fdd1 	bl	8000158 <__aeabi_dsub>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4614      	mov	r4, r2
 80025bc:	461d      	mov	r5, r3
 80025be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fb8b 	bl	8000ce4 <__aeabi_fmul>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ff21 	bl	8000418 <__aeabi_f2d>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4620      	mov	r0, r4
 80025dc:	4629      	mov	r1, r5
 80025de:	f7fd fdbb 	bl	8000158 <__aeabi_dsub>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	f7fd fdb5 	bl	800015c <__adddf3>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	461d      	mov	r5, r3
 80025fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ff0a 	bl	8000418 <__aeabi_f2d>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fd fda4 	bl	8000158 <__aeabi_dsub>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f7fe fa06 	bl	8000a28 <__aeabi_d2f>
 800261c:	4603      	mov	r3, r0
 800261e:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
 8002620:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002624:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002628:	4618      	mov	r0, r3
 800262a:	f7fe fb5b 	bl	8000ce4 <__aeabi_fmul>
 800262e:	4603      	mov	r3, r0
 8002630:	647b      	str	r3, [r7, #68]	; 0x44
    J_g[0][1] =  2 * q_est_prev.q4;
 8002632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002636:	4619      	mov	r1, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fa4b 	bl	8000ad4 <__addsf3>
 800263e:	4603      	mov	r3, r0
 8002640:	64bb      	str	r3, [r7, #72]	; 0x48
    J_g[0][2] = -2 * q_est_prev.q1;
 8002642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002646:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fb4a 	bl	8000ce4 <__aeabi_fmul>
 8002650:	4603      	mov	r3, r0
 8002652:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_g[0][3] =  2 * q_est_prev.q2;
 8002654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002658:	4619      	mov	r1, r3
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fa3a 	bl	8000ad4 <__addsf3>
 8002660:	4603      	mov	r3, r0
 8002662:	653b      	str	r3, [r7, #80]	; 0x50
    
    J_g[1][0] = 2 * q_est_prev.q2;
 8002664:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002668:	4619      	mov	r1, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fa32 	bl	8000ad4 <__addsf3>
 8002670:	4603      	mov	r3, r0
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
    J_g[1][1] = 2 * q_est_prev.q1;
 8002674:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002678:	4619      	mov	r1, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fa2a 	bl	8000ad4 <__addsf3>
 8002680:	4603      	mov	r3, r0
 8002682:	65bb      	str	r3, [r7, #88]	; 0x58
    J_g[1][2] = 2 * q_est_prev.q4;
 8002684:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002688:	4619      	mov	r1, r3
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fa22 	bl	8000ad4 <__addsf3>
 8002690:	4603      	mov	r3, r0
 8002692:	65fb      	str	r3, [r7, #92]	; 0x5c
    J_g[1][3] = 2 * q_est_prev.q3;
 8002694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002698:	4619      	mov	r1, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fa1a 	bl	8000ad4 <__addsf3>
 80026a0:	4603      	mov	r3, r0
 80026a2:	663b      	str	r3, [r7, #96]	; 0x60
    
    J_g[2][0] = 0;
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	667b      	str	r3, [r7, #100]	; 0x64
    J_g[2][1] = -4 * q_est_prev.q2;
 80026aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026ae:	491e      	ldr	r1, [pc, #120]	; (8002728 <imu_filter+0x2f4>)
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe fb17 	bl	8000ce4 <__aeabi_fmul>
 80026b6:	4603      	mov	r3, r0
 80026b8:	66bb      	str	r3, [r7, #104]	; 0x68
    J_g[2][2] = -4 * q_est_prev.q3;
 80026ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026be:	491a      	ldr	r1, [pc, #104]	; (8002728 <imu_filter+0x2f4>)
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fb0f 	bl	8000ce4 <__aeabi_fmul>
 80026c6:	4603      	mov	r3, r0
 80026c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    J_g[2][3] = 0;
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	673b      	str	r3, [r7, #112]	; 0x70
    
    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fb04 	bl	8000ce4 <__aeabi_fmul>
 80026dc:	4603      	mov	r3, r0
 80026de:	461c      	mov	r4, r3
 80026e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fafc 	bl	8000ce4 <__aeabi_fmul>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4619      	mov	r1, r3
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7fe f9ef 	bl	8000ad4 <__addsf3>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461c      	mov	r4, r3
 80026fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe faef 	bl	8000ce4 <__aeabi_fmul>
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	4620      	mov	r0, r4
 800270c:	f7fe f9e2 	bl	8000ad4 <__addsf3>
 8002710:	4603      	mov	r3, r0
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8002714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002716:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	e006      	b.n	800272c <imu_filter+0x2f8>
 800271e:	bf00      	nop
 8002720:	20000008 	.word	0x20000008
 8002724:	3fe00000 	.word	0x3fe00000
 8002728:	c0800000 	.word	0xc0800000
 800272c:	f7fe fada 	bl	8000ce4 <__aeabi_fmul>
 8002730:	4603      	mov	r3, r0
 8002732:	461c      	mov	r4, r3
 8002734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002736:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe fad2 	bl	8000ce4 <__aeabi_fmul>
 8002740:	4603      	mov	r3, r0
 8002742:	4619      	mov	r1, r3
 8002744:	4620      	mov	r0, r4
 8002746:	f7fe f9c5 	bl	8000ad4 <__addsf3>
 800274a:	4603      	mov	r3, r0
 800274c:	461c      	mov	r4, r3
 800274e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002750:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fac5 	bl	8000ce4 <__aeabi_fmul>
 800275a:	4603      	mov	r3, r0
 800275c:	4619      	mov	r1, r3
 800275e:	4620      	mov	r0, r4
 8002760:	f7fe f9b8 	bl	8000ad4 <__addsf3>
 8002764:	4603      	mov	r3, r0
 8002766:	63bb      	str	r3, [r7, #56]	; 0x38
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8002768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800276a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800276c:	4611      	mov	r1, r2
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fab8 	bl	8000ce4 <__aeabi_fmul>
 8002774:	4603      	mov	r3, r0
 8002776:	461c      	mov	r4, r3
 8002778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fab0 	bl	8000ce4 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	4619      	mov	r1, r3
 8002788:	4620      	mov	r0, r4
 800278a:	f7fe f9a3 	bl	8000ad4 <__addsf3>
 800278e:	4603      	mov	r3, r0
 8002790:	461c      	mov	r4, r3
 8002792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002794:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe faa3 	bl	8000ce4 <__aeabi_fmul>
 800279e:	4603      	mov	r3, r0
 80027a0:	4619      	mov	r1, r3
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7fe f996 	bl	8000ad4 <__addsf3>
 80027a8:	4603      	mov	r3, r0
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 80027ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80027b0:	4611      	mov	r1, r2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fa96 	bl	8000ce4 <__aeabi_fmul>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461c      	mov	r4, r3
 80027bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027be:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fa8e 	bl	8000ce4 <__aeabi_fmul>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4619      	mov	r1, r3
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7fe f981 	bl	8000ad4 <__addsf3>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461c      	mov	r4, r3
 80027d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fa81 	bl	8000ce4 <__aeabi_fmul>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4619      	mov	r1, r3
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7fe f974 	bl	8000ad4 <__addsf3>
 80027ec:	4603      	mov	r3, r0
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40
    
    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 80027f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fd14 	bl	8002222 <quat_Normalization>
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    quat_scalar(&gradient, BETA);             // multiply normalized gradient by beta
 80027fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027fe:	4918      	ldr	r1, [pc, #96]	; (8002860 <imu_filter+0x42c>)
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fc25 	bl	8002050 <quat_scalar>
    quat_sub(&q_est_dot, q_w, gradient);        // subtract above from q_w, the integrated gyro quaternion
 8002806:	f107 0590 	add.w	r5, r7, #144	; 0x90
 800280a:	ac01      	add	r4, sp, #4
 800280c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002810:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002812:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002820:	4628      	mov	r0, r5
 8002822:	f7ff fc7e 	bl	8002122 <quat_sub>
    quat_scalar(&q_est_dot, DELTA_T);
 8002826:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800282a:	490e      	ldr	r1, [pc, #56]	; (8002864 <imu_filter+0x430>)
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fc0f 	bl	8002050 <quat_scalar>
    quat_add(&q_est, q_est_prev, q_est_dot);     // Integrate orientation rate to find position
 8002832:	ac01      	add	r4, sp, #4
 8002834:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800283a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800283e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002848:	cb0e      	ldmia	r3, {r1, r2, r3}
 800284a:	4807      	ldr	r0, [pc, #28]	; (8002868 <imu_filter+0x434>)
 800284c:	f7ff fc31 	bl	80020b2 <quat_add>
    quat_Normalization(&q_est);                 // normalize the orientation of the estimate
 8002850:	4805      	ldr	r0, [pc, #20]	; (8002868 <imu_filter+0x434>)
 8002852:	f7ff fce6 	bl	8002222 <quat_Normalization>
                                                //(shown in diagram, plus always use unit quaternions for orientation)
   
}
 8002856:	bf00      	nop
 8002858:	37b0      	adds	r7, #176	; 0xb0
 800285a:	46bd      	mov	sp, r7
 800285c:	bdb0      	pop	{r4, r5, r7, pc}
 800285e:	bf00      	nop
 8002860:	3d9ac70e 	.word	0x3d9ac70e
 8002864:	3ba3d70a 	.word	0x3ba3d70a
 8002868:	20000008 	.word	0x20000008

0800286c <eulerAngles>:
 Assume right hand system
 Roll is about the x axis, represented as phi
 Pitch is about the y axis, represented as theta
 Yaw is about the z axis, represented as psi (trident looking greek symbol)
 */
void eulerAngles(struct quaternion q, float* roll, float* pitch, float* yaw){
 800286c:	b5b0      	push	{r4, r5, r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	463c      	mov	r4, r7
 8002874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    *yaw = atan2f((2*q.q2*q.q3 - 2*q.q1*q.q4), (2*q.q1*q.q1 + 2*q.q2*q.q2 -1));  // equation (7)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4619      	mov	r1, r3
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe f929 	bl	8000ad4 <__addsf3>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f7fe fa2a 	bl	8000ce4 <__aeabi_fmul>
 8002890:	4603      	mov	r3, r0
 8002892:	461c      	mov	r4, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	4619      	mov	r1, r3
 8002898:	4618      	mov	r0, r3
 800289a:	f7fe f91b 	bl	8000ad4 <__addsf3>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f7fe fa1c 	bl	8000ce4 <__aeabi_fmul>
 80028ac:	4603      	mov	r3, r0
 80028ae:	4619      	mov	r1, r3
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7fe f90d 	bl	8000ad0 <__aeabi_fsub>
 80028b6:	4603      	mov	r3, r0
 80028b8:	461c      	mov	r4, r3
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe f908 	bl	8000ad4 <__addsf3>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4610      	mov	r0, r2
 80028ce:	f7fe fa09 	bl	8000ce4 <__aeabi_fmul>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461d      	mov	r5, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4619      	mov	r1, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe f8fa 	bl	8000ad4 <__addsf3>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f7fe f9fb 	bl	8000ce4 <__aeabi_fmul>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4619      	mov	r1, r3
 80028f2:	4628      	mov	r0, r5
 80028f4:	f7fe f8ee 	bl	8000ad4 <__addsf3>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe f8e6 	bl	8000ad0 <__aeabi_fsub>
 8002904:	4603      	mov	r3, r0
 8002906:	4619      	mov	r1, r3
 8002908:	4620      	mov	r0, r4
 800290a:	f005 feeb 	bl	80086e4 <atan2f>
 800290e:	4602      	mov	r2, r0
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	601a      	str	r2, [r3, #0]
    *pitch = -asinf(2*q.q2*q.q4 + 2*q.q1*q.q3);                                  // equatino (8)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4619      	mov	r1, r3
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe f8db 	bl	8000ad4 <__addsf3>
 800291e:	4603      	mov	r3, r0
 8002920:	461a      	mov	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f7fe f9dc 	bl	8000ce4 <__aeabi_fmul>
 800292c:	4603      	mov	r3, r0
 800292e:	461c      	mov	r4, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe f8cd 	bl	8000ad4 <__addsf3>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f7fe f9ce 	bl	8000ce4 <__aeabi_fmul>
 8002948:	4603      	mov	r3, r0
 800294a:	4619      	mov	r1, r3
 800294c:	4620      	mov	r0, r4
 800294e:	f7fe f8c1 	bl	8000ad4 <__addsf3>
 8002952:	4603      	mov	r3, r0
 8002954:	4618      	mov	r0, r3
 8002956:	f005 fea5 	bl	80086a4 <asinf>
 800295a:	4603      	mov	r3, r0
 800295c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	601a      	str	r2, [r3, #0]
    *roll  = atan2f((2*q.q3*q.q4 - 2*q.q1*q.q2), (2*q.q1*q.q1 + 2*q.q4*q.q4 -1));
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	4619      	mov	r1, r3
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe f8b3 	bl	8000ad4 <__addsf3>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f7fe f9b4 	bl	8000ce4 <__aeabi_fmul>
 800297c:	4603      	mov	r3, r0
 800297e:	461c      	mov	r4, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f8a5 	bl	8000ad4 <__addsf3>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f7fe f9a6 	bl	8000ce4 <__aeabi_fmul>
 8002998:	4603      	mov	r3, r0
 800299a:	4619      	mov	r1, r3
 800299c:	4620      	mov	r0, r4
 800299e:	f7fe f897 	bl	8000ad0 <__aeabi_fsub>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461c      	mov	r4, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f892 	bl	8000ad4 <__addsf3>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	4610      	mov	r0, r2
 80029ba:	f7fe f993 	bl	8000ce4 <__aeabi_fmul>
 80029be:	4603      	mov	r3, r0
 80029c0:	461d      	mov	r5, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4619      	mov	r1, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f884 	bl	8000ad4 <__addsf3>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f7fe f985 	bl	8000ce4 <__aeabi_fmul>
 80029da:	4603      	mov	r3, r0
 80029dc:	4619      	mov	r1, r3
 80029de:	4628      	mov	r0, r5
 80029e0:	f7fe f878 	bl	8000ad4 <__addsf3>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f870 	bl	8000ad0 <__aeabi_fsub>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4619      	mov	r1, r3
 80029f4:	4620      	mov	r0, r4
 80029f6:	f005 fe75 	bl	80086e4 <atan2f>
 80029fa:	4602      	mov	r2, r0
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	601a      	str	r2, [r3, #0]
    
    *yaw *= (180.0f / PI);
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	490f      	ldr	r1, [pc, #60]	; (8002a44 <eulerAngles+0x1d8>)
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe f96c 	bl	8000ce4 <__aeabi_fmul>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	601a      	str	r2, [r3, #0]
    *pitch *= (180.0f / PI);
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	490a      	ldr	r1, [pc, #40]	; (8002a44 <eulerAngles+0x1d8>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe f962 	bl	8000ce4 <__aeabi_fmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	601a      	str	r2, [r3, #0]
    *roll *= (180.0f / PI);
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4905      	ldr	r1, [pc, #20]	; (8002a44 <eulerAngles+0x1d8>)
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe f958 	bl	8000ce4 <__aeabi_fmul>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	601a      	str	r2, [r3, #0]

}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bdb0      	pop	{r4, r5, r7, pc}
 8002a44:	42652ee0 	.word	0x42652ee0

08002a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a4e:	f000 fb23 	bl	8003098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a52:	f000 f8ad 	bl	8002bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a56:	f7ff fa8d 	bl	8001f74 <MX_GPIO_Init>
  MX_CAN_Init();
 8002a5a:	f7ff f879 	bl	8001b50 <MX_CAN_Init>
  MX_SPI1_Init();
 8002a5e:	f000 f901 	bl	8002c64 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a62:	f000 f935 	bl	8002cd0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 5; ++i) {
 8002a66:	2300      	movs	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	e002      	b.n	8002a72 <main+0x2a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	ddf9      	ble.n	8002a6c <main+0x24>
//	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	//HAL_Delay(500);
  }
  MPU9250_calibrate();
 8002a78:	f7fe fd16 	bl	80014a8 <MPU9250_calibrate>
  HAL_Delay(2000);
 8002a7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a80:	f000 fb3c 	bl	80030fc <HAL_Delay>
  MPU9250_Init();
 8002a84:	f7fe fc88 	bl	8001398 <MPU9250_Init>
  HAL_Delay(500);
 8002a88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a8c:	f000 fb36 	bl	80030fc <HAL_Delay>

  TxHeaderRoll.StdId = headerIdRoll;
 8002a90:	2211      	movs	r2, #17
 8002a92:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <main+0x14c>)
 8002a94:	601a      	str	r2, [r3, #0]
  TxHeaderRoll.ExtId = 0;
 8002a96:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <main+0x14c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	605a      	str	r2, [r3, #4]
  TxHeaderRoll.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <main+0x14c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  TxHeaderRoll.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002aa2:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <main+0x14c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  TxHeaderRoll.DLC = 4;
 8002aa8:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <main+0x14c>)
 8002aaa:	2204      	movs	r2, #4
 8002aac:	611a      	str	r2, [r3, #16]
  TxHeaderRoll.TransmitGlobalTime = 0;
 8002aae:	4b39      	ldr	r3, [pc, #228]	; (8002b94 <main+0x14c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	751a      	strb	r2, [r3, #20]

  TxHeaderPitch.StdId = headerIdPitch;
 8002ab4:	2212      	movs	r2, #18
 8002ab6:	4b38      	ldr	r3, [pc, #224]	; (8002b98 <main+0x150>)
 8002ab8:	601a      	str	r2, [r3, #0]
  TxHeaderPitch.ExtId = 0;
 8002aba:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <main+0x150>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
  TxHeaderPitch.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002ac0:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <main+0x150>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  TxHeaderPitch.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002ac6:	4b34      	ldr	r3, [pc, #208]	; (8002b98 <main+0x150>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  TxHeaderPitch.DLC = 4;
 8002acc:	4b32      	ldr	r3, [pc, #200]	; (8002b98 <main+0x150>)
 8002ace:	2204      	movs	r2, #4
 8002ad0:	611a      	str	r2, [r3, #16]
  TxHeaderPitch.TransmitGlobalTime = 0;
 8002ad2:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <main+0x150>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	751a      	strb	r2, [r3, #20]

  TxHeaderYaw.StdId = headerIdYaw;
 8002ad8:	2213      	movs	r2, #19
 8002ada:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <main+0x154>)
 8002adc:	601a      	str	r2, [r3, #0]
  TxHeaderYaw.ExtId = 0;
 8002ade:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <main+0x154>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	605a      	str	r2, [r3, #4]
  TxHeaderYaw.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <main+0x154>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  TxHeaderYaw.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002aea:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <main+0x154>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  TxHeaderYaw.DLC = 4;
 8002af0:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <main+0x154>)
 8002af2:	2204      	movs	r2, #4
 8002af4:	611a      	str	r2, [r3, #16]
  TxHeaderYaw.TransmitGlobalTime = 0;
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <main+0x154>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	751a      	strb	r2, [r3, #20]

  TxHeaderAccel.StdId = headerIdAccel;
 8002afc:	2214      	movs	r2, #20
 8002afe:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <main+0x158>)
 8002b00:	601a      	str	r2, [r3, #0]
  TxHeaderAccel.ExtId = 0;
 8002b02:	4b27      	ldr	r3, [pc, #156]	; (8002ba0 <main+0x158>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
  TxHeaderAccel.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <main+0x158>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
  TxHeaderAccel.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <main+0x158>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	609a      	str	r2, [r3, #8]
  TxHeaderAccel.DLC = 6;
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <main+0x158>)
 8002b16:	2206      	movs	r2, #6
 8002b18:	611a      	str	r2, [r3, #16]
  TxHeaderAccel.TransmitGlobalTime = 0;
 8002b1a:	4b21      	ldr	r3, [pc, #132]	; (8002ba0 <main+0x158>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	751a      	strb	r2, [r3, #20]

  TxHeaderGyro.StdId = headerIdGyro;
 8002b20:	2215      	movs	r2, #21
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <main+0x15c>)
 8002b24:	601a      	str	r2, [r3, #0]
  TxHeaderGyro.ExtId = 0;
 8002b26:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <main+0x15c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	605a      	str	r2, [r3, #4]
  TxHeaderGyro.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <main+0x15c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]
  TxHeaderGyro.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <main+0x15c>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  TxHeaderGyro.DLC = 6;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <main+0x15c>)
 8002b3a:	2206      	movs	r2, #6
 8002b3c:	611a      	str	r2, [r3, #16]
  TxHeaderGyro.TransmitGlobalTime = 0;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <main+0x15c>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	751a      	strb	r2, [r3, #20]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <main+0x160>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <main+0x160>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <main+0x160>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <main+0x160>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <main+0x160>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002b62:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <main+0x160>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <main+0x160>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8002b6e:	490e      	ldr	r1, [pc, #56]	; (8002ba8 <main+0x160>)
 8002b70:	480e      	ldr	r0, [pc, #56]	; (8002bac <main+0x164>)
 8002b72:	f000 fbe2 	bl	800333a <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 8002b76:	480d      	ldr	r0, [pc, #52]	; (8002bac <main+0x164>)
 8002b78:	f000 fca8 	bl	80034cc <HAL_CAN_Start>
  HAL_Delay(500);
 8002b7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b80:	f000 fabc 	bl	80030fc <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002b84:	f002 ffe8 	bl	8005b58 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002b88:	f7ff f874 	bl	8001c74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002b8c:	f003 f816 	bl	8005bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b90:	e7fe      	b.n	8002b90 <main+0x148>
 8002b92:	bf00      	nop
 8002b94:	200001d0 	.word	0x200001d0
 8002b98:	200001e8 	.word	0x200001e8
 8002b9c:	20000200 	.word	0x20000200
 8002ba0:	20000218 	.word	0x20000218
 8002ba4:	20000230 	.word	0x20000230
 8002ba8:	200001a8 	.word	0x200001a8
 8002bac:	200000e4 	.word	0x200000e4

08002bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b090      	sub	sp, #64	; 0x40
 8002bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bb6:	f107 0318 	add.w	r3, r7, #24
 8002bba:	2228      	movs	r2, #40	; 0x28
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f006 f9ac 	bl	8008f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bda:	2310      	movs	r3, #16
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bde:	2302      	movs	r3, #2
 8002be0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002be2:	2300      	movs	r3, #0
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002be6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bec:	f107 0318 	add.w	r3, r7, #24
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fac1 	bl	8004178 <HAL_RCC_OscConfig>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002bfc:	f000 f82c 	bl	8002c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c00:	230f      	movs	r3, #15
 8002c02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c04:	2302      	movs	r3, #2
 8002c06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 fd2e 	bl	800467c <HAL_RCC_ClockConfig>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002c26:	f000 f817 	bl	8002c58 <Error_Handler>
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	3740      	adds	r7, #64	; 0x40
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c46:	f000 fa3d 	bl	80030c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40000800 	.word	0x40000800

08002c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c5c:	b672      	cpsid	i
}
 8002c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <Error_Handler+0x8>
	...

08002c64 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c68:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002c6a:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <MX_SPI1_Init+0x68>)
 8002c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c6e:	4b16      	ldr	r3, [pc, #88]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c88:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002c98:	2220      	movs	r2, #32
 8002c9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002cb0:	220a      	movs	r2, #10
 8002cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cb4:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <MX_SPI1_Init+0x64>)
 8002cb6:	f001 fe95 	bl	80049e4 <HAL_SPI_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002cc0:	f7ff ffca 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	2000024c 	.word	0x2000024c
 8002ccc:	40013000 	.word	0x40013000

08002cd0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <MX_SPI2_Init+0x68>)
 8002cd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ce0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ce2:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002d04:	2208      	movs	r2, #8
 8002d06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002d1a:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002d1c:	220a      	movs	r2, #10
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d20:	4804      	ldr	r0, [pc, #16]	; (8002d34 <MX_SPI2_Init+0x64>)
 8002d22:	f001 fe5f 	bl	80049e4 <HAL_SPI_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002d2c:	f7ff ff94 	bl	8002c58 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200002a4 	.word	0x200002a4
 8002d38:	40003800 	.word	0x40003800

08002d3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 0318 	add.w	r3, r7, #24
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <HAL_SPI_MspInit+0x108>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d130      	bne.n	8002dbe <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d5c:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	4a39      	ldr	r2, [pc, #228]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d66:	6193      	str	r3, [r2, #24]
 8002d68:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	4a33      	ldr	r2, [pc, #204]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	6193      	str	r3, [r2, #24]
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d8c:	23a0      	movs	r3, #160	; 0xa0
 8002d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d98:	f107 0318 	add.w	r3, r7, #24
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	482b      	ldr	r0, [pc, #172]	; (8002e4c <HAL_SPI_MspInit+0x110>)
 8002da0:	f001 f834 	bl	8003e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002da4:	2340      	movs	r3, #64	; 0x40
 8002da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db0:	f107 0318 	add.w	r3, r7, #24
 8002db4:	4619      	mov	r1, r3
 8002db6:	4825      	ldr	r0, [pc, #148]	; (8002e4c <HAL_SPI_MspInit+0x110>)
 8002db8:	f001 f828 	bl	8003e0c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002dbc:	e03e      	b.n	8002e3c <HAL_SPI_MspInit+0x100>
  else if(spiHandle->Instance==SPI2)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a23      	ldr	r2, [pc, #140]	; (8002e50 <HAL_SPI_MspInit+0x114>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d139      	bne.n	8002e3c <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd2:	61d3      	str	r3, [r2, #28]
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002de6:	f043 0308 	orr.w	r3, r3, #8
 8002dea:	6193      	str	r3, [r2, #24]
 8002dec:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_SPI_MspInit+0x10c>)
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002df8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e06:	f107 0318 	add.w	r3, r7, #24
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4811      	ldr	r0, [pc, #68]	; (8002e54 <HAL_SPI_MspInit+0x118>)
 8002e0e:	f000 fffd 	bl	8003e0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e20:	f107 0318 	add.w	r3, r7, #24
 8002e24:	4619      	mov	r1, r3
 8002e26:	480b      	ldr	r0, [pc, #44]	; (8002e54 <HAL_SPI_MspInit+0x118>)
 8002e28:	f000 fff0 	bl	8003e0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2105      	movs	r1, #5
 8002e30:	2024      	movs	r0, #36	; 0x24
 8002e32:	f000 ff4a 	bl	8003cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002e36:	2024      	movs	r0, #36	; 0x24
 8002e38:	f000 ff63 	bl	8003d02 <HAL_NVIC_EnableIRQ>
}
 8002e3c:	bf00      	nop
 8002e3e:	3728      	adds	r7, #40	; 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40013000 	.word	0x40013000
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40010800 	.word	0x40010800
 8002e50:	40003800 	.word	0x40003800
 8002e54:	40010c00 	.word	0x40010c00

08002e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_MspInit+0x68>)
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <HAL_MspInit+0x68>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6193      	str	r3, [r2, #24]
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_MspInit+0x68>)
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_MspInit+0x68>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4a11      	ldr	r2, [pc, #68]	; (8002ec0 <HAL_MspInit+0x68>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	61d3      	str	r3, [r2, #28]
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <HAL_MspInit+0x68>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	210f      	movs	r1, #15
 8002e92:	f06f 0001 	mvn.w	r0, #1
 8002e96:	f000 ff18 	bl	8003cca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_MspInit+0x6c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_MspInit+0x6c>)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40010000 	.word	0x40010000

08002ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08e      	sub	sp, #56	; 0x38
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002ede:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_InitTick+0xe8>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4a33      	ldr	r2, [pc, #204]	; (8002fb0 <HAL_InitTick+0xe8>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	61d3      	str	r3, [r2, #28]
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <HAL_InitTick+0xe8>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ef6:	f107 0210 	add.w	r2, r7, #16
 8002efa:	f107 0314 	add.w	r3, r7, #20
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f001 fd21 	bl	8004948 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d103      	bne.n	8002f18 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002f10:	f001 fd06 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8002f14:	6378      	str	r0, [r7, #52]	; 0x34
 8002f16:	e004      	b.n	8002f22 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002f18:	f001 fd02 	bl	8004920 <HAL_RCC_GetPCLK1Freq>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f24:	4a23      	ldr	r2, [pc, #140]	; (8002fb4 <HAL_InitTick+0xec>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0c9b      	lsrs	r3, r3, #18
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <HAL_InitTick+0xf0>)
 8002f32:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_InitTick+0xf4>)
 8002f34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_InitTick+0xf0>)
 8002f38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f3c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <HAL_InitTick+0xf0>)
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_InitTick+0xf0>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_InitTick+0xf0>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_InitTick+0xf0>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002f56:	4818      	ldr	r0, [pc, #96]	; (8002fb8 <HAL_InitTick+0xf0>)
 8002f58:	f002 fbb4 	bl	80056c4 <HAL_TIM_Base_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d11b      	bne.n	8002fa2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002f6a:	4813      	ldr	r0, [pc, #76]	; (8002fb8 <HAL_InitTick+0xf0>)
 8002f6c:	f002 fc02 	bl	8005774 <HAL_TIM_Base_Start_IT>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d111      	bne.n	8002fa2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f7e:	201e      	movs	r0, #30
 8002f80:	f000 febf 	bl	8003d02 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	d808      	bhi.n	8002f9c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	201e      	movs	r0, #30
 8002f90:	f000 fe9b 	bl	8003cca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_InitTick+0xf8>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e002      	b.n	8002fa2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3738      	adds	r7, #56	; 0x38
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	431bde83 	.word	0x431bde83
 8002fb8:	200002fc 	.word	0x200002fc
 8002fbc:	40000800 	.word	0x40000800
 8002fc0:	2000001c 	.word	0x2000001c

08002fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fc8:	e7fe      	b.n	8002fc8 <NMI_Handler+0x4>

08002fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fce:	e7fe      	b.n	8002fce <HardFault_Handler+0x4>

08002fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd4:	e7fe      	b.n	8002fd4 <MemManage_Handler+0x4>

08002fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fda:	e7fe      	b.n	8002fda <BusFault_Handler+0x4>

08002fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fe0:	e7fe      	b.n	8002fe0 <UsageFault_Handler+0x4>

08002fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
	...

08002ff0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002ff4:	4802      	ldr	r0, [pc, #8]	; (8003000 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002ff6:	f000 fb87 	bl	8003708 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200000e4 	.word	0x200000e4

08003004 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800300a:	f000 fb7d 	bl	8003708 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200000e4 	.word	0x200000e4

08003018 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <TIM4_IRQHandler+0x10>)
 800301e:	f002 fbfb 	bl	8005818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200002fc 	.word	0x200002fc

0800302c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <SPI2_IRQHandler+0x10>)
 8003032:	f002 f94b 	bl	80052cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200002a4 	.word	0x200002a4

08003040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800304c:	480c      	ldr	r0, [pc, #48]	; (8003080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800304e:	490d      	ldr	r1, [pc, #52]	; (8003084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003050:	4a0d      	ldr	r2, [pc, #52]	; (8003088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003054:	e002      	b.n	800305c <LoopCopyDataInit>

08003056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305a:	3304      	adds	r3, #4

0800305c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800305c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800305e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003060:	d3f9      	bcc.n	8003056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003064:	4c0a      	ldr	r4, [pc, #40]	; (8003090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003068:	e001      	b.n	800306e <LoopFillZerobss>

0800306a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800306c:	3204      	adds	r2, #4

0800306e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800306e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003070:	d3fb      	bcc.n	800306a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003072:	f7ff ffe5 	bl	8003040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003076:	f005 ff1d 	bl	8008eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800307a:	f7ff fce5 	bl	8002a48 <main>
  bx lr
 800307e:	4770      	bx	lr
  ldr r0, =_sdata
 8003080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003084:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003088:	08009200 	.word	0x08009200
  ldr r2, =_sbss
 800308c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003090:	20001d58 	.word	0x20001d58

08003094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC1_2_IRQHandler>
	...

08003098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_Init+0x28>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_Init+0x28>)
 80030a2:	f043 0310 	orr.w	r3, r3, #16
 80030a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a8:	2003      	movs	r0, #3
 80030aa:	f000 fe03 	bl	8003cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ae:	200f      	movs	r0, #15
 80030b0:	f7ff ff0a 	bl	8002ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b4:	f7ff fed0 	bl	8002e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40022000 	.word	0x40022000

080030c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_IncTick+0x1c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_IncTick+0x20>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4413      	add	r3, r2
 80030d4:	4a03      	ldr	r2, [pc, #12]	; (80030e4 <HAL_IncTick+0x20>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	20000020 	.word	0x20000020
 80030e4:	20000344 	.word	0x20000344

080030e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return uwTick;
 80030ec:	4b02      	ldr	r3, [pc, #8]	; (80030f8 <HAL_GetTick+0x10>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	20000344 	.word	0x20000344

080030fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003104:	f7ff fff0 	bl	80030e8 <HAL_GetTick>
 8003108:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d005      	beq.n	8003122 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_Delay+0x44>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003122:	bf00      	nop
 8003124:	f7ff ffe0 	bl	80030e8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	d8f7      	bhi.n	8003124 <HAL_Delay+0x28>
  {
  }
}
 8003134:	bf00      	nop
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000020 	.word	0x20000020

08003144 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0ed      	b.n	8003332 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe fd2a 	bl	8001bbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
  //CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);

  /* Get tick */
  tickstart = HAL_GetTick();
 8003178:	f7ff ffb6 	bl	80030e8 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800317e:	e012      	b.n	80031a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003180:	f7ff ffb2 	bl	80030e8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b0a      	cmp	r3, #10
 800318c:	d90b      	bls.n	80031a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2205      	movs	r2, #5
 800319e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0c5      	b.n	8003332 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0e5      	beq.n	8003180 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0202 	bic.w	r2, r2, #2
 80031c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c4:	f7ff ff90 	bl	80030e8 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ca:	e012      	b.n	80031f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031cc:	f7ff ff8c 	bl	80030e8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b0a      	cmp	r3, #10
 80031d8:	d90b      	bls.n	80031f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2205      	movs	r2, #5
 80031ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e09f      	b.n	8003332 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e5      	bne.n	80031cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7e1b      	ldrb	r3, [r3, #24]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d108      	bne.n	800321a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e007      	b.n	800322a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003228:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7e5b      	ldrb	r3, [r3, #25]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d108      	bne.n	8003244 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e007      	b.n	8003254 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003252:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7e9b      	ldrb	r3, [r3, #26]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d108      	bne.n	800326e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0220 	orr.w	r2, r2, #32
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e007      	b.n	800327e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0220 	bic.w	r2, r2, #32
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7edb      	ldrb	r3, [r3, #27]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d108      	bne.n	8003298 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0210 	bic.w	r2, r2, #16
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e007      	b.n	80032a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0210 	orr.w	r2, r2, #16
 80032a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7f1b      	ldrb	r3, [r3, #28]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0208 	orr.w	r2, r2, #8
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	e007      	b.n	80032d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0208 	bic.w	r2, r2, #8
 80032d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7f5b      	ldrb	r3, [r3, #29]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d108      	bne.n	80032ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0204 	orr.w	r2, r2, #4
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e007      	b.n	80032fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0204 	bic.w	r2, r2, #4
 80032fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	ea42 0103 	orr.w	r1, r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	1e5a      	subs	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800333a:	b480      	push	{r7}
 800333c:	b087      	sub	sp, #28
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003350:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003352:	7cfb      	ldrb	r3, [r7, #19]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d003      	beq.n	8003360 <HAL_CAN_ConfigFilter+0x26>
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	2b02      	cmp	r3, #2
 800335c:	f040 80aa 	bne.w	80034b4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2201      	movs	r2, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d123      	bne.n	80033e2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	401a      	ands	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3248      	adds	r2, #72	; 0x48
 80033c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033d8:	6979      	ldr	r1, [r7, #20]
 80033da:	3348      	adds	r3, #72	; 0x48
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d122      	bne.n	8003430 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800340a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3248      	adds	r2, #72	; 0x48
 8003410:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003424:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003426:	6979      	ldr	r1, [r7, #20]
 8003428:	3348      	adds	r3, #72	; 0x48
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d109      	bne.n	800344c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	43db      	mvns	r3, r3
 8003442:	401a      	ands	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800344a:	e007      	b.n	800345c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	431a      	orrs	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	43db      	mvns	r3, r3
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003476:	e007      	b.n	8003488 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	431a      	orrs	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d107      	bne.n	80034a0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	431a      	orrs	r2, r3
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80034a6:	f023 0201 	bic.w	r2, r3, #1
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e006      	b.n	80034c2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d12e      	bne.n	800353e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034f8:	f7ff fdf6 	bl	80030e8 <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034fe:	e012      	b.n	8003526 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003500:	f7ff fdf2 	bl	80030e8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b0a      	cmp	r3, #10
 800350c:	d90b      	bls.n	8003526 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2205      	movs	r2, #5
 800351e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e012      	b.n	800354c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e006      	b.n	800354c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
  }
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003568:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003572:	7ffb      	ldrb	r3, [r7, #31]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d003      	beq.n	8003580 <HAL_CAN_AddTxMessage+0x2c>
 8003578:	7ffb      	ldrb	r3, [r7, #31]
 800357a:	2b02      	cmp	r3, #2
 800357c:	f040 80b8 	bne.w	80036f0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80a0 	beq.w	80036e0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	0e1b      	lsrs	r3, r3, #24
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d907      	bls.n	80035c0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e09e      	b.n	80036fe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035c0:	2201      	movs	r2, #1
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	409a      	lsls	r2, r3
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035dc:	68f9      	ldr	r1, [r7, #12]
 80035de:	6809      	ldr	r1, [r1, #0]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	3318      	adds	r3, #24
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	440b      	add	r3, r1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e00f      	b.n	800360e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035fe:	68f9      	ldr	r1, [r7, #12]
 8003600:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003602:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3318      	adds	r3, #24
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	440b      	add	r3, r1
 800360c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6819      	ldr	r1, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3318      	adds	r3, #24
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	440b      	add	r3, r1
 800361e:	3304      	adds	r3, #4
 8003620:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	7d1b      	ldrb	r3, [r3, #20]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d111      	bne.n	800364e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	3318      	adds	r3, #24
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	4413      	add	r3, r2
 8003636:	3304      	adds	r3, #4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	6811      	ldr	r1, [r2, #0]
 800363e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3318      	adds	r3, #24
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	440b      	add	r3, r1
 800364a:	3304      	adds	r3, #4
 800364c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3307      	adds	r3, #7
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	061a      	lsls	r2, r3, #24
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3306      	adds	r3, #6
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	041b      	lsls	r3, r3, #16
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3305      	adds	r3, #5
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	4313      	orrs	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	3204      	adds	r2, #4
 800366e:	7812      	ldrb	r2, [r2, #0]
 8003670:	4610      	mov	r0, r2
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6811      	ldr	r1, [r2, #0]
 8003676:	ea43 0200 	orr.w	r2, r3, r0
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	440b      	add	r3, r1
 8003680:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003684:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	3303      	adds	r3, #3
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	061a      	lsls	r2, r3, #24
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3302      	adds	r3, #2
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3301      	adds	r3, #1
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	4313      	orrs	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	4610      	mov	r0, r2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	6811      	ldr	r1, [r2, #0]
 80036ac:	ea43 0200 	orr.w	r2, r3, r0
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80036ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3318      	adds	r3, #24
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4413      	add	r3, r2
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	6811      	ldr	r1, [r2, #0]
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	3318      	adds	r3, #24
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	440b      	add	r3, r1
 80036da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e00e      	b.n	80036fe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e006      	b.n	80036fe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
  }
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d07c      	beq.n	8003848 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d023      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2201      	movs	r2, #1
 800375e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f983 	bl	8003a76 <HAL_CAN_TxMailbox0CompleteCallback>
 8003770:	e016      	b.n	80037a0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d004      	beq.n	8003786 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	e00c      	b.n	80037a0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
 8003798:	e002      	b.n	80037a0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f986 	bl	8003aac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d024      	beq.n	80037f4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f962 	bl	8003a88 <HAL_CAN_TxMailbox1CompleteCallback>
 80037c4:	e016      	b.n	80037f4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	e00c      	b.n	80037f4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d004      	beq.n	80037ee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24
 80037ec:	e002      	b.n	80037f4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f965 	bl	8003abe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d024      	beq.n	8003848 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003806:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f941 	bl	8003a9a <HAL_CAN_TxMailbox2CompleteCallback>
 8003818:	e016      	b.n	8003848 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
 800382c:	e00c      	b.n	8003848 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
 8003840:	e002      	b.n	8003848 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f944 	bl	8003ad0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003862:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2210      	movs	r2, #16
 800386a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d006      	beq.n	800388e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2208      	movs	r2, #8
 8003886:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f933 	bl	8003af4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f91b 	bl	8003ae2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00c      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2210      	movs	r2, #16
 80038ce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d006      	beq.n	80038f2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2208      	movs	r2, #8
 80038ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f913 	bl	8003b18 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d009      	beq.n	8003910 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8fb 	bl	8003b06 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d006      	beq.n	8003932 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2210      	movs	r2, #16
 800392a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f8fc 	bl	8003b2a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00b      	beq.n	8003954 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d006      	beq.n	8003954 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2208      	movs	r2, #8
 800394c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8f4 	bl	8003b3c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d07b      	beq.n	8003a56 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d072      	beq.n	8003a4e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800398a:	2b00      	cmp	r3, #0
 800398c:	d008      	beq.n	80039a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	f043 0302 	orr.w	r3, r3, #2
 800399e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d008      	beq.n	80039bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d043      	beq.n	8003a4e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d03e      	beq.n	8003a4e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d6:	2b60      	cmp	r3, #96	; 0x60
 80039d8:	d02b      	beq.n	8003a32 <HAL_CAN_IRQHandler+0x32a>
 80039da:	2b60      	cmp	r3, #96	; 0x60
 80039dc:	d82e      	bhi.n	8003a3c <HAL_CAN_IRQHandler+0x334>
 80039de:	2b50      	cmp	r3, #80	; 0x50
 80039e0:	d022      	beq.n	8003a28 <HAL_CAN_IRQHandler+0x320>
 80039e2:	2b50      	cmp	r3, #80	; 0x50
 80039e4:	d82a      	bhi.n	8003a3c <HAL_CAN_IRQHandler+0x334>
 80039e6:	2b40      	cmp	r3, #64	; 0x40
 80039e8:	d019      	beq.n	8003a1e <HAL_CAN_IRQHandler+0x316>
 80039ea:	2b40      	cmp	r3, #64	; 0x40
 80039ec:	d826      	bhi.n	8003a3c <HAL_CAN_IRQHandler+0x334>
 80039ee:	2b30      	cmp	r3, #48	; 0x30
 80039f0:	d010      	beq.n	8003a14 <HAL_CAN_IRQHandler+0x30c>
 80039f2:	2b30      	cmp	r3, #48	; 0x30
 80039f4:	d822      	bhi.n	8003a3c <HAL_CAN_IRQHandler+0x334>
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d002      	beq.n	8003a00 <HAL_CAN_IRQHandler+0x2f8>
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d005      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039fe:	e01d      	b.n	8003a3c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f043 0308 	orr.w	r3, r3, #8
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a08:	e019      	b.n	8003a3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	f043 0310 	orr.w	r3, r3, #16
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a12:	e014      	b.n	8003a3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	f043 0320 	orr.w	r3, r3, #32
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a1c:	e00f      	b.n	8003a3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a26:	e00a      	b.n	8003a3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a30:	e005      	b.n	8003a3e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a3a:	e000      	b.n	8003a3e <HAL_CAN_IRQHandler+0x336>
            break;
 8003a3c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a4c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2204      	movs	r2, #4
 8003a54:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f870 	bl	8003b4e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3728      	adds	r7, #40	; 0x28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr

08003af4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr

08003b18 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b70:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b92:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	60d3      	str	r3, [r2, #12]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	e000ed00 	.word	0xe000ed00

08003ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bac:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	f003 0307 	and.w	r3, r3, #7
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db0b      	blt.n	8003bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	f003 021f 	and.w	r2, r3, #31
 8003bdc:	4906      	ldr	r1, [pc, #24]	; (8003bf8 <__NVIC_EnableIRQ+0x34>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2001      	movs	r0, #1
 8003be6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db0a      	blt.n	8003c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	490c      	ldr	r1, [pc, #48]	; (8003c48 <__NVIC_SetPriority+0x4c>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c24:	e00a      	b.n	8003c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4908      	ldr	r1, [pc, #32]	; (8003c4c <__NVIC_SetPriority+0x50>)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3b04      	subs	r3, #4
 8003c34:	0112      	lsls	r2, r2, #4
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	440b      	add	r3, r1
 8003c3a:	761a      	strb	r2, [r3, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	; 0x24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f1c3 0307 	rsb	r3, r3, #7
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	bf28      	it	cs
 8003c6e:	2304      	movcs	r3, #4
 8003c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2b06      	cmp	r3, #6
 8003c78:	d902      	bls.n	8003c80 <NVIC_EncodePriority+0x30>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3b03      	subs	r3, #3
 8003c7e:	e000      	b.n	8003c82 <NVIC_EncodePriority+0x32>
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	401a      	ands	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c98:	f04f 31ff 	mov.w	r1, #4294967295
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	43d9      	mvns	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	4313      	orrs	r3, r2
         );
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	; 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff4f 	bl	8003b60 <__NVIC_SetPriorityGrouping>
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cdc:	f7ff ff64 	bl	8003ba8 <__NVIC_GetPriorityGrouping>
 8003ce0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68b9      	ldr	r1, [r7, #8]
 8003ce6:	6978      	ldr	r0, [r7, #20]
 8003ce8:	f7ff ffb2 	bl	8003c50 <NVIC_EncodePriority>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff ff81 	bl	8003bfc <__NVIC_SetPriority>
}
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	4603      	mov	r3, r0
 8003d0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff ff57 	bl	8003bc4 <__NVIC_EnableIRQ>
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d005      	beq.n	8003d42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
 8003d40:	e051      	b.n	8003de6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 020e 	bic.w	r2, r2, #14
 8003d50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a22      	ldr	r2, [pc, #136]	; (8003df0 <HAL_DMA_Abort_IT+0xd0>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d029      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0xa0>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a20      	ldr	r2, [pc, #128]	; (8003df4 <HAL_DMA_Abort_IT+0xd4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <HAL_DMA_Abort_IT+0x9c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1f      	ldr	r2, [pc, #124]	; (8003df8 <HAL_DMA_Abort_IT+0xd8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01a      	beq.n	8003db6 <HAL_DMA_Abort_IT+0x96>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1d      	ldr	r2, [pc, #116]	; (8003dfc <HAL_DMA_Abort_IT+0xdc>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d012      	beq.n	8003db0 <HAL_DMA_Abort_IT+0x90>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a1c      	ldr	r2, [pc, #112]	; (8003e00 <HAL_DMA_Abort_IT+0xe0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00a      	beq.n	8003daa <HAL_DMA_Abort_IT+0x8a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <HAL_DMA_Abort_IT+0xe4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d102      	bne.n	8003da4 <HAL_DMA_Abort_IT+0x84>
 8003d9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003da2:	e00e      	b.n	8003dc2 <HAL_DMA_Abort_IT+0xa2>
 8003da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da8:	e00b      	b.n	8003dc2 <HAL_DMA_Abort_IT+0xa2>
 8003daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dae:	e008      	b.n	8003dc2 <HAL_DMA_Abort_IT+0xa2>
 8003db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db4:	e005      	b.n	8003dc2 <HAL_DMA_Abort_IT+0xa2>
 8003db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dba:	e002      	b.n	8003dc2 <HAL_DMA_Abort_IT+0xa2>
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	e000      	b.n	8003dc2 <HAL_DMA_Abort_IT+0xa2>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	4a11      	ldr	r2, [pc, #68]	; (8003e08 <HAL_DMA_Abort_IT+0xe8>)
 8003dc4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
    } 
  }
  return status;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40020008 	.word	0x40020008
 8003df4:	4002001c 	.word	0x4002001c
 8003df8:	40020030 	.word	0x40020030
 8003dfc:	40020044 	.word	0x40020044
 8003e00:	40020058 	.word	0x40020058
 8003e04:	4002006c 	.word	0x4002006c
 8003e08:	40020000 	.word	0x40020000

08003e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b08b      	sub	sp, #44	; 0x2c
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e1e:	e169      	b.n	80040f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e20:	2201      	movs	r2, #1
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	f040 8158 	bne.w	80040ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4a9a      	ldr	r2, [pc, #616]	; (80040ac <HAL_GPIO_Init+0x2a0>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d05e      	beq.n	8003f06 <HAL_GPIO_Init+0xfa>
 8003e48:	4a98      	ldr	r2, [pc, #608]	; (80040ac <HAL_GPIO_Init+0x2a0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d875      	bhi.n	8003f3a <HAL_GPIO_Init+0x12e>
 8003e4e:	4a98      	ldr	r2, [pc, #608]	; (80040b0 <HAL_GPIO_Init+0x2a4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d058      	beq.n	8003f06 <HAL_GPIO_Init+0xfa>
 8003e54:	4a96      	ldr	r2, [pc, #600]	; (80040b0 <HAL_GPIO_Init+0x2a4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d86f      	bhi.n	8003f3a <HAL_GPIO_Init+0x12e>
 8003e5a:	4a96      	ldr	r2, [pc, #600]	; (80040b4 <HAL_GPIO_Init+0x2a8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d052      	beq.n	8003f06 <HAL_GPIO_Init+0xfa>
 8003e60:	4a94      	ldr	r2, [pc, #592]	; (80040b4 <HAL_GPIO_Init+0x2a8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d869      	bhi.n	8003f3a <HAL_GPIO_Init+0x12e>
 8003e66:	4a94      	ldr	r2, [pc, #592]	; (80040b8 <HAL_GPIO_Init+0x2ac>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d04c      	beq.n	8003f06 <HAL_GPIO_Init+0xfa>
 8003e6c:	4a92      	ldr	r2, [pc, #584]	; (80040b8 <HAL_GPIO_Init+0x2ac>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d863      	bhi.n	8003f3a <HAL_GPIO_Init+0x12e>
 8003e72:	4a92      	ldr	r2, [pc, #584]	; (80040bc <HAL_GPIO_Init+0x2b0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d046      	beq.n	8003f06 <HAL_GPIO_Init+0xfa>
 8003e78:	4a90      	ldr	r2, [pc, #576]	; (80040bc <HAL_GPIO_Init+0x2b0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d85d      	bhi.n	8003f3a <HAL_GPIO_Init+0x12e>
 8003e7e:	2b12      	cmp	r3, #18
 8003e80:	d82a      	bhi.n	8003ed8 <HAL_GPIO_Init+0xcc>
 8003e82:	2b12      	cmp	r3, #18
 8003e84:	d859      	bhi.n	8003f3a <HAL_GPIO_Init+0x12e>
 8003e86:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <HAL_GPIO_Init+0x80>)
 8003e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8c:	08003f07 	.word	0x08003f07
 8003e90:	08003ee1 	.word	0x08003ee1
 8003e94:	08003ef3 	.word	0x08003ef3
 8003e98:	08003f35 	.word	0x08003f35
 8003e9c:	08003f3b 	.word	0x08003f3b
 8003ea0:	08003f3b 	.word	0x08003f3b
 8003ea4:	08003f3b 	.word	0x08003f3b
 8003ea8:	08003f3b 	.word	0x08003f3b
 8003eac:	08003f3b 	.word	0x08003f3b
 8003eb0:	08003f3b 	.word	0x08003f3b
 8003eb4:	08003f3b 	.word	0x08003f3b
 8003eb8:	08003f3b 	.word	0x08003f3b
 8003ebc:	08003f3b 	.word	0x08003f3b
 8003ec0:	08003f3b 	.word	0x08003f3b
 8003ec4:	08003f3b 	.word	0x08003f3b
 8003ec8:	08003f3b 	.word	0x08003f3b
 8003ecc:	08003f3b 	.word	0x08003f3b
 8003ed0:	08003ee9 	.word	0x08003ee9
 8003ed4:	08003efd 	.word	0x08003efd
 8003ed8:	4a79      	ldr	r2, [pc, #484]	; (80040c0 <HAL_GPIO_Init+0x2b4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ede:	e02c      	b.n	8003f3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	623b      	str	r3, [r7, #32]
          break;
 8003ee6:	e029      	b.n	8003f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	3304      	adds	r3, #4
 8003eee:	623b      	str	r3, [r7, #32]
          break;
 8003ef0:	e024      	b.n	8003f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	623b      	str	r3, [r7, #32]
          break;
 8003efa:	e01f      	b.n	8003f3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	330c      	adds	r3, #12
 8003f02:	623b      	str	r3, [r7, #32]
          break;
 8003f04:	e01a      	b.n	8003f3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f0e:	2304      	movs	r3, #4
 8003f10:	623b      	str	r3, [r7, #32]
          break;
 8003f12:	e013      	b.n	8003f3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	611a      	str	r2, [r3, #16]
          break;
 8003f26:	e009      	b.n	8003f3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f28:	2308      	movs	r3, #8
 8003f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	615a      	str	r2, [r3, #20]
          break;
 8003f32:	e003      	b.n	8003f3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f34:	2300      	movs	r3, #0
 8003f36:	623b      	str	r3, [r7, #32]
          break;
 8003f38:	e000      	b.n	8003f3c <HAL_GPIO_Init+0x130>
          break;
 8003f3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2bff      	cmp	r3, #255	; 0xff
 8003f40:	d801      	bhi.n	8003f46 <HAL_GPIO_Init+0x13a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	e001      	b.n	8003f4a <HAL_GPIO_Init+0x13e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2bff      	cmp	r3, #255	; 0xff
 8003f50:	d802      	bhi.n	8003f58 <HAL_GPIO_Init+0x14c>
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	e002      	b.n	8003f5e <HAL_GPIO_Init+0x152>
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	3b08      	subs	r3, #8
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	210f      	movs	r1, #15
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	401a      	ands	r2, r3
 8003f70:	6a39      	ldr	r1, [r7, #32]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 80b1 	beq.w	80040ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f8c:	4b4d      	ldr	r3, [pc, #308]	; (80040c4 <HAL_GPIO_Init+0x2b8>)
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	4a4c      	ldr	r2, [pc, #304]	; (80040c4 <HAL_GPIO_Init+0x2b8>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	6193      	str	r3, [r2, #24]
 8003f98:	4b4a      	ldr	r3, [pc, #296]	; (80040c4 <HAL_GPIO_Init+0x2b8>)
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fa4:	4a48      	ldr	r2, [pc, #288]	; (80040c8 <HAL_GPIO_Init+0x2bc>)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	089b      	lsrs	r3, r3, #2
 8003faa:	3302      	adds	r3, #2
 8003fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	220f      	movs	r2, #15
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a40      	ldr	r2, [pc, #256]	; (80040cc <HAL_GPIO_Init+0x2c0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <HAL_GPIO_Init+0x1ec>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a3f      	ldr	r2, [pc, #252]	; (80040d0 <HAL_GPIO_Init+0x2c4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_GPIO_Init+0x1e8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <HAL_GPIO_Init+0x2c8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d007      	beq.n	8003ff0 <HAL_GPIO_Init+0x1e4>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3d      	ldr	r2, [pc, #244]	; (80040d8 <HAL_GPIO_Init+0x2cc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_GPIO_Init+0x1e0>
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e006      	b.n	8003ffa <HAL_GPIO_Init+0x1ee>
 8003fec:	2304      	movs	r3, #4
 8003fee:	e004      	b.n	8003ffa <HAL_GPIO_Init+0x1ee>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e002      	b.n	8003ffa <HAL_GPIO_Init+0x1ee>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <HAL_GPIO_Init+0x1ee>
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffc:	f002 0203 	and.w	r2, r2, #3
 8004000:	0092      	lsls	r2, r2, #2
 8004002:	4093      	lsls	r3, r2
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4313      	orrs	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800400a:	492f      	ldr	r1, [pc, #188]	; (80040c8 <HAL_GPIO_Init+0x2bc>)
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	3302      	adds	r3, #2
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d006      	beq.n	8004032 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	492c      	ldr	r1, [pc, #176]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]
 8004030:	e006      	b.n	8004040 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004032:	4b2a      	ldr	r3, [pc, #168]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	43db      	mvns	r3, r3
 800403a:	4928      	ldr	r1, [pc, #160]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 800403c:	4013      	ands	r3, r2
 800403e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d006      	beq.n	800405a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800404c:	4b23      	ldr	r3, [pc, #140]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	4922      	ldr	r1, [pc, #136]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	604b      	str	r3, [r1, #4]
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800405a:	4b20      	ldr	r3, [pc, #128]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	43db      	mvns	r3, r3
 8004062:	491e      	ldr	r1, [pc, #120]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 8004064:	4013      	ands	r3, r2
 8004066:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d006      	beq.n	8004082 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4918      	ldr	r1, [pc, #96]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]
 8004080:	e006      	b.n	8004090 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004082:	4b16      	ldr	r3, [pc, #88]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	43db      	mvns	r3, r3
 800408a:	4914      	ldr	r1, [pc, #80]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 800408c:	4013      	ands	r3, r2
 800408e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d021      	beq.n	80040e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800409c:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	490e      	ldr	r1, [pc, #56]	; (80040dc <HAL_GPIO_Init+0x2d0>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60cb      	str	r3, [r1, #12]
 80040a8:	e021      	b.n	80040ee <HAL_GPIO_Init+0x2e2>
 80040aa:	bf00      	nop
 80040ac:	10320000 	.word	0x10320000
 80040b0:	10310000 	.word	0x10310000
 80040b4:	10220000 	.word	0x10220000
 80040b8:	10210000 	.word	0x10210000
 80040bc:	10120000 	.word	0x10120000
 80040c0:	10110000 	.word	0x10110000
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40010800 	.word	0x40010800
 80040d0:	40010c00 	.word	0x40010c00
 80040d4:	40011000 	.word	0x40011000
 80040d8:	40011400 	.word	0x40011400
 80040dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_GPIO_Init+0x304>)
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	4909      	ldr	r1, [pc, #36]	; (8004110 <HAL_GPIO_Init+0x304>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80040ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f0:	3301      	adds	r3, #1
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	fa22 f303 	lsr.w	r3, r2, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f47f ae8e 	bne.w	8003e20 <HAL_GPIO_Init+0x14>
  }
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	372c      	adds	r7, #44	; 0x2c
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	40010400 	.word	0x40010400

08004114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	807b      	strh	r3, [r7, #2]
 8004120:	4613      	mov	r3, r2
 8004122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004124:	787b      	ldrb	r3, [r7, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004130:	e003      	b.n	800413a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004132:	887b      	ldrh	r3, [r7, #2]
 8004134:	041a      	lsls	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	611a      	str	r2, [r3, #16]
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004156:	887a      	ldrh	r2, [r7, #2]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4013      	ands	r3, r2
 800415c:	041a      	lsls	r2, r3, #16
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	43d9      	mvns	r1, r3
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	400b      	ands	r3, r1
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	611a      	str	r2, [r3, #16]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr
	...

08004178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e272      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8087 	beq.w	80042a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004198:	4b92      	ldr	r3, [pc, #584]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d00c      	beq.n	80041be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041a4:	4b8f      	ldr	r3, [pc, #572]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d112      	bne.n	80041d6 <HAL_RCC_OscConfig+0x5e>
 80041b0:	4b8c      	ldr	r3, [pc, #560]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041bc:	d10b      	bne.n	80041d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041be:	4b89      	ldr	r3, [pc, #548]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d06c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x12c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d168      	bne.n	80042a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e24c      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x76>
 80041e0:	4b80      	ldr	r3, [pc, #512]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a7f      	ldr	r2, [pc, #508]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e02e      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x98>
 80041f6:	4b7b      	ldr	r3, [pc, #492]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7a      	ldr	r2, [pc, #488]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b78      	ldr	r3, [pc, #480]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a77      	ldr	r2, [pc, #476]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e01d      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0xbc>
 800421a:	4b72      	ldr	r3, [pc, #456]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a71      	ldr	r2, [pc, #452]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b6f      	ldr	r3, [pc, #444]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a6e      	ldr	r2, [pc, #440]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0xd4>
 8004234:	4b6b      	ldr	r3, [pc, #428]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6a      	ldr	r2, [pc, #424]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b68      	ldr	r3, [pc, #416]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a67      	ldr	r2, [pc, #412]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fe ff48 	bl	80030e8 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7fe ff44 	bl	80030e8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e200      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	4b5d      	ldr	r3, [pc, #372]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0xe4>
 800427a:	e014      	b.n	80042a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fe ff34 	bl	80030e8 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7fe ff30 	bl	80030e8 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e1ec      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x10c>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d063      	beq.n	800437a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042b2:	4b4c      	ldr	r3, [pc, #304]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042be:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d11c      	bne.n	8004304 <HAL_RCC_OscConfig+0x18c>
 80042ca:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d116      	bne.n	8004304 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_RCC_OscConfig+0x176>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e1c0      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4939      	ldr	r1, [pc, #228]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	e03a      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d020      	beq.n	800434e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <HAL_RCC_OscConfig+0x270>)
 800430e:	2201      	movs	r2, #1
 8004310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004312:	f7fe fee9 	bl	80030e8 <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431a:	f7fe fee5 	bl	80030e8 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e1a1      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432c:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0f0      	beq.n	800431a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004338:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4927      	ldr	r1, [pc, #156]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
 800434c:	e015      	b.n	800437a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434e:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <HAL_RCC_OscConfig+0x270>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fe fec8 	bl	80030e8 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435c:	f7fe fec4 	bl	80030e8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e180      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436e:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	d03a      	beq.n	80043fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d019      	beq.n	80043c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800438e:	4b17      	ldr	r3, [pc, #92]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004394:	f7fe fea8 	bl	80030e8 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800439c:	f7fe fea4 	bl	80030e8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e160      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ae:	4b0d      	ldr	r3, [pc, #52]	; (80043e4 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043ba:	2001      	movs	r0, #1
 80043bc:	f000 faf4 	bl	80049a8 <RCC_Delay>
 80043c0:	e01c      	b.n	80043fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_RCC_OscConfig+0x274>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c8:	f7fe fe8e 	bl	80030e8 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ce:	e00f      	b.n	80043f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d0:	f7fe fe8a 	bl	80030e8 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d908      	bls.n	80043f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e146      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	42420000 	.word	0x42420000
 80043ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	4b92      	ldr	r3, [pc, #584]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e9      	bne.n	80043d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a6 	beq.w	8004556 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440a:	2300      	movs	r3, #0
 800440c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440e:	4b8b      	ldr	r3, [pc, #556]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10d      	bne.n	8004436 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441a:	4b88      	ldr	r3, [pc, #544]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	4a87      	ldr	r2, [pc, #540]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004424:	61d3      	str	r3, [r2, #28]
 8004426:	4b85      	ldr	r3, [pc, #532]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b82      	ldr	r3, [pc, #520]	; (8004640 <HAL_RCC_OscConfig+0x4c8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d118      	bne.n	8004474 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b7f      	ldr	r3, [pc, #508]	; (8004640 <HAL_RCC_OscConfig+0x4c8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a7e      	ldr	r2, [pc, #504]	; (8004640 <HAL_RCC_OscConfig+0x4c8>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fe fe4b 	bl	80030e8 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fe fe47 	bl	80030e8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b64      	cmp	r3, #100	; 0x64
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e103      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b75      	ldr	r3, [pc, #468]	; (8004640 <HAL_RCC_OscConfig+0x4c8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x312>
 800447c:	4b6f      	ldr	r3, [pc, #444]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4a6e      	ldr	r2, [pc, #440]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6213      	str	r3, [r2, #32]
 8004488:	e02d      	b.n	80044e6 <HAL_RCC_OscConfig+0x36e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x334>
 8004492:	4b6a      	ldr	r3, [pc, #424]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	4a69      	ldr	r2, [pc, #420]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	6213      	str	r3, [r2, #32]
 800449e:	4b67      	ldr	r3, [pc, #412]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	4a66      	ldr	r2, [pc, #408]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	f023 0304 	bic.w	r3, r3, #4
 80044a8:	6213      	str	r3, [r2, #32]
 80044aa:	e01c      	b.n	80044e6 <HAL_RCC_OscConfig+0x36e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	d10c      	bne.n	80044ce <HAL_RCC_OscConfig+0x356>
 80044b4:	4b61      	ldr	r3, [pc, #388]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	4a60      	ldr	r2, [pc, #384]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044ba:	f043 0304 	orr.w	r3, r3, #4
 80044be:	6213      	str	r3, [r2, #32]
 80044c0:	4b5e      	ldr	r3, [pc, #376]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	4a5d      	ldr	r2, [pc, #372]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	6213      	str	r3, [r2, #32]
 80044cc:	e00b      	b.n	80044e6 <HAL_RCC_OscConfig+0x36e>
 80044ce:	4b5b      	ldr	r3, [pc, #364]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4a5a      	ldr	r2, [pc, #360]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044d4:	f023 0301 	bic.w	r3, r3, #1
 80044d8:	6213      	str	r3, [r2, #32]
 80044da:	4b58      	ldr	r3, [pc, #352]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	4a57      	ldr	r2, [pc, #348]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	f023 0304 	bic.w	r3, r3, #4
 80044e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d015      	beq.n	800451a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ee:	f7fe fdfb 	bl	80030e8 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f4:	e00a      	b.n	800450c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f6:	f7fe fdf7 	bl	80030e8 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	f241 3288 	movw	r2, #5000	; 0x1388
 8004504:	4293      	cmp	r3, r2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0b1      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450c:	4b4b      	ldr	r3, [pc, #300]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0ee      	beq.n	80044f6 <HAL_RCC_OscConfig+0x37e>
 8004518:	e014      	b.n	8004544 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451a:	f7fe fde5 	bl	80030e8 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004520:	e00a      	b.n	8004538 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004522:	f7fe fde1 	bl	80030e8 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004530:	4293      	cmp	r3, r2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e09b      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004538:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1ee      	bne.n	8004522 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004544:	7dfb      	ldrb	r3, [r7, #23]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d105      	bne.n	8004556 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454a:	4b3c      	ldr	r3, [pc, #240]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	4a3b      	ldr	r2, [pc, #236]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004554:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8087 	beq.w	800466e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004560:	4b36      	ldr	r3, [pc, #216]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d061      	beq.n	8004630 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d146      	bne.n	8004602 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004574:	4b33      	ldr	r3, [pc, #204]	; (8004644 <HAL_RCC_OscConfig+0x4cc>)
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457a:	f7fe fdb5 	bl	80030e8 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004580:	e008      	b.n	8004594 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004582:	f7fe fdb1 	bl	80030e8 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b02      	cmp	r3, #2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e06d      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004594:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1f0      	bne.n	8004582 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d108      	bne.n	80045bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	4921      	ldr	r1, [pc, #132]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045bc:	4b1f      	ldr	r3, [pc, #124]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a19      	ldr	r1, [r3, #32]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	430b      	orrs	r3, r1
 80045ce:	491b      	ldr	r1, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x4cc>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fe fd85 	bl	80030e8 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fe fd81 	bl	80030e8 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e03d      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x46a>
 8004600:	e035      	b.n	800466e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCC_OscConfig+0x4cc>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fe fd6e 	bl	80030e8 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7fe fd6a 	bl	80030e8 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e026      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_RCC_OscConfig+0x4c4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x498>
 800462e:	e01e      	b.n	800466e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e019      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
 800463c:	40021000 	.word	0x40021000
 8004640:	40007000 	.word	0x40007000
 8004644:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_OscConfig+0x500>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	429a      	cmp	r2, r3
 800465a:	d106      	bne.n	800466a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d001      	beq.n	800466e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40021000 	.word	0x40021000

0800467c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0d0      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004690:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d910      	bls.n	80046c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b67      	ldr	r3, [pc, #412]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 0207 	bic.w	r2, r3, #7
 80046a6:	4965      	ldr	r1, [pc, #404]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ae:	4b63      	ldr	r3, [pc, #396]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e0b8      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d020      	beq.n	800470e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d8:	4b59      	ldr	r3, [pc, #356]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a58      	ldr	r2, [pc, #352]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046f0:	4b53      	ldr	r3, [pc, #332]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a52      	ldr	r2, [pc, #328]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	494d      	ldr	r1, [pc, #308]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d040      	beq.n	800479c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	4b47      	ldr	r3, [pc, #284]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d115      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e07f      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d107      	bne.n	800474a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800473a:	4b41      	ldr	r3, [pc, #260]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e073      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474a:	4b3d      	ldr	r3, [pc, #244]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e06b      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800475a:	4b39      	ldr	r3, [pc, #228]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f023 0203 	bic.w	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4936      	ldr	r1, [pc, #216]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800476c:	f7fe fcbc 	bl	80030e8 <HAL_GetTick>
 8004770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	e00a      	b.n	800478a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004774:	f7fe fcb8 	bl	80030e8 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	4293      	cmp	r3, r2
 8004784:	d901      	bls.n	800478a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e053      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478a:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 020c 	and.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	429a      	cmp	r2, r3
 800479a:	d1eb      	bne.n	8004774 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800479c:	4b27      	ldr	r3, [pc, #156]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d210      	bcs.n	80047cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 0207 	bic.w	r2, r3, #7
 80047b2:	4922      	ldr	r1, [pc, #136]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b20      	ldr	r3, [pc, #128]	; (800483c <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e032      	b.n	8004832 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4916      	ldr	r1, [pc, #88]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	490e      	ldr	r1, [pc, #56]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800480a:	f000 f821 	bl	8004850 <HAL_RCC_GetSysClockFreq>
 800480e:	4602      	mov	r2, r0
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_ClockConfig+0x1c4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	490a      	ldr	r1, [pc, #40]	; (8004844 <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	5ccb      	ldrb	r3, [r1, r3]
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	4a09      	ldr	r2, [pc, #36]	; (8004848 <HAL_RCC_ClockConfig+0x1cc>)
 8004824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004826:	4b09      	ldr	r3, [pc, #36]	; (800484c <HAL_RCC_ClockConfig+0x1d0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe fb4c 	bl	8002ec8 <HAL_InitTick>

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40022000 	.word	0x40022000
 8004840:	40021000 	.word	0x40021000
 8004844:	08009144 	.word	0x08009144
 8004848:	20000018 	.word	0x20000018
 800484c:	2000001c 	.word	0x2000001c

08004850 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004850:	b490      	push	{r4, r7}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004856:	4b29      	ldr	r3, [pc, #164]	; (80048fc <HAL_RCC_GetSysClockFreq+0xac>)
 8004858:	1d3c      	adds	r4, r7, #4
 800485a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800485c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004860:	f240 2301 	movw	r3, #513	; 0x201
 8004864:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	2300      	movs	r3, #0
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800487a:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_RCC_GetSysClockFreq+0xb0>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b04      	cmp	r3, #4
 8004888:	d002      	beq.n	8004890 <HAL_RCC_GetSysClockFreq+0x40>
 800488a:	2b08      	cmp	r3, #8
 800488c:	d003      	beq.n	8004896 <HAL_RCC_GetSysClockFreq+0x46>
 800488e:	e02b      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004890:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004892:	623b      	str	r3, [r7, #32]
      break;
 8004894:	e02b      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	0c9b      	lsrs	r3, r3, #18
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	3328      	adds	r3, #40	; 0x28
 80048a0:	443b      	add	r3, r7
 80048a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d012      	beq.n	80048d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048b2:	4b13      	ldr	r3, [pc, #76]	; (8004900 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	0c5b      	lsrs	r3, r3, #17
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	3328      	adds	r3, #40	; 0x28
 80048be:	443b      	add	r3, r7
 80048c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048ca:	fb03 f202 	mul.w	r2, r3, r2
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
 80048d6:	e004      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048dc:	fb02 f303 	mul.w	r3, r2, r3
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	623b      	str	r3, [r7, #32]
      break;
 80048e6:	e002      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048e8:	4b06      	ldr	r3, [pc, #24]	; (8004904 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048ea:	623b      	str	r3, [r7, #32]
      break;
 80048ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ee:	6a3b      	ldr	r3, [r7, #32]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3728      	adds	r7, #40	; 0x28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc90      	pop	{r4, r7}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	080090d4 	.word	0x080090d4
 8004900:	40021000 	.word	0x40021000
 8004904:	007a1200 	.word	0x007a1200
 8004908:	003d0900 	.word	0x003d0900

0800490c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004910:	4b02      	ldr	r3, [pc, #8]	; (800491c <HAL_RCC_GetHCLKFreq+0x10>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	4618      	mov	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	20000018 	.word	0x20000018

08004920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004924:	f7ff fff2 	bl	800490c <HAL_RCC_GetHCLKFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4903      	ldr	r1, [pc, #12]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004936:	5ccb      	ldrb	r3, [r1, r3]
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021000 	.word	0x40021000
 8004944:	08009154 	.word	0x08009154

08004948 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	220f      	movs	r2, #15
 8004956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <HAL_RCC_GetClockConfig+0x58>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f003 0203 	and.w	r2, r3, #3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004964:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <HAL_RCC_GetClockConfig+0x58>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_GetClockConfig+0x58>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800497c:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_RCC_GetClockConfig+0x58>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	08db      	lsrs	r3, r3, #3
 8004982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0207 	and.w	r2, r3, #7
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40022000 	.word	0x40022000

080049a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <RCC_Delay+0x34>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a0a      	ldr	r2, [pc, #40]	; (80049e0 <RCC_Delay+0x38>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	0a5b      	lsrs	r3, r3, #9
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049c4:	bf00      	nop
  }
  while (Delay --);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1e5a      	subs	r2, r3, #1
 80049ca:	60fa      	str	r2, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f9      	bne.n	80049c4 <RCC_Delay+0x1c>
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	20000018 	.word	0x20000018
 80049e0:	10624dd3 	.word	0x10624dd3

080049e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e076      	b.n	8004ae4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d108      	bne.n	8004a10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a06:	d009      	beq.n	8004a1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	61da      	str	r2, [r3, #28]
 8004a0e:	e005      	b.n	8004a1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fe f980 	bl	8002d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a52:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	ea42 0103 	orr.w	r1, r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	0c1a      	lsrs	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f002 0204 	and.w	r2, r2, #4
 8004ac2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	603b      	str	r3, [r7, #0]
 8004af8:	4613      	mov	r3, r2
 8004afa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_SPI_Transmit+0x22>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e126      	b.n	8004d5c <HAL_SPI_Transmit+0x270>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b16:	f7fe fae7 	bl	80030e8 <HAL_GetTick>
 8004b1a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b1c:	88fb      	ldrh	r3, [r7, #6]
 8004b1e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d002      	beq.n	8004b32 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b30:	e10b      	b.n	8004d4a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_Transmit+0x52>
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b42:	e102      	b.n	8004d4a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2203      	movs	r2, #3
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	88fa      	ldrh	r2, [r7, #6]
 8004b62:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8a:	d10f      	bne.n	8004bac <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004baa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d007      	beq.n	8004bca <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bc8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bd2:	d14b      	bne.n	8004c6c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_SPI_Transmit+0xf6>
 8004bdc:	8afb      	ldrh	r3, [r7, #22]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d13e      	bne.n	8004c60 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	881a      	ldrh	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	1c9a      	adds	r2, r3, #2
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c06:	e02b      	b.n	8004c60 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d112      	bne.n	8004c3c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	881a      	ldrh	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	1c9a      	adds	r2, r3, #2
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c3a:	e011      	b.n	8004c60 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c3c:	f7fe fa54 	bl	80030e8 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d803      	bhi.n	8004c54 <HAL_SPI_Transmit+0x168>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d102      	bne.n	8004c5a <HAL_SPI_Transmit+0x16e>
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c5e:	e074      	b.n	8004d4a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ce      	bne.n	8004c08 <HAL_SPI_Transmit+0x11c>
 8004c6a:	e04c      	b.n	8004d06 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_SPI_Transmit+0x18e>
 8004c74:	8afb      	ldrh	r3, [r7, #22]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d140      	bne.n	8004cfc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ca0:	e02c      	b.n	8004cfc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d113      	bne.n	8004cd8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cd6:	e011      	b.n	8004cfc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cd8:	f7fe fa06 	bl	80030e8 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d803      	bhi.n	8004cf0 <HAL_SPI_Transmit+0x204>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d102      	bne.n	8004cf6 <HAL_SPI_Transmit+0x20a>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cfa:	e026      	b.n	8004d4a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1cd      	bne.n	8004ca2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fcbc 	bl	8005688 <SPI_EndRxTxTransaction>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	613b      	str	r3, [r7, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	77fb      	strb	r3, [r7, #31]
 8004d46:	e000      	b.n	8004d4a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af02      	add	r7, sp, #8
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d80:	d112      	bne.n	8004da8 <HAL_SPI_Receive+0x44>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10e      	bne.n	8004da8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f8f1 	bl	8004f86 <HAL_SPI_TransmitReceive>
 8004da4:	4603      	mov	r3, r0
 8004da6:	e0ea      	b.n	8004f7e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_SPI_Receive+0x52>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e0e3      	b.n	8004f7e <HAL_SPI_Receive+0x21a>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dbe:	f7fe f993 	bl	80030e8 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d002      	beq.n	8004dd6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dd4:	e0ca      	b.n	8004f6c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_SPI_Receive+0x7e>
 8004ddc:	88fb      	ldrh	r3, [r7, #6]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004de6:	e0c1      	b.n	8004f6c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2204      	movs	r2, #4
 8004dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	88fa      	ldrh	r2, [r7, #6]
 8004e00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	88fa      	ldrh	r2, [r7, #6]
 8004e06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2e:	d10f      	bne.n	8004e50 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e4e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d007      	beq.n	8004e6e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d162      	bne.n	8004f3c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e76:	e02e      	b.n	8004ed6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d115      	bne.n	8004eb2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f103 020c 	add.w	r2, r3, #12
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	7812      	ldrb	r2, [r2, #0]
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb0:	e011      	b.n	8004ed6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb2:	f7fe f919 	bl	80030e8 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d803      	bhi.n	8004eca <HAL_SPI_Receive+0x166>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d102      	bne.n	8004ed0 <HAL_SPI_Receive+0x16c>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ed4:	e04a      	b.n	8004f6c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1cb      	bne.n	8004e78 <HAL_SPI_Receive+0x114>
 8004ee0:	e031      	b.n	8004f46 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d113      	bne.n	8004f18 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	b292      	uxth	r2, r2
 8004efc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	1c9a      	adds	r2, r3, #2
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f16:	e011      	b.n	8004f3c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f18:	f7fe f8e6 	bl	80030e8 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d803      	bhi.n	8004f30 <HAL_SPI_Receive+0x1cc>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d102      	bne.n	8004f36 <HAL_SPI_Receive+0x1d2>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d102      	bne.n	8004f3c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f3a:	e017      	b.n	8004f6c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1cd      	bne.n	8004ee2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 fb4a 	bl	80055e4 <SPI_EndRxTransaction>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	75fb      	strb	r3, [r7, #23]
 8004f68:	e000      	b.n	8004f6c <HAL_SPI_Receive+0x208>
  }

error :
 8004f6a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b08c      	sub	sp, #48	; 0x30
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	607a      	str	r2, [r7, #4]
 8004f92:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f94:	2301      	movs	r3, #1
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x26>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e18a      	b.n	80052c2 <HAL_SPI_TransmitReceive+0x33c>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb4:	f7fe f898 	bl	80030e8 <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fca:	887b      	ldrh	r3, [r7, #2]
 8004fcc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d00f      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x70>
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fdc:	d107      	bne.n	8004fee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <HAL_SPI_TransmitReceive+0x68>
 8004fe6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d003      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ff4:	e15b      	b.n	80052ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_SPI_TransmitReceive+0x82>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_SPI_TransmitReceive+0x82>
 8005002:	887b      	ldrh	r3, [r7, #2]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800500e:	e14e      	b.n	80052ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b04      	cmp	r3, #4
 800501a:	d003      	beq.n	8005024 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2205      	movs	r2, #5
 8005020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	887a      	ldrh	r2, [r7, #2]
 800503a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	887a      	ldrh	r2, [r7, #2]
 8005046:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	887a      	ldrh	r2, [r7, #2]
 800504c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d007      	beq.n	8005078 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005080:	d178      	bne.n	8005174 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <HAL_SPI_TransmitReceive+0x10a>
 800508a:	8b7b      	ldrh	r3, [r7, #26]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d166      	bne.n	800515e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	881a      	ldrh	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	1c9a      	adds	r2, r3, #2
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b4:	e053      	b.n	800515e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d11b      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x176>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d016      	beq.n	80050fc <HAL_SPI_TransmitReceive+0x176>
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d113      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b01      	cmp	r3, #1
 8005108:	d119      	bne.n	800513e <HAL_SPI_TransmitReceive+0x1b8>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d014      	beq.n	800513e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68da      	ldr	r2, [r3, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	b292      	uxth	r2, r2
 8005120:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	1c9a      	adds	r2, r3, #2
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800513a:	2301      	movs	r3, #1
 800513c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800513e:	f7fd ffd3 	bl	80030e8 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800514a:	429a      	cmp	r2, r3
 800514c:	d807      	bhi.n	800515e <HAL_SPI_TransmitReceive+0x1d8>
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005154:	d003      	beq.n	800515e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800515c:	e0a7      	b.n	80052ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1a6      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x130>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1a1      	bne.n	80050b6 <HAL_SPI_TransmitReceive+0x130>
 8005172:	e07c      	b.n	800526e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <HAL_SPI_TransmitReceive+0x1fc>
 800517c:	8b7b      	ldrh	r3, [r7, #26]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d16b      	bne.n	800525a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	330c      	adds	r3, #12
 800518c:	7812      	ldrb	r2, [r2, #0]
 800518e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800519e:	b29b      	uxth	r3, r3
 80051a0:	3b01      	subs	r3, #1
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a8:	e057      	b.n	800525a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d11c      	bne.n	80051f2 <HAL_SPI_TransmitReceive+0x26c>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d017      	beq.n	80051f2 <HAL_SPI_TransmitReceive+0x26c>
 80051c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d114      	bne.n	80051f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	7812      	ldrb	r2, [r2, #0]
 80051d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d119      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x2ae>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d014      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005230:	2301      	movs	r3, #1
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005234:	f7fd ff58 	bl	80030e8 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005240:	429a      	cmp	r2, r3
 8005242:	d803      	bhi.n	800524c <HAL_SPI_TransmitReceive+0x2c6>
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d102      	bne.n	8005252 <HAL_SPI_TransmitReceive+0x2cc>
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005258:	e029      	b.n	80052ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1a2      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x224>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d19d      	bne.n	80051aa <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800526e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005270:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fa08 	bl	8005688 <SPI_EndRxTxTransaction>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d006      	beq.n	800528c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800528a:	e010      	b.n	80052ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10b      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e000      	b.n	80052ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3730      	adds	r7, #48	; 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	099b      	lsrs	r3, r3, #6
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	099b      	lsrs	r3, r3, #6
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d004      	beq.n	8005310 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
    return;
 800530e:	e0be      	b.n	800548e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <HAL_SPI_IRQHandler+0x66>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	09db      	lsrs	r3, r3, #7
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d004      	beq.n	8005332 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	4798      	blx	r3
    return;
 8005330:	e0ad      	b.n	800548e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_SPI_IRQHandler+0x80>
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	099b      	lsrs	r3, r3, #6
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80a1 	beq.w	800548e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 809a 	beq.w	800548e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	099b      	lsrs	r3, r3, #6
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d023      	beq.n	80053ae <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b03      	cmp	r3, #3
 8005370:	d011      	beq.n	8005396 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	f043 0204 	orr.w	r2, r3, #4
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	617b      	str	r3, [r7, #20]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	e00b      	b.n	80053ae <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	693b      	ldr	r3, [r7, #16]
        return;
 80053ac:	e06f      	b.n	800548e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	095b      	lsrs	r3, r3, #5
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d014      	beq.n	80053e4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053be:	f043 0201 	orr.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d04f      	beq.n	800548c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053fa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <HAL_SPI_IRQHandler+0x14c>
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d034      	beq.n	8005482 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0203 	bic.w	r2, r2, #3
 8005426:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d011      	beq.n	8005454 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005434:	4a17      	ldr	r2, [pc, #92]	; (8005494 <HAL_SPI_IRQHandler+0x1c8>)
 8005436:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fc6f 	bl	8003d20 <HAL_DMA_Abort_IT>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005458:	2b00      	cmp	r3, #0
 800545a:	d016      	beq.n	800548a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005460:	4a0c      	ldr	r2, [pc, #48]	; (8005494 <HAL_SPI_IRQHandler+0x1c8>)
 8005462:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe fc59 	bl	8003d20 <HAL_DMA_Abort_IT>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005478:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005480:	e003      	b.n	800548a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f808 	bl	8005498 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005488:	e000      	b.n	800548c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800548a:	bf00      	nop
    return;
 800548c:	bf00      	nop
  }
}
 800548e:	3720      	adds	r7, #32
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	080054ab 	.word	0x080054ab

08005498 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr

080054aa <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b084      	sub	sp, #16
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f7ff ffe7 	bl	8005498 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80054ca:	bf00      	nop
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	603b      	str	r3, [r7, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054e4:	f7fd fe00 	bl	80030e8 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	4413      	add	r3, r2
 80054f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054f4:	f7fd fdf8 	bl	80030e8 <HAL_GetTick>
 80054f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054fa:	4b39      	ldr	r3, [pc, #228]	; (80055e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	015b      	lsls	r3, r3, #5
 8005500:	0d1b      	lsrs	r3, r3, #20
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	fb02 f303 	mul.w	r3, r2, r3
 8005508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800550a:	e054      	b.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	d050      	beq.n	80055b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005514:	f7fd fde8 	bl	80030e8 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	429a      	cmp	r2, r3
 8005522:	d902      	bls.n	800552a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d13d      	bne.n	80055a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005542:	d111      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800554c:	d004      	beq.n	8005558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005556:	d107      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005570:	d10f      	bne.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e017      	b.n	80055d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4013      	ands	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	bf0c      	ite	eq
 80055c6:	2301      	moveq	r3, #1
 80055c8:	2300      	movne	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d19b      	bne.n	800550c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000018 	.word	0x20000018

080055e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f8:	d111      	bne.n	800561e <SPI_EndRxTransaction+0x3a>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005602:	d004      	beq.n	800560e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560c:	d107      	bne.n	800561e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005626:	d117      	bne.n	8005658 <SPI_EndRxTransaction+0x74>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005630:	d112      	bne.n	8005658 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2200      	movs	r2, #0
 800563a:	2101      	movs	r1, #1
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff ff49 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01a      	beq.n	800567e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	f043 0220 	orr.w	r2, r3, #32
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e013      	b.n	8005680 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	2180      	movs	r1, #128	; 0x80
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff ff36 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e000      	b.n	8005680 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	2180      	movs	r1, #128	; 0x80
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f7ff ff18 	bl	80054d4 <SPI_WaitFlagStateUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e000      	b.n	80056bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e041      	b.n	800575a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f839 	bl	8005762 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f000 f9b4 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d001      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e03a      	b.n	8005802 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a18      	ldr	r2, [pc, #96]	; (800580c <HAL_TIM_Base_Start_IT+0x98>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00e      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x58>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b6:	d009      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x58>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a14      	ldr	r2, [pc, #80]	; (8005810 <HAL_TIM_Base_Start_IT+0x9c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_TIM_Base_Start_IT+0x58>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a13      	ldr	r2, [pc, #76]	; (8005814 <HAL_TIM_Base_Start_IT+0xa0>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d111      	bne.n	80057f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2b06      	cmp	r3, #6
 80057dc:	d010      	beq.n	8005800 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ee:	e007      	b.n	8005800 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800

08005818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b02      	cmp	r3, #2
 800582c:	d122      	bne.n	8005874 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b02      	cmp	r3, #2
 800583a:	d11b      	bne.n	8005874 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0202 	mvn.w	r2, #2
 8005844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8ed 	bl	8005a3a <HAL_TIM_IC_CaptureCallback>
 8005860:	e005      	b.n	800586e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f8e0 	bl	8005a28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f8ef 	bl	8005a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b04      	cmp	r3, #4
 8005880:	d122      	bne.n	80058c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d11b      	bne.n	80058c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0204 	mvn.w	r2, #4
 8005898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2202      	movs	r2, #2
 800589e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f8c3 	bl	8005a3a <HAL_TIM_IC_CaptureCallback>
 80058b4:	e005      	b.n	80058c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f8b6 	bl	8005a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f8c5 	bl	8005a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0308 	and.w	r3, r3, #8
 80058d2:	2b08      	cmp	r3, #8
 80058d4:	d122      	bne.n	800591c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d11b      	bne.n	800591c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0208 	mvn.w	r2, #8
 80058ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2204      	movs	r2, #4
 80058f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d003      	beq.n	800590a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f899 	bl	8005a3a <HAL_TIM_IC_CaptureCallback>
 8005908:	e005      	b.n	8005916 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f88c 	bl	8005a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f89b 	bl	8005a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b10      	cmp	r3, #16
 8005928:	d122      	bne.n	8005970 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b10      	cmp	r3, #16
 8005936:	d11b      	bne.n	8005970 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f06f 0210 	mvn.w	r2, #16
 8005940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2208      	movs	r2, #8
 8005946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f86f 	bl	8005a3a <HAL_TIM_IC_CaptureCallback>
 800595c:	e005      	b.n	800596a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f862 	bl	8005a28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f871 	bl	8005a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d10e      	bne.n	800599c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d107      	bne.n	800599c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f06f 0201 	mvn.w	r2, #1
 8005994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fd f94c 	bl	8002c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d10e      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b4:	2b80      	cmp	r3, #128	; 0x80
 80059b6:	d107      	bne.n	80059c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f8bf 	bl	8005b46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	d10e      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	2b40      	cmp	r3, #64	; 0x40
 80059e2:	d107      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f835 	bl	8005a5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d10e      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d107      	bne.n	8005a20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0220 	mvn.w	r2, #32
 8005a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f88a 	bl	8005b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bc80      	pop	{r7}
 8005a4a:	4770      	bx	lr

08005a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a29      	ldr	r2, [pc, #164]	; (8005b28 <TIM_Base_SetConfig+0xb8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <TIM_Base_SetConfig+0x30>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d007      	beq.n	8005aa0 <TIM_Base_SetConfig+0x30>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a26      	ldr	r2, [pc, #152]	; (8005b2c <TIM_Base_SetConfig+0xbc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_Base_SetConfig+0x30>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a25      	ldr	r2, [pc, #148]	; (8005b30 <TIM_Base_SetConfig+0xc0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d108      	bne.n	8005ab2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a1c      	ldr	r2, [pc, #112]	; (8005b28 <TIM_Base_SetConfig+0xb8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_Base_SetConfig+0x62>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d007      	beq.n	8005ad2 <TIM_Base_SetConfig+0x62>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a19      	ldr	r2, [pc, #100]	; (8005b2c <TIM_Base_SetConfig+0xbc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_Base_SetConfig+0x62>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <TIM_Base_SetConfig+0xc0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d108      	bne.n	8005ae4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a07      	ldr	r2, [pc, #28]	; (8005b28 <TIM_Base_SetConfig+0xb8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d103      	bne.n	8005b18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	615a      	str	r2, [r3, #20]
}
 8005b1e:	bf00      	nop
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr
 8005b28:	40012c00 	.word	0x40012c00
 8005b2c:	40000400 	.word	0x40000400
 8005b30:	40000800 	.word	0x40000800

08005b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bc80      	pop	{r7}
 8005b44:	4770      	bx	lr

08005b46 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b4e:	bf00      	nop
 8005b50:	370c      	adds	r7, #12
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b5e:	f3ef 8305 	mrs	r3, IPSR
 8005b62:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10f      	bne.n	8005b8a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6e:	607b      	str	r3, [r7, #4]
  return(result);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <osKernelInitialize+0x32>
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <osKernelInitialize+0x60>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d109      	bne.n	8005b92 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b82:	603b      	str	r3, [r7, #0]
  return(result);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005b8a:	f06f 0305 	mvn.w	r3, #5
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e00c      	b.n	8005bac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b92:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <osKernelInitialize+0x60>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d105      	bne.n	8005ba6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005b9a:	4b07      	ldr	r3, [pc, #28]	; (8005bb8 <osKernelInitialize+0x60>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e002      	b.n	8005bac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8005baa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr
 8005bb8:	20000348 	.word	0x20000348

08005bbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc2:	f3ef 8305 	mrs	r3, IPSR
 8005bc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10f      	bne.n	8005bee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bce:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd2:	607b      	str	r3, [r7, #4]
  return(result);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <osKernelStart+0x32>
 8005bda:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <osKernelStart+0x64>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d109      	bne.n	8005bf6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005be2:	f3ef 8311 	mrs	r3, BASEPRI
 8005be6:	603b      	str	r3, [r7, #0]
  return(result);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005bee:	f06f 0305 	mvn.w	r3, #5
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e00e      	b.n	8005c14 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <osKernelStart+0x64>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d107      	bne.n	8005c0e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005bfe:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <osKernelStart+0x64>)
 8005c00:	2202      	movs	r2, #2
 8005c02:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005c04:	f001 f90e 	bl	8006e24 <vTaskStartScheduler>
      stat = osOK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	e002      	b.n	8005c14 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20000348 	.word	0x20000348

08005c24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b092      	sub	sp, #72	; 0x48
 8005c28:	af04      	add	r7, sp, #16
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c34:	f3ef 8305 	mrs	r3, IPSR
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f040 8094 	bne.w	8005d6a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c42:	f3ef 8310 	mrs	r3, PRIMASK
 8005c46:	623b      	str	r3, [r7, #32]
  return(result);
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f040 808d 	bne.w	8005d6a <osThreadNew+0x146>
 8005c50:	4b48      	ldr	r3, [pc, #288]	; (8005d74 <osThreadNew+0x150>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d106      	bne.n	8005c66 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c58:	f3ef 8311 	mrs	r3, BASEPRI
 8005c5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f040 8082 	bne.w	8005d6a <osThreadNew+0x146>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d07e      	beq.n	8005d6a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005c6c:	2380      	movs	r3, #128	; 0x80
 8005c6e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005c70:	2318      	movs	r3, #24
 8005c72:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005c74:	2300      	movs	r3, #0
 8005c76:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005c78:	f107 031b 	add.w	r3, r7, #27
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c82:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d045      	beq.n	8005d16 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <osThreadNew+0x74>
        name = attr->name;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <osThreadNew+0x9a>
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	2b38      	cmp	r3, #56	; 0x38
 8005cb0:	d805      	bhi.n	8005cbe <osThreadNew+0x9a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <osThreadNew+0x9e>
        return (NULL);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e054      	b.n	8005d6c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00e      	beq.n	8005cf8 <osThreadNew+0xd4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2bbb      	cmp	r3, #187	; 0xbb
 8005ce0:	d90a      	bls.n	8005cf8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d006      	beq.n	8005cf8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <osThreadNew+0xd4>
        mem = 1;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf6:	e010      	b.n	8005d1a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10c      	bne.n	8005d1a <osThreadNew+0xf6>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d108      	bne.n	8005d1a <osThreadNew+0xf6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <osThreadNew+0xf6>
          mem = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d14:	e001      	b.n	8005d1a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d110      	bne.n	8005d42 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d28:	9202      	str	r2, [sp, #8]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fe12 	bl	8006960 <xTaskCreateStatic>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	e013      	b.n	8005d6a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d110      	bne.n	8005d6a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fe5c 	bl	8006a18 <xTaskCreate>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d001      	beq.n	8005d6a <osThreadNew+0x146>
          hTask = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d6a:	697b      	ldr	r3, [r7, #20]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3738      	adds	r7, #56	; 0x38
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000348 	.word	0x20000348

08005d78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d80:	f3ef 8305 	mrs	r3, IPSR
 8005d84:	613b      	str	r3, [r7, #16]
  return(result);
 8005d86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10f      	bne.n	8005dac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d90:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <osDelay+0x34>
 8005d98:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <osDelay+0x58>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d109      	bne.n	8005db4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005da0:	f3ef 8311 	mrs	r3, BASEPRI
 8005da4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <osDelay+0x3c>
    stat = osErrorISR;
 8005dac:	f06f 0305 	mvn.w	r3, #5
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	e007      	b.n	8005dc4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fffc 	bl	8006dbc <vTaskDelay>
    }
  }

  return (stat);
 8005dc4:	697b      	ldr	r3, [r7, #20]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000348 	.word	0x20000348

08005dd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a06      	ldr	r2, [pc, #24]	; (8005dfc <vApplicationGetIdleTaskMemory+0x28>)
 8005de4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2280      	movs	r2, #128	; 0x80
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr
 8005dfc:	2000034c 	.word	0x2000034c
 8005e00:	20000408 	.word	0x20000408

08005e04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a07      	ldr	r2, [pc, #28]	; (8005e30 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4a06      	ldr	r2, [pc, #24]	; (8005e34 <vApplicationGetTimerTaskMemory+0x30>)
 8005e1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	20000608 	.word	0x20000608
 8005e34:	200006c4 	.word	0x200006c4

08005e38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f103 0208 	add.w	r2, r3, #8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f103 0208 	add.w	r2, r3, #8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f103 0208 	add.w	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bc80      	pop	{r7}
 8005e74:	4770      	bx	lr

08005e76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr

08005e8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b085      	sub	sp, #20
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
 8005e96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	601a      	str	r2, [r3, #0]
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr

08005ed4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eea:	d103      	bne.n	8005ef4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	e00c      	b.n	8005f0e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	e002      	b.n	8005f02 <vListInsert+0x2e>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d2f6      	bcs.n	8005efc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	601a      	str	r2, [r3, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bc80      	pop	{r7}
 8005f42:	4770      	bx	lr

08005f44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6892      	ldr	r2, [r2, #8]
 8005f5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6852      	ldr	r2, [r2, #4]
 8005f64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d103      	bne.n	8005f78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	1e5a      	subs	r2, r3, #1
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
	...

08005f98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fc2:	f002 f873 	bl	80080ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fce:	68f9      	ldr	r1, [r7, #12]
 8005fd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	441a      	add	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	68f9      	ldr	r1, [r7, #12]
 8005ff6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	441a      	add	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	22ff      	movs	r2, #255	; 0xff
 8006006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	22ff      	movs	r2, #255	; 0xff
 800600e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d114      	bne.n	8006042 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d01a      	beq.n	8006056 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3310      	adds	r3, #16
 8006024:	4618      	mov	r0, r3
 8006026:	f001 f999 	bl	800735c <xTaskRemoveFromEventList>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d012      	beq.n	8006056 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <xQueueGenericReset+0xcc>)
 8006032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	e009      	b.n	8006056 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3310      	adds	r3, #16
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff fef6 	bl	8005e38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3324      	adds	r3, #36	; 0x24
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fef1 	bl	8005e38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006056:	f002 f859 	bl	800810c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800605a:	2301      	movs	r3, #1
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08e      	sub	sp, #56	; 0x38
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <xQueueGenericCreateStatic+0x52>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <xQueueGenericCreateStatic+0x56>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <xQueueGenericCreateStatic+0x58>
 80060be:	2300      	movs	r3, #0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	623b      	str	r3, [r7, #32]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <xQueueGenericCreateStatic+0x7e>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <xQueueGenericCreateStatic+0x82>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e000      	b.n	80060ec <xQueueGenericCreateStatic+0x84>
 80060ea:	2300      	movs	r3, #0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	61fb      	str	r3, [r7, #28]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006106:	2350      	movs	r3, #80	; 0x50
 8006108:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b50      	cmp	r3, #80	; 0x50
 800610e:	d00a      	beq.n	8006126 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	61bb      	str	r3, [r7, #24]
}
 8006122:	bf00      	nop
 8006124:	e7fe      	b.n	8006124 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00d      	beq.n	800614c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006138:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	4613      	mov	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	68b9      	ldr	r1, [r7, #8]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f805 	bl	8006156 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800614e:	4618      	mov	r0, r3
 8006150:	3730      	adds	r7, #48	; 0x30
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
 8006162:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e002      	b.n	8006178 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006184:	2101      	movs	r1, #1
 8006186:	69b8      	ldr	r0, [r7, #24]
 8006188:	f7ff ff06 	bl	8005f98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08e      	sub	sp, #56	; 0x38
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061aa:	2300      	movs	r3, #0
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xQueueGenericSend+0x32>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d103      	bne.n	80061dc <xQueueGenericSend+0x40>
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <xQueueGenericSend+0x44>
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <xQueueGenericSend+0x46>
 80061e0:	2300      	movs	r3, #0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <xQueueGenericSend+0x60>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d103      	bne.n	800620a <xQueueGenericSend+0x6e>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006206:	2b01      	cmp	r3, #1
 8006208:	d101      	bne.n	800620e <xQueueGenericSend+0x72>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueGenericSend+0x74>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <xQueueGenericSend+0x8e>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	623b      	str	r3, [r7, #32]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800622a:	f001 fa5d 	bl	80076e8 <xTaskGetSchedulerState>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <xQueueGenericSend+0x9e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <xQueueGenericSend+0xa2>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <xQueueGenericSend+0xa4>
 800623e:	2300      	movs	r3, #0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueGenericSend+0xbe>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	61fb      	str	r3, [r7, #28]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800625a:	f001 ff27 	bl	80080ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	429a      	cmp	r2, r3
 8006268:	d302      	bcc.n	8006270 <xQueueGenericSend+0xd4>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b02      	cmp	r3, #2
 800626e:	d129      	bne.n	80062c4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	68b9      	ldr	r1, [r7, #8]
 8006274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006276:	f000 fa07 	bl	8006688 <prvCopyDataToQueue>
 800627a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d010      	beq.n	80062a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	3324      	adds	r3, #36	; 0x24
 8006288:	4618      	mov	r0, r3
 800628a:	f001 f867 	bl	800735c <xTaskRemoveFromEventList>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d013      	beq.n	80062bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006294:	4b3f      	ldr	r3, [pc, #252]	; (8006394 <xQueueGenericSend+0x1f8>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	e00a      	b.n	80062bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062ac:	4b39      	ldr	r3, [pc, #228]	; (8006394 <xQueueGenericSend+0x1f8>)
 80062ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062bc:	f001 ff26 	bl	800810c <vPortExitCritical>
				return pdPASS;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e063      	b.n	800638c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062ca:	f001 ff1f 	bl	800810c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e05c      	b.n	800638c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 f8a1 	bl	8007424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062e6:	f001 ff11 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ea:	f000 fe0b 	bl	8006f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062ee:	f001 fedd 	bl	80080ac <vPortEnterCritical>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d103      	bne.n	8006308 <xQueueGenericSend+0x16c>
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800630e:	b25b      	sxtb	r3, r3
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d103      	bne.n	800631e <xQueueGenericSend+0x182>
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800631e:	f001 fef5 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006322:	1d3a      	adds	r2, r7, #4
 8006324:	f107 0314 	add.w	r3, r7, #20
 8006328:	4611      	mov	r1, r2
 800632a:	4618      	mov	r0, r3
 800632c:	f001 f890 	bl	8007450 <xTaskCheckForTimeOut>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d124      	bne.n	8006380 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006338:	f000 fa9e 	bl	8006878 <prvIsQueueFull>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d018      	beq.n	8006374 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	3310      	adds	r3, #16
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f000 ffb6 	bl	80072bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006352:	f000 fa29 	bl	80067a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006356:	f000 fde3 	bl	8006f20 <xTaskResumeAll>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	f47f af7c 	bne.w	800625a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006362:	4b0c      	ldr	r3, [pc, #48]	; (8006394 <xQueueGenericSend+0x1f8>)
 8006364:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	e772      	b.n	800625a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006376:	f000 fa17 	bl	80067a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800637a:	f000 fdd1 	bl	8006f20 <xTaskResumeAll>
 800637e:	e76c      	b.n	800625a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006382:	f000 fa11 	bl	80067a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006386:	f000 fdcb 	bl	8006f20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800638a:	2300      	movs	r3, #0
		}
	}
}
 800638c:	4618      	mov	r0, r3
 800638e:	3738      	adds	r7, #56	; 0x38
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	e000ed04 	.word	0xe000ed04

08006398 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08e      	sub	sp, #56	; 0x38
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d103      	bne.n	80063d4 <xQueueGenericSendFromISR+0x3c>
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <xQueueGenericSendFromISR+0x40>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <xQueueGenericSendFromISR+0x42>
 80063d8:	2300      	movs	r3, #0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	623b      	str	r3, [r7, #32]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d103      	bne.n	8006402 <xQueueGenericSendFromISR+0x6a>
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <xQueueGenericSendFromISR+0x6e>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <xQueueGenericSendFromISR+0x70>
 8006406:	2300      	movs	r3, #0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	61fb      	str	r3, [r7, #28]
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006422:	f001 ff05 	bl	8008230 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006426:	f3ef 8211 	mrs	r2, BASEPRI
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61ba      	str	r2, [r7, #24]
 800643c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800643e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <xQueueGenericSendFromISR+0xbc>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d12c      	bne.n	80064ae <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006464:	f000 f910 	bl	8006688 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006468:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d112      	bne.n	8006498 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d016      	beq.n	80064a8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	3324      	adds	r3, #36	; 0x24
 800647e:	4618      	mov	r0, r3
 8006480:	f000 ff6c 	bl	800735c <xTaskRemoveFromEventList>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00e      	beq.n	80064a8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	e007      	b.n	80064a8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800649c:	3301      	adds	r3, #1
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	b25a      	sxtb	r2, r3
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064a8:	2301      	movs	r3, #1
 80064aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80064ac:	e001      	b.n	80064b2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
 80064b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3738      	adds	r7, #56	; 0x38
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08c      	sub	sp, #48	; 0x30
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <xQueueReceive+0x30>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	623b      	str	r3, [r7, #32]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <xQueueReceive+0x3e>
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <xQueueReceive+0x42>
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <xQueueReceive+0x44>
 800650a:	2300      	movs	r3, #0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <xQueueReceive+0x5e>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	61fb      	str	r3, [r7, #28]
}
 8006522:	bf00      	nop
 8006524:	e7fe      	b.n	8006524 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006526:	f001 f8df 	bl	80076e8 <xTaskGetSchedulerState>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <xQueueReceive+0x6e>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <xQueueReceive+0x72>
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <xQueueReceive+0x74>
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <xQueueReceive+0x8e>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	61bb      	str	r3, [r7, #24]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006556:	f001 fda9 	bl	80080ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	2b00      	cmp	r3, #0
 8006564:	d01f      	beq.n	80065a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656a:	f000 f8f7 	bl	800675c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	1e5a      	subs	r2, r3, #1
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00f      	beq.n	800659e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	3310      	adds	r3, #16
 8006582:	4618      	mov	r0, r3
 8006584:	f000 feea 	bl	800735c <xTaskRemoveFromEventList>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800658e:	4b3d      	ldr	r3, [pc, #244]	; (8006684 <xQueueReceive+0x1bc>)
 8006590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800659e:	f001 fdb5 	bl	800810c <vPortExitCritical>
				return pdPASS;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e069      	b.n	800667a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065ac:	f001 fdae 	bl	800810c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e062      	b.n	800667a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065ba:	f107 0310 	add.w	r3, r7, #16
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 ff30 	bl	8007424 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065c8:	f001 fda0 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065cc:	f000 fc9a 	bl	8006f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d0:	f001 fd6c 	bl	80080ac <vPortEnterCritical>
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065da:	b25b      	sxtb	r3, r3
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d103      	bne.n	80065ea <xQueueReceive+0x122>
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065f0:	b25b      	sxtb	r3, r3
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d103      	bne.n	8006600 <xQueueReceive+0x138>
 80065f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006600:	f001 fd84 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006604:	1d3a      	adds	r2, r7, #4
 8006606:	f107 0310 	add.w	r3, r7, #16
 800660a:	4611      	mov	r1, r2
 800660c:	4618      	mov	r0, r3
 800660e:	f000 ff1f 	bl	8007450 <xTaskCheckForTimeOut>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d123      	bne.n	8006660 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661a:	f000 f917 	bl	800684c <prvIsQueueEmpty>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d017      	beq.n	8006654 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006626:	3324      	adds	r3, #36	; 0x24
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fe45 	bl	80072bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006634:	f000 f8b8 	bl	80067a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006638:	f000 fc72 	bl	8006f20 <xTaskResumeAll>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d189      	bne.n	8006556 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006642:	4b10      	ldr	r3, [pc, #64]	; (8006684 <xQueueReceive+0x1bc>)
 8006644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	e780      	b.n	8006556 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006656:	f000 f8a7 	bl	80067a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800665a:	f000 fc61 	bl	8006f20 <xTaskResumeAll>
 800665e:	e77a      	b.n	8006556 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006662:	f000 f8a1 	bl	80067a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006666:	f000 fc5b 	bl	8006f20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800666a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666c:	f000 f8ee 	bl	800684c <prvIsQueueEmpty>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	f43f af6f 	beq.w	8006556 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006678:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800667a:	4618      	mov	r0, r3
 800667c:	3730      	adds	r7, #48	; 0x30
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10d      	bne.n	80066c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d14d      	bne.n	800674a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 f836 	bl	8007724 <xTaskPriorityDisinherit>
 80066b8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	e043      	b.n	800674a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d119      	bne.n	80066fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6898      	ldr	r0, [r3, #8]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	461a      	mov	r2, r3
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	f002 fc14 	bl	8008f00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	441a      	add	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d32b      	bcc.n	800674a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	609a      	str	r2, [r3, #8]
 80066fa:	e026      	b.n	800674a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	68d8      	ldr	r0, [r3, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	461a      	mov	r2, r3
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	f002 fbfa 	bl	8008f00 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	425b      	negs	r3, r3
 8006716:	441a      	add	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d207      	bcs.n	8006738 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	425b      	negs	r3, r3
 8006732:	441a      	add	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d105      	bne.n	800674a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3b01      	subs	r3, #1
 8006748:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006752:	697b      	ldr	r3, [r7, #20]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d018      	beq.n	80067a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	441a      	add	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d303      	bcc.n	8006790 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68d9      	ldr	r1, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	461a      	mov	r2, r3
 800679a:	6838      	ldr	r0, [r7, #0]
 800679c:	f002 fbb0 	bl	8008f00 <memcpy>
	}
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067b0:	f001 fc7c 	bl	80080ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067bc:	e011      	b.n	80067e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d012      	beq.n	80067ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3324      	adds	r3, #36	; 0x24
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fdc6 	bl	800735c <xTaskRemoveFromEventList>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067d6:	f000 fe9d 	bl	8007514 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	3b01      	subs	r3, #1
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dce9      	bgt.n	80067be <prvUnlockQueue+0x16>
 80067ea:	e000      	b.n	80067ee <prvUnlockQueue+0x46>
					break;
 80067ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	22ff      	movs	r2, #255	; 0xff
 80067f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067f6:	f001 fc89 	bl	800810c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067fa:	f001 fc57 	bl	80080ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006804:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006806:	e011      	b.n	800682c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d012      	beq.n	8006836 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3310      	adds	r3, #16
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fda1 	bl	800735c <xTaskRemoveFromEventList>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006820:	f000 fe78 	bl	8007514 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	3b01      	subs	r3, #1
 8006828:	b2db      	uxtb	r3, r3
 800682a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800682c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006830:	2b00      	cmp	r3, #0
 8006832:	dce9      	bgt.n	8006808 <prvUnlockQueue+0x60>
 8006834:	e000      	b.n	8006838 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006836:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	22ff      	movs	r2, #255	; 0xff
 800683c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006840:	f001 fc64 	bl	800810c <vPortExitCritical>
}
 8006844:	bf00      	nop
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006854:	f001 fc2a 	bl	80080ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	2b00      	cmp	r3, #0
 800685e:	d102      	bne.n	8006866 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006860:	2301      	movs	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e001      	b.n	800686a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800686a:	f001 fc4f 	bl	800810c <vPortExitCritical>

	return xReturn;
 800686e:	68fb      	ldr	r3, [r7, #12]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006880:	f001 fc14 	bl	80080ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688c:	429a      	cmp	r2, r3
 800688e:	d102      	bne.n	8006896 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e001      	b.n	800689a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800689a:	f001 fc37 	bl	800810c <vPortExitCritical>

	return xReturn;
 800689e:	68fb      	ldr	r3, [r7, #12]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	e014      	b.n	80068e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068b8:	4a0e      	ldr	r2, [pc, #56]	; (80068f4 <vQueueAddToRegistry+0x4c>)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10b      	bne.n	80068dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068c4:	490b      	ldr	r1, [pc, #44]	; (80068f4 <vQueueAddToRegistry+0x4c>)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068ce:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <vQueueAddToRegistry+0x4c>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4413      	add	r3, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068da:	e006      	b.n	80068ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b07      	cmp	r3, #7
 80068e6:	d9e7      	bls.n	80068b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr
 80068f4:	20000ac4 	.word	0x20000ac4

080068f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006908:	f001 fbd0 	bl	80080ac <vPortEnterCritical>
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006912:	b25b      	sxtb	r3, r3
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d103      	bne.n	8006922 <vQueueWaitForMessageRestricted+0x2a>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006928:	b25b      	sxtb	r3, r3
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d103      	bne.n	8006938 <vQueueWaitForMessageRestricted+0x40>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006938:	f001 fbe8 	bl	800810c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	2b00      	cmp	r3, #0
 8006942:	d106      	bne.n	8006952 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	3324      	adds	r3, #36	; 0x24
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fcd9 	bl	8007304 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006952:	6978      	ldr	r0, [r7, #20]
 8006954:	f7ff ff28 	bl	80067a8 <prvUnlockQueue>
	}
 8006958:	bf00      	nop
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08e      	sub	sp, #56	; 0x38
 8006964:	af04      	add	r7, sp, #16
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800696e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	623b      	str	r3, [r7, #32]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800698a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	61fb      	str	r3, [r7, #28]
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069a6:	23bc      	movs	r3, #188	; 0xbc
 80069a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2bbc      	cmp	r3, #188	; 0xbc
 80069ae:	d00a      	beq.n	80069c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	61bb      	str	r3, [r7, #24]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01e      	beq.n	8006a0a <xTaskCreateStatic+0xaa>
 80069cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01b      	beq.n	8006a0a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069da:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069e4:	2300      	movs	r3, #0
 80069e6:	9303      	str	r3, [sp, #12]
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	9302      	str	r3, [sp, #8]
 80069ec:	f107 0314 	add.w	r3, r7, #20
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 f851 	bl	8006aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a04:	f000 f8ec 	bl	8006be0 <prvAddNewTaskToReadyList>
 8006a08:	e001      	b.n	8006a0e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a0e:	697b      	ldr	r3, [r7, #20]
	}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3728      	adds	r7, #40	; 0x28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08c      	sub	sp, #48	; 0x30
 8006a1c:	af04      	add	r7, sp, #16
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	603b      	str	r3, [r7, #0]
 8006a24:	4613      	mov	r3, r2
 8006a26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a28:	88fb      	ldrh	r3, [r7, #6]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 fc3d 	bl	80082ac <pvPortMalloc>
 8006a32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00e      	beq.n	8006a58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006a3a:	20bc      	movs	r0, #188	; 0xbc
 8006a3c:	f001 fc36 	bl	80082ac <pvPortMalloc>
 8006a40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a4e:	e005      	b.n	8006a5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a50:	6978      	ldr	r0, [r7, #20]
 8006a52:	f001 fcef 	bl	8008434 <vPortFree>
 8006a56:	e001      	b.n	8006a5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d017      	beq.n	8006a92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a6a:	88fa      	ldrh	r2, [r7, #6]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9303      	str	r3, [sp, #12]
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	9302      	str	r3, [sp, #8]
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	9301      	str	r3, [sp, #4]
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f80f 	bl	8006aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a86:	69f8      	ldr	r0, [r7, #28]
 8006a88:	f000 f8aa 	bl	8006be0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	61bb      	str	r3, [r7, #24]
 8006a90:	e002      	b.n	8006a98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a92:	f04f 33ff 	mov.w	r3, #4294967295
 8006a96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a98:	69bb      	ldr	r3, [r7, #24]
	}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	461a      	mov	r2, r3
 8006abc:	21a5      	movs	r1, #165	; 0xa5
 8006abe:	f002 fa2d 	bl	8008f1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	3b01      	subs	r3, #1
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f023 0307 	bic.w	r3, r3, #7
 8006ada:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	f003 0307 	and.w	r3, r3, #7
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	617b      	str	r3, [r7, #20]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006afc:	2300      	movs	r3, #0
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	e012      	b.n	8006b28 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	4413      	add	r3, r2
 8006b08:	7819      	ldrb	r1, [r3, #0]
 8006b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	3334      	adds	r3, #52	; 0x34
 8006b12:	460a      	mov	r2, r1
 8006b14:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d006      	beq.n	8006b30 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	3301      	adds	r3, #1
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d9e9      	bls.n	8006b02 <prvInitialiseNewTask+0x5e>
 8006b2e:	e000      	b.n	8006b32 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006b30:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	2b37      	cmp	r3, #55	; 0x37
 8006b3e:	d901      	bls.n	8006b44 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b40:	2337      	movs	r3, #55	; 0x37
 8006b42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	2200      	movs	r2, #0
 8006b54:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff f98b 	bl	8005e76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	3318      	adds	r3, #24
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff f986 	bl	8005e76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	3354      	adds	r3, #84	; 0x54
 8006b94:	2260      	movs	r2, #96	; 0x60
 8006b96:	2100      	movs	r1, #0
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f002 f9bf 	bl	8008f1c <memset>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <prvInitialiseNewTask+0x130>)
 8006ba2:	659a      	str	r2, [r3, #88]	; 0x58
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <prvInitialiseNewTask+0x134>)
 8006ba8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	4a0b      	ldr	r2, [pc, #44]	; (8006bdc <prvInitialiseNewTask+0x138>)
 8006bae:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	68f9      	ldr	r1, [r7, #12]
 8006bb4:	69b8      	ldr	r0, [r7, #24]
 8006bb6:	f001 f989 	bl	8007ecc <pxPortInitialiseStack>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bcc:	bf00      	nop
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	080091b8 	.word	0x080091b8
 8006bd8:	080091d8 	.word	0x080091d8
 8006bdc:	08009198 	.word	0x08009198

08006be0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006be8:	f001 fa60 	bl	80080ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bec:	4b2d      	ldr	r3, [pc, #180]	; (8006ca4 <prvAddNewTaskToReadyList+0xc4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	4a2c      	ldr	r2, [pc, #176]	; (8006ca4 <prvAddNewTaskToReadyList+0xc4>)
 8006bf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bf6:	4b2c      	ldr	r3, [pc, #176]	; (8006ca8 <prvAddNewTaskToReadyList+0xc8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bfe:	4a2a      	ldr	r2, [pc, #168]	; (8006ca8 <prvAddNewTaskToReadyList+0xc8>)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c04:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <prvAddNewTaskToReadyList+0xc4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d110      	bne.n	8006c2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c0c:	f000 fca6 	bl	800755c <prvInitialiseTaskLists>
 8006c10:	e00d      	b.n	8006c2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c12:	4b26      	ldr	r3, [pc, #152]	; (8006cac <prvAddNewTaskToReadyList+0xcc>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c1a:	4b23      	ldr	r3, [pc, #140]	; (8006ca8 <prvAddNewTaskToReadyList+0xc8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d802      	bhi.n	8006c2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c28:	4a1f      	ldr	r2, [pc, #124]	; (8006ca8 <prvAddNewTaskToReadyList+0xc8>)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c2e:	4b20      	ldr	r3, [pc, #128]	; (8006cb0 <prvAddNewTaskToReadyList+0xd0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	4a1e      	ldr	r2, [pc, #120]	; (8006cb0 <prvAddNewTaskToReadyList+0xd0>)
 8006c36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c38:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <prvAddNewTaskToReadyList+0xd0>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c44:	4b1b      	ldr	r3, [pc, #108]	; (8006cb4 <prvAddNewTaskToReadyList+0xd4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d903      	bls.n	8006c54 <prvAddNewTaskToReadyList+0x74>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	4a18      	ldr	r2, [pc, #96]	; (8006cb4 <prvAddNewTaskToReadyList+0xd4>)
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c58:	4613      	mov	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <prvAddNewTaskToReadyList+0xd8>)
 8006c62:	441a      	add	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f7ff f90f 	bl	8005e8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c70:	f001 fa4c 	bl	800810c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c74:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <prvAddNewTaskToReadyList+0xcc>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00e      	beq.n	8006c9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <prvAddNewTaskToReadyList+0xc8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d207      	bcs.n	8006c9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c8a:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <prvAddNewTaskToReadyList+0xdc>)
 8006c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000fd8 	.word	0x20000fd8
 8006ca8:	20000b04 	.word	0x20000b04
 8006cac:	20000fe4 	.word	0x20000fe4
 8006cb0:	20000ff4 	.word	0x20000ff4
 8006cb4:	20000fe0 	.word	0x20000fe0
 8006cb8:	20000b08 	.word	0x20000b08
 8006cbc:	e000ed04 	.word	0xe000ed04

08006cc0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <vTaskDelayUntil+0x2a>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	617b      	str	r3, [r7, #20]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <vTaskDelayUntil+0x46>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	613b      	str	r3, [r7, #16]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006d06:	4b2a      	ldr	r3, [pc, #168]	; (8006db0 <vTaskDelayUntil+0xf0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <vTaskDelayUntil+0x64>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	60fb      	str	r3, [r7, #12]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006d24:	f000 f8ee 	bl	8006f04 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006d28:	4b22      	ldr	r3, [pc, #136]	; (8006db4 <vTaskDelayUntil+0xf4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	4413      	add	r3, r2
 8006d36:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d20b      	bcs.n	8006d5a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d211      	bcs.n	8006d70 <vTaskDelayUntil+0xb0>
 8006d4c:	69fa      	ldr	r2, [r7, #28]
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d90d      	bls.n	8006d70 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006d54:	2301      	movs	r3, #1
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
 8006d58:	e00a      	b.n	8006d70 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d303      	bcc.n	8006d6c <vTaskDelayUntil+0xac>
 8006d64:	69fa      	ldr	r2, [r7, #28]
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d901      	bls.n	8006d70 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d006      	beq.n	8006d8a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006d7c:	69fa      	ldr	r2, [r7, #28]
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 fd3b 	bl	8007800 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006d8a:	f000 f8c9 	bl	8006f20 <xTaskResumeAll>
 8006d8e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d107      	bne.n	8006da6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006d96:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <vTaskDelayUntil+0xf8>)
 8006d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006da6:	bf00      	nop
 8006da8:	3728      	adds	r7, #40	; 0x28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20001000 	.word	0x20001000
 8006db4:	20000fdc 	.word	0x20000fdc
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d017      	beq.n	8006dfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dce:	4b13      	ldr	r3, [pc, #76]	; (8006e1c <vTaskDelay+0x60>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <vTaskDelay+0x30>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	60bb      	str	r3, [r7, #8]
}
 8006de8:	bf00      	nop
 8006dea:	e7fe      	b.n	8006dea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006dec:	f000 f88a 	bl	8006f04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006df0:	2100      	movs	r1, #0
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fd04 	bl	8007800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006df8:	f000 f892 	bl	8006f20 <xTaskResumeAll>
 8006dfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d107      	bne.n	8006e14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e04:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <vTaskDelay+0x64>)
 8006e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e14:	bf00      	nop
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20001000 	.word	0x20001000
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08a      	sub	sp, #40	; 0x28
 8006e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e32:	463a      	mov	r2, r7
 8006e34:	1d39      	adds	r1, r7, #4
 8006e36:	f107 0308 	add.w	r3, r7, #8
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fe ffca 	bl	8005dd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	9202      	str	r2, [sp, #8]
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	460a      	mov	r2, r1
 8006e52:	4924      	ldr	r1, [pc, #144]	; (8006ee4 <vTaskStartScheduler+0xc0>)
 8006e54:	4824      	ldr	r0, [pc, #144]	; (8006ee8 <vTaskStartScheduler+0xc4>)
 8006e56:	f7ff fd83 	bl	8006960 <xTaskCreateStatic>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4a23      	ldr	r2, [pc, #140]	; (8006eec <vTaskStartScheduler+0xc8>)
 8006e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e60:	4b22      	ldr	r3, [pc, #136]	; (8006eec <vTaskStartScheduler+0xc8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	617b      	str	r3, [r7, #20]
 8006e6c:	e001      	b.n	8006e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d102      	bne.n	8006e7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e78:	f000 fd16 	bl	80078a8 <xTimerCreateTimerTask>
 8006e7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d11b      	bne.n	8006ebc <vTaskStartScheduler+0x98>
	__asm volatile
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	613b      	str	r3, [r7, #16]
}
 8006e96:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e98:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <vTaskStartScheduler+0xcc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3354      	adds	r3, #84	; 0x54
 8006e9e:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <vTaskStartScheduler+0xd0>)
 8006ea0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ea2:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <vTaskStartScheduler+0xd4>)
 8006ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <vTaskStartScheduler+0xd8>)
 8006eac:	2201      	movs	r2, #1
 8006eae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006eb0:	4b13      	ldr	r3, [pc, #76]	; (8006f00 <vTaskStartScheduler+0xdc>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eb6:	f001 f887 	bl	8007fc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eba:	e00e      	b.n	8006eda <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec2:	d10a      	bne.n	8006eda <vTaskStartScheduler+0xb6>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	60fb      	str	r3, [r7, #12]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <vTaskStartScheduler+0xb4>
}
 8006eda:	bf00      	nop
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	080090e4 	.word	0x080090e4
 8006ee8:	0800752d 	.word	0x0800752d
 8006eec:	20000ffc 	.word	0x20000ffc
 8006ef0:	20000b04 	.word	0x20000b04
 8006ef4:	20000028 	.word	0x20000028
 8006ef8:	20000ff8 	.word	0x20000ff8
 8006efc:	20000fe4 	.word	0x20000fe4
 8006f00:	20000fdc 	.word	0x20000fdc

08006f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f08:	4b04      	ldr	r3, [pc, #16]	; (8006f1c <vTaskSuspendAll+0x18>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	4a03      	ldr	r2, [pc, #12]	; (8006f1c <vTaskSuspendAll+0x18>)
 8006f10:	6013      	str	r3, [r2, #0]
}
 8006f12:	bf00      	nop
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bc80      	pop	{r7}
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20001000 	.word	0x20001000

08006f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f2e:	4b42      	ldr	r3, [pc, #264]	; (8007038 <xTaskResumeAll+0x118>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10a      	bne.n	8006f4c <xTaskResumeAll+0x2c>
	__asm volatile
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	603b      	str	r3, [r7, #0]
}
 8006f48:	bf00      	nop
 8006f4a:	e7fe      	b.n	8006f4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f4c:	f001 f8ae 	bl	80080ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f50:	4b39      	ldr	r3, [pc, #228]	; (8007038 <xTaskResumeAll+0x118>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	4a38      	ldr	r2, [pc, #224]	; (8007038 <xTaskResumeAll+0x118>)
 8006f58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f5a:	4b37      	ldr	r3, [pc, #220]	; (8007038 <xTaskResumeAll+0x118>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d162      	bne.n	8007028 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f62:	4b36      	ldr	r3, [pc, #216]	; (800703c <xTaskResumeAll+0x11c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d05e      	beq.n	8007028 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f6a:	e02f      	b.n	8006fcc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006f6c:	4b34      	ldr	r3, [pc, #208]	; (8007040 <xTaskResumeAll+0x120>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3318      	adds	r3, #24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe ffe3 	bl	8005f44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3304      	adds	r3, #4
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe ffde 	bl	8005f44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8c:	4b2d      	ldr	r3, [pc, #180]	; (8007044 <xTaskResumeAll+0x124>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d903      	bls.n	8006f9c <xTaskResumeAll+0x7c>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f98:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <xTaskResumeAll+0x124>)
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4a27      	ldr	r2, [pc, #156]	; (8007048 <xTaskResumeAll+0x128>)
 8006faa:	441a      	add	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f7fe ff6b 	bl	8005e8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbc:	4b23      	ldr	r3, [pc, #140]	; (800704c <xTaskResumeAll+0x12c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d302      	bcc.n	8006fcc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006fc6:	4b22      	ldr	r3, [pc, #136]	; (8007050 <xTaskResumeAll+0x130>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fcc:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <xTaskResumeAll+0x120>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1cb      	bne.n	8006f6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fda:	f000 fb61 	bl	80076a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006fde:	4b1d      	ldr	r3, [pc, #116]	; (8007054 <xTaskResumeAll+0x134>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d010      	beq.n	800700c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fea:	f000 f845 	bl	8007078 <xTaskIncrementTick>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ff4:	4b16      	ldr	r3, [pc, #88]	; (8007050 <xTaskResumeAll+0x130>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f1      	bne.n	8006fea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007006:	4b13      	ldr	r3, [pc, #76]	; (8007054 <xTaskResumeAll+0x134>)
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800700c:	4b10      	ldr	r3, [pc, #64]	; (8007050 <xTaskResumeAll+0x130>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d009      	beq.n	8007028 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007014:	2301      	movs	r3, #1
 8007016:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007018:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <xTaskResumeAll+0x138>)
 800701a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007028:	f001 f870 	bl	800810c <vPortExitCritical>

	return xAlreadyYielded;
 800702c:	68bb      	ldr	r3, [r7, #8]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	20001000 	.word	0x20001000
 800703c:	20000fd8 	.word	0x20000fd8
 8007040:	20000f98 	.word	0x20000f98
 8007044:	20000fe0 	.word	0x20000fe0
 8007048:	20000b08 	.word	0x20000b08
 800704c:	20000b04 	.word	0x20000b04
 8007050:	20000fec 	.word	0x20000fec
 8007054:	20000fe8 	.word	0x20000fe8
 8007058:	e000ed04 	.word	0xe000ed04

0800705c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007062:	4b04      	ldr	r3, [pc, #16]	; (8007074 <xTaskGetTickCount+0x18>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007068:	687b      	ldr	r3, [r7, #4]
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	20000fdc 	.word	0x20000fdc

08007078 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007082:	4b51      	ldr	r3, [pc, #324]	; (80071c8 <xTaskIncrementTick+0x150>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f040 808e 	bne.w	80071a8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800708c:	4b4f      	ldr	r3, [pc, #316]	; (80071cc <xTaskIncrementTick+0x154>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3301      	adds	r3, #1
 8007092:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007094:	4a4d      	ldr	r2, [pc, #308]	; (80071cc <xTaskIncrementTick+0x154>)
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d120      	bne.n	80070e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070a0:	4b4b      	ldr	r3, [pc, #300]	; (80071d0 <xTaskIncrementTick+0x158>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	603b      	str	r3, [r7, #0]
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <xTaskIncrementTick+0x46>
 80070c0:	4b43      	ldr	r3, [pc, #268]	; (80071d0 <xTaskIncrementTick+0x158>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	4b43      	ldr	r3, [pc, #268]	; (80071d4 <xTaskIncrementTick+0x15c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a41      	ldr	r2, [pc, #260]	; (80071d0 <xTaskIncrementTick+0x158>)
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	4a41      	ldr	r2, [pc, #260]	; (80071d4 <xTaskIncrementTick+0x15c>)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	4b40      	ldr	r3, [pc, #256]	; (80071d8 <xTaskIncrementTick+0x160>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	4a3f      	ldr	r2, [pc, #252]	; (80071d8 <xTaskIncrementTick+0x160>)
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	f000 fadf 	bl	80076a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070e2:	4b3e      	ldr	r3, [pc, #248]	; (80071dc <xTaskIncrementTick+0x164>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d34e      	bcc.n	800718a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ec:	4b38      	ldr	r3, [pc, #224]	; (80071d0 <xTaskIncrementTick+0x158>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <xTaskIncrementTick+0x82>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <xTaskIncrementTick+0x84>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007100:	4b36      	ldr	r3, [pc, #216]	; (80071dc <xTaskIncrementTick+0x164>)
 8007102:	f04f 32ff 	mov.w	r2, #4294967295
 8007106:	601a      	str	r2, [r3, #0]
					break;
 8007108:	e03f      	b.n	800718a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800710a:	4b31      	ldr	r3, [pc, #196]	; (80071d0 <xTaskIncrementTick+0x158>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d203      	bcs.n	800712a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007122:	4a2e      	ldr	r2, [pc, #184]	; (80071dc <xTaskIncrementTick+0x164>)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6013      	str	r3, [r2, #0]
						break;
 8007128:	e02f      	b.n	800718a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	3304      	adds	r3, #4
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe ff08 	bl	8005f44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	3318      	adds	r3, #24
 8007140:	4618      	mov	r0, r3
 8007142:	f7fe feff 	bl	8005f44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714a:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <xTaskIncrementTick+0x168>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d903      	bls.n	800715a <xTaskIncrementTick+0xe2>
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	4a22      	ldr	r2, [pc, #136]	; (80071e0 <xTaskIncrementTick+0x168>)
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4a1f      	ldr	r2, [pc, #124]	; (80071e4 <xTaskIncrementTick+0x16c>)
 8007168:	441a      	add	r2, r3
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	3304      	adds	r3, #4
 800716e:	4619      	mov	r1, r3
 8007170:	4610      	mov	r0, r2
 8007172:	f7fe fe8c 	bl	8005e8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717a:	4b1b      	ldr	r3, [pc, #108]	; (80071e8 <xTaskIncrementTick+0x170>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	429a      	cmp	r2, r3
 8007182:	d3b3      	bcc.n	80070ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007184:	2301      	movs	r3, #1
 8007186:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007188:	e7b0      	b.n	80070ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800718a:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <xTaskIncrementTick+0x170>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	4914      	ldr	r1, [pc, #80]	; (80071e4 <xTaskIncrementTick+0x16c>)
 8007192:	4613      	mov	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d907      	bls.n	80071b2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80071a2:	2301      	movs	r3, #1
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	e004      	b.n	80071b2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071a8:	4b10      	ldr	r3, [pc, #64]	; (80071ec <xTaskIncrementTick+0x174>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3301      	adds	r3, #1
 80071ae:	4a0f      	ldr	r2, [pc, #60]	; (80071ec <xTaskIncrementTick+0x174>)
 80071b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071b2:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <xTaskIncrementTick+0x178>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80071ba:	2301      	movs	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071be:	697b      	ldr	r3, [r7, #20]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20001000 	.word	0x20001000
 80071cc:	20000fdc 	.word	0x20000fdc
 80071d0:	20000f90 	.word	0x20000f90
 80071d4:	20000f94 	.word	0x20000f94
 80071d8:	20000ff0 	.word	0x20000ff0
 80071dc:	20000ff8 	.word	0x20000ff8
 80071e0:	20000fe0 	.word	0x20000fe0
 80071e4:	20000b08 	.word	0x20000b08
 80071e8:	20000b04 	.word	0x20000b04
 80071ec:	20000fe8 	.word	0x20000fe8
 80071f0:	20000fec 	.word	0x20000fec

080071f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071fa:	4b2a      	ldr	r3, [pc, #168]	; (80072a4 <vTaskSwitchContext+0xb0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007202:	4b29      	ldr	r3, [pc, #164]	; (80072a8 <vTaskSwitchContext+0xb4>)
 8007204:	2201      	movs	r2, #1
 8007206:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007208:	e046      	b.n	8007298 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800720a:	4b27      	ldr	r3, [pc, #156]	; (80072a8 <vTaskSwitchContext+0xb4>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007210:	4b26      	ldr	r3, [pc, #152]	; (80072ac <vTaskSwitchContext+0xb8>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	e010      	b.n	800723a <vTaskSwitchContext+0x46>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10a      	bne.n	8007234 <vTaskSwitchContext+0x40>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	607b      	str	r3, [r7, #4]
}
 8007230:	bf00      	nop
 8007232:	e7fe      	b.n	8007232 <vTaskSwitchContext+0x3e>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3b01      	subs	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	491d      	ldr	r1, [pc, #116]	; (80072b0 <vTaskSwitchContext+0xbc>)
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0e4      	beq.n	8007218 <vTaskSwitchContext+0x24>
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	4613      	mov	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <vTaskSwitchContext+0xbc>)
 800725a:	4413      	add	r3, r2
 800725c:	60bb      	str	r3, [r7, #8]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	605a      	str	r2, [r3, #4]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	3308      	adds	r3, #8
 8007270:	429a      	cmp	r2, r3
 8007272:	d104      	bne.n	800727e <vTaskSwitchContext+0x8a>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	605a      	str	r2, [r3, #4]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4a0b      	ldr	r2, [pc, #44]	; (80072b4 <vTaskSwitchContext+0xc0>)
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	4a08      	ldr	r2, [pc, #32]	; (80072ac <vTaskSwitchContext+0xb8>)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <vTaskSwitchContext+0xc0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3354      	adds	r3, #84	; 0x54
 8007294:	4a08      	ldr	r2, [pc, #32]	; (80072b8 <vTaskSwitchContext+0xc4>)
 8007296:	6013      	str	r3, [r2, #0]
}
 8007298:	bf00      	nop
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20001000 	.word	0x20001000
 80072a8:	20000fec 	.word	0x20000fec
 80072ac:	20000fe0 	.word	0x20000fe0
 80072b0:	20000b08 	.word	0x20000b08
 80072b4:	20000b04 	.word	0x20000b04
 80072b8:	20000028 	.word	0x20000028

080072bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	60fb      	str	r3, [r7, #12]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072e2:	4b07      	ldr	r3, [pc, #28]	; (8007300 <vTaskPlaceOnEventList+0x44>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3318      	adds	r3, #24
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fe fdf2 	bl	8005ed4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072f0:	2101      	movs	r1, #1
 80072f2:	6838      	ldr	r0, [r7, #0]
 80072f4:	f000 fa84 	bl	8007800 <prvAddCurrentTaskToDelayedList>
}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20000b04 	.word	0x20000b04

08007304 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	617b      	str	r3, [r7, #20]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800732c:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <vTaskPlaceOnEventListRestricted+0x54>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3318      	adds	r3, #24
 8007332:	4619      	mov	r1, r3
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7fe fdaa 	bl	8005e8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007340:	f04f 33ff 	mov.w	r3, #4294967295
 8007344:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	68b8      	ldr	r0, [r7, #8]
 800734a:	f000 fa59 	bl	8007800 <prvAddCurrentTaskToDelayedList>
	}
 800734e:	bf00      	nop
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000b04 	.word	0x20000b04

0800735c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	60fb      	str	r3, [r7, #12]
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	3318      	adds	r3, #24
 800738c:	4618      	mov	r0, r3
 800738e:	f7fe fdd9 	bl	8005f44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007392:	4b1e      	ldr	r3, [pc, #120]	; (800740c <xTaskRemoveFromEventList+0xb0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d11d      	bne.n	80073d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	3304      	adds	r3, #4
 800739e:	4618      	mov	r0, r3
 80073a0:	f7fe fdd0 	bl	8005f44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a8:	4b19      	ldr	r3, [pc, #100]	; (8007410 <xTaskRemoveFromEventList+0xb4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d903      	bls.n	80073b8 <xTaskRemoveFromEventList+0x5c>
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <xTaskRemoveFromEventList+0xb4>)
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4a13      	ldr	r2, [pc, #76]	; (8007414 <xTaskRemoveFromEventList+0xb8>)
 80073c6:	441a      	add	r2, r3
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f7fe fd5d 	bl	8005e8e <vListInsertEnd>
 80073d4:	e005      	b.n	80073e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3318      	adds	r3, #24
 80073da:	4619      	mov	r1, r3
 80073dc:	480e      	ldr	r0, [pc, #56]	; (8007418 <xTaskRemoveFromEventList+0xbc>)
 80073de:	f7fe fd56 	bl	8005e8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	4b0d      	ldr	r3, [pc, #52]	; (800741c <xTaskRemoveFromEventList+0xc0>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d905      	bls.n	80073fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073f0:	2301      	movs	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073f4:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <xTaskRemoveFromEventList+0xc4>)
 80073f6:	2201      	movs	r2, #1
 80073f8:	601a      	str	r2, [r3, #0]
 80073fa:	e001      	b.n	8007400 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007400:	697b      	ldr	r3, [r7, #20]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	20001000 	.word	0x20001000
 8007410:	20000fe0 	.word	0x20000fe0
 8007414:	20000b08 	.word	0x20000b08
 8007418:	20000f98 	.word	0x20000f98
 800741c:	20000b04 	.word	0x20000b04
 8007420:	20000fec 	.word	0x20000fec

08007424 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800742c:	4b06      	ldr	r3, [pc, #24]	; (8007448 <vTaskInternalSetTimeOutState+0x24>)
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007434:	4b05      	ldr	r3, [pc, #20]	; (800744c <vTaskInternalSetTimeOutState+0x28>)
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	605a      	str	r2, [r3, #4]
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	bc80      	pop	{r7}
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	20000ff0 	.word	0x20000ff0
 800744c:	20000fdc 	.word	0x20000fdc

08007450 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10a      	bne.n	8007476 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	613b      	str	r3, [r7, #16]
}
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	60fb      	str	r3, [r7, #12]
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007492:	f000 fe0b 	bl	80080ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007496:	4b1d      	ldr	r3, [pc, #116]	; (800750c <xTaskCheckForTimeOut+0xbc>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d102      	bne.n	80074b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	e023      	b.n	80074fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	4b15      	ldr	r3, [pc, #84]	; (8007510 <xTaskCheckForTimeOut+0xc0>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d007      	beq.n	80074d2 <xTaskCheckForTimeOut+0x82>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d302      	bcc.n	80074d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074cc:	2301      	movs	r3, #1
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	e015      	b.n	80074fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d20b      	bcs.n	80074f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	1ad2      	subs	r2, r2, r3
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7ff ff9b 	bl	8007424 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	e004      	b.n	80074fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074fa:	2301      	movs	r3, #1
 80074fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074fe:	f000 fe05 	bl	800810c <vPortExitCritical>

	return xReturn;
 8007502:	69fb      	ldr	r3, [r7, #28]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3720      	adds	r7, #32
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	20000fdc 	.word	0x20000fdc
 8007510:	20000ff0 	.word	0x20000ff0

08007514 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007518:	4b03      	ldr	r3, [pc, #12]	; (8007528 <vTaskMissedYield+0x14>)
 800751a:	2201      	movs	r2, #1
 800751c:	601a      	str	r2, [r3, #0]
}
 800751e:	bf00      	nop
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	20000fec 	.word	0x20000fec

0800752c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007534:	f000 f852 	bl	80075dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007538:	4b06      	ldr	r3, [pc, #24]	; (8007554 <prvIdleTask+0x28>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d9f9      	bls.n	8007534 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007540:	4b05      	ldr	r3, [pc, #20]	; (8007558 <prvIdleTask+0x2c>)
 8007542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007550:	e7f0      	b.n	8007534 <prvIdleTask+0x8>
 8007552:	bf00      	nop
 8007554:	20000b08 	.word	0x20000b08
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007562:	2300      	movs	r3, #0
 8007564:	607b      	str	r3, [r7, #4]
 8007566:	e00c      	b.n	8007582 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4613      	mov	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4a12      	ldr	r2, [pc, #72]	; (80075bc <prvInitialiseTaskLists+0x60>)
 8007574:	4413      	add	r3, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fc5e 	bl	8005e38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3301      	adds	r3, #1
 8007580:	607b      	str	r3, [r7, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b37      	cmp	r3, #55	; 0x37
 8007586:	d9ef      	bls.n	8007568 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007588:	480d      	ldr	r0, [pc, #52]	; (80075c0 <prvInitialiseTaskLists+0x64>)
 800758a:	f7fe fc55 	bl	8005e38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800758e:	480d      	ldr	r0, [pc, #52]	; (80075c4 <prvInitialiseTaskLists+0x68>)
 8007590:	f7fe fc52 	bl	8005e38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007594:	480c      	ldr	r0, [pc, #48]	; (80075c8 <prvInitialiseTaskLists+0x6c>)
 8007596:	f7fe fc4f 	bl	8005e38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800759a:	480c      	ldr	r0, [pc, #48]	; (80075cc <prvInitialiseTaskLists+0x70>)
 800759c:	f7fe fc4c 	bl	8005e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075a0:	480b      	ldr	r0, [pc, #44]	; (80075d0 <prvInitialiseTaskLists+0x74>)
 80075a2:	f7fe fc49 	bl	8005e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <prvInitialiseTaskLists+0x78>)
 80075a8:	4a05      	ldr	r2, [pc, #20]	; (80075c0 <prvInitialiseTaskLists+0x64>)
 80075aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <prvInitialiseTaskLists+0x7c>)
 80075ae:	4a05      	ldr	r2, [pc, #20]	; (80075c4 <prvInitialiseTaskLists+0x68>)
 80075b0:	601a      	str	r2, [r3, #0]
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000b08 	.word	0x20000b08
 80075c0:	20000f68 	.word	0x20000f68
 80075c4:	20000f7c 	.word	0x20000f7c
 80075c8:	20000f98 	.word	0x20000f98
 80075cc:	20000fac 	.word	0x20000fac
 80075d0:	20000fc4 	.word	0x20000fc4
 80075d4:	20000f90 	.word	0x20000f90
 80075d8:	20000f94 	.word	0x20000f94

080075dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075e2:	e019      	b.n	8007618 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80075e4:	f000 fd62 	bl	80080ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80075e8:	4b10      	ldr	r3, [pc, #64]	; (800762c <prvCheckTasksWaitingTermination+0x50>)
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fe fca5 	bl	8005f44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075fa:	4b0d      	ldr	r3, [pc, #52]	; (8007630 <prvCheckTasksWaitingTermination+0x54>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3b01      	subs	r3, #1
 8007600:	4a0b      	ldr	r2, [pc, #44]	; (8007630 <prvCheckTasksWaitingTermination+0x54>)
 8007602:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <prvCheckTasksWaitingTermination+0x58>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3b01      	subs	r3, #1
 800760a:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <prvCheckTasksWaitingTermination+0x58>)
 800760c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800760e:	f000 fd7d 	bl	800810c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f810 	bl	8007638 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007618:	4b06      	ldr	r3, [pc, #24]	; (8007634 <prvCheckTasksWaitingTermination+0x58>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e1      	bne.n	80075e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000fac 	.word	0x20000fac
 8007630:	20000fd8 	.word	0x20000fd8
 8007634:	20000fc0 	.word	0x20000fc0

08007638 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3354      	adds	r3, #84	; 0x54
 8007644:	4618      	mov	r0, r3
 8007646:	f001 fc7f 	bl	8008f48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007650:	2b00      	cmp	r3, #0
 8007652:	d108      	bne.n	8007666 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	4618      	mov	r0, r3
 800765a:	f000 feeb 	bl	8008434 <vPortFree>
				vPortFree( pxTCB );
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fee8 	bl	8008434 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007664:	e018      	b.n	8007698 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800766c:	2b01      	cmp	r3, #1
 800766e:	d103      	bne.n	8007678 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fedf 	bl	8008434 <vPortFree>
	}
 8007676:	e00f      	b.n	8007698 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800767e:	2b02      	cmp	r3, #2
 8007680:	d00a      	beq.n	8007698 <prvDeleteTCB+0x60>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	60fb      	str	r3, [r7, #12]
}
 8007694:	bf00      	nop
 8007696:	e7fe      	b.n	8007696 <prvDeleteTCB+0x5e>
	}
 8007698:	bf00      	nop
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076a6:	4b0e      	ldr	r3, [pc, #56]	; (80076e0 <prvResetNextTaskUnblockTime+0x40>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <prvResetNextTaskUnblockTime+0x14>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e000      	b.n	80076b6 <prvResetNextTaskUnblockTime+0x16>
 80076b4:	2300      	movs	r3, #0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d004      	beq.n	80076c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076ba:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <prvResetNextTaskUnblockTime+0x44>)
 80076bc:	f04f 32ff 	mov.w	r2, #4294967295
 80076c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076c2:	e008      	b.n	80076d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076c4:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <prvResetNextTaskUnblockTime+0x40>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	4a04      	ldr	r2, [pc, #16]	; (80076e4 <prvResetNextTaskUnblockTime+0x44>)
 80076d4:	6013      	str	r3, [r2, #0]
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr
 80076e0:	20000f90 	.word	0x20000f90
 80076e4:	20000ff8 	.word	0x20000ff8

080076e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076ee:	4b0b      	ldr	r3, [pc, #44]	; (800771c <xTaskGetSchedulerState+0x34>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076f6:	2301      	movs	r3, #1
 80076f8:	607b      	str	r3, [r7, #4]
 80076fa:	e008      	b.n	800770e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076fc:	4b08      	ldr	r3, [pc, #32]	; (8007720 <xTaskGetSchedulerState+0x38>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007704:	2302      	movs	r3, #2
 8007706:	607b      	str	r3, [r7, #4]
 8007708:	e001      	b.n	800770e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800770a:	2300      	movs	r3, #0
 800770c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800770e:	687b      	ldr	r3, [r7, #4]
	}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	bc80      	pop	{r7}
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	20000fe4 	.word	0x20000fe4
 8007720:	20001000 	.word	0x20001000

08007724 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007730:	2300      	movs	r3, #0
 8007732:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d056      	beq.n	80077e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800773a:	4b2e      	ldr	r3, [pc, #184]	; (80077f4 <xTaskPriorityDisinherit+0xd0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d00a      	beq.n	800775a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	60fb      	str	r3, [r7, #12]
}
 8007756:	bf00      	nop
 8007758:	e7fe      	b.n	8007758 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10a      	bne.n	8007778 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	60bb      	str	r3, [r7, #8]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777c:	1e5a      	subs	r2, r3, #1
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778a:	429a      	cmp	r2, r3
 800778c:	d02c      	beq.n	80077e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007792:	2b00      	cmp	r3, #0
 8007794:	d128      	bne.n	80077e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	3304      	adds	r3, #4
 800779a:	4618      	mov	r0, r3
 800779c:	f7fe fbd2 	bl	8005f44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	4b0f      	ldr	r3, [pc, #60]	; (80077f8 <xTaskPriorityDisinherit+0xd4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d903      	bls.n	80077c8 <xTaskPriorityDisinherit+0xa4>
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	4a0c      	ldr	r2, [pc, #48]	; (80077f8 <xTaskPriorityDisinherit+0xd4>)
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4a09      	ldr	r2, [pc, #36]	; (80077fc <xTaskPriorityDisinherit+0xd8>)
 80077d6:	441a      	add	r2, r3
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	f7fe fb55 	bl	8005e8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077e8:	697b      	ldr	r3, [r7, #20]
	}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20000b04 	.word	0x20000b04
 80077f8:	20000fe0 	.word	0x20000fe0
 80077fc:	20000b08 	.word	0x20000b08

08007800 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800780a:	4b21      	ldr	r3, [pc, #132]	; (8007890 <prvAddCurrentTaskToDelayedList+0x90>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007810:	4b20      	ldr	r3, [pc, #128]	; (8007894 <prvAddCurrentTaskToDelayedList+0x94>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3304      	adds	r3, #4
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fb94 	bl	8005f44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d10a      	bne.n	800783a <prvAddCurrentTaskToDelayedList+0x3a>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800782a:	4b1a      	ldr	r3, [pc, #104]	; (8007894 <prvAddCurrentTaskToDelayedList+0x94>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4819      	ldr	r0, [pc, #100]	; (8007898 <prvAddCurrentTaskToDelayedList+0x98>)
 8007834:	f7fe fb2b 	bl	8005e8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007838:	e026      	b.n	8007888 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4413      	add	r3, r2
 8007840:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007842:	4b14      	ldr	r3, [pc, #80]	; (8007894 <prvAddCurrentTaskToDelayedList+0x94>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	429a      	cmp	r2, r3
 8007850:	d209      	bcs.n	8007866 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007852:	4b12      	ldr	r3, [pc, #72]	; (800789c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <prvAddCurrentTaskToDelayedList+0x94>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3304      	adds	r3, #4
 800785c:	4619      	mov	r1, r3
 800785e:	4610      	mov	r0, r2
 8007860:	f7fe fb38 	bl	8005ed4 <vListInsert>
}
 8007864:	e010      	b.n	8007888 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007866:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <prvAddCurrentTaskToDelayedList+0x94>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3304      	adds	r3, #4
 8007870:	4619      	mov	r1, r3
 8007872:	4610      	mov	r0, r2
 8007874:	f7fe fb2e 	bl	8005ed4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	429a      	cmp	r2, r3
 8007880:	d202      	bcs.n	8007888 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007882:	4a08      	ldr	r2, [pc, #32]	; (80078a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	6013      	str	r3, [r2, #0]
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20000fdc 	.word	0x20000fdc
 8007894:	20000b04 	.word	0x20000b04
 8007898:	20000fc4 	.word	0x20000fc4
 800789c:	20000f94 	.word	0x20000f94
 80078a0:	20000f90 	.word	0x20000f90
 80078a4:	20000ff8 	.word	0x20000ff8

080078a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078b2:	f000 facb 	bl	8007e4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078b6:	4b1c      	ldr	r3, [pc, #112]	; (8007928 <xTimerCreateTimerTask+0x80>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d021      	beq.n	8007902 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078c6:	1d3a      	adds	r2, r7, #4
 80078c8:	f107 0108 	add.w	r1, r7, #8
 80078cc:	f107 030c 	add.w	r3, r7, #12
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fa97 	bl	8005e04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	9202      	str	r2, [sp, #8]
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	2302      	movs	r3, #2
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	2300      	movs	r3, #0
 80078e6:	460a      	mov	r2, r1
 80078e8:	4910      	ldr	r1, [pc, #64]	; (800792c <xTimerCreateTimerTask+0x84>)
 80078ea:	4811      	ldr	r0, [pc, #68]	; (8007930 <xTimerCreateTimerTask+0x88>)
 80078ec:	f7ff f838 	bl	8006960 <xTaskCreateStatic>
 80078f0:	4603      	mov	r3, r0
 80078f2:	4a10      	ldr	r2, [pc, #64]	; (8007934 <xTimerCreateTimerTask+0x8c>)
 80078f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078f6:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <xTimerCreateTimerTask+0x8c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078fe:	2301      	movs	r3, #1
 8007900:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	613b      	str	r3, [r7, #16]
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800791e:	697b      	ldr	r3, [r7, #20]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20001034 	.word	0x20001034
 800792c:	080090ec 	.word	0x080090ec
 8007930:	08007a55 	.word	0x08007a55
 8007934:	20001038 	.word	0x20001038

08007938 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08a      	sub	sp, #40	; 0x28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007946:	2300      	movs	r3, #0
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10a      	bne.n	8007966 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	623b      	str	r3, [r7, #32]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007966:	4b1a      	ldr	r3, [pc, #104]	; (80079d0 <xTimerGenericCommand+0x98>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d02a      	beq.n	80079c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b05      	cmp	r3, #5
 800797e:	dc18      	bgt.n	80079b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007980:	f7ff feb2 	bl	80076e8 <xTaskGetSchedulerState>
 8007984:	4603      	mov	r3, r0
 8007986:	2b02      	cmp	r3, #2
 8007988:	d109      	bne.n	800799e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800798a:	4b11      	ldr	r3, [pc, #68]	; (80079d0 <xTimerGenericCommand+0x98>)
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	f107 0110 	add.w	r1, r7, #16
 8007992:	2300      	movs	r3, #0
 8007994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007996:	f7fe fc01 	bl	800619c <xQueueGenericSend>
 800799a:	6278      	str	r0, [r7, #36]	; 0x24
 800799c:	e012      	b.n	80079c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800799e:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <xTimerGenericCommand+0x98>)
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	f107 0110 	add.w	r1, r7, #16
 80079a6:	2300      	movs	r3, #0
 80079a8:	2200      	movs	r2, #0
 80079aa:	f7fe fbf7 	bl	800619c <xQueueGenericSend>
 80079ae:	6278      	str	r0, [r7, #36]	; 0x24
 80079b0:	e008      	b.n	80079c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079b2:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <xTimerGenericCommand+0x98>)
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	f107 0110 	add.w	r1, r7, #16
 80079ba:	2300      	movs	r3, #0
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	f7fe fceb 	bl	8006398 <xQueueGenericSendFromISR>
 80079c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3728      	adds	r7, #40	; 0x28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20001034 	.word	0x20001034

080079d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af02      	add	r7, sp, #8
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079de:	4b1c      	ldr	r3, [pc, #112]	; (8007a50 <prvProcessExpiredTimer+0x7c>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe faa9 	bl	8005f44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d122      	bne.n	8007a40 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	18d1      	adds	r1, r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	6978      	ldr	r0, [r7, #20]
 8007a08:	f000 f8c8 	bl	8007b9c <prvInsertTimerInActiveList>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d016      	beq.n	8007a40 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a12:	2300      	movs	r3, #0
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	2300      	movs	r3, #0
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	6978      	ldr	r0, [r7, #20]
 8007a1e:	f7ff ff8b 	bl	8007938 <xTimerGenericCommand>
 8007a22:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	60fb      	str	r3, [r7, #12]
}
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	6978      	ldr	r0, [r7, #20]
 8007a46:	4798      	blx	r3
}
 8007a48:	bf00      	nop
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	2000102c 	.word	0x2000102c

08007a54 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a5c:	f107 0308 	add.w	r3, r7, #8
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 f857 	bl	8007b14 <prvGetNextExpireTime>
 8007a66:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f803 	bl	8007a78 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a72:	f000 f8d5 	bl	8007c20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a76:	e7f1      	b.n	8007a5c <prvTimerTask+0x8>

08007a78 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a82:	f7ff fa3f 	bl	8006f04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a86:	f107 0308 	add.w	r3, r7, #8
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f866 	bl	8007b5c <prvSampleTimeNow>
 8007a90:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d130      	bne.n	8007afa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d10a      	bne.n	8007ab4 <prvProcessTimerOrBlockTask+0x3c>
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d806      	bhi.n	8007ab4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007aa6:	f7ff fa3b 	bl	8006f20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007aaa:	68f9      	ldr	r1, [r7, #12]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff ff91 	bl	80079d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ab2:	e024      	b.n	8007afe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d008      	beq.n	8007acc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007aba:	4b13      	ldr	r3, [pc, #76]	; (8007b08 <prvProcessTimerOrBlockTask+0x90>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bf0c      	ite	eq
 8007ac4:	2301      	moveq	r3, #1
 8007ac6:	2300      	movne	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007acc:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <prvProcessTimerOrBlockTask+0x94>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f7fe ff0d 	bl	80068f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007ade:	f7ff fa1f 	bl	8006f20 <xTaskResumeAll>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ae8:	4b09      	ldr	r3, [pc, #36]	; (8007b10 <prvProcessTimerOrBlockTask+0x98>)
 8007aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aee:	601a      	str	r2, [r3, #0]
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	f3bf 8f6f 	isb	sy
}
 8007af8:	e001      	b.n	8007afe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007afa:	f7ff fa11 	bl	8006f20 <xTaskResumeAll>
}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20001030 	.word	0x20001030
 8007b0c:	20001034 	.word	0x20001034
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b1c:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <prvGetNextExpireTime+0x44>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf0c      	ite	eq
 8007b26:	2301      	moveq	r3, #1
 8007b28:	2300      	movne	r3, #0
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d105      	bne.n	8007b46 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <prvGetNextExpireTime+0x44>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e001      	b.n	8007b4a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	2000102c 	.word	0x2000102c

08007b5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b64:	f7ff fa7a 	bl	800705c <xTaskGetTickCount>
 8007b68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b6a:	4b0b      	ldr	r3, [pc, #44]	; (8007b98 <prvSampleTimeNow+0x3c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d205      	bcs.n	8007b80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b74:	f000 f908 	bl	8007d88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e002      	b.n	8007b86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b86:	4a04      	ldr	r2, [pc, #16]	; (8007b98 <prvSampleTimeNow+0x3c>)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	2000103c 	.word	0x2000103c

08007b9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d812      	bhi.n	8007be8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	1ad2      	subs	r2, r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d302      	bcc.n	8007bd6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
 8007bd4:	e01b      	b.n	8007c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007bd6:	4b10      	ldr	r3, [pc, #64]	; (8007c18 <prvInsertTimerInActiveList+0x7c>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	3304      	adds	r3, #4
 8007bde:	4619      	mov	r1, r3
 8007be0:	4610      	mov	r0, r2
 8007be2:	f7fe f977 	bl	8005ed4 <vListInsert>
 8007be6:	e012      	b.n	8007c0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d206      	bcs.n	8007bfe <prvInsertTimerInActiveList+0x62>
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d302      	bcc.n	8007bfe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e007      	b.n	8007c0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007bfe:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <prvInsertTimerInActiveList+0x80>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3304      	adds	r3, #4
 8007c06:	4619      	mov	r1, r3
 8007c08:	4610      	mov	r0, r2
 8007c0a:	f7fe f963 	bl	8005ed4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c0e:	697b      	ldr	r3, [r7, #20]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3718      	adds	r7, #24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20001030 	.word	0x20001030
 8007c1c:	2000102c 	.word	0x2000102c

08007c20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b08e      	sub	sp, #56	; 0x38
 8007c24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c26:	e09d      	b.n	8007d64 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da18      	bge.n	8007c60 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c2e:	1d3b      	adds	r3, r7, #4
 8007c30:	3304      	adds	r3, #4
 8007c32:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10a      	bne.n	8007c50 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	61fb      	str	r3, [r7, #28]
}
 8007c4c:	bf00      	nop
 8007c4e:	e7fe      	b.n	8007c4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c56:	6850      	ldr	r0, [r2, #4]
 8007c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5a:	6892      	ldr	r2, [r2, #8]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	db7d      	blt.n	8007d62 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d004      	beq.n	8007c7c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	3304      	adds	r3, #4
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe f964 	bl	8005f44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff ff6c 	bl	8007b5c <prvSampleTimeNow>
 8007c84:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b09      	cmp	r3, #9
 8007c8a:	d86b      	bhi.n	8007d64 <prvProcessReceivedCommands+0x144>
 8007c8c:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <prvProcessReceivedCommands+0x74>)
 8007c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c92:	bf00      	nop
 8007c94:	08007cbd 	.word	0x08007cbd
 8007c98:	08007cbd 	.word	0x08007cbd
 8007c9c:	08007cbd 	.word	0x08007cbd
 8007ca0:	08007d65 	.word	0x08007d65
 8007ca4:	08007d19 	.word	0x08007d19
 8007ca8:	08007d51 	.word	0x08007d51
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007cbd 	.word	0x08007cbd
 8007cb4:	08007d65 	.word	0x08007d65
 8007cb8:	08007d19 	.word	0x08007d19
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	18d1      	adds	r1, r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cca:	f7ff ff67 	bl	8007b9c <prvInsertTimerInActiveList>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d047      	beq.n	8007d64 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cda:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d13f      	bne.n	8007d64 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	441a      	add	r2, r3
 8007cec:	2300      	movs	r3, #0
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf6:	f7ff fe1f 	bl	8007938 <xTimerGenericCommand>
 8007cfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d130      	bne.n	8007d64 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	61bb      	str	r3, [r7, #24]
}
 8007d14:	bf00      	nop
 8007d16:	e7fe      	b.n	8007d16 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10a      	bne.n	8007d3c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	617b      	str	r3, [r7, #20]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3e:	699a      	ldr	r2, [r3, #24]
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	18d1      	adds	r1, r2, r3
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d4a:	f7ff ff27 	bl	8007b9c <prvInsertTimerInActiveList>
					break;
 8007d4e:	e009      	b.n	8007d64 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d104      	bne.n	8007d64 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d5c:	f000 fb6a 	bl	8008434 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d60:	e000      	b.n	8007d64 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d62:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d64:	4b07      	ldr	r3, [pc, #28]	; (8007d84 <prvProcessReceivedCommands+0x164>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	1d39      	adds	r1, r7, #4
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe fbab 	bl	80064c8 <xQueueReceive>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f47f af57 	bne.w	8007c28 <prvProcessReceivedCommands+0x8>
	}
}
 8007d7a:	bf00      	nop
 8007d7c:	bf00      	nop
 8007d7e:	3730      	adds	r7, #48	; 0x30
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20001034 	.word	0x20001034

08007d88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d8e:	e045      	b.n	8007e1c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d90:	4b2c      	ldr	r3, [pc, #176]	; (8007e44 <prvSwitchTimerLists+0xbc>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d9a:	4b2a      	ldr	r3, [pc, #168]	; (8007e44 <prvSwitchTimerLists+0xbc>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3304      	adds	r3, #4
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe f8cb 	bl	8005f44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d12e      	bne.n	8007e1c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d90e      	bls.n	8007dee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68ba      	ldr	r2, [r7, #8]
 8007dd4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ddc:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <prvSwitchTimerLists+0xbc>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	f7fe f874 	bl	8005ed4 <vListInsert>
 8007dec:	e016      	b.n	8007e1c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dee:	2300      	movs	r3, #0
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	2300      	movs	r3, #0
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	2100      	movs	r1, #0
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7ff fd9d 	bl	8007938 <xTimerGenericCommand>
 8007dfe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10a      	bne.n	8007e1c <prvSwitchTimerLists+0x94>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	603b      	str	r3, [r7, #0]
}
 8007e18:	bf00      	nop
 8007e1a:	e7fe      	b.n	8007e1a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e1c:	4b09      	ldr	r3, [pc, #36]	; (8007e44 <prvSwitchTimerLists+0xbc>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1b4      	bne.n	8007d90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e26:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <prvSwitchTimerLists+0xbc>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <prvSwitchTimerLists+0xc0>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a04      	ldr	r2, [pc, #16]	; (8007e44 <prvSwitchTimerLists+0xbc>)
 8007e32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e34:	4a04      	ldr	r2, [pc, #16]	; (8007e48 <prvSwitchTimerLists+0xc0>)
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	6013      	str	r3, [r2, #0]
}
 8007e3a:	bf00      	nop
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	2000102c 	.word	0x2000102c
 8007e48:	20001030 	.word	0x20001030

08007e4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e52:	f000 f92b 	bl	80080ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e56:	4b15      	ldr	r3, [pc, #84]	; (8007eac <prvCheckForValidListAndQueue+0x60>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d120      	bne.n	8007ea0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e5e:	4814      	ldr	r0, [pc, #80]	; (8007eb0 <prvCheckForValidListAndQueue+0x64>)
 8007e60:	f7fd ffea 	bl	8005e38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e64:	4813      	ldr	r0, [pc, #76]	; (8007eb4 <prvCheckForValidListAndQueue+0x68>)
 8007e66:	f7fd ffe7 	bl	8005e38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e6a:	4b13      	ldr	r3, [pc, #76]	; (8007eb8 <prvCheckForValidListAndQueue+0x6c>)
 8007e6c:	4a10      	ldr	r2, [pc, #64]	; (8007eb0 <prvCheckForValidListAndQueue+0x64>)
 8007e6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e70:	4b12      	ldr	r3, [pc, #72]	; (8007ebc <prvCheckForValidListAndQueue+0x70>)
 8007e72:	4a10      	ldr	r2, [pc, #64]	; (8007eb4 <prvCheckForValidListAndQueue+0x68>)
 8007e74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e76:	2300      	movs	r3, #0
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	4b11      	ldr	r3, [pc, #68]	; (8007ec0 <prvCheckForValidListAndQueue+0x74>)
 8007e7c:	4a11      	ldr	r2, [pc, #68]	; (8007ec4 <prvCheckForValidListAndQueue+0x78>)
 8007e7e:	2110      	movs	r1, #16
 8007e80:	200a      	movs	r0, #10
 8007e82:	f7fe f8f1 	bl	8006068 <xQueueGenericCreateStatic>
 8007e86:	4603      	mov	r3, r0
 8007e88:	4a08      	ldr	r2, [pc, #32]	; (8007eac <prvCheckForValidListAndQueue+0x60>)
 8007e8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e8c:	4b07      	ldr	r3, [pc, #28]	; (8007eac <prvCheckForValidListAndQueue+0x60>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e94:	4b05      	ldr	r3, [pc, #20]	; (8007eac <prvCheckForValidListAndQueue+0x60>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	490b      	ldr	r1, [pc, #44]	; (8007ec8 <prvCheckForValidListAndQueue+0x7c>)
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fd04 	bl	80068a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ea0:	f000 f934 	bl	800810c <vPortExitCritical>
}
 8007ea4:	bf00      	nop
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20001034 	.word	0x20001034
 8007eb0:	20001004 	.word	0x20001004
 8007eb4:	20001018 	.word	0x20001018
 8007eb8:	2000102c 	.word	0x2000102c
 8007ebc:	20001030 	.word	0x20001030
 8007ec0:	200010e0 	.word	0x200010e0
 8007ec4:	20001040 	.word	0x20001040
 8007ec8:	080090f4 	.word	0x080090f4

08007ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3b04      	subs	r3, #4
 8007edc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3b04      	subs	r3, #4
 8007eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f023 0201 	bic.w	r2, r3, #1
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	3b04      	subs	r3, #4
 8007efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <pxPortInitialiseStack+0x54>)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3b14      	subs	r3, #20
 8007f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3b20      	subs	r3, #32
 8007f12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f14:	68fb      	ldr	r3, [r7, #12]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr
 8007f20:	08007f25 	.word	0x08007f25

08007f24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <prvTaskExitError+0x54>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f36:	d00a      	beq.n	8007f4e <prvTaskExitError+0x2a>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60fb      	str	r3, [r7, #12]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <prvTaskExitError+0x28>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	60bb      	str	r3, [r7, #8]
}
 8007f60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f62:	bf00      	nop
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0fc      	beq.n	8007f64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f6a:	bf00      	nop
 8007f6c:	bf00      	nop
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20000024 	.word	0x20000024
 8007f7c:	00000000 	.word	0x00000000

08007f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <pxCurrentTCBConst2>)
 8007f82:	6819      	ldr	r1, [r3, #0]
 8007f84:	6808      	ldr	r0, [r1, #0]
 8007f86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f8a:	f380 8809 	msr	PSP, r0
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8811 	msr	BASEPRI, r0
 8007f9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007f9e:	4770      	bx	lr

08007fa0 <pxCurrentTCBConst2>:
 8007fa0:	20000b04 	.word	0x20000b04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop

08007fa8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007fa8:	4806      	ldr	r0, [pc, #24]	; (8007fc4 <prvPortStartFirstTask+0x1c>)
 8007faa:	6800      	ldr	r0, [r0, #0]
 8007fac:	6800      	ldr	r0, [r0, #0]
 8007fae:	f380 8808 	msr	MSP, r0
 8007fb2:	b662      	cpsie	i
 8007fb4:	b661      	cpsie	f
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	df00      	svc	0
 8007fc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007fc2:	bf00      	nop
 8007fc4:	e000ed08 	.word	0xe000ed08

08007fc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fce:	4b32      	ldr	r3, [pc, #200]	; (8008098 <xPortStartScheduler+0xd0>)
 8007fd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	22ff      	movs	r2, #255	; 0xff
 8007fde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	4b2a      	ldr	r3, [pc, #168]	; (800809c <xPortStartScheduler+0xd4>)
 8007ff4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ff6:	4b2a      	ldr	r3, [pc, #168]	; (80080a0 <xPortStartScheduler+0xd8>)
 8007ff8:	2207      	movs	r2, #7
 8007ffa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ffc:	e009      	b.n	8008012 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ffe:	4b28      	ldr	r3, [pc, #160]	; (80080a0 <xPortStartScheduler+0xd8>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	3b01      	subs	r3, #1
 8008004:	4a26      	ldr	r2, [pc, #152]	; (80080a0 <xPortStartScheduler+0xd8>)
 8008006:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008008:	78fb      	ldrb	r3, [r7, #3]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	b2db      	uxtb	r3, r3
 8008010:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008012:	78fb      	ldrb	r3, [r7, #3]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801a:	2b80      	cmp	r3, #128	; 0x80
 800801c:	d0ef      	beq.n	8007ffe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800801e:	4b20      	ldr	r3, [pc, #128]	; (80080a0 <xPortStartScheduler+0xd8>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f1c3 0307 	rsb	r3, r3, #7
 8008026:	2b04      	cmp	r3, #4
 8008028:	d00a      	beq.n	8008040 <xPortStartScheduler+0x78>
	__asm volatile
 800802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802e:	f383 8811 	msr	BASEPRI, r3
 8008032:	f3bf 8f6f 	isb	sy
 8008036:	f3bf 8f4f 	dsb	sy
 800803a:	60bb      	str	r3, [r7, #8]
}
 800803c:	bf00      	nop
 800803e:	e7fe      	b.n	800803e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008040:	4b17      	ldr	r3, [pc, #92]	; (80080a0 <xPortStartScheduler+0xd8>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	021b      	lsls	r3, r3, #8
 8008046:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <xPortStartScheduler+0xd8>)
 8008048:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800804a:	4b15      	ldr	r3, [pc, #84]	; (80080a0 <xPortStartScheduler+0xd8>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008052:	4a13      	ldr	r2, [pc, #76]	; (80080a0 <xPortStartScheduler+0xd8>)
 8008054:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800805e:	4b11      	ldr	r3, [pc, #68]	; (80080a4 <xPortStartScheduler+0xdc>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a10      	ldr	r2, [pc, #64]	; (80080a4 <xPortStartScheduler+0xdc>)
 8008064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008068:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800806a:	4b0e      	ldr	r3, [pc, #56]	; (80080a4 <xPortStartScheduler+0xdc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a0d      	ldr	r2, [pc, #52]	; (80080a4 <xPortStartScheduler+0xdc>)
 8008070:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008074:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008076:	f000 f8b9 	bl	80081ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800807a:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <xPortStartScheduler+0xe0>)
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008080:	f7ff ff92 	bl	8007fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008084:	f7ff f8b6 	bl	80071f4 <vTaskSwitchContext>
	prvTaskExitError();
 8008088:	f7ff ff4c 	bl	8007f24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	e000e400 	.word	0xe000e400
 800809c:	20001130 	.word	0x20001130
 80080a0:	20001134 	.word	0x20001134
 80080a4:	e000ed20 	.word	0xe000ed20
 80080a8:	20000024 	.word	0x20000024

080080ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	607b      	str	r3, [r7, #4]
}
 80080c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080c6:	4b0f      	ldr	r3, [pc, #60]	; (8008104 <vPortEnterCritical+0x58>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3301      	adds	r3, #1
 80080cc:	4a0d      	ldr	r2, [pc, #52]	; (8008104 <vPortEnterCritical+0x58>)
 80080ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080d0:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <vPortEnterCritical+0x58>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d10f      	bne.n	80080f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080d8:	4b0b      	ldr	r3, [pc, #44]	; (8008108 <vPortEnterCritical+0x5c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	603b      	str	r3, [r7, #0]
}
 80080f4:	bf00      	nop
 80080f6:	e7fe      	b.n	80080f6 <vPortEnterCritical+0x4a>
	}
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	20000024 	.word	0x20000024
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008112:	4b11      	ldr	r3, [pc, #68]	; (8008158 <vPortExitCritical+0x4c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <vPortExitCritical+0x24>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	607b      	str	r3, [r7, #4]
}
 800812c:	bf00      	nop
 800812e:	e7fe      	b.n	800812e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008130:	4b09      	ldr	r3, [pc, #36]	; (8008158 <vPortExitCritical+0x4c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3b01      	subs	r3, #1
 8008136:	4a08      	ldr	r2, [pc, #32]	; (8008158 <vPortExitCritical+0x4c>)
 8008138:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <vPortExitCritical+0x4c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <vPortExitCritical+0x42>
 8008142:	2300      	movs	r3, #0
 8008144:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	f383 8811 	msr	BASEPRI, r3
}
 800814c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr
 8008158:	20000024 	.word	0x20000024
 800815c:	00000000 	.word	0x00000000

08008160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008160:	f3ef 8009 	mrs	r0, PSP
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4b0d      	ldr	r3, [pc, #52]	; (80081a0 <pxCurrentTCBConst>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008170:	6010      	str	r0, [r2, #0]
 8008172:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008176:	f04f 0050 	mov.w	r0, #80	; 0x50
 800817a:	f380 8811 	msr	BASEPRI, r0
 800817e:	f7ff f839 	bl	80071f4 <vTaskSwitchContext>
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f380 8811 	msr	BASEPRI, r0
 800818a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	6808      	ldr	r0, [r1, #0]
 8008192:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008196:	f380 8809 	msr	PSP, r0
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	4770      	bx	lr

080081a0 <pxCurrentTCBConst>:
 80081a0:	20000b04 	.word	0x20000b04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop

080081a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	607b      	str	r3, [r7, #4]
}
 80081c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081c2:	f7fe ff59 	bl	8007078 <xTaskIncrementTick>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081cc:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <SysTick_Handler+0x40>)
 80081ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	2300      	movs	r3, #0
 80081d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	f383 8811 	msr	BASEPRI, r3
}
 80081de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081e0:	bf00      	nop
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <vPortSetupTimerInterrupt+0x30>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081f6:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <vPortSetupTimerInterrupt+0x34>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081fc:	4b09      	ldr	r3, [pc, #36]	; (8008224 <vPortSetupTimerInterrupt+0x38>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a09      	ldr	r2, [pc, #36]	; (8008228 <vPortSetupTimerInterrupt+0x3c>)
 8008202:	fba2 2303 	umull	r2, r3, r2, r3
 8008206:	099b      	lsrs	r3, r3, #6
 8008208:	4a08      	ldr	r2, [pc, #32]	; (800822c <vPortSetupTimerInterrupt+0x40>)
 800820a:	3b01      	subs	r3, #1
 800820c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <vPortSetupTimerInterrupt+0x30>)
 8008210:	2207      	movs	r2, #7
 8008212:	601a      	str	r2, [r3, #0]
}
 8008214:	bf00      	nop
 8008216:	46bd      	mov	sp, r7
 8008218:	bc80      	pop	{r7}
 800821a:	4770      	bx	lr
 800821c:	e000e010 	.word	0xe000e010
 8008220:	e000e018 	.word	0xe000e018
 8008224:	20000018 	.word	0x20000018
 8008228:	10624dd3 	.word	0x10624dd3
 800822c:	e000e014 	.word	0xe000e014

08008230 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008236:	f3ef 8305 	mrs	r3, IPSR
 800823a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b0f      	cmp	r3, #15
 8008240:	d914      	bls.n	800826c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008242:	4a16      	ldr	r2, [pc, #88]	; (800829c <vPortValidateInterruptPriority+0x6c>)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800824c:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <vPortValidateInterruptPriority+0x70>)
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	7afa      	ldrb	r2, [r7, #11]
 8008252:	429a      	cmp	r2, r3
 8008254:	d20a      	bcs.n	800826c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	f383 8811 	msr	BASEPRI, r3
 800825e:	f3bf 8f6f 	isb	sy
 8008262:	f3bf 8f4f 	dsb	sy
 8008266:	607b      	str	r3, [r7, #4]
}
 8008268:	bf00      	nop
 800826a:	e7fe      	b.n	800826a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <vPortValidateInterruptPriority+0x74>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <vPortValidateInterruptPriority+0x78>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d90a      	bls.n	8008292 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	603b      	str	r3, [r7, #0]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <vPortValidateInterruptPriority+0x60>
	}
 8008292:	bf00      	nop
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	bc80      	pop	{r7}
 800829a:	4770      	bx	lr
 800829c:	e000e3f0 	.word	0xe000e3f0
 80082a0:	20001130 	.word	0x20001130
 80082a4:	e000ed0c 	.word	0xe000ed0c
 80082a8:	20001134 	.word	0x20001134

080082ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	; 0x28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082b8:	f7fe fe24 	bl	8006f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082bc:	4b58      	ldr	r3, [pc, #352]	; (8008420 <pvPortMalloc+0x174>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082c4:	f000 f910 	bl	80084e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082c8:	4b56      	ldr	r3, [pc, #344]	; (8008424 <pvPortMalloc+0x178>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f040 808e 	bne.w	80083f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01d      	beq.n	8008318 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082dc:	2208      	movs	r2, #8
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d014      	beq.n	8008318 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f023 0307 	bic.w	r3, r3, #7
 80082f4:	3308      	adds	r3, #8
 80082f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <pvPortMalloc+0x6c>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	617b      	str	r3, [r7, #20]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d069      	beq.n	80083f2 <pvPortMalloc+0x146>
 800831e:	4b42      	ldr	r3, [pc, #264]	; (8008428 <pvPortMalloc+0x17c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d864      	bhi.n	80083f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008328:	4b40      	ldr	r3, [pc, #256]	; (800842c <pvPortMalloc+0x180>)
 800832a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800832c:	4b3f      	ldr	r3, [pc, #252]	; (800842c <pvPortMalloc+0x180>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008332:	e004      	b.n	800833e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d903      	bls.n	8008350 <pvPortMalloc+0xa4>
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1f1      	bne.n	8008334 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008350:	4b33      	ldr	r3, [pc, #204]	; (8008420 <pvPortMalloc+0x174>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008356:	429a      	cmp	r2, r3
 8008358:	d04b      	beq.n	80083f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2208      	movs	r2, #8
 8008360:	4413      	add	r3, r2
 8008362:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	1ad2      	subs	r2, r2, r3
 8008374:	2308      	movs	r3, #8
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	429a      	cmp	r2, r3
 800837a:	d91f      	bls.n	80083bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800837c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4413      	add	r3, r2
 8008382:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <pvPortMalloc+0xf8>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	613b      	str	r3, [r7, #16]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083b6:	69b8      	ldr	r0, [r7, #24]
 80083b8:	f000 f8f8 	bl	80085ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083bc:	4b1a      	ldr	r3, [pc, #104]	; (8008428 <pvPortMalloc+0x17c>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	4a18      	ldr	r2, [pc, #96]	; (8008428 <pvPortMalloc+0x17c>)
 80083c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083ca:	4b17      	ldr	r3, [pc, #92]	; (8008428 <pvPortMalloc+0x17c>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b18      	ldr	r3, [pc, #96]	; (8008430 <pvPortMalloc+0x184>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d203      	bcs.n	80083de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083d6:	4b14      	ldr	r3, [pc, #80]	; (8008428 <pvPortMalloc+0x17c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a15      	ldr	r2, [pc, #84]	; (8008430 <pvPortMalloc+0x184>)
 80083dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	4b10      	ldr	r3, [pc, #64]	; (8008424 <pvPortMalloc+0x178>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083f2:	f7fe fd95 	bl	8006f20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <pvPortMalloc+0x16a>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	60fb      	str	r3, [r7, #12]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <pvPortMalloc+0x168>
	return pvReturn;
 8008416:	69fb      	ldr	r3, [r7, #28]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3728      	adds	r7, #40	; 0x28
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20001d40 	.word	0x20001d40
 8008424:	20001d4c 	.word	0x20001d4c
 8008428:	20001d44 	.word	0x20001d44
 800842c:	20001d38 	.word	0x20001d38
 8008430:	20001d48 	.word	0x20001d48

08008434 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d048      	beq.n	80084d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008446:	2308      	movs	r3, #8
 8008448:	425b      	negs	r3, r3
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	4413      	add	r3, r2
 800844e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	4b21      	ldr	r3, [pc, #132]	; (80084e0 <vPortFree+0xac>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4013      	ands	r3, r2
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10a      	bne.n	8008478 <vPortFree+0x44>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	60fb      	str	r3, [r7, #12]
}
 8008474:	bf00      	nop
 8008476:	e7fe      	b.n	8008476 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <vPortFree+0x62>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	60bb      	str	r3, [r7, #8]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <vPortFree+0xac>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4013      	ands	r3, r2
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d019      	beq.n	80084d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d115      	bne.n	80084d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <vPortFree+0xac>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	43db      	mvns	r3, r3
 80084b6:	401a      	ands	r2, r3
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084bc:	f7fe fd22 	bl	8006f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <vPortFree+0xb0>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4413      	add	r3, r2
 80084ca:	4a06      	ldr	r2, [pc, #24]	; (80084e4 <vPortFree+0xb0>)
 80084cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084ce:	6938      	ldr	r0, [r7, #16]
 80084d0:	f000 f86c 	bl	80085ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80084d4:	f7fe fd24 	bl	8006f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084d8:	bf00      	nop
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20001d4c 	.word	0x20001d4c
 80084e4:	20001d44 	.word	0x20001d44

080084e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80084f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084f4:	4b27      	ldr	r3, [pc, #156]	; (8008594 <prvHeapInit+0xac>)
 80084f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00c      	beq.n	800851c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3307      	adds	r3, #7
 8008506:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f023 0307 	bic.w	r3, r3, #7
 800850e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	4a1f      	ldr	r2, [pc, #124]	; (8008594 <prvHeapInit+0xac>)
 8008518:	4413      	add	r3, r2
 800851a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008520:	4a1d      	ldr	r2, [pc, #116]	; (8008598 <prvHeapInit+0xb0>)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008526:	4b1c      	ldr	r3, [pc, #112]	; (8008598 <prvHeapInit+0xb0>)
 8008528:	2200      	movs	r2, #0
 800852a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	4413      	add	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008534:	2208      	movs	r2, #8
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	1a9b      	subs	r3, r3, r2
 800853a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0307 	bic.w	r3, r3, #7
 8008542:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4a15      	ldr	r2, [pc, #84]	; (800859c <prvHeapInit+0xb4>)
 8008548:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800854a:	4b14      	ldr	r3, [pc, #80]	; (800859c <prvHeapInit+0xb4>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2200      	movs	r2, #0
 8008550:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008552:	4b12      	ldr	r3, [pc, #72]	; (800859c <prvHeapInit+0xb4>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	1ad2      	subs	r2, r2, r3
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008568:	4b0c      	ldr	r3, [pc, #48]	; (800859c <prvHeapInit+0xb4>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	4a0a      	ldr	r2, [pc, #40]	; (80085a0 <prvHeapInit+0xb8>)
 8008576:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	4a09      	ldr	r2, [pc, #36]	; (80085a4 <prvHeapInit+0xbc>)
 800857e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <prvHeapInit+0xc0>)
 8008582:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008586:	601a      	str	r2, [r3, #0]
}
 8008588:	bf00      	nop
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	bc80      	pop	{r7}
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	20001138 	.word	0x20001138
 8008598:	20001d38 	.word	0x20001d38
 800859c:	20001d40 	.word	0x20001d40
 80085a0:	20001d48 	.word	0x20001d48
 80085a4:	20001d44 	.word	0x20001d44
 80085a8:	20001d4c 	.word	0x20001d4c

080085ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085b4:	4b27      	ldr	r3, [pc, #156]	; (8008654 <prvInsertBlockIntoFreeList+0xa8>)
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e002      	b.n	80085c0 <prvInsertBlockIntoFreeList+0x14>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d8f7      	bhi.n	80085ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	4413      	add	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d108      	bne.n	80085ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	441a      	add	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	441a      	add	r2, r3
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d118      	bne.n	8008634 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	4b14      	ldr	r3, [pc, #80]	; (8008658 <prvInsertBlockIntoFreeList+0xac>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d00d      	beq.n	800862a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	441a      	add	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	e008      	b.n	800863c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800862a:	4b0b      	ldr	r3, [pc, #44]	; (8008658 <prvInsertBlockIntoFreeList+0xac>)
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	e003      	b.n	800863c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d002      	beq.n	800864a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800864a:	bf00      	nop
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	bc80      	pop	{r7}
 8008652:	4770      	bx	lr
 8008654:	20001d38 	.word	0x20001d38
 8008658:	20001d40 	.word	0x20001d40

0800865c <sqrt>:
 800865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865e:	4606      	mov	r6, r0
 8008660:	460f      	mov	r7, r1
 8008662:	f000 f841 	bl	80086e8 <__ieee754_sqrt>
 8008666:	4632      	mov	r2, r6
 8008668:	4604      	mov	r4, r0
 800866a:	460d      	mov	r5, r1
 800866c:	463b      	mov	r3, r7
 800866e:	4630      	mov	r0, r6
 8008670:	4639      	mov	r1, r7
 8008672:	f7f8 f9c3 	bl	80009fc <__aeabi_dcmpun>
 8008676:	b990      	cbnz	r0, 800869e <sqrt+0x42>
 8008678:	2200      	movs	r2, #0
 800867a:	2300      	movs	r3, #0
 800867c:	4630      	mov	r0, r6
 800867e:	4639      	mov	r1, r7
 8008680:	f7f8 f994 	bl	80009ac <__aeabi_dcmplt>
 8008684:	b158      	cbz	r0, 800869e <sqrt+0x42>
 8008686:	f000 fc0f 	bl	8008ea8 <__errno>
 800868a:	2321      	movs	r3, #33	; 0x21
 800868c:	2200      	movs	r2, #0
 800868e:	6003      	str	r3, [r0, #0]
 8008690:	2300      	movs	r3, #0
 8008692:	4610      	mov	r0, r2
 8008694:	4619      	mov	r1, r3
 8008696:	f7f8 f841 	bl	800071c <__aeabi_ddiv>
 800869a:	4604      	mov	r4, r0
 800869c:	460d      	mov	r5, r1
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086a4 <asinf>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4604      	mov	r4, r0
 80086a8:	f000 f8ce 	bl	8008848 <__ieee754_asinf>
 80086ac:	4621      	mov	r1, r4
 80086ae:	4605      	mov	r5, r0
 80086b0:	4620      	mov	r0, r4
 80086b2:	f7f8 fcdd 	bl	8001070 <__aeabi_fcmpun>
 80086b6:	b980      	cbnz	r0, 80086da <asinf+0x36>
 80086b8:	4620      	mov	r0, r4
 80086ba:	f000 fbed 	bl	8008e98 <fabsf>
 80086be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80086c2:	f7f8 fccb 	bl	800105c <__aeabi_fcmpgt>
 80086c6:	b140      	cbz	r0, 80086da <asinf+0x36>
 80086c8:	f000 fbee 	bl	8008ea8 <__errno>
 80086cc:	2321      	movs	r3, #33	; 0x21
 80086ce:	6003      	str	r3, [r0, #0]
 80086d0:	4803      	ldr	r0, [pc, #12]	; (80086e0 <asinf+0x3c>)
 80086d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086d6:	f000 bbe3 	b.w	8008ea0 <nanf>
 80086da:	4628      	mov	r0, r5
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
 80086de:	bf00      	nop
 80086e0:	0800915c 	.word	0x0800915c

080086e4 <atan2f>:
 80086e4:	f000 b9f4 	b.w	8008ad0 <__ieee754_atan2f>

080086e8 <__ieee754_sqrt>:
 80086e8:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008844 <__ieee754_sqrt+0x15c>
 80086ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f0:	ea3c 0c01 	bics.w	ip, ip, r1
 80086f4:	4606      	mov	r6, r0
 80086f6:	460d      	mov	r5, r1
 80086f8:	460c      	mov	r4, r1
 80086fa:	460a      	mov	r2, r1
 80086fc:	4607      	mov	r7, r0
 80086fe:	4603      	mov	r3, r0
 8008700:	d10f      	bne.n	8008722 <__ieee754_sqrt+0x3a>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	f7f7 fedf 	bl	80004c8 <__aeabi_dmul>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4630      	mov	r0, r6
 8008710:	4629      	mov	r1, r5
 8008712:	f7f7 fd23 	bl	800015c <__adddf3>
 8008716:	4606      	mov	r6, r0
 8008718:	460d      	mov	r5, r1
 800871a:	4630      	mov	r0, r6
 800871c:	4629      	mov	r1, r5
 800871e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008722:	2900      	cmp	r1, #0
 8008724:	dc0e      	bgt.n	8008744 <__ieee754_sqrt+0x5c>
 8008726:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800872a:	ea5c 0707 	orrs.w	r7, ip, r7
 800872e:	d0f4      	beq.n	800871a <__ieee754_sqrt+0x32>
 8008730:	b141      	cbz	r1, 8008744 <__ieee754_sqrt+0x5c>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	f7f7 fd0f 	bl	8000158 <__aeabi_dsub>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	f7f7 ffed 	bl	800071c <__aeabi_ddiv>
 8008742:	e7e8      	b.n	8008716 <__ieee754_sqrt+0x2e>
 8008744:	1521      	asrs	r1, r4, #20
 8008746:	d075      	beq.n	8008834 <__ieee754_sqrt+0x14c>
 8008748:	07cc      	lsls	r4, r1, #31
 800874a:	f04f 0400 	mov.w	r4, #0
 800874e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008752:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008756:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800875a:	bf5e      	ittt	pl
 800875c:	0fd9      	lsrpl	r1, r3, #31
 800875e:	005b      	lslpl	r3, r3, #1
 8008760:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008764:	0fd9      	lsrs	r1, r3, #31
 8008766:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800876a:	2516      	movs	r5, #22
 800876c:	4620      	mov	r0, r4
 800876e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008772:	107f      	asrs	r7, r7, #1
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	1846      	adds	r6, r0, r1
 8008778:	4296      	cmp	r6, r2
 800877a:	bfde      	ittt	le
 800877c:	1b92      	suble	r2, r2, r6
 800877e:	1870      	addle	r0, r6, r1
 8008780:	1864      	addle	r4, r4, r1
 8008782:	0052      	lsls	r2, r2, #1
 8008784:	3d01      	subs	r5, #1
 8008786:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800878a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800878e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008792:	d1f0      	bne.n	8008776 <__ieee754_sqrt+0x8e>
 8008794:	4629      	mov	r1, r5
 8008796:	f04f 0e20 	mov.w	lr, #32
 800879a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800879e:	4282      	cmp	r2, r0
 80087a0:	eb06 0c05 	add.w	ip, r6, r5
 80087a4:	dc02      	bgt.n	80087ac <__ieee754_sqrt+0xc4>
 80087a6:	d113      	bne.n	80087d0 <__ieee754_sqrt+0xe8>
 80087a8:	459c      	cmp	ip, r3
 80087aa:	d811      	bhi.n	80087d0 <__ieee754_sqrt+0xe8>
 80087ac:	f1bc 0f00 	cmp.w	ip, #0
 80087b0:	eb0c 0506 	add.w	r5, ip, r6
 80087b4:	da43      	bge.n	800883e <__ieee754_sqrt+0x156>
 80087b6:	2d00      	cmp	r5, #0
 80087b8:	db41      	blt.n	800883e <__ieee754_sqrt+0x156>
 80087ba:	f100 0801 	add.w	r8, r0, #1
 80087be:	1a12      	subs	r2, r2, r0
 80087c0:	4640      	mov	r0, r8
 80087c2:	459c      	cmp	ip, r3
 80087c4:	bf88      	it	hi
 80087c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80087ca:	eba3 030c 	sub.w	r3, r3, ip
 80087ce:	4431      	add	r1, r6
 80087d0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80087d4:	f1be 0e01 	subs.w	lr, lr, #1
 80087d8:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80087dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80087e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80087e4:	d1db      	bne.n	800879e <__ieee754_sqrt+0xb6>
 80087e6:	4313      	orrs	r3, r2
 80087e8:	d006      	beq.n	80087f8 <__ieee754_sqrt+0x110>
 80087ea:	1c48      	adds	r0, r1, #1
 80087ec:	bf0b      	itete	eq
 80087ee:	4671      	moveq	r1, lr
 80087f0:	3101      	addne	r1, #1
 80087f2:	3401      	addeq	r4, #1
 80087f4:	f021 0101 	bicne.w	r1, r1, #1
 80087f8:	1063      	asrs	r3, r4, #1
 80087fa:	0849      	lsrs	r1, r1, #1
 80087fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008800:	07e2      	lsls	r2, r4, #31
 8008802:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008806:	bf48      	it	mi
 8008808:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800880c:	460e      	mov	r6, r1
 800880e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008812:	e782      	b.n	800871a <__ieee754_sqrt+0x32>
 8008814:	0ada      	lsrs	r2, r3, #11
 8008816:	3815      	subs	r0, #21
 8008818:	055b      	lsls	r3, r3, #21
 800881a:	2a00      	cmp	r2, #0
 800881c:	d0fa      	beq.n	8008814 <__ieee754_sqrt+0x12c>
 800881e:	02d5      	lsls	r5, r2, #11
 8008820:	d50a      	bpl.n	8008838 <__ieee754_sqrt+0x150>
 8008822:	f1c1 0420 	rsb	r4, r1, #32
 8008826:	fa23 f404 	lsr.w	r4, r3, r4
 800882a:	1e4d      	subs	r5, r1, #1
 800882c:	408b      	lsls	r3, r1
 800882e:	4322      	orrs	r2, r4
 8008830:	1b41      	subs	r1, r0, r5
 8008832:	e789      	b.n	8008748 <__ieee754_sqrt+0x60>
 8008834:	4608      	mov	r0, r1
 8008836:	e7f0      	b.n	800881a <__ieee754_sqrt+0x132>
 8008838:	0052      	lsls	r2, r2, #1
 800883a:	3101      	adds	r1, #1
 800883c:	e7ef      	b.n	800881e <__ieee754_sqrt+0x136>
 800883e:	4680      	mov	r8, r0
 8008840:	e7bd      	b.n	80087be <__ieee754_sqrt+0xd6>
 8008842:	bf00      	nop
 8008844:	7ff00000 	.word	0x7ff00000

08008848 <__ieee754_asinf>:
 8008848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800884c:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8008850:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8008854:	4604      	mov	r4, r0
 8008856:	4605      	mov	r5, r0
 8008858:	d10c      	bne.n	8008874 <__ieee754_asinf+0x2c>
 800885a:	498d      	ldr	r1, [pc, #564]	; (8008a90 <__ieee754_asinf+0x248>)
 800885c:	f7f8 fa42 	bl	8000ce4 <__aeabi_fmul>
 8008860:	498c      	ldr	r1, [pc, #560]	; (8008a94 <__ieee754_asinf+0x24c>)
 8008862:	4605      	mov	r5, r0
 8008864:	4620      	mov	r0, r4
 8008866:	f7f8 fa3d 	bl	8000ce4 <__aeabi_fmul>
 800886a:	4601      	mov	r1, r0
 800886c:	4628      	mov	r0, r5
 800886e:	f7f8 f931 	bl	8000ad4 <__addsf3>
 8008872:	e006      	b.n	8008882 <__ieee754_asinf+0x3a>
 8008874:	dd07      	ble.n	8008886 <__ieee754_asinf+0x3e>
 8008876:	4601      	mov	r1, r0
 8008878:	f7f8 f92a 	bl	8000ad0 <__aeabi_fsub>
 800887c:	4601      	mov	r1, r0
 800887e:	f7f8 fae5 	bl	8000e4c <__aeabi_fdiv>
 8008882:	4604      	mov	r4, r0
 8008884:	e00e      	b.n	80088a4 <__ieee754_asinf+0x5c>
 8008886:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800888a:	da58      	bge.n	800893e <__ieee754_asinf+0xf6>
 800888c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8008890:	da0b      	bge.n	80088aa <__ieee754_asinf+0x62>
 8008892:	4981      	ldr	r1, [pc, #516]	; (8008a98 <__ieee754_asinf+0x250>)
 8008894:	f7f8 f91e 	bl	8000ad4 <__addsf3>
 8008898:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800889c:	f7f8 fbde 	bl	800105c <__aeabi_fcmpgt>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d04c      	beq.n	800893e <__ieee754_asinf+0xf6>
 80088a4:	4620      	mov	r0, r4
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	4601      	mov	r1, r0
 80088ac:	f7f8 fa1a 	bl	8000ce4 <__aeabi_fmul>
 80088b0:	4605      	mov	r5, r0
 80088b2:	497a      	ldr	r1, [pc, #488]	; (8008a9c <__ieee754_asinf+0x254>)
 80088b4:	f7f8 fa16 	bl	8000ce4 <__aeabi_fmul>
 80088b8:	4979      	ldr	r1, [pc, #484]	; (8008aa0 <__ieee754_asinf+0x258>)
 80088ba:	f7f8 f90b 	bl	8000ad4 <__addsf3>
 80088be:	4629      	mov	r1, r5
 80088c0:	f7f8 fa10 	bl	8000ce4 <__aeabi_fmul>
 80088c4:	4977      	ldr	r1, [pc, #476]	; (8008aa4 <__ieee754_asinf+0x25c>)
 80088c6:	f7f8 f903 	bl	8000ad0 <__aeabi_fsub>
 80088ca:	4629      	mov	r1, r5
 80088cc:	f7f8 fa0a 	bl	8000ce4 <__aeabi_fmul>
 80088d0:	4975      	ldr	r1, [pc, #468]	; (8008aa8 <__ieee754_asinf+0x260>)
 80088d2:	f7f8 f8ff 	bl	8000ad4 <__addsf3>
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7f8 fa04 	bl	8000ce4 <__aeabi_fmul>
 80088dc:	4973      	ldr	r1, [pc, #460]	; (8008aac <__ieee754_asinf+0x264>)
 80088de:	f7f8 f8f7 	bl	8000ad0 <__aeabi_fsub>
 80088e2:	4629      	mov	r1, r5
 80088e4:	f7f8 f9fe 	bl	8000ce4 <__aeabi_fmul>
 80088e8:	4971      	ldr	r1, [pc, #452]	; (8008ab0 <__ieee754_asinf+0x268>)
 80088ea:	f7f8 f8f3 	bl	8000ad4 <__addsf3>
 80088ee:	4629      	mov	r1, r5
 80088f0:	f7f8 f9f8 	bl	8000ce4 <__aeabi_fmul>
 80088f4:	496f      	ldr	r1, [pc, #444]	; (8008ab4 <__ieee754_asinf+0x26c>)
 80088f6:	4606      	mov	r6, r0
 80088f8:	4628      	mov	r0, r5
 80088fa:	f7f8 f9f3 	bl	8000ce4 <__aeabi_fmul>
 80088fe:	496e      	ldr	r1, [pc, #440]	; (8008ab8 <__ieee754_asinf+0x270>)
 8008900:	f7f8 f8e6 	bl	8000ad0 <__aeabi_fsub>
 8008904:	4629      	mov	r1, r5
 8008906:	f7f8 f9ed 	bl	8000ce4 <__aeabi_fmul>
 800890a:	496c      	ldr	r1, [pc, #432]	; (8008abc <__ieee754_asinf+0x274>)
 800890c:	f7f8 f8e2 	bl	8000ad4 <__addsf3>
 8008910:	4629      	mov	r1, r5
 8008912:	f7f8 f9e7 	bl	8000ce4 <__aeabi_fmul>
 8008916:	496a      	ldr	r1, [pc, #424]	; (8008ac0 <__ieee754_asinf+0x278>)
 8008918:	f7f8 f8da 	bl	8000ad0 <__aeabi_fsub>
 800891c:	4629      	mov	r1, r5
 800891e:	f7f8 f9e1 	bl	8000ce4 <__aeabi_fmul>
 8008922:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008926:	f7f8 f8d5 	bl	8000ad4 <__addsf3>
 800892a:	4601      	mov	r1, r0
 800892c:	4630      	mov	r0, r6
 800892e:	f7f8 fa8d 	bl	8000e4c <__aeabi_fdiv>
 8008932:	4621      	mov	r1, r4
 8008934:	f7f8 f9d6 	bl	8000ce4 <__aeabi_fmul>
 8008938:	4601      	mov	r1, r0
 800893a:	4620      	mov	r0, r4
 800893c:	e797      	b.n	800886e <__ieee754_asinf+0x26>
 800893e:	4620      	mov	r0, r4
 8008940:	f000 faaa 	bl	8008e98 <fabsf>
 8008944:	4601      	mov	r1, r0
 8008946:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800894a:	f7f8 f8c1 	bl	8000ad0 <__aeabi_fsub>
 800894e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008952:	f7f8 f9c7 	bl	8000ce4 <__aeabi_fmul>
 8008956:	4606      	mov	r6, r0
 8008958:	4950      	ldr	r1, [pc, #320]	; (8008a9c <__ieee754_asinf+0x254>)
 800895a:	f7f8 f9c3 	bl	8000ce4 <__aeabi_fmul>
 800895e:	4950      	ldr	r1, [pc, #320]	; (8008aa0 <__ieee754_asinf+0x258>)
 8008960:	f7f8 f8b8 	bl	8000ad4 <__addsf3>
 8008964:	4631      	mov	r1, r6
 8008966:	f7f8 f9bd 	bl	8000ce4 <__aeabi_fmul>
 800896a:	494e      	ldr	r1, [pc, #312]	; (8008aa4 <__ieee754_asinf+0x25c>)
 800896c:	f7f8 f8b0 	bl	8000ad0 <__aeabi_fsub>
 8008970:	4631      	mov	r1, r6
 8008972:	f7f8 f9b7 	bl	8000ce4 <__aeabi_fmul>
 8008976:	494c      	ldr	r1, [pc, #304]	; (8008aa8 <__ieee754_asinf+0x260>)
 8008978:	f7f8 f8ac 	bl	8000ad4 <__addsf3>
 800897c:	4631      	mov	r1, r6
 800897e:	f7f8 f9b1 	bl	8000ce4 <__aeabi_fmul>
 8008982:	494a      	ldr	r1, [pc, #296]	; (8008aac <__ieee754_asinf+0x264>)
 8008984:	f7f8 f8a4 	bl	8000ad0 <__aeabi_fsub>
 8008988:	4631      	mov	r1, r6
 800898a:	f7f8 f9ab 	bl	8000ce4 <__aeabi_fmul>
 800898e:	4948      	ldr	r1, [pc, #288]	; (8008ab0 <__ieee754_asinf+0x268>)
 8008990:	f7f8 f8a0 	bl	8000ad4 <__addsf3>
 8008994:	4631      	mov	r1, r6
 8008996:	f7f8 f9a5 	bl	8000ce4 <__aeabi_fmul>
 800899a:	4946      	ldr	r1, [pc, #280]	; (8008ab4 <__ieee754_asinf+0x26c>)
 800899c:	4681      	mov	r9, r0
 800899e:	4630      	mov	r0, r6
 80089a0:	f7f8 f9a0 	bl	8000ce4 <__aeabi_fmul>
 80089a4:	4944      	ldr	r1, [pc, #272]	; (8008ab8 <__ieee754_asinf+0x270>)
 80089a6:	f7f8 f893 	bl	8000ad0 <__aeabi_fsub>
 80089aa:	4631      	mov	r1, r6
 80089ac:	f7f8 f99a 	bl	8000ce4 <__aeabi_fmul>
 80089b0:	4942      	ldr	r1, [pc, #264]	; (8008abc <__ieee754_asinf+0x274>)
 80089b2:	f7f8 f88f 	bl	8000ad4 <__addsf3>
 80089b6:	4631      	mov	r1, r6
 80089b8:	f7f8 f994 	bl	8000ce4 <__aeabi_fmul>
 80089bc:	4940      	ldr	r1, [pc, #256]	; (8008ac0 <__ieee754_asinf+0x278>)
 80089be:	f7f8 f887 	bl	8000ad0 <__aeabi_fsub>
 80089c2:	4631      	mov	r1, r6
 80089c4:	f7f8 f98e 	bl	8000ce4 <__aeabi_fmul>
 80089c8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80089cc:	f7f8 f882 	bl	8000ad4 <__addsf3>
 80089d0:	4682      	mov	sl, r0
 80089d2:	4630      	mov	r0, r6
 80089d4:	f000 f902 	bl	8008bdc <__ieee754_sqrtf>
 80089d8:	4b3a      	ldr	r3, [pc, #232]	; (8008ac4 <__ieee754_asinf+0x27c>)
 80089da:	4607      	mov	r7, r0
 80089dc:	4598      	cmp	r8, r3
 80089de:	dd1a      	ble.n	8008a16 <__ieee754_asinf+0x1ce>
 80089e0:	4651      	mov	r1, sl
 80089e2:	4648      	mov	r0, r9
 80089e4:	f7f8 fa32 	bl	8000e4c <__aeabi_fdiv>
 80089e8:	4639      	mov	r1, r7
 80089ea:	f7f8 f97b 	bl	8000ce4 <__aeabi_fmul>
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f8 f870 	bl	8000ad4 <__addsf3>
 80089f4:	4601      	mov	r1, r0
 80089f6:	f7f8 f86d 	bl	8000ad4 <__addsf3>
 80089fa:	4933      	ldr	r1, [pc, #204]	; (8008ac8 <__ieee754_asinf+0x280>)
 80089fc:	f7f8 f86a 	bl	8000ad4 <__addsf3>
 8008a00:	4601      	mov	r1, r0
 8008a02:	4823      	ldr	r0, [pc, #140]	; (8008a90 <__ieee754_asinf+0x248>)
 8008a04:	f7f8 f864 	bl	8000ad0 <__aeabi_fsub>
 8008a08:	2d00      	cmp	r5, #0
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	f73f af4a 	bgt.w	80088a4 <__ieee754_asinf+0x5c>
 8008a10:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008a14:	e735      	b.n	8008882 <__ieee754_asinf+0x3a>
 8008a16:	4601      	mov	r1, r0
 8008a18:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8008a1c:	f7f8 f85a 	bl	8000ad4 <__addsf3>
 8008a20:	4651      	mov	r1, sl
 8008a22:	4604      	mov	r4, r0
 8008a24:	4648      	mov	r0, r9
 8008a26:	f7f8 fa11 	bl	8000e4c <__aeabi_fdiv>
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f7f8 f959 	bl	8000ce4 <__aeabi_fmul>
 8008a32:	f028 080f 	bic.w	r8, r8, #15
 8008a36:	4681      	mov	r9, r0
 8008a38:	4641      	mov	r1, r8
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	f7f8 f952 	bl	8000ce4 <__aeabi_fmul>
 8008a40:	4601      	mov	r1, r0
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7f8 f844 	bl	8000ad0 <__aeabi_fsub>
 8008a48:	4641      	mov	r1, r8
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	f7f8 f841 	bl	8000ad4 <__addsf3>
 8008a52:	4601      	mov	r1, r0
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7f8 f9f9 	bl	8000e4c <__aeabi_fdiv>
 8008a5a:	4601      	mov	r1, r0
 8008a5c:	f7f8 f83a 	bl	8000ad4 <__addsf3>
 8008a60:	4601      	mov	r1, r0
 8008a62:	480c      	ldr	r0, [pc, #48]	; (8008a94 <__ieee754_asinf+0x24c>)
 8008a64:	f7f8 f834 	bl	8000ad0 <__aeabi_fsub>
 8008a68:	4601      	mov	r1, r0
 8008a6a:	4648      	mov	r0, r9
 8008a6c:	f7f8 f830 	bl	8000ad0 <__aeabi_fsub>
 8008a70:	4641      	mov	r1, r8
 8008a72:	4604      	mov	r4, r0
 8008a74:	4640      	mov	r0, r8
 8008a76:	f7f8 f82d 	bl	8000ad4 <__addsf3>
 8008a7a:	4601      	mov	r1, r0
 8008a7c:	4813      	ldr	r0, [pc, #76]	; (8008acc <__ieee754_asinf+0x284>)
 8008a7e:	f7f8 f827 	bl	8000ad0 <__aeabi_fsub>
 8008a82:	4601      	mov	r1, r0
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7f8 f823 	bl	8000ad0 <__aeabi_fsub>
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	480f      	ldr	r0, [pc, #60]	; (8008acc <__ieee754_asinf+0x284>)
 8008a8e:	e7b9      	b.n	8008a04 <__ieee754_asinf+0x1bc>
 8008a90:	3fc90fdb 	.word	0x3fc90fdb
 8008a94:	b33bbd2e 	.word	0xb33bbd2e
 8008a98:	7149f2ca 	.word	0x7149f2ca
 8008a9c:	3811ef08 	.word	0x3811ef08
 8008aa0:	3a4f7f04 	.word	0x3a4f7f04
 8008aa4:	3d241146 	.word	0x3d241146
 8008aa8:	3e4e0aa8 	.word	0x3e4e0aa8
 8008aac:	3ea6b090 	.word	0x3ea6b090
 8008ab0:	3e2aaaab 	.word	0x3e2aaaab
 8008ab4:	3d9dc62e 	.word	0x3d9dc62e
 8008ab8:	3f303361 	.word	0x3f303361
 8008abc:	4001572d 	.word	0x4001572d
 8008ac0:	4019d139 	.word	0x4019d139
 8008ac4:	3f799999 	.word	0x3f799999
 8008ac8:	333bbd2e 	.word	0x333bbd2e
 8008acc:	3f490fdb 	.word	0x3f490fdb

08008ad0 <__ieee754_atan2f>:
 8008ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ad2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008ad6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008ada:	4603      	mov	r3, r0
 8008adc:	dc05      	bgt.n	8008aea <__ieee754_atan2f+0x1a>
 8008ade:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008ae2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	dd04      	ble.n	8008af4 <__ieee754_atan2f+0x24>
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7f7 fff2 	bl	8000ad4 <__addsf3>
 8008af0:	4603      	mov	r3, r0
 8008af2:	e011      	b.n	8008b18 <__ieee754_atan2f+0x48>
 8008af4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8008af8:	d103      	bne.n	8008b02 <__ieee754_atan2f+0x32>
 8008afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008afe:	f000 b8bf 	b.w	8008c80 <atanf>
 8008b02:	178c      	asrs	r4, r1, #30
 8008b04:	f004 0402 	and.w	r4, r4, #2
 8008b08:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008b0c:	b932      	cbnz	r2, 8008b1c <__ieee754_atan2f+0x4c>
 8008b0e:	2c02      	cmp	r4, #2
 8008b10:	d04c      	beq.n	8008bac <__ieee754_atan2f+0xdc>
 8008b12:	2c03      	cmp	r4, #3
 8008b14:	d100      	bne.n	8008b18 <__ieee754_atan2f+0x48>
 8008b16:	4b29      	ldr	r3, [pc, #164]	; (8008bbc <__ieee754_atan2f+0xec>)
 8008b18:	4618      	mov	r0, r3
 8008b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b1c:	b91e      	cbnz	r6, 8008b26 <__ieee754_atan2f+0x56>
 8008b1e:	2f00      	cmp	r7, #0
 8008b20:	da4a      	bge.n	8008bb8 <__ieee754_atan2f+0xe8>
 8008b22:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <__ieee754_atan2f+0xf0>)
 8008b24:	e7f8      	b.n	8008b18 <__ieee754_atan2f+0x48>
 8008b26:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008b2a:	d10e      	bne.n	8008b4a <__ieee754_atan2f+0x7a>
 8008b2c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008b30:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b34:	d105      	bne.n	8008b42 <__ieee754_atan2f+0x72>
 8008b36:	2c02      	cmp	r4, #2
 8008b38:	d83a      	bhi.n	8008bb0 <__ieee754_atan2f+0xe0>
 8008b3a:	4b22      	ldr	r3, [pc, #136]	; (8008bc4 <__ieee754_atan2f+0xf4>)
 8008b3c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008b40:	e7ea      	b.n	8008b18 <__ieee754_atan2f+0x48>
 8008b42:	2c02      	cmp	r4, #2
 8008b44:	d836      	bhi.n	8008bb4 <__ieee754_atan2f+0xe4>
 8008b46:	4b20      	ldr	r3, [pc, #128]	; (8008bc8 <__ieee754_atan2f+0xf8>)
 8008b48:	e7f8      	b.n	8008b3c <__ieee754_atan2f+0x6c>
 8008b4a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008b4e:	d0e6      	beq.n	8008b1e <__ieee754_atan2f+0x4e>
 8008b50:	1b92      	subs	r2, r2, r6
 8008b52:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8008b56:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8008b5a:	da17      	bge.n	8008b8c <__ieee754_atan2f+0xbc>
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	da01      	bge.n	8008b64 <__ieee754_atan2f+0x94>
 8008b60:	303c      	adds	r0, #60	; 0x3c
 8008b62:	db15      	blt.n	8008b90 <__ieee754_atan2f+0xc0>
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7f8 f971 	bl	8000e4c <__aeabi_fdiv>
 8008b6a:	f000 f995 	bl	8008e98 <fabsf>
 8008b6e:	f000 f887 	bl	8008c80 <atanf>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2c01      	cmp	r4, #1
 8008b76:	d00d      	beq.n	8008b94 <__ieee754_atan2f+0xc4>
 8008b78:	2c02      	cmp	r4, #2
 8008b7a:	d00e      	beq.n	8008b9a <__ieee754_atan2f+0xca>
 8008b7c:	2c00      	cmp	r4, #0
 8008b7e:	d0cb      	beq.n	8008b18 <__ieee754_atan2f+0x48>
 8008b80:	4912      	ldr	r1, [pc, #72]	; (8008bcc <__ieee754_atan2f+0xfc>)
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7f7 ffa6 	bl	8000ad4 <__addsf3>
 8008b88:	4911      	ldr	r1, [pc, #68]	; (8008bd0 <__ieee754_atan2f+0x100>)
 8008b8a:	e00c      	b.n	8008ba6 <__ieee754_atan2f+0xd6>
 8008b8c:	4b11      	ldr	r3, [pc, #68]	; (8008bd4 <__ieee754_atan2f+0x104>)
 8008b8e:	e7f1      	b.n	8008b74 <__ieee754_atan2f+0xa4>
 8008b90:	2300      	movs	r3, #0
 8008b92:	e7ef      	b.n	8008b74 <__ieee754_atan2f+0xa4>
 8008b94:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b98:	e7be      	b.n	8008b18 <__ieee754_atan2f+0x48>
 8008b9a:	490c      	ldr	r1, [pc, #48]	; (8008bcc <__ieee754_atan2f+0xfc>)
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7f7 ff99 	bl	8000ad4 <__addsf3>
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	480a      	ldr	r0, [pc, #40]	; (8008bd0 <__ieee754_atan2f+0x100>)
 8008ba6:	f7f7 ff93 	bl	8000ad0 <__aeabi_fsub>
 8008baa:	e7a1      	b.n	8008af0 <__ieee754_atan2f+0x20>
 8008bac:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <__ieee754_atan2f+0x100>)
 8008bae:	e7b3      	b.n	8008b18 <__ieee754_atan2f+0x48>
 8008bb0:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <__ieee754_atan2f+0x108>)
 8008bb2:	e7b1      	b.n	8008b18 <__ieee754_atan2f+0x48>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e7af      	b.n	8008b18 <__ieee754_atan2f+0x48>
 8008bb8:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <__ieee754_atan2f+0x104>)
 8008bba:	e7ad      	b.n	8008b18 <__ieee754_atan2f+0x48>
 8008bbc:	c0490fdb 	.word	0xc0490fdb
 8008bc0:	bfc90fdb 	.word	0xbfc90fdb
 8008bc4:	08009160 	.word	0x08009160
 8008bc8:	0800916c 	.word	0x0800916c
 8008bcc:	33bbbd2e 	.word	0x33bbbd2e
 8008bd0:	40490fdb 	.word	0x40490fdb
 8008bd4:	3fc90fdb 	.word	0x3fc90fdb
 8008bd8:	3f490fdb 	.word	0x3f490fdb

08008bdc <__ieee754_sqrtf>:
 8008bdc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008be0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	4603      	mov	r3, r0
 8008be8:	4604      	mov	r4, r0
 8008bea:	d309      	bcc.n	8008c00 <__ieee754_sqrtf+0x24>
 8008bec:	4601      	mov	r1, r0
 8008bee:	f7f8 f879 	bl	8000ce4 <__aeabi_fmul>
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7f7 ff6d 	bl	8000ad4 <__addsf3>
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	2a00      	cmp	r2, #0
 8008c02:	d0fb      	beq.n	8008bfc <__ieee754_sqrtf+0x20>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	da06      	bge.n	8008c16 <__ieee754_sqrtf+0x3a>
 8008c08:	4601      	mov	r1, r0
 8008c0a:	f7f7 ff61 	bl	8000ad0 <__aeabi_fsub>
 8008c0e:	4601      	mov	r1, r0
 8008c10:	f7f8 f91c 	bl	8000e4c <__aeabi_fdiv>
 8008c14:	e7f1      	b.n	8008bfa <__ieee754_sqrtf+0x1e>
 8008c16:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008c1a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008c1e:	d029      	beq.n	8008c74 <__ieee754_sqrtf+0x98>
 8008c20:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008c24:	07cb      	lsls	r3, r1, #31
 8008c26:	f04f 0300 	mov.w	r3, #0
 8008c2a:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008c2e:	f04f 0419 	mov.w	r4, #25
 8008c32:	461e      	mov	r6, r3
 8008c34:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008c38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008c3c:	bf58      	it	pl
 8008c3e:	0052      	lslpl	r2, r2, #1
 8008c40:	1040      	asrs	r0, r0, #1
 8008c42:	0052      	lsls	r2, r2, #1
 8008c44:	1875      	adds	r5, r6, r1
 8008c46:	4295      	cmp	r5, r2
 8008c48:	bfde      	ittt	le
 8008c4a:	186e      	addle	r6, r5, r1
 8008c4c:	1b52      	suble	r2, r2, r5
 8008c4e:	185b      	addle	r3, r3, r1
 8008c50:	3c01      	subs	r4, #1
 8008c52:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008c56:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008c5a:	d1f3      	bne.n	8008c44 <__ieee754_sqrtf+0x68>
 8008c5c:	b112      	cbz	r2, 8008c64 <__ieee754_sqrtf+0x88>
 8008c5e:	3301      	adds	r3, #1
 8008c60:	f023 0301 	bic.w	r3, r3, #1
 8008c64:	105c      	asrs	r4, r3, #1
 8008c66:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008c6a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008c6e:	e7c5      	b.n	8008bfc <__ieee754_sqrtf+0x20>
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	3201      	adds	r2, #1
 8008c74:	0218      	lsls	r0, r3, #8
 8008c76:	d5fb      	bpl.n	8008c70 <__ieee754_sqrtf+0x94>
 8008c78:	3a01      	subs	r2, #1
 8008c7a:	1a89      	subs	r1, r1, r2
 8008c7c:	e7d0      	b.n	8008c20 <__ieee754_sqrtf+0x44>
	...

08008c80 <atanf>:
 8008c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c84:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008c88:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	4680      	mov	r8, r0
 8008c90:	db0e      	blt.n	8008cb0 <atanf+0x30>
 8008c92:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008c96:	dd04      	ble.n	8008ca2 <atanf+0x22>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	f7f7 ff1b 	bl	8000ad4 <__addsf3>
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	e003      	b.n	8008caa <atanf+0x2a>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	f300 80ce 	bgt.w	8008e44 <atanf+0x1c4>
 8008ca8:	4c67      	ldr	r4, [pc, #412]	; (8008e48 <atanf+0x1c8>)
 8008caa:	4620      	mov	r0, r4
 8008cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb0:	4b66      	ldr	r3, [pc, #408]	; (8008e4c <atanf+0x1cc>)
 8008cb2:	429d      	cmp	r5, r3
 8008cb4:	dc0e      	bgt.n	8008cd4 <atanf+0x54>
 8008cb6:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8008cba:	da08      	bge.n	8008cce <atanf+0x4e>
 8008cbc:	4964      	ldr	r1, [pc, #400]	; (8008e50 <atanf+0x1d0>)
 8008cbe:	f7f7 ff09 	bl	8000ad4 <__addsf3>
 8008cc2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008cc6:	f7f8 f9c9 	bl	800105c <__aeabi_fcmpgt>
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	d1ed      	bne.n	8008caa <atanf+0x2a>
 8008cce:	f04f 36ff 	mov.w	r6, #4294967295
 8008cd2:	e01c      	b.n	8008d0e <atanf+0x8e>
 8008cd4:	f000 f8e0 	bl	8008e98 <fabsf>
 8008cd8:	4b5e      	ldr	r3, [pc, #376]	; (8008e54 <atanf+0x1d4>)
 8008cda:	4604      	mov	r4, r0
 8008cdc:	429d      	cmp	r5, r3
 8008cde:	dc7c      	bgt.n	8008dda <atanf+0x15a>
 8008ce0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008ce4:	429d      	cmp	r5, r3
 8008ce6:	dc67      	bgt.n	8008db8 <atanf+0x138>
 8008ce8:	4601      	mov	r1, r0
 8008cea:	f7f7 fef3 	bl	8000ad4 <__addsf3>
 8008cee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008cf2:	f7f7 feed 	bl	8000ad0 <__aeabi_fsub>
 8008cf6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f7f7 fee9 	bl	8000ad4 <__addsf3>
 8008d02:	4601      	mov	r1, r0
 8008d04:	4628      	mov	r0, r5
 8008d06:	f7f8 f8a1 	bl	8000e4c <__aeabi_fdiv>
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	4621      	mov	r1, r4
 8008d10:	4620      	mov	r0, r4
 8008d12:	f7f7 ffe7 	bl	8000ce4 <__aeabi_fmul>
 8008d16:	4601      	mov	r1, r0
 8008d18:	4607      	mov	r7, r0
 8008d1a:	f7f7 ffe3 	bl	8000ce4 <__aeabi_fmul>
 8008d1e:	4605      	mov	r5, r0
 8008d20:	494d      	ldr	r1, [pc, #308]	; (8008e58 <atanf+0x1d8>)
 8008d22:	f7f7 ffdf 	bl	8000ce4 <__aeabi_fmul>
 8008d26:	494d      	ldr	r1, [pc, #308]	; (8008e5c <atanf+0x1dc>)
 8008d28:	f7f7 fed4 	bl	8000ad4 <__addsf3>
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	f7f7 ffd9 	bl	8000ce4 <__aeabi_fmul>
 8008d32:	494b      	ldr	r1, [pc, #300]	; (8008e60 <atanf+0x1e0>)
 8008d34:	f7f7 fece 	bl	8000ad4 <__addsf3>
 8008d38:	4629      	mov	r1, r5
 8008d3a:	f7f7 ffd3 	bl	8000ce4 <__aeabi_fmul>
 8008d3e:	4949      	ldr	r1, [pc, #292]	; (8008e64 <atanf+0x1e4>)
 8008d40:	f7f7 fec8 	bl	8000ad4 <__addsf3>
 8008d44:	4629      	mov	r1, r5
 8008d46:	f7f7 ffcd 	bl	8000ce4 <__aeabi_fmul>
 8008d4a:	4947      	ldr	r1, [pc, #284]	; (8008e68 <atanf+0x1e8>)
 8008d4c:	f7f7 fec2 	bl	8000ad4 <__addsf3>
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f7 ffc7 	bl	8000ce4 <__aeabi_fmul>
 8008d56:	4945      	ldr	r1, [pc, #276]	; (8008e6c <atanf+0x1ec>)
 8008d58:	f7f7 febc 	bl	8000ad4 <__addsf3>
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	f7f7 ffc1 	bl	8000ce4 <__aeabi_fmul>
 8008d62:	4943      	ldr	r1, [pc, #268]	; (8008e70 <atanf+0x1f0>)
 8008d64:	4607      	mov	r7, r0
 8008d66:	4628      	mov	r0, r5
 8008d68:	f7f7 ffbc 	bl	8000ce4 <__aeabi_fmul>
 8008d6c:	4941      	ldr	r1, [pc, #260]	; (8008e74 <atanf+0x1f4>)
 8008d6e:	f7f7 feaf 	bl	8000ad0 <__aeabi_fsub>
 8008d72:	4629      	mov	r1, r5
 8008d74:	f7f7 ffb6 	bl	8000ce4 <__aeabi_fmul>
 8008d78:	493f      	ldr	r1, [pc, #252]	; (8008e78 <atanf+0x1f8>)
 8008d7a:	f7f7 fea9 	bl	8000ad0 <__aeabi_fsub>
 8008d7e:	4629      	mov	r1, r5
 8008d80:	f7f7 ffb0 	bl	8000ce4 <__aeabi_fmul>
 8008d84:	493d      	ldr	r1, [pc, #244]	; (8008e7c <atanf+0x1fc>)
 8008d86:	f7f7 fea3 	bl	8000ad0 <__aeabi_fsub>
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f7f7 ffaa 	bl	8000ce4 <__aeabi_fmul>
 8008d90:	493b      	ldr	r1, [pc, #236]	; (8008e80 <atanf+0x200>)
 8008d92:	f7f7 fe9d 	bl	8000ad0 <__aeabi_fsub>
 8008d96:	4629      	mov	r1, r5
 8008d98:	f7f7 ffa4 	bl	8000ce4 <__aeabi_fmul>
 8008d9c:	4601      	mov	r1, r0
 8008d9e:	4638      	mov	r0, r7
 8008da0:	f7f7 fe98 	bl	8000ad4 <__addsf3>
 8008da4:	4621      	mov	r1, r4
 8008da6:	f7f7 ff9d 	bl	8000ce4 <__aeabi_fmul>
 8008daa:	1c73      	adds	r3, r6, #1
 8008dac:	4601      	mov	r1, r0
 8008dae:	d133      	bne.n	8008e18 <atanf+0x198>
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7f7 fe8d 	bl	8000ad0 <__aeabi_fsub>
 8008db6:	e772      	b.n	8008c9e <atanf+0x1e>
 8008db8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008dbc:	f7f7 fe88 	bl	8000ad0 <__aeabi_fsub>
 8008dc0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f7f7 fe84 	bl	8000ad4 <__addsf3>
 8008dcc:	4601      	mov	r1, r0
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f7f8 f83c 	bl	8000e4c <__aeabi_fdiv>
 8008dd4:	2601      	movs	r6, #1
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	e799      	b.n	8008d0e <atanf+0x8e>
 8008dda:	4b2a      	ldr	r3, [pc, #168]	; (8008e84 <atanf+0x204>)
 8008ddc:	429d      	cmp	r5, r3
 8008dde:	dc14      	bgt.n	8008e0a <atanf+0x18a>
 8008de0:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008de4:	f7f7 fe74 	bl	8000ad0 <__aeabi_fsub>
 8008de8:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008dec:	4605      	mov	r5, r0
 8008dee:	4620      	mov	r0, r4
 8008df0:	f7f7 ff78 	bl	8000ce4 <__aeabi_fmul>
 8008df4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008df8:	f7f7 fe6c 	bl	8000ad4 <__addsf3>
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f7f8 f824 	bl	8000e4c <__aeabi_fdiv>
 8008e04:	2602      	movs	r6, #2
 8008e06:	4604      	mov	r4, r0
 8008e08:	e781      	b.n	8008d0e <atanf+0x8e>
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	481e      	ldr	r0, [pc, #120]	; (8008e88 <atanf+0x208>)
 8008e0e:	f7f8 f81d 	bl	8000e4c <__aeabi_fdiv>
 8008e12:	2603      	movs	r6, #3
 8008e14:	4604      	mov	r4, r0
 8008e16:	e77a      	b.n	8008d0e <atanf+0x8e>
 8008e18:	4b1c      	ldr	r3, [pc, #112]	; (8008e8c <atanf+0x20c>)
 8008e1a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008e1e:	f7f7 fe57 	bl	8000ad0 <__aeabi_fsub>
 8008e22:	4621      	mov	r1, r4
 8008e24:	f7f7 fe54 	bl	8000ad0 <__aeabi_fsub>
 8008e28:	4b19      	ldr	r3, [pc, #100]	; (8008e90 <atanf+0x210>)
 8008e2a:	4601      	mov	r1, r0
 8008e2c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008e30:	f7f7 fe4e 	bl	8000ad0 <__aeabi_fsub>
 8008e34:	f1b8 0f00 	cmp.w	r8, #0
 8008e38:	4604      	mov	r4, r0
 8008e3a:	f6bf af36 	bge.w	8008caa <atanf+0x2a>
 8008e3e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008e42:	e72c      	b.n	8008c9e <atanf+0x1e>
 8008e44:	4c13      	ldr	r4, [pc, #76]	; (8008e94 <atanf+0x214>)
 8008e46:	e730      	b.n	8008caa <atanf+0x2a>
 8008e48:	bfc90fdb 	.word	0xbfc90fdb
 8008e4c:	3edfffff 	.word	0x3edfffff
 8008e50:	7149f2ca 	.word	0x7149f2ca
 8008e54:	3f97ffff 	.word	0x3f97ffff
 8008e58:	3c8569d7 	.word	0x3c8569d7
 8008e5c:	3d4bda59 	.word	0x3d4bda59
 8008e60:	3d886b35 	.word	0x3d886b35
 8008e64:	3dba2e6e 	.word	0x3dba2e6e
 8008e68:	3e124925 	.word	0x3e124925
 8008e6c:	3eaaaaab 	.word	0x3eaaaaab
 8008e70:	bd15a221 	.word	0xbd15a221
 8008e74:	3d6ef16b 	.word	0x3d6ef16b
 8008e78:	3d9d8795 	.word	0x3d9d8795
 8008e7c:	3de38e38 	.word	0x3de38e38
 8008e80:	3e4ccccd 	.word	0x3e4ccccd
 8008e84:	401bffff 	.word	0x401bffff
 8008e88:	bf800000 	.word	0xbf800000
 8008e8c:	08009188 	.word	0x08009188
 8008e90:	08009178 	.word	0x08009178
 8008e94:	3fc90fdb 	.word	0x3fc90fdb

08008e98 <fabsf>:
 8008e98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008e9c:	4770      	bx	lr
	...

08008ea0 <nanf>:
 8008ea0:	4800      	ldr	r0, [pc, #0]	; (8008ea4 <nanf+0x4>)
 8008ea2:	4770      	bx	lr
 8008ea4:	7fc00000 	.word	0x7fc00000

08008ea8 <__errno>:
 8008ea8:	4b01      	ldr	r3, [pc, #4]	; (8008eb0 <__errno+0x8>)
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20000028 	.word	0x20000028

08008eb4 <__libc_init_array>:
 8008eb4:	b570      	push	{r4, r5, r6, lr}
 8008eb6:	2600      	movs	r6, #0
 8008eb8:	4d0c      	ldr	r5, [pc, #48]	; (8008eec <__libc_init_array+0x38>)
 8008eba:	4c0d      	ldr	r4, [pc, #52]	; (8008ef0 <__libc_init_array+0x3c>)
 8008ebc:	1b64      	subs	r4, r4, r5
 8008ebe:	10a4      	asrs	r4, r4, #2
 8008ec0:	42a6      	cmp	r6, r4
 8008ec2:	d109      	bne.n	8008ed8 <__libc_init_array+0x24>
 8008ec4:	f000 f8f0 	bl	80090a8 <_init>
 8008ec8:	2600      	movs	r6, #0
 8008eca:	4d0a      	ldr	r5, [pc, #40]	; (8008ef4 <__libc_init_array+0x40>)
 8008ecc:	4c0a      	ldr	r4, [pc, #40]	; (8008ef8 <__libc_init_array+0x44>)
 8008ece:	1b64      	subs	r4, r4, r5
 8008ed0:	10a4      	asrs	r4, r4, #2
 8008ed2:	42a6      	cmp	r6, r4
 8008ed4:	d105      	bne.n	8008ee2 <__libc_init_array+0x2e>
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008edc:	4798      	blx	r3
 8008ede:	3601      	adds	r6, #1
 8008ee0:	e7ee      	b.n	8008ec0 <__libc_init_array+0xc>
 8008ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee6:	4798      	blx	r3
 8008ee8:	3601      	adds	r6, #1
 8008eea:	e7f2      	b.n	8008ed2 <__libc_init_array+0x1e>
 8008eec:	080091f8 	.word	0x080091f8
 8008ef0:	080091f8 	.word	0x080091f8
 8008ef4:	080091f8 	.word	0x080091f8
 8008ef8:	080091fc 	.word	0x080091fc

08008efc <__retarget_lock_acquire_recursive>:
 8008efc:	4770      	bx	lr

08008efe <__retarget_lock_release_recursive>:
 8008efe:	4770      	bx	lr

08008f00 <memcpy>:
 8008f00:	440a      	add	r2, r1
 8008f02:	4291      	cmp	r1, r2
 8008f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f08:	d100      	bne.n	8008f0c <memcpy+0xc>
 8008f0a:	4770      	bx	lr
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f12:	4291      	cmp	r1, r2
 8008f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f18:	d1f9      	bne.n	8008f0e <memcpy+0xe>
 8008f1a:	bd10      	pop	{r4, pc}

08008f1c <memset>:
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	4402      	add	r2, r0
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d100      	bne.n	8008f26 <memset+0xa>
 8008f24:	4770      	bx	lr
 8008f26:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2a:	e7f9      	b.n	8008f20 <memset+0x4>

08008f2c <cleanup_glue>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	460c      	mov	r4, r1
 8008f30:	6809      	ldr	r1, [r1, #0]
 8008f32:	4605      	mov	r5, r0
 8008f34:	b109      	cbz	r1, 8008f3a <cleanup_glue+0xe>
 8008f36:	f7ff fff9 	bl	8008f2c <cleanup_glue>
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f42:	f000 b869 	b.w	8009018 <_free_r>
	...

08008f48 <_reclaim_reent>:
 8008f48:	4b2c      	ldr	r3, [pc, #176]	; (8008ffc <_reclaim_reent+0xb4>)
 8008f4a:	b570      	push	{r4, r5, r6, lr}
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4604      	mov	r4, r0
 8008f50:	4283      	cmp	r3, r0
 8008f52:	d051      	beq.n	8008ff8 <_reclaim_reent+0xb0>
 8008f54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008f56:	b143      	cbz	r3, 8008f6a <_reclaim_reent+0x22>
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d14a      	bne.n	8008ff4 <_reclaim_reent+0xac>
 8008f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f60:	6819      	ldr	r1, [r3, #0]
 8008f62:	b111      	cbz	r1, 8008f6a <_reclaim_reent+0x22>
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 f857 	bl	8009018 <_free_r>
 8008f6a:	6961      	ldr	r1, [r4, #20]
 8008f6c:	b111      	cbz	r1, 8008f74 <_reclaim_reent+0x2c>
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 f852 	bl	8009018 <_free_r>
 8008f74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f76:	b111      	cbz	r1, 8008f7e <_reclaim_reent+0x36>
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 f84d 	bl	8009018 <_free_r>
 8008f7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f80:	b111      	cbz	r1, 8008f88 <_reclaim_reent+0x40>
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 f848 	bl	8009018 <_free_r>
 8008f88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008f8a:	b111      	cbz	r1, 8008f92 <_reclaim_reent+0x4a>
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 f843 	bl	8009018 <_free_r>
 8008f92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f94:	b111      	cbz	r1, 8008f9c <_reclaim_reent+0x54>
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 f83e 	bl	8009018 <_free_r>
 8008f9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008f9e:	b111      	cbz	r1, 8008fa6 <_reclaim_reent+0x5e>
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 f839 	bl	8009018 <_free_r>
 8008fa6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008fa8:	b111      	cbz	r1, 8008fb0 <_reclaim_reent+0x68>
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 f834 	bl	8009018 <_free_r>
 8008fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb2:	b111      	cbz	r1, 8008fba <_reclaim_reent+0x72>
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	f000 f82f 	bl	8009018 <_free_r>
 8008fba:	69a3      	ldr	r3, [r4, #24]
 8008fbc:	b1e3      	cbz	r3, 8008ff8 <_reclaim_reent+0xb0>
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008fc2:	4798      	blx	r3
 8008fc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008fc6:	b1b9      	cbz	r1, 8008ff8 <_reclaim_reent+0xb0>
 8008fc8:	4620      	mov	r0, r4
 8008fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fce:	f7ff bfad 	b.w	8008f2c <cleanup_glue>
 8008fd2:	5949      	ldr	r1, [r1, r5]
 8008fd4:	b941      	cbnz	r1, 8008fe8 <_reclaim_reent+0xa0>
 8008fd6:	3504      	adds	r5, #4
 8008fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fda:	2d80      	cmp	r5, #128	; 0x80
 8008fdc:	68d9      	ldr	r1, [r3, #12]
 8008fde:	d1f8      	bne.n	8008fd2 <_reclaim_reent+0x8a>
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 f819 	bl	8009018 <_free_r>
 8008fe6:	e7ba      	b.n	8008f5e <_reclaim_reent+0x16>
 8008fe8:	680e      	ldr	r6, [r1, #0]
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 f814 	bl	8009018 <_free_r>
 8008ff0:	4631      	mov	r1, r6
 8008ff2:	e7ef      	b.n	8008fd4 <_reclaim_reent+0x8c>
 8008ff4:	2500      	movs	r5, #0
 8008ff6:	e7ef      	b.n	8008fd8 <_reclaim_reent+0x90>
 8008ff8:	bd70      	pop	{r4, r5, r6, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000028 	.word	0x20000028

08009000 <__malloc_lock>:
 8009000:	4801      	ldr	r0, [pc, #4]	; (8009008 <__malloc_lock+0x8>)
 8009002:	f7ff bf7b 	b.w	8008efc <__retarget_lock_acquire_recursive>
 8009006:	bf00      	nop
 8009008:	20001d50 	.word	0x20001d50

0800900c <__malloc_unlock>:
 800900c:	4801      	ldr	r0, [pc, #4]	; (8009014 <__malloc_unlock+0x8>)
 800900e:	f7ff bf76 	b.w	8008efe <__retarget_lock_release_recursive>
 8009012:	bf00      	nop
 8009014:	20001d50 	.word	0x20001d50

08009018 <_free_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4605      	mov	r5, r0
 800901c:	2900      	cmp	r1, #0
 800901e:	d040      	beq.n	80090a2 <_free_r+0x8a>
 8009020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009024:	1f0c      	subs	r4, r1, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	bfb8      	it	lt
 800902a:	18e4      	addlt	r4, r4, r3
 800902c:	f7ff ffe8 	bl	8009000 <__malloc_lock>
 8009030:	4a1c      	ldr	r2, [pc, #112]	; (80090a4 <_free_r+0x8c>)
 8009032:	6813      	ldr	r3, [r2, #0]
 8009034:	b933      	cbnz	r3, 8009044 <_free_r+0x2c>
 8009036:	6063      	str	r3, [r4, #4]
 8009038:	6014      	str	r4, [r2, #0]
 800903a:	4628      	mov	r0, r5
 800903c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009040:	f7ff bfe4 	b.w	800900c <__malloc_unlock>
 8009044:	42a3      	cmp	r3, r4
 8009046:	d908      	bls.n	800905a <_free_r+0x42>
 8009048:	6820      	ldr	r0, [r4, #0]
 800904a:	1821      	adds	r1, r4, r0
 800904c:	428b      	cmp	r3, r1
 800904e:	bf01      	itttt	eq
 8009050:	6819      	ldreq	r1, [r3, #0]
 8009052:	685b      	ldreq	r3, [r3, #4]
 8009054:	1809      	addeq	r1, r1, r0
 8009056:	6021      	streq	r1, [r4, #0]
 8009058:	e7ed      	b.n	8009036 <_free_r+0x1e>
 800905a:	461a      	mov	r2, r3
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	b10b      	cbz	r3, 8009064 <_free_r+0x4c>
 8009060:	42a3      	cmp	r3, r4
 8009062:	d9fa      	bls.n	800905a <_free_r+0x42>
 8009064:	6811      	ldr	r1, [r2, #0]
 8009066:	1850      	adds	r0, r2, r1
 8009068:	42a0      	cmp	r0, r4
 800906a:	d10b      	bne.n	8009084 <_free_r+0x6c>
 800906c:	6820      	ldr	r0, [r4, #0]
 800906e:	4401      	add	r1, r0
 8009070:	1850      	adds	r0, r2, r1
 8009072:	4283      	cmp	r3, r0
 8009074:	6011      	str	r1, [r2, #0]
 8009076:	d1e0      	bne.n	800903a <_free_r+0x22>
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4401      	add	r1, r0
 800907e:	6011      	str	r1, [r2, #0]
 8009080:	6053      	str	r3, [r2, #4]
 8009082:	e7da      	b.n	800903a <_free_r+0x22>
 8009084:	d902      	bls.n	800908c <_free_r+0x74>
 8009086:	230c      	movs	r3, #12
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	e7d6      	b.n	800903a <_free_r+0x22>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	1821      	adds	r1, r4, r0
 8009090:	428b      	cmp	r3, r1
 8009092:	bf01      	itttt	eq
 8009094:	6819      	ldreq	r1, [r3, #0]
 8009096:	685b      	ldreq	r3, [r3, #4]
 8009098:	1809      	addeq	r1, r1, r0
 800909a:	6021      	streq	r1, [r4, #0]
 800909c:	6063      	str	r3, [r4, #4]
 800909e:	6054      	str	r4, [r2, #4]
 80090a0:	e7cb      	b.n	800903a <_free_r+0x22>
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20001d54 	.word	0x20001d54

080090a8 <_init>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	bf00      	nop
 80090ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ae:	bc08      	pop	{r3}
 80090b0:	469e      	mov	lr, r3
 80090b2:	4770      	bx	lr

080090b4 <_fini>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	bf00      	nop
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr
