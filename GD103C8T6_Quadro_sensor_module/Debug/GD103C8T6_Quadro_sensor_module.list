
GD103C8T6_Quadro_sensor_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f50  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009060  08009060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009198  08009198  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08009198  08009198  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009198  08009198  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009198  08009198  00019198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800919c  0800919c  0001919c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080091a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cc8  2000008c  0800922c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  0800922c  00021d54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a099  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb5  00000000  00000000  0003a14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  0003e008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b024  00000000  00000000  00040a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ce5  00000000  00000000  0005ba54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097c6d  00000000  00000000  00074739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010c3a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006318  00000000  00000000  0010c3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009048 	.word	0x08009048

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08009048 	.word	0x08009048

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <filter>:

uint8_t _buffer[21];

static uint8_t _mag_adjust[3];

float filter(float val) { //функция фильтрации
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	Pc = P + varProcess;
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <filter+0xbc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2c      	ldr	r2, [pc, #176]	; (800115c <filter+0xc0>)
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fd10 	bl	8000ad4 <__addsf3>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <filter+0xc4>)
 80010ba:	601a      	str	r2, [r3, #0]
	G = Pc/(Pc + varVolt);
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <filter+0xc4>)
 80010be:	681c      	ldr	r4, [r3, #0]
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <filter+0xc4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a27      	ldr	r2, [pc, #156]	; (8001164 <filter+0xc8>)
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fd02 	bl	8000ad4 <__addsf3>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4620      	mov	r0, r4
 80010d6:	f7ff feb9 	bl	8000e4c <__aeabi_fdiv>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <filter+0xcc>)
 80010e0:	601a      	str	r2, [r3, #0]
	P = (1-G)*Pc;
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <filter+0xcc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80010ec:	f7ff fcf0 	bl	8000ad0 <__aeabi_fsub>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <filter+0xc4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4619      	mov	r1, r3
 80010fa:	4610      	mov	r0, r2
 80010fc:	f7ff fdf2 	bl	8000ce4 <__aeabi_fmul>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <filter+0xbc>)
 8001106:	601a      	str	r2, [r3, #0]
	Xp = Xe;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <filter+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a18      	ldr	r2, [pc, #96]	; (8001170 <filter+0xd4>)
 800110e:	6013      	str	r3, [r2, #0]
	Zp = Xp;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <filter+0xd4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <filter+0xd8>)
 8001116:	6013      	str	r3, [r2, #0]
	Xe = G*(val-Zp)+Xp; // "фильтрованное" значение
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <filter+0xd8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fcd6 	bl	8000ad0 <__aeabi_fsub>
 8001124:	4603      	mov	r3, r0
 8001126:	461a      	mov	r2, r3
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <filter+0xcc>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	4610      	mov	r0, r2
 8001130:	f7ff fdd8 	bl	8000ce4 <__aeabi_fmul>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <filter+0xd4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f7ff fcc8 	bl	8000ad4 <__addsf3>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <filter+0xd0>)
 800114a:	601a      	str	r2, [r3, #0]
return(Xe);
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <filter+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	20000004 	.word	0x20000004
 800115c:	20000000 	.word	0x20000000
 8001160:	200000ac 	.word	0x200000ac
 8001164:	200000a8 	.word	0x200000a8
 8001168:	200000b0 	.word	0x200000b0
 800116c:	200000bc 	.word	0x200000bc
 8001170:	200000b4 	.word	0x200000b4
 8001174:	200000b8 	.word	0x200000b8

08001178 <MPU9250_OnActivate>:

__weak void MPU9250_OnActivate()
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8001188:	f7ff fff6 	bl	8001178 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2110      	movs	r1, #16
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <MPU9250_Activate+0x18>)
 8001192:	f002 ff91 	bl	80040b8 <HAL_GPIO_WritePin>
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40010800 	.word	0x40010800

080011a0 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	2110      	movs	r1, #16
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <MPU9250_Deactivate+0x14>)
 80011aa:	f002 ff85 	bl	80040b8 <HAL_GPIO_WritePin>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40010800 	.word	0x40010800

080011b8 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80011c6:	f107 020f 	add.w	r2, r7, #15
 80011ca:	1df9      	adds	r1, r7, #7
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <SPIx_WriteRead+0x38>)
 80011d6:	f003 fea8 	bl	8004f2a <HAL_SPI_TransmitReceive>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SPIx_WriteRead+0x2c>
	{
		return -1;
 80011e0:	23ff      	movs	r3, #255	; 0xff
 80011e2:	e000      	b.n	80011e6 <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000248 	.word	0x20000248

080011f4 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *p_buffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
 8001200:	4613      	mov	r3, r2
 8001202:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001204:	f7ff ffbe 	bl	8001184 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ffd4 	bl	80011b8 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8001210:	e00a      	b.n	8001228 <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*p_buffer);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffce 	bl	80011b8 <SPIx_WriteRead>
		NumByteToWrite--;
 800121c:	883b      	ldrh	r3, [r7, #0]
 800121e:	3b01      	subs	r3, #1
 8001220:	803b      	strh	r3, [r7, #0]
		p_buffer++;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3301      	adds	r3, #1
 8001226:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8001228:	883b      	ldrh	r3, [r7, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f1      	bne.n	8001212 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 800122e:	f7ff ffb7 	bl	80011a0 <MPU9250_Deactivate>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *p_buffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
 8001248:	4613      	mov	r3, r2
 800124a:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 800124c:	f7ff ff9a 	bl	8001184 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001256:	b2db      	uxtb	r3, r3
 8001258:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 800125a:	f107 010f 	add.w	r1, r7, #15
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	2201      	movs	r2, #1
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <MPU_SPI_Read+0x48>)
 8001266:	f003 fc13 	bl	8004a90 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&MPU9250_SPI, p_buffer, NumByteToRead, HAL_MAX_DELAY) == HAL_OK) {
 800126a:	883a      	ldrh	r2, [r7, #0]
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <MPU_SPI_Read+0x48>)
 8001274:	f003 fd48 	bl	8004d08 <HAL_SPI_Receive>
	}
	else {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	}
	MPU9250_Deactivate();
 8001278:	f7ff ff92 	bl	80011a0 <MPU9250_Deactivate>
}
 800127c:	bf00      	nop
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000248 	.word	0x20000248

08001288 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8001298:	79f9      	ldrb	r1, [r7, #7]
 800129a:	1dbb      	adds	r3, r7, #6
 800129c:	2201      	movs	r2, #1
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ffa8 	bl	80011f4 <MPU_SPI_Write>
	HAL_Delay(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f001 fefb 	bl	80030a0 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	603a      	str	r2, [r7, #0]
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	460b      	mov	r3, r1
 80012c0:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4619      	mov	r1, r3
 80012ca:	6838      	ldr	r0, [r7, #0]
 80012cc:	f7ff ffb6 	bl	800123c <MPU_SPI_Read>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	460a      	mov	r2, r1
 80012e2:	71fb      	strb	r3, [r7, #7]
 80012e4:	4613      	mov	r3, r2
 80012e6:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80012e8:	210c      	movs	r1, #12
 80012ea:	2025      	movs	r0, #37	; 0x25
 80012ec:	f7ff ffcc 	bl	8001288 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4619      	mov	r1, r3
 80012f4:	2026      	movs	r0, #38	; 0x26
 80012f6:	f7ff ffc7 	bl	8001288 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	4619      	mov	r1, r3
 80012fe:	2063      	movs	r0, #99	; 0x63
 8001300:	f7ff ffc2 	bl	8001288 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8001304:	2181      	movs	r1, #129	; 0x81
 8001306:	2027      	movs	r0, #39	; 0x27
 8001308:	f7ff ffbe 	bl	8001288 <writeRegister>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	603a      	str	r2, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	460b      	mov	r3, r1
 8001322:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8001324:	218c      	movs	r1, #140	; 0x8c
 8001326:	2025      	movs	r0, #37	; 0x25
 8001328:	f7ff ffae 	bl	8001288 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4619      	mov	r1, r3
 8001330:	2026      	movs	r0, #38	; 0x26
 8001332:	f7ff ffa9 	bl	8001288 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	2027      	movs	r0, #39	; 0x27
 8001342:	f7ff ffa1 	bl	8001288 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8001346:	2001      	movs	r0, #1
 8001348:	f001 feaa 	bl	80030a0 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	2049      	movs	r0, #73	; 0x49
 8001354:	f7ff ffad 	bl	80012b2 <readRegisters>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I, 1, _buffer);
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <whoAmI+0x18>)
 8001366:	2101      	movs	r1, #1
 8001368:	2075      	movs	r0, #117	; 0x75
 800136a:	f7ff ffa2 	bl	80012b2 <readRegisters>

	// return the register value
	return _buffer[0];
 800136e:	4b02      	ldr	r3, [pc, #8]	; (8001378 <whoAmI+0x18>)
 8001370:	781b      	ldrb	r3, [r3, #0]
}
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200000c0 	.word	0x200000c0

0800137c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I, 1, _buffer);
 8001380:	4a04      	ldr	r2, [pc, #16]	; (8001394 <whoAmIAK8963+0x18>)
 8001382:	2101      	movs	r1, #1
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ffc5 	bl	8001314 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 800138a:	4b02      	ldr	r3, [pc, #8]	; (8001394 <whoAmIAK8963+0x18>)
 800138c:	781b      	ldrb	r3, [r3, #0]
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000c0 	.word	0x200000c0

08001398 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800139e:	2101      	movs	r1, #1
 80013a0:	206b      	movs	r0, #107	; 0x6b
 80013a2:	f7ff ff71 	bl	8001288 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80013a6:	2120      	movs	r1, #32
 80013a8:	206a      	movs	r0, #106	; 0x6a
 80013aa:	f7ff ff6d 	bl	8001288 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80013ae:	210d      	movs	r1, #13
 80013b0:	2024      	movs	r0, #36	; 0x24
 80013b2:	f7ff ff69 	bl	8001288 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 80013b6:	2100      	movs	r1, #0
 80013b8:	200a      	movs	r0, #10
 80013ba:	f7ff ff8d 	bl	80012d8 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1, PWR_RESET);
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	206b      	movs	r0, #107	; 0x6b
 80013c2:	f7ff ff61 	bl	8001288 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80013c6:	200a      	movs	r0, #10
 80013c8:	f001 fe6a 	bl	80030a0 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2, AK8963_RESET);
 80013cc:	2101      	movs	r1, #1
 80013ce:	200b      	movs	r0, #11
 80013d0:	f7ff ff82 	bl	80012d8 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80013d4:	2101      	movs	r1, #1
 80013d6:	206b      	movs	r0, #107	; 0x6b
 80013d8:	f7ff ff56 	bl	8001288 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80013dc:	f7ff ffc0 	bl	8001360 <whoAmI>
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b71      	cmp	r3, #113	; 0x71
 80013e8:	d004      	beq.n	80013f4 <MPU9250_Init+0x5c>
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b73      	cmp	r3, #115	; 0x73
 80013ee:	d001      	beq.n	80013f4 <MPU9250_Init+0x5c>
	{
		return 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e051      	b.n	8001498 <MPU9250_Init+0x100>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 80013f4:	2100      	movs	r1, #0
 80013f6:	206c      	movs	r0, #108	; 0x6c
 80013f8:	f7ff ff46 	bl	8001288 <writeRegister>

	// setting accel range to 8G as default
	writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_8G);
 80013fc:	2110      	movs	r1, #16
 80013fe:	201c      	movs	r0, #28
 8001400:	f7ff ff42 	bl	8001288 <writeRegister>

	// setting the gyro range to 500DPS as default
	writeRegister(GYRO_CONFIG, GYRO_FS_SEL_500DPS);
 8001404:	2108      	movs	r1, #8
 8001406:	201b      	movs	r0, #27
 8001408:	f7ff ff3e 	bl	8001288 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2, DLPF_184);
 800140c:	2101      	movs	r1, #1
 800140e:	201d      	movs	r0, #29
 8001410:	f7ff ff3a 	bl	8001288 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG, DLPF_184);
 8001414:	2101      	movs	r1, #1
 8001416:	201a      	movs	r0, #26
 8001418:	f7ff ff36 	bl	8001288 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV, 0x00);
 800141c:	2100      	movs	r1, #0
 800141e:	2019      	movs	r0, #25
 8001420:	f7ff ff32 	bl	8001288 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8001424:	2120      	movs	r1, #32
 8001426:	206a      	movs	r0, #106	; 0x6a
 8001428:	f7ff ff2e 	bl	8001288 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 800142c:	210d      	movs	r1, #13
 800142e:	2024      	movs	r0, #36	; 0x24
 8001430:	f7ff ff2a 	bl	8001288 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 8001434:	f7ff ffa2 	bl	800137c <whoAmIAK8963>
 8001438:	4603      	mov	r3, r0
 800143a:	2b48      	cmp	r3, #72	; 0x48
 800143c:	d001      	beq.n	8001442 <MPU9250_Init+0xaa>
	{
		return 1;
 800143e:	2301      	movs	r3, #1
 8001440:	e02a      	b.n	8001498 <MPU9250_Init+0x100>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001442:	2100      	movs	r1, #0
 8001444:	200a      	movs	r0, #10
 8001446:	f7ff ff47 	bl	80012d8 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 800144a:	2064      	movs	r0, #100	; 0x64
 800144c:	f001 fe28 	bl	80030a0 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1, AK8963_FUSE_ROM);
 8001450:	210f      	movs	r1, #15
 8001452:	200a      	movs	r0, #10
 8001454:	f7ff ff40 	bl	80012d8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001458:	2064      	movs	r0, #100	; 0x64
 800145a:	f001 fe21 	bl	80030a0 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <MPU9250_Init+0x108>)
 8001460:	2103      	movs	r1, #3
 8001462:	2010      	movs	r0, #16
 8001464:	f7ff ff56 	bl	8001314 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001468:	2100      	movs	r1, #0
 800146a:	200a      	movs	r0, #10
 800146c:	f7ff ff34 	bl	80012d8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001470:	2064      	movs	r0, #100	; 0x64
 8001472:	f001 fe15 	bl	80030a0 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1, AK8963_CNT_MEAS2);
 8001476:	2116      	movs	r1, #22
 8001478:	200a      	movs	r0, #10
 800147a:	f7ff ff2d 	bl	80012d8 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800147e:	2064      	movs	r0, #100	; 0x64
 8001480:	f001 fe0e 	bl	80030a0 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001484:	2101      	movs	r1, #1
 8001486:	206b      	movs	r0, #107	; 0x6b
 8001488:	f7ff fefe 	bl	8001288 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL, 7 , _buffer);
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <MPU9250_Init+0x10c>)
 800148e:	2107      	movs	r1, #7
 8001490:	2003      	movs	r0, #3
 8001492:	f7ff ff3f 	bl	8001314 <readAK8963Registers>
//	writeRegister(GYRO_CONFIG, 0x08);
//	//accel config 8g
//	writeRegister(ACCEL_CONFIG, 0x10);

	// successful init, return 0
	return 0;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200000d8 	.word	0x200000d8
 80014a4:	200000c0 	.word	0x200000c0

080014a8 <MPU9250_calibrate>:
}

uint16_t ii, packet_count, fifo_count;

void MPU9250_calibrate()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08c      	sub	sp, #48	; 0x30
 80014ac:	af00      	add	r7, sp, #0
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    //uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    writeRegister(PWR_MGMNT_1, PWR_RESET); // Write a one to bit 7 reset bit; toggle reset device
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	206b      	movs	r0, #107	; 0x6b
 80014b2:	f7ff fee9 	bl	8001288 <writeRegister>
    HAL_Delay(100);
 80014b6:	2064      	movs	r0, #100	; 0x64
 80014b8:	f001 fdf2 	bl	80030a0 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 80014bc:	2101      	movs	r1, #1
 80014be:	206b      	movs	r0, #107	; 0x6b
 80014c0:	f7ff fee2 	bl	8001288 <writeRegister>
    writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 80014c4:	2100      	movs	r1, #0
 80014c6:	206c      	movs	r0, #108	; 0x6c
 80014c8:	f7ff fede 	bl	8001288 <writeRegister>
    HAL_Delay(200);
 80014cc:	20c8      	movs	r0, #200	; 0xc8
 80014ce:	f001 fde7 	bl	80030a0 <HAL_Delay>

    // Configure device for bias calculation
    writeRegister(INT_ENABLE, INT_DISABLE);   // Disable all interrupts
 80014d2:	2100      	movs	r1, #0
 80014d4:	2038      	movs	r0, #56	; 0x38
 80014d6:	f7ff fed7 	bl	8001288 <writeRegister>
    writeRegister(FIFO_EN, 0x00);      // Disable FIFO
 80014da:	2100      	movs	r1, #0
 80014dc:	2023      	movs	r0, #35	; 0x23
 80014de:	f7ff fed3 	bl	8001288 <writeRegister>
    writeRegister(PWR_MGMNT_1, SEN_ENABLE);   // Turn on internal clock source
 80014e2:	2100      	movs	r1, #0
 80014e4:	206b      	movs	r0, #107	; 0x6b
 80014e6:	f7ff fecf 	bl	8001288 <writeRegister>
    writeRegister(I2C_MST_CTRL, 0x00); // Disable I2C master
 80014ea:	2100      	movs	r1, #0
 80014ec:	2024      	movs	r0, #36	; 0x24
 80014ee:	f7ff fecb 	bl	8001288 <writeRegister>
    writeRegister(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80014f2:	2100      	movs	r1, #0
 80014f4:	206a      	movs	r0, #106	; 0x6a
 80014f6:	f7ff fec7 	bl	8001288 <writeRegister>
    writeRegister(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80014fa:	210c      	movs	r1, #12
 80014fc:	206a      	movs	r0, #106	; 0x6a
 80014fe:	f7ff fec3 	bl	8001288 <writeRegister>
    HAL_Delay(15);
 8001502:	200f      	movs	r0, #15
 8001504:	f001 fdcc 	bl	80030a0 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    writeRegister(CONFIG, DLPF_184);      // Set low-pass filter to 184 Hz
 8001508:	2101      	movs	r1, #1
 800150a:	201a      	movs	r0, #26
 800150c:	f7ff febc 	bl	8001288 <writeRegister>
    writeRegister(SMPDIV, 0x00);  // Set sample rate to 1 kHz
 8001510:	2100      	movs	r1, #0
 8001512:	2019      	movs	r0, #25
 8001514:	f7ff feb8 	bl	8001288 <writeRegister>
    writeRegister(GYRO_CONFIG, GYRO_FS_SEL_250DPS);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001518:	2100      	movs	r1, #0
 800151a:	201b      	movs	r0, #27
 800151c:	f7ff feb4 	bl	8001288 <writeRegister>
    writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_2G); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001520:	2100      	movs	r1, #0
 8001522:	201c      	movs	r0, #28
 8001524:	f7ff feb0 	bl	8001288 <writeRegister>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001528:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800152c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    writeRegister(USER_CTRL, 0x40);   // Enable FIFO
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	206a      	movs	r0, #106	; 0x6a
 8001532:	f7ff fea9 	bl	8001288 <writeRegister>
    writeRegister(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9250)
 8001536:	2178      	movs	r1, #120	; 0x78
 8001538:	2023      	movs	r0, #35	; 0x23
 800153a:	f7ff fea5 	bl	8001288 <writeRegister>
    HAL_Delay(28); // accumulate 40 samples in 27 milliseconds = 480 bytes
 800153e:	201c      	movs	r0, #28
 8001540:	f001 fdae 	bl	80030a0 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    writeRegister(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001544:	2100      	movs	r1, #0
 8001546:	2023      	movs	r0, #35	; 0x23
 8001548:	f7ff fe9e 	bl	8001288 <writeRegister>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    uint8_t fifoCount_buffer[2];
    readRegisters(FIFO_COUNT, 2, fifoCount_buffer);
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	461a      	mov	r2, r3
 8001552:	2102      	movs	r1, #2
 8001554:	2072      	movs	r0, #114	; 0x72
 8001556:	f7ff feac 	bl	80012b2 <readRegisters>

    fifo_count = (fifoCount_buffer[0] << 8) | fifoCount_buffer[1];
 800155a:	7f3b      	ldrb	r3, [r7, #28]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	b21a      	sxth	r2, r3
 8001560:	7f7b      	ldrb	r3, [r7, #29]
 8001562:	b21b      	sxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b21b      	sxth	r3, r3
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b9b      	ldr	r3, [pc, #620]	; (80017d8 <MPU9250_calibrate+0x330>)
 800156c:	801a      	strh	r2, [r3, #0]
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 800156e:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <MPU9250_calibrate+0x330>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	4a9a      	ldr	r2, [pc, #616]	; (80017dc <MPU9250_calibrate+0x334>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b98      	ldr	r3, [pc, #608]	; (80017e0 <MPU9250_calibrate+0x338>)
 800157e:	801a      	strh	r2, [r3, #0]

    for (ii = 0; ii < packet_count; ii++)
 8001580:	4b98      	ldr	r3, [pc, #608]	; (80017e4 <MPU9250_calibrate+0x33c>)
 8001582:	2200      	movs	r2, #0
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	e078      	b.n	800167a <MPU9250_calibrate+0x1d2>
    {
        int32_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
        readRegisters(FIFO_READ, 12, data);
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	461a      	mov	r2, r3
 80015a6:	210c      	movs	r1, #12
 80015a8:	2074      	movs	r0, #116	; 0x74
 80015aa:	f7ff fe82 	bl	80012b2 <readRegisters>
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80015ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21b      	sxth	r3, r3
 80015c0:	613b      	str	r3, [r7, #16]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 80015c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	617b      	str	r3, [r7, #20]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 80015d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b21a      	sxth	r2, r3
 80015de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	61bb      	str	r3, [r7, #24]
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80015ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	607b      	str	r3, [r7, #4]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80015fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800160a:	b21b      	sxth	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b21b      	sxth	r3, r3
 8001610:	60bb      	str	r3, [r7, #8]
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 8001612:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	60fb      	str	r3, [r7, #12]

        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8001626:	4b70      	ldr	r3, [pc, #448]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4413      	add	r3, r2
 800162e:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001630:	6013      	str	r3, [r2, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 8001632:	4b6d      	ldr	r3, [pc, #436]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	4413      	add	r3, r2
 800163a:	4a6b      	ldr	r2, [pc, #428]	; (80017e8 <MPU9250_calibrate+0x340>)
 800163c:	6053      	str	r3, [r2, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 800163e:	4b6a      	ldr	r3, [pc, #424]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	4413      	add	r3, r2
 8001646:	4a68      	ldr	r2, [pc, #416]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001648:	6093      	str	r3, [r2, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 800164a:	4b68      	ldr	r3, [pc, #416]	; (80017ec <MPU9250_calibrate+0x344>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a66      	ldr	r2, [pc, #408]	; (80017ec <MPU9250_calibrate+0x344>)
 8001654:	6013      	str	r3, [r2, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 8001656:	4b65      	ldr	r3, [pc, #404]	; (80017ec <MPU9250_calibrate+0x344>)
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	4413      	add	r3, r2
 800165e:	4a63      	ldr	r2, [pc, #396]	; (80017ec <MPU9250_calibrate+0x344>)
 8001660:	6053      	str	r3, [r2, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 8001662:	4b62      	ldr	r3, [pc, #392]	; (80017ec <MPU9250_calibrate+0x344>)
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	4a60      	ldr	r2, [pc, #384]	; (80017ec <MPU9250_calibrate+0x344>)
 800166c:	6093      	str	r3, [r2, #8]
    for (ii = 0; ii < packet_count; ii++)
 800166e:	4b5d      	ldr	r3, [pc, #372]	; (80017e4 <MPU9250_calibrate+0x33c>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	3301      	adds	r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b5b      	ldr	r3, [pc, #364]	; (80017e4 <MPU9250_calibrate+0x33c>)
 8001678:	801a      	strh	r2, [r3, #0]
 800167a:	4b5a      	ldr	r3, [pc, #360]	; (80017e4 <MPU9250_calibrate+0x33c>)
 800167c:	881a      	ldrh	r2, [r3, #0]
 800167e:	4b58      	ldr	r3, [pc, #352]	; (80017e0 <MPU9250_calibrate+0x338>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d380      	bcc.n	8001588 <MPU9250_calibrate+0xe0>
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001686:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a55      	ldr	r2, [pc, #340]	; (80017e0 <MPU9250_calibrate+0x338>)
 800168c:	8812      	ldrh	r2, [r2, #0]
 800168e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001692:	4a55      	ldr	r2, [pc, #340]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001694:	6013      	str	r3, [r2, #0]
    accel_bias[1] /= (int32_t) packet_count;
 8001696:	4b54      	ldr	r3, [pc, #336]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <MPU9250_calibrate+0x338>)
 800169c:	8812      	ldrh	r2, [r2, #0]
 800169e:	fb93 f3f2 	sdiv	r3, r3, r2
 80016a2:	4a51      	ldr	r2, [pc, #324]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016a4:	6053      	str	r3, [r2, #4]
    accel_bias[2] /= (int32_t) packet_count;
 80016a6:	4b50      	ldr	r3, [pc, #320]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	4a4d      	ldr	r2, [pc, #308]	; (80017e0 <MPU9250_calibrate+0x338>)
 80016ac:	8812      	ldrh	r2, [r2, #0]
 80016ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80016b2:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016b4:	6093      	str	r3, [r2, #8]
    gyro_bias[0]  /= (int32_t) packet_count;
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <MPU9250_calibrate+0x344>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a49      	ldr	r2, [pc, #292]	; (80017e0 <MPU9250_calibrate+0x338>)
 80016bc:	8812      	ldrh	r2, [r2, #0]
 80016be:	fb93 f3f2 	sdiv	r3, r3, r2
 80016c2:	4a4a      	ldr	r2, [pc, #296]	; (80017ec <MPU9250_calibrate+0x344>)
 80016c4:	6013      	str	r3, [r2, #0]
    gyro_bias[1]  /= (int32_t) packet_count;
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <MPU9250_calibrate+0x344>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <MPU9250_calibrate+0x338>)
 80016cc:	8812      	ldrh	r2, [r2, #0]
 80016ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80016d2:	4a46      	ldr	r2, [pc, #280]	; (80017ec <MPU9250_calibrate+0x344>)
 80016d4:	6053      	str	r3, [r2, #4]
    gyro_bias[2]  /= (int32_t) packet_count;
 80016d6:	4b45      	ldr	r3, [pc, #276]	; (80017ec <MPU9250_calibrate+0x344>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	4a41      	ldr	r2, [pc, #260]	; (80017e0 <MPU9250_calibrate+0x338>)
 80016dc:	8812      	ldrh	r2, [r2, #0]
 80016de:	fb93 f3f2 	sdiv	r3, r3, r2
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <MPU9250_calibrate+0x344>)
 80016e4:	6093      	str	r3, [r2, #8]
    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80016e6:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	dd06      	ble.n	80016fc <MPU9250_calibrate+0x254>
 80016ee:	4b3e      	ldr	r3, [pc, #248]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	4a3c      	ldr	r2, [pc, #240]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016f8:	6093      	str	r3, [r2, #8]
 80016fa:	e005      	b.n	8001708 <MPU9250_calibrate+0x260>
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 80016fc:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <MPU9250_calibrate+0x340>)
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001702:	4413      	add	r3, r2
 8001704:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <MPU9250_calibrate+0x340>)
 8001706:	6093      	str	r3, [r2, #8]

    // Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
    data[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8001708:	4b38      	ldr	r3, [pc, #224]	; (80017ec <MPU9250_calibrate+0x344>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	425b      	negs	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	da00      	bge.n	8001714 <MPU9250_calibrate+0x26c>
 8001712:	3303      	adds	r3, #3
 8001714:	109b      	asrs	r3, r3, #2
 8001716:	121b      	asrs	r3, r3, #8
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f887 3020 	strb.w	r3, [r7, #32]
    data[1] = (-gyro_bias[0] / 4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800171e:	4b33      	ldr	r3, [pc, #204]	; (80017ec <MPU9250_calibrate+0x344>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	425b      	negs	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	da00      	bge.n	800172a <MPU9250_calibrate+0x282>
 8001728:	3303      	adds	r3, #3
 800172a:	109b      	asrs	r3, r3, #2
 800172c:	b2db      	uxtb	r3, r3
 800172e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    data[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <MPU9250_calibrate+0x344>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	425b      	negs	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	da00      	bge.n	800173e <MPU9250_calibrate+0x296>
 800173c:	3303      	adds	r3, #3
 800173e:	109b      	asrs	r3, r3, #2
 8001740:	121b      	asrs	r3, r3, #8
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    data[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <MPU9250_calibrate+0x344>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	425b      	negs	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	da00      	bge.n	8001754 <MPU9250_calibrate+0x2ac>
 8001752:	3303      	adds	r3, #3
 8001754:	109b      	asrs	r3, r3, #2
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    data[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <MPU9250_calibrate+0x344>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	425b      	negs	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	da00      	bge.n	8001768 <MPU9250_calibrate+0x2c0>
 8001766:	3303      	adds	r3, #3
 8001768:	109b      	asrs	r3, r3, #2
 800176a:	121b      	asrs	r3, r3, #8
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    data[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001772:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <MPU9250_calibrate+0x344>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	425b      	negs	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	da00      	bge.n	800177e <MPU9250_calibrate+0x2d6>
 800177c:	3303      	adds	r3, #3
 800177e:	109b      	asrs	r3, r3, #2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    // Push gyro biases to hardware registers
    writeRegister(XG_OFFSET_H, data[0]);
 8001786:	f897 3020 	ldrb.w	r3, [r7, #32]
 800178a:	4619      	mov	r1, r3
 800178c:	2013      	movs	r0, #19
 800178e:	f7ff fd7b 	bl	8001288 <writeRegister>
    writeRegister(XG_OFFSET_L, data[1]);
 8001792:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001796:	4619      	mov	r1, r3
 8001798:	2014      	movs	r0, #20
 800179a:	f7ff fd75 	bl	8001288 <writeRegister>
    writeRegister(YG_OFFSET_H, data[2]);
 800179e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017a2:	4619      	mov	r1, r3
 80017a4:	2015      	movs	r0, #21
 80017a6:	f7ff fd6f 	bl	8001288 <writeRegister>
    writeRegister(YG_OFFSET_L, data[3]);
 80017aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017ae:	4619      	mov	r1, r3
 80017b0:	2016      	movs	r0, #22
 80017b2:	f7ff fd69 	bl	8001288 <writeRegister>
    writeRegister(ZG_OFFSET_H, data[4]);
 80017b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ba:	4619      	mov	r1, r3
 80017bc:	2017      	movs	r0, #23
 80017be:	f7ff fd63 	bl	8001288 <writeRegister>
    writeRegister(ZG_OFFSET_L, data[5]);
 80017c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80017c6:	4619      	mov	r1, r3
 80017c8:	2018      	movs	r0, #24
 80017ca:	f7ff fd5d 	bl	8001288 <writeRegister>
//	acc_ofset_data_corrected[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
//	acc_ofset_data_corrected[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
//	acc_ofset_data_corrected[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
//	acc_ofset_data_corrected[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);

}
 80017ce:	bf00      	nop
 80017d0:	3730      	adds	r7, #48	; 0x30
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200000e0 	.word	0x200000e0
 80017dc:	aaaaaaab 	.word	0xaaaaaaab
 80017e0:	200000de 	.word	0x200000de
 80017e4:	200000dc 	.word	0x200000dc
 80017e8:	20000190 	.word	0x20000190
 80017ec:	20000184 	.word	0x20000184

080017f0 <MPU9250_GetData>:

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 80017fc:	4a9d      	ldr	r2, [pc, #628]	; (8001a74 <MPU9250_GetData+0x284>)
 80017fe:	2115      	movs	r1, #21
 8001800:	203b      	movs	r0, #59	; 0x3b
 8001802:	f7ff fd56 	bl	80012b2 <readRegisters>

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001806:	4b9b      	ldr	r3, [pc, #620]	; (8001a74 <MPU9250_GetData+0x284>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b21a      	sxth	r2, r3
 800180e:	4b99      	ldr	r3, [pc, #612]	; (8001a74 <MPU9250_GetData+0x284>)
 8001810:	785b      	ldrb	r3, [r3, #1]
 8001812:	b21b      	sxth	r3, r3
 8001814:	4313      	orrs	r3, r2
 8001816:	b21a      	sxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	801a      	strh	r2, [r3, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800181c:	4b95      	ldr	r3, [pc, #596]	; (8001a74 <MPU9250_GetData+0x284>)
 800181e:	789b      	ldrb	r3, [r3, #2]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b219      	sxth	r1, r3
 8001824:	4b93      	ldr	r3, [pc, #588]	; (8001a74 <MPU9250_GetData+0x284>)
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	b21a      	sxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3302      	adds	r3, #2
 800182e:	430a      	orrs	r2, r1
 8001830:	b212      	sxth	r2, r2
 8001832:	801a      	strh	r2, [r3, #0]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001834:	4b8f      	ldr	r3, [pc, #572]	; (8001a74 <MPU9250_GetData+0x284>)
 8001836:	791b      	ldrb	r3, [r3, #4]
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b219      	sxth	r1, r3
 800183c:	4b8d      	ldr	r3, [pc, #564]	; (8001a74 <MPU9250_GetData+0x284>)
 800183e:	795b      	ldrb	r3, [r3, #5]
 8001840:	b21a      	sxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	430a      	orrs	r2, r1
 8001848:	b212      	sxth	r2, r2
 800184a:	801a      	strh	r2, [r3, #0]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) |_buffer[9];
 800184c:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <MPU9250_GetData+0x284>)
 800184e:	7a1b      	ldrb	r3, [r3, #8]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	b21a      	sxth	r2, r3
 8001854:	4b87      	ldr	r3, [pc, #540]	; (8001a74 <MPU9250_GetData+0x284>)
 8001856:	7a5b      	ldrb	r3, [r3, #9]
 8001858:	b21b      	sxth	r3, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	b21a      	sxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	801a      	strh	r2, [r3, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001862:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <MPU9250_GetData+0x284>)
 8001864:	7a9b      	ldrb	r3, [r3, #10]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b219      	sxth	r1, r3
 800186a:	4b82      	ldr	r3, [pc, #520]	; (8001a74 <MPU9250_GetData+0x284>)
 800186c:	7adb      	ldrb	r3, [r3, #11]
 800186e:	b21a      	sxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3302      	adds	r3, #2
 8001874:	430a      	orrs	r2, r1
 8001876:	b212      	sxth	r2, r2
 8001878:	801a      	strh	r2, [r3, #0]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 800187a:	4b7e      	ldr	r3, [pc, #504]	; (8001a74 <MPU9250_GetData+0x284>)
 800187c:	7b1b      	ldrb	r3, [r3, #12]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	b219      	sxth	r1, r3
 8001882:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <MPU9250_GetData+0x284>)
 8001884:	7b5b      	ldrb	r3, [r3, #13]
 8001886:	b21a      	sxth	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3304      	adds	r3, #4
 800188c:	430a      	orrs	r2, r1
 800188e:	b212      	sxth	r2, r2
 8001890:	801a      	strh	r2, [r3, #0]

	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 16384.0f * 9.8f;
 8001892:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <MPU9250_GetData+0x284>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	b21b      	sxth	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	4b75      	ldr	r3, [pc, #468]	; (8001a74 <MPU9250_GetData+0x284>)
 800189e:	785b      	ldrb	r3, [r3, #1]
 80018a0:	4413      	add	r3, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f9ca 	bl	8000c3c <__aeabi_i2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff facc 	bl	8000e4c <__aeabi_fdiv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4970      	ldr	r1, [pc, #448]	; (8001a78 <MPU9250_GetData+0x288>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fa13 	bl	8000ce4 <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <MPU9250_GetData+0x28c>)
 80018c4:	601a      	str	r2, [r3, #0]
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 16384.0f * 9.8f;
 80018c6:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <MPU9250_GetData+0x284>)
 80018c8:	789b      	ldrb	r3, [r3, #2]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <MPU9250_GetData+0x284>)
 80018d2:	78db      	ldrb	r3, [r3, #3]
 80018d4:	4413      	add	r3, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f9b0 	bl	8000c3c <__aeabi_i2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fab2 	bl	8000e4c <__aeabi_fdiv>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4963      	ldr	r1, [pc, #396]	; (8001a78 <MPU9250_GetData+0x288>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f9f9 	bl	8000ce4 <__aeabi_fmul>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b62      	ldr	r3, [pc, #392]	; (8001a80 <MPU9250_GetData+0x290>)
 80018f8:	601a      	str	r2, [r3, #0]
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 16384.0f * 9.8f;
 80018fa:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <MPU9250_GetData+0x284>)
 80018fc:	791b      	ldrb	r3, [r3, #4]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b21b      	sxth	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <MPU9250_GetData+0x284>)
 8001906:	795b      	ldrb	r3, [r3, #5]
 8001908:	4413      	add	r3, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f996 	bl	8000c3c <__aeabi_i2f>
 8001910:	4603      	mov	r3, r0
 8001912:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa98 	bl	8000e4c <__aeabi_fdiv>
 800191c:	4603      	mov	r3, r0
 800191e:	4956      	ldr	r1, [pc, #344]	; (8001a78 <MPU9250_GetData+0x288>)
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f9df 	bl	8000ce4 <__aeabi_fmul>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <MPU9250_GetData+0x294>)
 800192c:	601a      	str	r2, [r3, #0]
//	accelX=((((int16_t)((uint16_t)_buffer[6] << 8) + _buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])))/4096.0f*9.8f;
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 65.5f * 3.14f / 180.0f;
 800192e:	4b51      	ldr	r3, [pc, #324]	; (8001a74 <MPU9250_GetData+0x284>)
 8001930:	7a1b      	ldrb	r3, [r3, #8]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b21b      	sxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <MPU9250_GetData+0x284>)
 800193a:	7a5b      	ldrb	r3, [r3, #9]
 800193c:	4413      	add	r3, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f97c 	bl	8000c3c <__aeabi_i2f>
 8001944:	4603      	mov	r3, r0
 8001946:	4950      	ldr	r1, [pc, #320]	; (8001a88 <MPU9250_GetData+0x298>)
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fa7f 	bl	8000e4c <__aeabi_fdiv>
 800194e:	4603      	mov	r3, r0
 8001950:	494e      	ldr	r1, [pc, #312]	; (8001a8c <MPU9250_GetData+0x29c>)
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f9c6 	bl	8000ce4 <__aeabi_fmul>
 8001958:	4603      	mov	r3, r0
 800195a:	494d      	ldr	r1, [pc, #308]	; (8001a90 <MPU9250_GetData+0x2a0>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fa75 	bl	8000e4c <__aeabi_fdiv>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b4b      	ldr	r3, [pc, #300]	; (8001a94 <MPU9250_GetData+0x2a4>)
 8001968:	601a      	str	r2, [r3, #0]
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 65.5f * 3.14f / 180.0f;
 800196a:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <MPU9250_GetData+0x284>)
 800196c:	7a9b      	ldrb	r3, [r3, #10]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21b      	sxth	r3, r3
 8001972:	461a      	mov	r2, r3
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <MPU9250_GetData+0x284>)
 8001976:	7adb      	ldrb	r3, [r3, #11]
 8001978:	4413      	add	r3, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f95e 	bl	8000c3c <__aeabi_i2f>
 8001980:	4603      	mov	r3, r0
 8001982:	4941      	ldr	r1, [pc, #260]	; (8001a88 <MPU9250_GetData+0x298>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fa61 	bl	8000e4c <__aeabi_fdiv>
 800198a:	4603      	mov	r3, r0
 800198c:	493f      	ldr	r1, [pc, #252]	; (8001a8c <MPU9250_GetData+0x29c>)
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9a8 	bl	8000ce4 <__aeabi_fmul>
 8001994:	4603      	mov	r3, r0
 8001996:	493e      	ldr	r1, [pc, #248]	; (8001a90 <MPU9250_GetData+0x2a0>)
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fa57 	bl	8000e4c <__aeabi_fdiv>
 800199e:	4603      	mov	r3, r0
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <MPU9250_GetData+0x2a8>)
 80019a4:	601a      	str	r2, [r3, #0]
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 65.5f * 3.14f / 180.0f;
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <MPU9250_GetData+0x284>)
 80019a8:	7b1b      	ldrb	r3, [r3, #12]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <MPU9250_GetData+0x284>)
 80019b2:	7b5b      	ldrb	r3, [r3, #13]
 80019b4:	4413      	add	r3, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f940 	bl	8000c3c <__aeabi_i2f>
 80019bc:	4603      	mov	r3, r0
 80019be:	4932      	ldr	r1, [pc, #200]	; (8001a88 <MPU9250_GetData+0x298>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fa43 	bl	8000e4c <__aeabi_fdiv>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4930      	ldr	r1, [pc, #192]	; (8001a8c <MPU9250_GetData+0x29c>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f98a 	bl	8000ce4 <__aeabi_fmul>
 80019d0:	4603      	mov	r3, r0
 80019d2:	492f      	ldr	r1, [pc, #188]	; (8001a90 <MPU9250_GetData+0x2a0>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff fa39 	bl	8000e4c <__aeabi_fdiv>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <MPU9250_GetData+0x2ac>)
 80019e0:	601a      	str	r2, [r3, #0]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <MPU9250_GetData+0x28c>)
 80019e4:	681c      	ldr	r4, [r3, #0]
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <MPU9250_GetData+0x2b0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f926 	bl	8000c3c <__aeabi_i2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fa28 	bl	8000e4c <__aeabi_fdiv>
 80019fc:	4603      	mov	r3, r0
 80019fe:	491e      	ldr	r1, [pc, #120]	; (8001a78 <MPU9250_GetData+0x288>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f96f 	bl	8000ce4 <__aeabi_fmul>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff f860 	bl	8000ad0 <__aeabi_fsub>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MPU9250_GetData+0x28c>)
 8001a16:	601a      	str	r2, [r3, #0]
	accelY = accelY - (accel_bias[1] / 16384.0f * 9.8f);
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <MPU9250_GetData+0x290>)
 8001a1a:	681c      	ldr	r4, [r3, #0]
 8001a1c:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <MPU9250_GetData+0x2b0>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f90b 	bl	8000c3c <__aeabi_i2f>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fa0d 	bl	8000e4c <__aeabi_fdiv>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4910      	ldr	r1, [pc, #64]	; (8001a78 <MPU9250_GetData+0x288>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f954 	bl	8000ce4 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7ff f845 	bl	8000ad0 <__aeabi_fsub>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	; (8001a80 <MPU9250_GetData+0x290>)
 8001a4c:	601a      	str	r2, [r3, #0]
	accelZ = accelZ - (accel_bias[2] / 16384.0f * 9.8f);
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <MPU9250_GetData+0x294>)
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <MPU9250_GetData+0x2b0>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f8f0 	bl	8000c3c <__aeabi_i2f>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f9f2 	bl	8000e4c <__aeabi_fdiv>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4903      	ldr	r1, [pc, #12]	; (8001a78 <MPU9250_GetData+0x288>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff f939 	bl	8000ce4 <__aeabi_fmul>
 8001a72:	e017      	b.n	8001aa4 <MPU9250_GetData+0x2b4>
 8001a74:	200000c0 	.word	0x200000c0
 8001a78:	411ccccd 	.word	0x411ccccd
 8001a7c:	20000120 	.word	0x20000120
 8001a80:	20000124 	.word	0x20000124
 8001a84:	20000128 	.word	0x20000128
 8001a88:	42830000 	.word	0x42830000
 8001a8c:	4048f5c3 	.word	0x4048f5c3
 8001a90:	43340000 	.word	0x43340000
 8001a94:	20000114 	.word	0x20000114
 8001a98:	20000118 	.word	0x20000118
 8001a9c:	2000011c 	.word	0x2000011c
 8001aa0:	20000190 	.word	0x20000190
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f811 	bl	8000ad0 <__aeabi_fsub>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <MPU9250_GetData+0x330>)
 8001ab4:	601a      	str	r2, [r3, #0]
	gyroX_filtered = filter(gyroX);
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MPU9250_GetData+0x334>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff faee 	bl	800109c <filter>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <MPU9250_GetData+0x338>)
 8001ac4:	6013      	str	r3, [r2, #0]
	gyroY_filtered = filter(gyroY);
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <MPU9250_GetData+0x33c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fae6 	bl	800109c <filter>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <MPU9250_GetData+0x340>)
 8001ad4:	6013      	str	r3, [r2, #0]
	gyroZ_filtered = filter(gyroZ);
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MPU9250_GetData+0x344>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fade 	bl	800109c <filter>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <MPU9250_GetData+0x348>)
 8001ae4:	6013      	str	r3, [r2, #0]
	accelX_filtered = filter(accelX);
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MPU9250_GetData+0x34c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fad6 	bl	800109c <filter>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <MPU9250_GetData+0x350>)
 8001af4:	6013      	str	r3, [r2, #0]
	accelY_filtered = filter(accelY);
 8001af6:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <MPU9250_GetData+0x354>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff face 	bl	800109c <filter>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a11      	ldr	r2, [pc, #68]	; (8001b48 <MPU9250_GetData+0x358>)
 8001b04:	6013      	str	r3, [r2, #0]
	accelZ_filtered = filter(accelZ);
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <MPU9250_GetData+0x330>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fac6 	bl	800109c <filter>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <MPU9250_GetData+0x35c>)
 8001b14:	6013      	str	r3, [r2, #0]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000128 	.word	0x20000128
 8001b24:	20000114 	.word	0x20000114
 8001b28:	2000012c 	.word	0x2000012c
 8001b2c:	20000118 	.word	0x20000118
 8001b30:	20000130 	.word	0x20000130
 8001b34:	2000011c 	.word	0x2000011c
 8001b38:	20000134 	.word	0x20000134
 8001b3c:	20000120 	.word	0x20000120
 8001b40:	20000138 	.word	0x20000138
 8001b44:	20000124 	.word	0x20000124
 8001b48:	2000013c 	.word	0x2000013c
 8001b4c:	20000140 	.word	0x20000140

08001b50 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <MX_CAN_Init+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b6e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001b72:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_CAN_Init+0x64>)
 8001ba0:	f001 faa2 	bl	80030e8 <HAL_CAN_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001baa:	f001 f827 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200000e4 	.word	0x200000e4
 8001bb8:	40006400 	.word	0x40006400

08001bbc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0310 	add.w	r3, r7, #16
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a24      	ldr	r2, [pc, #144]	; (8001c68 <HAL_CAN_MspInit+0xac>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d141      	bne.n	8001c60 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	4a22      	ldr	r2, [pc, #136]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001be2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001be6:	61d3      	str	r3, [r2, #28]
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <HAL_CAN_MspInit+0xb0>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4813      	ldr	r0, [pc, #76]	; (8001c70 <HAL_CAN_MspInit+0xb4>)
 8001c22:	f002 f8c5 	bl	8003db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <HAL_CAN_MspInit+0xb4>)
 8001c3c:	f002 f8b8 	bl	8003db0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2105      	movs	r1, #5
 8001c44:	2013      	movs	r0, #19
 8001c46:	f002 f812 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001c4a:	2013      	movs	r0, #19
 8001c4c:	f002 f82b 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2105      	movs	r1, #5
 8001c54:	2014      	movs	r0, #20
 8001c56:	f002 f80a 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001c5a:	2014      	movs	r0, #20
 8001c5c:	f002 f823 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001c60:	bf00      	nop
 8001c62:	3720      	adds	r7, #32
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40006400 	.word	0x40006400
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010800 	.word	0x40010800

08001c74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001c78:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <MX_FREERTOS_Init+0x28>)
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <MX_FREERTOS_Init+0x2c>)
 8001c7e:	f003 ffa3 	bl	8005bc8 <osThreadNew>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <MX_FREERTOS_Init+0x30>)
 8001c86:	6013      	str	r3, [r2, #0]

  /* creation of MPUTask */
  MPUTaskHandle = osThreadNew(StartMPUTask, NULL, &MPUTask_attributes);
 8001c88:	4a07      	ldr	r2, [pc, #28]	; (8001ca8 <MX_FREERTOS_Init+0x34>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_FREERTOS_Init+0x38>)
 8001c8e:	f003 ff9b 	bl	8005bc8 <osThreadNew>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <MX_FREERTOS_Init+0x3c>)
 8001c96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0800909c 	.word	0x0800909c
 8001ca0:	08001cb5 	.word	0x08001cb5
 8001ca4:	2000019c 	.word	0x2000019c
 8001ca8:	080090c0 	.word	0x080090c0
 8001cac:	08001cc9 	.word	0x08001cc9
 8001cb0:	200001a0 	.word	0x200001a0

08001cb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f004 f82d 	bl	8005d1c <osDelay>
 8001cc2:	e7fb      	b.n	8001cbc <StartDefaultTask+0x8>
 8001cc4:	0000      	movs	r0, r0
	...

08001cc8 <StartMPUTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMPUTask */
void StartMPUTask(void *argument)
{
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b090      	sub	sp, #64	; 0x40
 8001ccc:	af04      	add	r7, sp, #16
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMPUTask */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 10;
 8001cd0:	230a      	movs	r3, #10
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  xLastWakeTime = xTaskGetTickCount();
 8001cd4:	f005 f994 	bl	8007000 <xTaskGetTickCount>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {
	int16_t AccData[3], GyroData[3], MagData[3];
	for (int i = 0; i < 1; ++i) {
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce0:	e056      	b.n	8001d90 <StartMPUTask+0xc8>
	  MPU9250_GetData(AccData, GyroData, MagData);
 8001ce2:	f107 020c 	add.w	r2, r7, #12
 8001ce6:	f107 0114 	add.w	r1, r7, #20
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fd7e 	bl	80017f0 <MPU9250_GetData>
	  accelX_summ += accelX;
 8001cf4:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <StartMPUTask+0x1e0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6c      	ldr	r2, [pc, #432]	; (8001eac <StartMPUTask+0x1e4>)
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	4611      	mov	r1, r2
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fee8 	bl	8000ad4 <__addsf3>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b67      	ldr	r3, [pc, #412]	; (8001ea8 <StartMPUTask+0x1e0>)
 8001d0a:	601a      	str	r2, [r3, #0]
	  accelY_summ += accelY;
 8001d0c:	4b68      	ldr	r3, [pc, #416]	; (8001eb0 <StartMPUTask+0x1e8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a68      	ldr	r2, [pc, #416]	; (8001eb4 <StartMPUTask+0x1ec>)
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	4611      	mov	r1, r2
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fedc 	bl	8000ad4 <__addsf3>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b63      	ldr	r3, [pc, #396]	; (8001eb0 <StartMPUTask+0x1e8>)
 8001d22:	601a      	str	r2, [r3, #0]
	  accelZ_summ += accelZ;
 8001d24:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <StartMPUTask+0x1f0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a64      	ldr	r2, [pc, #400]	; (8001ebc <StartMPUTask+0x1f4>)
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fed0 	bl	8000ad4 <__addsf3>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <StartMPUTask+0x1f0>)
 8001d3a:	601a      	str	r2, [r3, #0]
	  gyroX_summ += gyroX;
 8001d3c:	4b60      	ldr	r3, [pc, #384]	; (8001ec0 <StartMPUTask+0x1f8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a60      	ldr	r2, [pc, #384]	; (8001ec4 <StartMPUTask+0x1fc>)
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fec4 	bl	8000ad4 <__addsf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b5b      	ldr	r3, [pc, #364]	; (8001ec0 <StartMPUTask+0x1f8>)
 8001d52:	601a      	str	r2, [r3, #0]
	  gyroY_summ += gyroY;
 8001d54:	4b5c      	ldr	r3, [pc, #368]	; (8001ec8 <StartMPUTask+0x200>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5c      	ldr	r2, [pc, #368]	; (8001ecc <StartMPUTask+0x204>)
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe feb8 	bl	8000ad4 <__addsf3>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <StartMPUTask+0x200>)
 8001d6a:	601a      	str	r2, [r3, #0]
	  gyroZ_summ += gyroZ;
 8001d6c:	4b58      	ldr	r3, [pc, #352]	; (8001ed0 <StartMPUTask+0x208>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <StartMPUTask+0x20c>)
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe feac 	bl	8000ad4 <__addsf3>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <StartMPUTask+0x208>)
 8001d82:	601a      	str	r2, [r3, #0]
	  osDelay(1);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f003 ffc9 	bl	8005d1c <osDelay>
	for (int i = 0; i < 1; ++i) {
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	dda5      	ble.n	8001ce2 <StartMPUTask+0x1a>
	}
	accelX_average = accelX_summ / 1;
 8001d96:	4b44      	ldr	r3, [pc, #272]	; (8001ea8 <StartMPUTask+0x1e0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a4f      	ldr	r2, [pc, #316]	; (8001ed8 <StartMPUTask+0x210>)
 8001d9c:	6013      	str	r3, [r2, #0]
	accelY_average = accelY_summ / 1;
 8001d9e:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <StartMPUTask+0x1e8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a4e      	ldr	r2, [pc, #312]	; (8001edc <StartMPUTask+0x214>)
 8001da4:	6013      	str	r3, [r2, #0]
	accelZ_average = accelZ_summ / 1;
 8001da6:	4b44      	ldr	r3, [pc, #272]	; (8001eb8 <StartMPUTask+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a4d      	ldr	r2, [pc, #308]	; (8001ee0 <StartMPUTask+0x218>)
 8001dac:	6013      	str	r3, [r2, #0]
	gyroX_average = gyroX_summ / 1;
 8001dae:	4b44      	ldr	r3, [pc, #272]	; (8001ec0 <StartMPUTask+0x1f8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a4c      	ldr	r2, [pc, #304]	; (8001ee4 <StartMPUTask+0x21c>)
 8001db4:	6013      	str	r3, [r2, #0]
	gyroY_average = gyroY_summ / 1;
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <StartMPUTask+0x200>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a4b      	ldr	r2, [pc, #300]	; (8001ee8 <StartMPUTask+0x220>)
 8001dbc:	6013      	str	r3, [r2, #0]
	gyroZ_average = (gyroZ_summ - 0.0245) / 1;
 8001dbe:	4b44      	ldr	r3, [pc, #272]	; (8001ed0 <StartMPUTask+0x208>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fb28 	bl	8000418 <__aeabi_f2d>
 8001dc8:	a335      	add	r3, pc, #212	; (adr r3, 8001ea0 <StartMPUTask+0x1d8>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	f7fe f9c3 	bl	8000158 <__aeabi_dsub>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe fe25 	bl	8000a28 <__aeabi_d2f>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a42      	ldr	r2, [pc, #264]	; (8001eec <StartMPUTask+0x224>)
 8001de2:	6013      	str	r3, [r2, #0]
	accelX_summ = 0;
 8001de4:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <StartMPUTask+0x1e0>)
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
	accelY_summ = 0;
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <StartMPUTask+0x1e8>)
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
	accelZ_summ = 0;
 8001df4:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <StartMPUTask+0x1f0>)
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
	gyroX_summ = 0;
 8001dfc:	4b30      	ldr	r3, [pc, #192]	; (8001ec0 <StartMPUTask+0x1f8>)
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
	gyroY_summ = 0;
 8001e04:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <StartMPUTask+0x200>)
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
	gyroZ_summ = 0;
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <StartMPUTask+0x208>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

	imu_filter(accelX_average, accelY_average, accelZ_average, gyroX_average, gyroY_average, gyroZ_average);
 8001e14:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <StartMPUTask+0x210>)
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	4b30      	ldr	r3, [pc, #192]	; (8001edc <StartMPUTask+0x214>)
 8001e1a:	6819      	ldr	r1, [r3, #0]
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <StartMPUTask+0x218>)
 8001e1e:	681c      	ldr	r4, [r3, #0]
 8001e20:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <StartMPUTask+0x21c>)
 8001e22:	681d      	ldr	r5, [r3, #0]
 8001e24:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <StartMPUTask+0x220>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a30      	ldr	r2, [pc, #192]	; (8001eec <StartMPUTask+0x224>)
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	9201      	str	r2, [sp, #4]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	462b      	mov	r3, r5
 8001e32:	4622      	mov	r2, r4
 8001e34:	f000 fad0 	bl	80023d8 <imu_filter>
	eulerAngles(q_est, &roll, &pitch, &yaw);
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <StartMPUTask+0x228>)
 8001e3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ef4 <StartMPUTask+0x22c>)
 8001e3c:	9202      	str	r2, [sp, #8]
 8001e3e:	4a2e      	ldr	r2, [pc, #184]	; (8001ef8 <StartMPUTask+0x230>)
 8001e40:	9201      	str	r2, [sp, #4]
 8001e42:	4a2e      	ldr	r2, [pc, #184]	; (8001efc <StartMPUTask+0x234>)
 8001e44:	9200      	str	r2, [sp, #0]
 8001e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e48:	f000 fce2 	bl	8002810 <eulerAngles>
	yaw_corr = yaw / 2;
 8001e4c:	4b29      	ldr	r3, [pc, #164]	; (8001ef4 <StartMPUTask+0x22c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fff9 	bl	8000e4c <__aeabi_fdiv>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <StartMPUTask+0x238>)
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <StartMPUTask+0x234>)
 8001e64:	681b      	ldr	r3, [r3, #0]
//	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderAccel, can_data, &TxMailbox) == HAL_OK) {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//		can++;
//	}
//	osDelay(1);
	memcpy(can_data, &roll, 4);
 8001e66:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <StartMPUTask+0x23c>)
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b23      	ldr	r3, [pc, #140]	; (8001ef8 <StartMPUTask+0x230>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
	memcpy(&can_data[4], &pitch, 4);
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <StartMPUTask+0x23c>)
 8001e70:	6053      	str	r3, [r2, #4]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <StartMPUTask+0x240>)
 8001e74:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <StartMPUTask+0x23c>)
 8001e76:	4925      	ldr	r1, [pc, #148]	; (8001f0c <StartMPUTask+0x244>)
 8001e78:	4825      	ldr	r0, [pc, #148]	; (8001f10 <StartMPUTask+0x248>)
 8001e7a:	f001 fb3d 	bl	80034f8 <HAL_CAN_AddTxMessage>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <StartMPUTask+0x1c4>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001e84:	2108      	movs	r1, #8
 8001e86:	4823      	ldr	r0, [pc, #140]	; (8001f14 <StartMPUTask+0x24c>)
 8001e88:	f002 f92e 	bl	80040e8 <HAL_GPIO_TogglePin>
	}
	osDelay(1);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f003 ff45 	bl	8005d1c <osDelay>
//	memcpy(can_data, &yaw, 4);
//	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//	}
//	count = HAL_GetTick();
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f004 fee3 	bl	8006c64 <vTaskDelayUntil>
  {
 8001e9e:	e71d      	b.n	8001cdc <StartMPUTask+0x14>
 8001ea0:	2b020c4a 	.word	0x2b020c4a
 8001ea4:	3f991687 	.word	0x3f991687
 8001ea8:	20000144 	.word	0x20000144
 8001eac:	20000120 	.word	0x20000120
 8001eb0:	20000148 	.word	0x20000148
 8001eb4:	20000124 	.word	0x20000124
 8001eb8:	2000014c 	.word	0x2000014c
 8001ebc:	20000128 	.word	0x20000128
 8001ec0:	2000015c 	.word	0x2000015c
 8001ec4:	20000114 	.word	0x20000114
 8001ec8:	20000160 	.word	0x20000160
 8001ecc:	20000118 	.word	0x20000118
 8001ed0:	20000164 	.word	0x20000164
 8001ed4:	2000011c 	.word	0x2000011c
 8001ed8:	20000150 	.word	0x20000150
 8001edc:	20000154 	.word	0x20000154
 8001ee0:	20000158 	.word	0x20000158
 8001ee4:	20000168 	.word	0x20000168
 8001ee8:	2000016c 	.word	0x2000016c
 8001eec:	20000170 	.word	0x20000170
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	2000017c 	.word	0x2000017c
 8001ef8:	20000178 	.word	0x20000178
 8001efc:	20000174 	.word	0x20000174
 8001f00:	20000180 	.word	0x20000180
 8001f04:	2000010c 	.word	0x2000010c
 8001f08:	20000244 	.word	0x20000244
 8001f0c:	200001cc 	.word	0x200001cc
 8001f10:	200000e4 	.word	0x200000e4
 8001f14:	40010c00 	.word	0x40010c00

08001f18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <MX_GPIO_Init+0xcc>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <MX_GPIO_Init+0xcc>)
 8001f32:	f043 0320 	orr.w	r3, r3, #32
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b2a      	ldr	r3, [pc, #168]	; (8001fe4 <MX_GPIO_Init+0xcc>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <MX_GPIO_Init+0xcc>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <MX_GPIO_Init+0xcc>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <MX_GPIO_Init+0xcc>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <MX_GPIO_Init+0xcc>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a20      	ldr	r2, [pc, #128]	; (8001fe4 <MX_GPIO_Init+0xcc>)
 8001f62:	f043 0308 	orr.w	r3, r3, #8
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <MX_GPIO_Init+0xcc>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	f248 3110 	movw	r1, #33552	; 0x8310
 8001f7a:	481b      	ldr	r0, [pc, #108]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f7c:	f002 f89c 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2118      	movs	r1, #24
 8001f84:	4819      	ldr	r0, [pc, #100]	; (8001fec <MX_GPIO_Init+0xd4>)
 8001f86:	f002 f897 	bl	80040b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_MPU_Pin;
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <MX_GPIO_Init+0xd8>)
 8001f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_MPU_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4812      	ldr	r0, [pc, #72]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f9e:	f001 ff07 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin;
 8001fa2:	f248 3310 	movw	r3, #33552	; 0x8310
 8001fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001fbc:	f001 fef8 	bl	8003db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001fc0:	2318      	movs	r3, #24
 8001fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_GPIO_Init+0xd4>)
 8001fd8:	f001 feea 	bl	8003db0 <HAL_GPIO_Init>

}
 8001fdc:	bf00      	nop
 8001fde:	3720      	adds	r7, #32
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010800 	.word	0x40010800
 8001fec:	40010c00 	.word	0x40010c00
 8001ff0:	10110000 	.word	0x10110000

08001ff4 <quat_scalar>:

// Multiply two quaternions and return a copy of the result, prod = L * R
struct quaternion quat_mult (struct quaternion q_L, struct quaternion q_R);

// Multiply a reference of a quaternion by a scalar, q = s*q
static inline void quat_scalar(struct quaternion * q, float scalar){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    q -> q1 *= scalar;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fe6d 	bl	8000ce4 <__aeabi_fmul>
 800200a:	4603      	mov	r3, r0
 800200c:	461a      	mov	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	601a      	str	r2, [r3, #0]
    q -> q2 *= scalar;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	6839      	ldr	r1, [r7, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fe63 	bl	8000ce4 <__aeabi_fmul>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	605a      	str	r2, [r3, #4]
    q -> q3 *= scalar;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	6839      	ldr	r1, [r7, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fe59 	bl	8000ce4 <__aeabi_fmul>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	609a      	str	r2, [r3, #8]
    q -> q4 *= scalar;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	6839      	ldr	r1, [r7, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fe4f 	bl	8000ce4 <__aeabi_fmul>
 8002046:	4603      	mov	r3, r0
 8002048:	461a      	mov	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60da      	str	r2, [r3, #12]
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <quat_add>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
static inline void quat_add(struct quaternion * Sum, struct quaternion L, struct quaternion R){
 8002056:	b084      	sub	sp, #16
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	f107 0014 	add.w	r0, r7, #20
 8002064:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Sum -> q1 = L.q1 + R.q1;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206c:	4611      	mov	r1, r2
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fd30 	bl	8000ad4 <__addsf3>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	601a      	str	r2, [r3, #0]
    Sum -> q2 = L.q2 + R.q2;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002080:	4611      	mov	r1, r2
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fd26 	bl	8000ad4 <__addsf3>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	605a      	str	r2, [r3, #4]
    Sum -> q3 = L.q3 + R.q3;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002094:	4611      	mov	r1, r2
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fd1c 	bl	8000ad4 <__addsf3>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]
    Sum -> q4 = L.q4 + R.q4;
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fd12 	bl	8000ad4 <__addsf3>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	60da      	str	r2, [r3, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020c2:	b004      	add	sp, #16
 80020c4:	4770      	bx	lr

080020c6 <quat_sub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
static inline void quat_sub(struct quaternion * Sum, struct quaternion L, struct quaternion R){
 80020c6:	b084      	sub	sp, #16
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	f107 0014 	add.w	r0, r7, #20
 80020d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    Sum -> q1 = L.q1 - R.q1;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020dc:	4611      	mov	r1, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fcf6 	bl	8000ad0 <__aeabi_fsub>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	601a      	str	r2, [r3, #0]
    Sum -> q2 = L.q2 - R.q2;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fcec 	bl	8000ad0 <__aeabi_fsub>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	605a      	str	r2, [r3, #4]
    Sum -> q3 = L.q3 - R.q3;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fce2 	bl	8000ad0 <__aeabi_fsub>
 800210c:	4603      	mov	r3, r0
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
    Sum -> q4 = L.q4 - R.q4;
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fcd8 	bl	8000ad0 <__aeabi_fsub>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002132:	b004      	add	sp, #16
 8002134:	4770      	bx	lr

08002136 <quat_Norm>:

// norm of a quaternion is the same as a complex number
// sqrt( q1^2 + q2^2 + q3^2 + q4^2)
// the norm is also the sqrt(q * conjugate(q)), but thats a lot of operations in the quaternion multiplication
static inline float quat_Norm (struct quaternion q)
{
 8002136:	b590      	push	{r4, r7, lr}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	463c      	mov	r4, r7
 800213e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return sqrt(q.q1*q.q1 + q.q2*q.q2 + q.q3*q.q3 +q.q4*q.q4);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fdcb 	bl	8000ce4 <__aeabi_fmul>
 800214e:	4603      	mov	r3, r0
 8002150:	461c      	mov	r4, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fdc3 	bl	8000ce4 <__aeabi_fmul>
 800215e:	4603      	mov	r3, r0
 8002160:	4619      	mov	r1, r3
 8002162:	4620      	mov	r0, r4
 8002164:	f7fe fcb6 	bl	8000ad4 <__addsf3>
 8002168:	4603      	mov	r3, r0
 800216a:	461c      	mov	r4, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	4611      	mov	r1, r2
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fdb6 	bl	8000ce4 <__aeabi_fmul>
 8002178:	4603      	mov	r3, r0
 800217a:	4619      	mov	r1, r3
 800217c:	4620      	mov	r0, r4
 800217e:	f7fe fca9 	bl	8000ad4 <__addsf3>
 8002182:	4603      	mov	r3, r0
 8002184:	461c      	mov	r4, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fda9 	bl	8000ce4 <__aeabi_fmul>
 8002192:	4603      	mov	r3, r0
 8002194:	4619      	mov	r1, r3
 8002196:	4620      	mov	r0, r4
 8002198:	f7fe fc9c 	bl	8000ad4 <__addsf3>
 800219c:	4603      	mov	r3, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe f93a 	bl	8000418 <__aeabi_f2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f006 fa26 	bl	80085fc <sqrt>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fc36 	bl	8000a28 <__aeabi_d2f>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd90      	pop	{r4, r7, pc}

080021c6 <quat_Normalization>:

// Normalizes pointer q by calling quat_Norm(q),
static inline void quat_Normalization(struct quaternion * q){
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
    float norm = quat_Norm(*q);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d2:	f7ff ffb0 	bl	8002136 <quat_Norm>
 80021d6:	60f8      	str	r0, [r7, #12]
    q -> q1 /= norm;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fe34 	bl	8000e4c <__aeabi_fdiv>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	601a      	str	r2, [r3, #0]
    q -> q2 /= norm;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fe2a 	bl	8000e4c <__aeabi_fdiv>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	605a      	str	r2, [r3, #4]
    q -> q3 /= norm;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe fe20 	bl	8000e4c <__aeabi_fdiv>
 800220c:	4603      	mov	r3, r0
 800220e:	461a      	mov	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	609a      	str	r2, [r3, #8]
    q -> q4 /= norm;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	68f9      	ldr	r1, [r7, #12]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fe16 	bl	8000e4c <__aeabi_fdiv>
 8002220:	4603      	mov	r3, r0
 8002222:	461a      	mov	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <quat_mult>:

#include "madgwickFilter.h"

struct quaternion q_est = { 1, 0, 0, 0};       // initialize with as unit vector with real component  = 1

struct quaternion quat_mult (struct quaternion L, struct quaternion R){
 8002230:	b084      	sub	sp, #16
 8002232:	b590      	push	{r4, r7, lr}
 8002234:	b087      	sub	sp, #28
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800223e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    
    
    struct quaternion product;
    product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fd4b 	bl	8000ce4 <__aeabi_fmul>
 800224e:	4603      	mov	r3, r0
 8002250:	461c      	mov	r4, r3
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fd43 	bl	8000ce4 <__aeabi_fmul>
 800225e:	4603      	mov	r3, r0
 8002260:	4619      	mov	r1, r3
 8002262:	4620      	mov	r0, r4
 8002264:	f7fe fc34 	bl	8000ad0 <__aeabi_fsub>
 8002268:	4603      	mov	r3, r0
 800226a:	461c      	mov	r4, r3
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe fd36 	bl	8000ce4 <__aeabi_fmul>
 8002278:	4603      	mov	r3, r0
 800227a:	4619      	mov	r1, r3
 800227c:	4620      	mov	r0, r4
 800227e:	f7fe fc27 	bl	8000ad0 <__aeabi_fsub>
 8002282:	4603      	mov	r3, r0
 8002284:	461c      	mov	r4, r3
 8002286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fd29 	bl	8000ce4 <__aeabi_fmul>
 8002292:	4603      	mov	r3, r0
 8002294:	4619      	mov	r1, r3
 8002296:	4620      	mov	r0, r4
 8002298:	f7fe fc1a 	bl	8000ad0 <__aeabi_fsub>
 800229c:	4603      	mov	r3, r0
 800229e:	60bb      	str	r3, [r7, #8]
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fd1c 	bl	8000ce4 <__aeabi_fmul>
 80022ac:	4603      	mov	r3, r0
 80022ae:	461c      	mov	r4, r3
 80022b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fd14 	bl	8000ce4 <__aeabi_fmul>
 80022bc:	4603      	mov	r3, r0
 80022be:	4619      	mov	r1, r3
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7fe fc07 	bl	8000ad4 <__addsf3>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461c      	mov	r4, r3
 80022ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fd07 	bl	8000ce4 <__aeabi_fmul>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4619      	mov	r1, r3
 80022da:	4620      	mov	r0, r4
 80022dc:	f7fe fbfa 	bl	8000ad4 <__addsf3>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461c      	mov	r4, r3
 80022e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fcfa 	bl	8000ce4 <__aeabi_fmul>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4619      	mov	r1, r3
 80022f4:	4620      	mov	r0, r4
 80022f6:	f7fe fbeb 	bl	8000ad0 <__aeabi_fsub>
 80022fa:	4603      	mov	r3, r0
 80022fc:	60fb      	str	r3, [r7, #12]
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fced 	bl	8000ce4 <__aeabi_fmul>
 800230a:	4603      	mov	r3, r0
 800230c:	461c      	mov	r4, r3
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fce5 	bl	8000ce4 <__aeabi_fmul>
 800231a:	4603      	mov	r3, r0
 800231c:	4619      	mov	r1, r3
 800231e:	4620      	mov	r0, r4
 8002320:	f7fe fbd6 	bl	8000ad0 <__aeabi_fsub>
 8002324:	4603      	mov	r3, r0
 8002326:	461c      	mov	r4, r3
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fcd8 	bl	8000ce4 <__aeabi_fmul>
 8002334:	4603      	mov	r3, r0
 8002336:	4619      	mov	r1, r3
 8002338:	4620      	mov	r0, r4
 800233a:	f7fe fbcb 	bl	8000ad4 <__addsf3>
 800233e:	4603      	mov	r3, r0
 8002340:	461c      	mov	r4, r3
 8002342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002344:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe fccb 	bl	8000ce4 <__aeabi_fmul>
 800234e:	4603      	mov	r3, r0
 8002350:	4619      	mov	r1, r3
 8002352:	4620      	mov	r0, r4
 8002354:	f7fe fbbe 	bl	8000ad4 <__addsf3>
 8002358:	4603      	mov	r3, r0
 800235a:	613b      	str	r3, [r7, #16]
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fcbe 	bl	8000ce4 <__aeabi_fmul>
 8002368:	4603      	mov	r3, r0
 800236a:	461c      	mov	r4, r3
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fcb6 	bl	8000ce4 <__aeabi_fmul>
 8002378:	4603      	mov	r3, r0
 800237a:	4619      	mov	r1, r3
 800237c:	4620      	mov	r0, r4
 800237e:	f7fe fba9 	bl	8000ad4 <__addsf3>
 8002382:	4603      	mov	r3, r0
 8002384:	461c      	mov	r4, r3
 8002386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fca9 	bl	8000ce4 <__aeabi_fmul>
 8002392:	4603      	mov	r3, r0
 8002394:	4619      	mov	r1, r3
 8002396:	4620      	mov	r0, r4
 8002398:	f7fe fb9a 	bl	8000ad0 <__aeabi_fsub>
 800239c:	4603      	mov	r3, r0
 800239e:	461c      	mov	r4, r3
 80023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fc9c 	bl	8000ce4 <__aeabi_fmul>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4619      	mov	r1, r3
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7fe fb8f 	bl	8000ad4 <__addsf3>
 80023b6:	4603      	mov	r3, r0
 80023b8:	617b      	str	r3, [r7, #20]
    
    return product;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	461c      	mov	r4, r3
 80023be:	f107 0308 	add.w	r3, r7, #8
 80023c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80023d2:	b004      	add	sp, #16
 80023d4:	4770      	bx	lr
	...

080023d8 <imu_filter>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void imu_filter(float ax, float ay, float az, float gx, float gy, float gz){
 80023d8:	b5b0      	push	{r4, r5, r7, lr}
 80023da:	b0b2      	sub	sp, #200	; 0xc8
 80023dc:	af06      	add	r7, sp, #24
 80023de:	61f8      	str	r0, [r7, #28]
 80023e0:	61b9      	str	r1, [r7, #24]
 80023e2:	617a      	str	r2, [r7, #20]
 80023e4:	613b      	str	r3, [r7, #16]
    
    //Variables and constants
    struct quaternion q_est_prev = q_est;
 80023e6:	4bb7      	ldr	r3, [pc, #732]	; (80026c4 <imu_filter+0x2ec>)
 80023e8:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80023ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0};            // used as a place holder in equations 42 and 43
 80023f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    
    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 800241a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                     // jacobian matrix for gravity
 8002426:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800242a:	2230      	movs	r2, #48	; 0x30
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f006 fd44 	bl	8008ebc <memset>
    
    struct quaternion gradient = {0};
 8002434:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
    
    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.q1 = 0;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    q_w.q2 = gx;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
    q_w.q3 = gy;
 800244c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002450:	62fb      	str	r3, [r7, #44]	; 0x2c
    q_w.q4 = gz;
 8002452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002456:	633b      	str	r3, [r7, #48]	; 0x30
    
    quat_scalar(&q_w, 0.5);                  // equation (12) dq/dt = (1/2)q*w
 8002458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800245c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fdc7 	bl	8001ff4 <quat_scalar>
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 8002466:	463d      	mov	r5, r7
 8002468:	ac01      	add	r4, sp, #4
 800246a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002474:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800247e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002480:	4628      	mov	r0, r5
 8002482:	f7ff fed5 	bl	8002230 <quat_mult>
 8002486:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800248a:	463b      	mov	r3, r7
 800248c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800248e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     The matrix multiplcation can also be done hard coded to reduce code.
     
     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */
    
    quat_Normalization(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 8002492:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fe95 	bl	80021c6 <quat_Normalization>
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 800249c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fc1c 	bl	8000ce4 <__aeabi_fmul>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461c      	mov	r4, r3
 80024b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024b4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fc12 	bl	8000ce4 <__aeabi_fmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7fe fb03 	bl	8000ad0 <__aeabi_fsub>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4619      	mov	r1, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fb00 	bl	8000ad4 <__addsf3>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f7fe faf6 	bl	8000ad0 <__aeabi_fsub>
 80024e4:	4603      	mov	r3, r0
 80024e6:	677b      	str	r3, [r7, #116]	; 0x74
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 80024e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fbf6 	bl	8000ce4 <__aeabi_fmul>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461c      	mov	r4, r3
 80024fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002500:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fbec 	bl	8000ce4 <__aeabi_fmul>
 800250c:	4603      	mov	r3, r0
 800250e:	4619      	mov	r1, r3
 8002510:	4620      	mov	r0, r4
 8002512:	f7fe fadf 	bl	8000ad4 <__addsf3>
 8002516:	4603      	mov	r3, r0
 8002518:	4619      	mov	r1, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fada 	bl	8000ad4 <__addsf3>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f7fe fad0 	bl	8000ad0 <__aeabi_fsub>
 8002530:	4603      	mov	r3, r0
 8002532:	67bb      	str	r3, [r7, #120]	; 0x78
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8002534:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002538:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fbd0 	bl	8000ce4 <__aeabi_fmul>
 8002544:	4603      	mov	r3, r0
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd ff66 	bl	8000418 <__aeabi_f2d>
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	f04f 0000 	mov.w	r0, #0
 8002554:	495c      	ldr	r1, [pc, #368]	; (80026c8 <imu_filter+0x2f0>)
 8002556:	f7fd fdff 	bl	8000158 <__aeabi_dsub>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4614      	mov	r4, r2
 8002560:	461d      	mov	r5, r3
 8002562:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fbb9 	bl	8000ce4 <__aeabi_fmul>
 8002572:	4603      	mov	r3, r0
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ff4f 	bl	8000418 <__aeabi_f2d>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4620      	mov	r0, r4
 8002580:	4629      	mov	r1, r5
 8002582:	f7fd fde9 	bl	8000158 <__aeabi_dsub>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	f7fd fde3 	bl	800015c <__adddf3>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4614      	mov	r4, r2
 800259c:	461d      	mov	r5, r3
 800259e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ff38 	bl	8000418 <__aeabi_f2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4620      	mov	r0, r4
 80025ae:	4629      	mov	r1, r5
 80025b0:	f7fd fdd2 	bl	8000158 <__aeabi_dsub>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f7fe fa34 	bl	8000a28 <__aeabi_d2f>
 80025c0:	4603      	mov	r3, r0
 80025c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
 80025c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025c8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fb89 	bl	8000ce4 <__aeabi_fmul>
 80025d2:	4603      	mov	r3, r0
 80025d4:	647b      	str	r3, [r7, #68]	; 0x44
    J_g[0][1] =  2 * q_est_prev.q4;
 80025d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025da:	4619      	mov	r1, r3
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fa79 	bl	8000ad4 <__addsf3>
 80025e2:	4603      	mov	r3, r0
 80025e4:	64bb      	str	r3, [r7, #72]	; 0x48
    J_g[0][2] = -2 * q_est_prev.q1;
 80025e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025ea:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fb78 	bl	8000ce4 <__aeabi_fmul>
 80025f4:	4603      	mov	r3, r0
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    J_g[0][3] =  2 * q_est_prev.q2;
 80025f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fa68 	bl	8000ad4 <__addsf3>
 8002604:	4603      	mov	r3, r0
 8002606:	653b      	str	r3, [r7, #80]	; 0x50
    
    J_g[1][0] = 2 * q_est_prev.q2;
 8002608:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800260c:	4619      	mov	r1, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fa60 	bl	8000ad4 <__addsf3>
 8002614:	4603      	mov	r3, r0
 8002616:	657b      	str	r3, [r7, #84]	; 0x54
    J_g[1][1] = 2 * q_est_prev.q1;
 8002618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800261c:	4619      	mov	r1, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fa58 	bl	8000ad4 <__addsf3>
 8002624:	4603      	mov	r3, r0
 8002626:	65bb      	str	r3, [r7, #88]	; 0x58
    J_g[1][2] = 2 * q_est_prev.q4;
 8002628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800262c:	4619      	mov	r1, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fa50 	bl	8000ad4 <__addsf3>
 8002634:	4603      	mov	r3, r0
 8002636:	65fb      	str	r3, [r7, #92]	; 0x5c
    J_g[1][3] = 2 * q_est_prev.q3;
 8002638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800263c:	4619      	mov	r1, r3
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fa48 	bl	8000ad4 <__addsf3>
 8002644:	4603      	mov	r3, r0
 8002646:	663b      	str	r3, [r7, #96]	; 0x60
    
    J_g[2][0] = 0;
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	667b      	str	r3, [r7, #100]	; 0x64
    J_g[2][1] = -4 * q_est_prev.q2;
 800264e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002652:	491e      	ldr	r1, [pc, #120]	; (80026cc <imu_filter+0x2f4>)
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fb45 	bl	8000ce4 <__aeabi_fmul>
 800265a:	4603      	mov	r3, r0
 800265c:	66bb      	str	r3, [r7, #104]	; 0x68
    J_g[2][2] = -4 * q_est_prev.q3;
 800265e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002662:	491a      	ldr	r1, [pc, #104]	; (80026cc <imu_filter+0x2f4>)
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe fb3d 	bl	8000ce4 <__aeabi_fmul>
 800266a:	4603      	mov	r3, r0
 800266c:	66fb      	str	r3, [r7, #108]	; 0x6c
    J_g[2][3] = 0;
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	673b      	str	r3, [r7, #112]	; 0x70
    
    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fb32 	bl	8000ce4 <__aeabi_fmul>
 8002680:	4603      	mov	r3, r0
 8002682:	461c      	mov	r4, r3
 8002684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002686:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fb2a 	bl	8000ce4 <__aeabi_fmul>
 8002690:	4603      	mov	r3, r0
 8002692:	4619      	mov	r1, r3
 8002694:	4620      	mov	r0, r4
 8002696:	f7fe fa1d 	bl	8000ad4 <__addsf3>
 800269a:	4603      	mov	r3, r0
 800269c:	461c      	mov	r4, r3
 800269e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fb1d 	bl	8000ce4 <__aeabi_fmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4619      	mov	r1, r3
 80026ae:	4620      	mov	r0, r4
 80026b0:	f7fe fa10 	bl	8000ad4 <__addsf3>
 80026b4:	4603      	mov	r3, r0
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	e006      	b.n	80026d0 <imu_filter+0x2f8>
 80026c2:	bf00      	nop
 80026c4:	20000008 	.word	0x20000008
 80026c8:	3fe00000 	.word	0x3fe00000
 80026cc:	c0800000 	.word	0xc0800000
 80026d0:	f7fe fb08 	bl	8000ce4 <__aeabi_fmul>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461c      	mov	r4, r3
 80026d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fb00 	bl	8000ce4 <__aeabi_fmul>
 80026e4:	4603      	mov	r3, r0
 80026e6:	4619      	mov	r1, r3
 80026e8:	4620      	mov	r0, r4
 80026ea:	f7fe f9f3 	bl	8000ad4 <__addsf3>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461c      	mov	r4, r3
 80026f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe faf3 	bl	8000ce4 <__aeabi_fmul>
 80026fe:	4603      	mov	r3, r0
 8002700:	4619      	mov	r1, r3
 8002702:	4620      	mov	r0, r4
 8002704:	f7fe f9e6 	bl	8000ad4 <__addsf3>
 8002708:	4603      	mov	r3, r0
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 800270c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800270e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fae6 	bl	8000ce4 <__aeabi_fmul>
 8002718:	4603      	mov	r3, r0
 800271a:	461c      	mov	r4, r3
 800271c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800271e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002720:	4611      	mov	r1, r2
 8002722:	4618      	mov	r0, r3
 8002724:	f7fe fade 	bl	8000ce4 <__aeabi_fmul>
 8002728:	4603      	mov	r3, r0
 800272a:	4619      	mov	r1, r3
 800272c:	4620      	mov	r0, r4
 800272e:	f7fe f9d1 	bl	8000ad4 <__addsf3>
 8002732:	4603      	mov	r3, r0
 8002734:	461c      	mov	r4, r3
 8002736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002738:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fad1 	bl	8000ce4 <__aeabi_fmul>
 8002742:	4603      	mov	r3, r0
 8002744:	4619      	mov	r1, r3
 8002746:	4620      	mov	r0, r4
 8002748:	f7fe f9c4 	bl	8000ad4 <__addsf3>
 800274c:	4603      	mov	r3, r0
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8002750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002752:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fac4 	bl	8000ce4 <__aeabi_fmul>
 800275c:	4603      	mov	r3, r0
 800275e:	461c      	mov	r4, r3
 8002760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002762:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fabc 	bl	8000ce4 <__aeabi_fmul>
 800276c:	4603      	mov	r3, r0
 800276e:	4619      	mov	r1, r3
 8002770:	4620      	mov	r0, r4
 8002772:	f7fe f9af 	bl	8000ad4 <__addsf3>
 8002776:	4603      	mov	r3, r0
 8002778:	461c      	mov	r4, r3
 800277a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800277c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe faaf 	bl	8000ce4 <__aeabi_fmul>
 8002786:	4603      	mov	r3, r0
 8002788:	4619      	mov	r1, r3
 800278a:	4620      	mov	r0, r4
 800278c:	f7fe f9a2 	bl	8000ad4 <__addsf3>
 8002790:	4603      	mov	r3, r0
 8002792:	643b      	str	r3, [r7, #64]	; 0x40
    
    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 8002794:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fd14 	bl	80021c6 <quat_Normalization>
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    quat_scalar(&gradient, BETA);             // multiply normalized gradient by beta
 800279e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027a2:	4918      	ldr	r1, [pc, #96]	; (8002804 <imu_filter+0x42c>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fc25 	bl	8001ff4 <quat_scalar>
    quat_sub(&q_est_dot, q_w, gradient);        // subtract above from q_w, the integrated gyro quaternion
 80027aa:	f107 0590 	add.w	r5, r7, #144	; 0x90
 80027ae:	ac01      	add	r4, sp, #4
 80027b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027c4:	4628      	mov	r0, r5
 80027c6:	f7ff fc7e 	bl	80020c6 <quat_sub>
    quat_scalar(&q_est_dot, DELTA_T);
 80027ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027ce:	490e      	ldr	r1, [pc, #56]	; (8002808 <imu_filter+0x430>)
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fc0f 	bl	8001ff4 <quat_scalar>
    quat_add(&q_est, q_est_prev, q_est_dot);     // Integrate orientation rate to find position
 80027d6:	ac01      	add	r4, sp, #4
 80027d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80027dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ee:	4807      	ldr	r0, [pc, #28]	; (800280c <imu_filter+0x434>)
 80027f0:	f7ff fc31 	bl	8002056 <quat_add>
    quat_Normalization(&q_est);                 // normalize the orientation of the estimate
 80027f4:	4805      	ldr	r0, [pc, #20]	; (800280c <imu_filter+0x434>)
 80027f6:	f7ff fce6 	bl	80021c6 <quat_Normalization>
                                                //(shown in diagram, plus always use unit quaternions for orientation)
   
}
 80027fa:	bf00      	nop
 80027fc:	37b0      	adds	r7, #176	; 0xb0
 80027fe:	46bd      	mov	sp, r7
 8002800:	bdb0      	pop	{r4, r5, r7, pc}
 8002802:	bf00      	nop
 8002804:	3d9ac70e 	.word	0x3d9ac70e
 8002808:	3ba3d70a 	.word	0x3ba3d70a
 800280c:	20000008 	.word	0x20000008

08002810 <eulerAngles>:
 Assume right hand system
 Roll is about the x axis, represented as phi
 Pitch is about the y axis, represented as theta
 Yaw is about the z axis, represented as psi (trident looking greek symbol)
 */
void eulerAngles(struct quaternion q, float* roll, float* pitch, float* yaw){
 8002810:	b5b0      	push	{r4, r5, r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	463c      	mov	r4, r7
 8002818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    *yaw = atan2f((2*q.q2*q.q3 - 2*q.q1*q.q4), (2*q.q1*q.q1 + 2*q.q2*q.q2 -1));  // equation (7)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4619      	mov	r1, r3
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe f957 	bl	8000ad4 <__addsf3>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f7fe fa58 	bl	8000ce4 <__aeabi_fmul>
 8002834:	4603      	mov	r3, r0
 8002836:	461c      	mov	r4, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4619      	mov	r1, r3
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe f949 	bl	8000ad4 <__addsf3>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f7fe fa4a 	bl	8000ce4 <__aeabi_fmul>
 8002850:	4603      	mov	r3, r0
 8002852:	4619      	mov	r1, r3
 8002854:	4620      	mov	r0, r4
 8002856:	f7fe f93b 	bl	8000ad0 <__aeabi_fsub>
 800285a:	4603      	mov	r3, r0
 800285c:	461c      	mov	r4, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe f936 	bl	8000ad4 <__addsf3>
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7fe fa37 	bl	8000ce4 <__aeabi_fmul>
 8002876:	4603      	mov	r3, r0
 8002878:	461d      	mov	r5, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4619      	mov	r1, r3
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f928 	bl	8000ad4 <__addsf3>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4619      	mov	r1, r3
 800288c:	4610      	mov	r0, r2
 800288e:	f7fe fa29 	bl	8000ce4 <__aeabi_fmul>
 8002892:	4603      	mov	r3, r0
 8002894:	4619      	mov	r1, r3
 8002896:	4628      	mov	r0, r5
 8002898:	f7fe f91c 	bl	8000ad4 <__addsf3>
 800289c:	4603      	mov	r3, r0
 800289e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f914 	bl	8000ad0 <__aeabi_fsub>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4619      	mov	r1, r3
 80028ac:	4620      	mov	r0, r4
 80028ae:	f005 fee9 	bl	8008684 <atan2f>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	601a      	str	r2, [r3, #0]
    *pitch = -asinf(2*q.q2*q.q4 + 2*q.q1*q.q3);                                  // equatino (8)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe f909 	bl	8000ad4 <__addsf3>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f7fe fa0a 	bl	8000ce4 <__aeabi_fmul>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461c      	mov	r4, r3
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4619      	mov	r1, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fe f8fb 	bl	8000ad4 <__addsf3>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f7fe f9fc 	bl	8000ce4 <__aeabi_fmul>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4619      	mov	r1, r3
 80028f0:	4620      	mov	r0, r4
 80028f2:	f7fe f8ef 	bl	8000ad4 <__addsf3>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f005 fea3 	bl	8008644 <asinf>
 80028fe:	4603      	mov	r3, r0
 8002900:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	601a      	str	r2, [r3, #0]
    *roll  = atan2f((2*q.q3*q.q4 - 2*q.q1*q.q2), (2*q.q1*q.q1 + 2*q.q4*q.q4 -1));
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4619      	mov	r1, r3
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe f8e1 	bl	8000ad4 <__addsf3>
 8002912:	4603      	mov	r3, r0
 8002914:	461a      	mov	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4619      	mov	r1, r3
 800291a:	4610      	mov	r0, r2
 800291c:	f7fe f9e2 	bl	8000ce4 <__aeabi_fmul>
 8002920:	4603      	mov	r3, r0
 8002922:	461c      	mov	r4, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe f8d3 	bl	8000ad4 <__addsf3>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4619      	mov	r1, r3
 8002936:	4610      	mov	r0, r2
 8002938:	f7fe f9d4 	bl	8000ce4 <__aeabi_fmul>
 800293c:	4603      	mov	r3, r0
 800293e:	4619      	mov	r1, r3
 8002940:	4620      	mov	r0, r4
 8002942:	f7fe f8c5 	bl	8000ad0 <__aeabi_fsub>
 8002946:	4603      	mov	r3, r0
 8002948:	461c      	mov	r4, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe f8c0 	bl	8000ad4 <__addsf3>
 8002954:	4603      	mov	r3, r0
 8002956:	461a      	mov	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f7fe f9c1 	bl	8000ce4 <__aeabi_fmul>
 8002962:	4603      	mov	r3, r0
 8002964:	461d      	mov	r5, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4619      	mov	r1, r3
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe f8b2 	bl	8000ad4 <__addsf3>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f7fe f9b3 	bl	8000ce4 <__aeabi_fmul>
 800297e:	4603      	mov	r3, r0
 8002980:	4619      	mov	r1, r3
 8002982:	4628      	mov	r0, r5
 8002984:	f7fe f8a6 	bl	8000ad4 <__addsf3>
 8002988:	4603      	mov	r3, r0
 800298a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe f89e 	bl	8000ad0 <__aeabi_fsub>
 8002994:	4603      	mov	r3, r0
 8002996:	4619      	mov	r1, r3
 8002998:	4620      	mov	r0, r4
 800299a:	f005 fe73 	bl	8008684 <atan2f>
 800299e:	4602      	mov	r2, r0
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	601a      	str	r2, [r3, #0]
    
    *yaw *= (180.0f / PI);
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	490f      	ldr	r1, [pc, #60]	; (80029e8 <eulerAngles+0x1d8>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f99a 	bl	8000ce4 <__aeabi_fmul>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b6:	601a      	str	r2, [r3, #0]
    *pitch *= (180.0f / PI);
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	490a      	ldr	r1, [pc, #40]	; (80029e8 <eulerAngles+0x1d8>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe f990 	bl	8000ce4 <__aeabi_fmul>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	601a      	str	r2, [r3, #0]
    *roll *= (180.0f / PI);
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4905      	ldr	r1, [pc, #20]	; (80029e8 <eulerAngles+0x1d8>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe f986 	bl	8000ce4 <__aeabi_fmul>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	601a      	str	r2, [r3, #0]

}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bdb0      	pop	{r4, r5, r7, pc}
 80029e8:	42652ee0 	.word	0x42652ee0

080029ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();////
 80029f2:	f000 fb23 	bl	800303c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029f6:	f000 f8ad 	bl	8002b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029fa:	f7ff fa8d 	bl	8001f18 <MX_GPIO_Init>
  MX_CAN_Init();
 80029fe:	f7ff f8a7 	bl	8001b50 <MX_CAN_Init>
  MX_SPI1_Init();
 8002a02:	f000 f901 	bl	8002c08 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002a06:	f000 f935 	bl	8002c74 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 5; ++i) {
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	e002      	b.n	8002a16 <main+0x2a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3301      	adds	r3, #1
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	ddf9      	ble.n	8002a10 <main+0x24>
//	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
//	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
	//HAL_Delay(500);
  }
  MPU9250_calibrate();
 8002a1c:	f7fe fd44 	bl	80014a8 <MPU9250_calibrate>
  HAL_Delay(2000);
 8002a20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a24:	f000 fb3c 	bl	80030a0 <HAL_Delay>
  MPU9250_Init();
 8002a28:	f7fe fcb6 	bl	8001398 <MPU9250_Init>
  HAL_Delay(500);
 8002a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a30:	f000 fb36 	bl	80030a0 <HAL_Delay>

  TxHeaderRoll.StdId = headerIdRoll;
 8002a34:	2211      	movs	r2, #17
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <main+0x14c>)
 8002a38:	601a      	str	r2, [r3, #0]
  TxHeaderRoll.ExtId = 0;
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <main+0x14c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	605a      	str	r2, [r3, #4]
  TxHeaderRoll.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002a40:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <main+0x14c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
  TxHeaderRoll.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002a46:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <main+0x14c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  TxHeaderRoll.DLC = 8;
 8002a4c:	4b3a      	ldr	r3, [pc, #232]	; (8002b38 <main+0x14c>)
 8002a4e:	2208      	movs	r2, #8
 8002a50:	611a      	str	r2, [r3, #16]
  TxHeaderRoll.TransmitGlobalTime = 0;
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <main+0x14c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	751a      	strb	r2, [r3, #20]

  TxHeaderPitch.StdId = headerIdPitch;
 8002a58:	2212      	movs	r2, #18
 8002a5a:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <main+0x150>)
 8002a5c:	601a      	str	r2, [r3, #0]
  TxHeaderPitch.ExtId = 0;
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <main+0x150>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
  TxHeaderPitch.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <main+0x150>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  TxHeaderPitch.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <main+0x150>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  TxHeaderPitch.DLC = 4;
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <main+0x150>)
 8002a72:	2204      	movs	r2, #4
 8002a74:	611a      	str	r2, [r3, #16]
  TxHeaderPitch.TransmitGlobalTime = 0;
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <main+0x150>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	751a      	strb	r2, [r3, #20]

  TxHeaderYaw.StdId = headerIdYaw;
 8002a7c:	2213      	movs	r2, #19
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <main+0x154>)
 8002a80:	601a      	str	r2, [r3, #0]
  TxHeaderYaw.ExtId = 0;
 8002a82:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <main+0x154>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	605a      	str	r2, [r3, #4]
  TxHeaderYaw.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002a88:	4b2d      	ldr	r3, [pc, #180]	; (8002b40 <main+0x154>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  TxHeaderYaw.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <main+0x154>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
  TxHeaderYaw.DLC = 4;
 8002a94:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <main+0x154>)
 8002a96:	2204      	movs	r2, #4
 8002a98:	611a      	str	r2, [r3, #16]
  TxHeaderYaw.TransmitGlobalTime = 0;
 8002a9a:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <main+0x154>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	751a      	strb	r2, [r3, #20]

  TxHeaderAccel.StdId = headerIdAccel;
 8002aa0:	2214      	movs	r2, #20
 8002aa2:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <main+0x158>)
 8002aa4:	601a      	str	r2, [r3, #0]
  TxHeaderAccel.ExtId = 0;
 8002aa6:	4b27      	ldr	r3, [pc, #156]	; (8002b44 <main+0x158>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  TxHeaderAccel.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <main+0x158>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	60da      	str	r2, [r3, #12]
  TxHeaderAccel.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <main+0x158>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  TxHeaderAccel.DLC = 6;
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <main+0x158>)
 8002aba:	2206      	movs	r2, #6
 8002abc:	611a      	str	r2, [r3, #16]
  TxHeaderAccel.TransmitGlobalTime = 0;
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <main+0x158>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	751a      	strb	r2, [r3, #20]

  TxHeaderGyro.StdId = headerIdGyro;
 8002ac4:	2215      	movs	r2, #21
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <main+0x15c>)
 8002ac8:	601a      	str	r2, [r3, #0]
  TxHeaderGyro.ExtId = 0;
 8002aca:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <main+0x15c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
  TxHeaderGyro.RTR = CAN_RTR_DATA; //CAN_RTR_REMOTE
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <main+0x15c>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
  TxHeaderGyro.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <main+0x15c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  TxHeaderGyro.DLC = 6;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <main+0x15c>)
 8002ade:	2206      	movs	r2, #6
 8002ae0:	611a      	str	r2, [r3, #16]
  TxHeaderGyro.TransmitGlobalTime = 0;
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <main+0x15c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	751a      	strb	r2, [r3, #20]

  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <main+0x160>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0;
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <main+0x160>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8002af4:	4b15      	ldr	r3, [pc, #84]	; (8002b4c <main+0x160>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <main+0x160>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <main+0x160>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <main+0x160>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	61da      	str	r2, [r3, #28]
  //sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterActivation = ENABLE;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <main+0x160>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8002b12:	490e      	ldr	r1, [pc, #56]	; (8002b4c <main+0x160>)
 8002b14:	480e      	ldr	r0, [pc, #56]	; (8002b50 <main+0x164>)
 8002b16:	f000 fbe2 	bl	80032de <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 8002b1a:	480d      	ldr	r0, [pc, #52]	; (8002b50 <main+0x164>)
 8002b1c:	f000 fca8 	bl	8003470 <HAL_CAN_Start>
  HAL_Delay(500);
 8002b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b24:	f000 fabc 	bl	80030a0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002b28:	f002 ffe8 	bl	8005afc <osKernelInitialize>
  MX_FREERTOS_Init();
 8002b2c:	f7ff f8a2 	bl	8001c74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002b30:	f003 f816 	bl	8005b60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <main+0x148>
 8002b36:	bf00      	nop
 8002b38:	200001cc 	.word	0x200001cc
 8002b3c:	200001e4 	.word	0x200001e4
 8002b40:	200001fc 	.word	0x200001fc
 8002b44:	20000214 	.word	0x20000214
 8002b48:	2000022c 	.word	0x2000022c
 8002b4c:	200001a4 	.word	0x200001a4
 8002b50:	200000e4 	.word	0x200000e4

08002b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b090      	sub	sp, #64	; 0x40
 8002b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b5a:	f107 0318 	add.w	r3, r7, #24
 8002b5e:	2228      	movs	r2, #40	; 0x28
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f006 f9aa 	bl	8008ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b7e:	2310      	movs	r3, #16
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b82:	2302      	movs	r3, #2
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002b86:	2300      	movs	r3, #0
 8002b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002b8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b90:	f107 0318 	add.w	r3, r7, #24
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 fac1 	bl	800411c <HAL_RCC_OscConfig>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002ba0:	f000 f82c 	bl	8002bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f001 fd2e 	bl	8004620 <HAL_RCC_ClockConfig>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8002bca:	f000 f817 	bl	8002bfc <Error_Handler>
  }
}
 8002bce:	bf00      	nop
 8002bd0:	3740      	adds	r7, #64	; 0x40
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d101      	bne.n	8002bee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bea:	f000 fa3d 	bl	8003068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40000800 	.word	0x40000800

08002bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c00:	b672      	cpsid	i
}
 8002c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <Error_Handler+0x8>
	...

08002c08 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c0e:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <MX_SPI1_Init+0x68>)
 8002c10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c54:	220a      	movs	r2, #10
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c58:	4804      	ldr	r0, [pc, #16]	; (8002c6c <MX_SPI1_Init+0x64>)
 8002c5a:	f001 fe95 	bl	8004988 <HAL_SPI_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002c64:	f7ff ffca 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000248 	.word	0x20000248
 8002c70:	40013000 	.word	0x40013000

08002c74 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c7a:	4a18      	ldr	r2, [pc, #96]	; (8002cdc <MX_SPI2_Init+0x68>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c8c:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c92:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002ca8:	2208      	movs	r2, #8
 8002caa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cc0:	220a      	movs	r2, #10
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002cc4:	4804      	ldr	r0, [pc, #16]	; (8002cd8 <MX_SPI2_Init+0x64>)
 8002cc6:	f001 fe5f 	bl	8004988 <HAL_SPI_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002cd0:	f7ff ff94 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	200002a0 	.word	0x200002a0
 8002cdc:	40003800 	.word	0x40003800

08002ce0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08a      	sub	sp, #40	; 0x28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0318 	add.w	r3, r7, #24
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a3b      	ldr	r2, [pc, #236]	; (8002de8 <HAL_SPI_MspInit+0x108>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d130      	bne.n	8002d62 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d00:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	4a39      	ldr	r2, [pc, #228]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d0a:	6193      	str	r3, [r2, #24]
 8002d0c:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d18:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	4a33      	ldr	r2, [pc, #204]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d1e:	f043 0304 	orr.w	r3, r3, #4
 8002d22:	6193      	str	r3, [r2, #24]
 8002d24:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d30:	23a0      	movs	r3, #160	; 0xa0
 8002d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	f107 0318 	add.w	r3, r7, #24
 8002d40:	4619      	mov	r1, r3
 8002d42:	482b      	ldr	r0, [pc, #172]	; (8002df0 <HAL_SPI_MspInit+0x110>)
 8002d44:	f001 f834 	bl	8003db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d48:	2340      	movs	r3, #64	; 0x40
 8002d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 0318 	add.w	r3, r7, #24
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4825      	ldr	r0, [pc, #148]	; (8002df0 <HAL_SPI_MspInit+0x110>)
 8002d5c:	f001 f828 	bl	8003db0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002d60:	e03e      	b.n	8002de0 <HAL_SPI_MspInit+0x100>
  else if(spiHandle->Instance==SPI2)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <HAL_SPI_MspInit+0x114>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d139      	bne.n	8002de0 <HAL_SPI_MspInit+0x100>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d76:	61d3      	str	r3, [r2, #28]
 8002d78:	4b1c      	ldr	r3, [pc, #112]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d84:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	6193      	str	r3, [r2, #24]
 8002d90:	4b16      	ldr	r3, [pc, #88]	; (8002dec <HAL_SPI_MspInit+0x10c>)
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002d9c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da6:	2303      	movs	r3, #3
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002daa:	f107 0318 	add.w	r3, r7, #24
 8002dae:	4619      	mov	r1, r3
 8002db0:	4811      	ldr	r0, [pc, #68]	; (8002df8 <HAL_SPI_MspInit+0x118>)
 8002db2:	f000 fffd 	bl	8003db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002db6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc4:	f107 0318 	add.w	r3, r7, #24
 8002dc8:	4619      	mov	r1, r3
 8002dca:	480b      	ldr	r0, [pc, #44]	; (8002df8 <HAL_SPI_MspInit+0x118>)
 8002dcc:	f000 fff0 	bl	8003db0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2105      	movs	r1, #5
 8002dd4:	2024      	movs	r0, #36	; 0x24
 8002dd6:	f000 ff4a 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002dda:	2024      	movs	r0, #36	; 0x24
 8002ddc:	f000 ff63 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
}
 8002de0:	bf00      	nop
 8002de2:	3728      	adds	r7, #40	; 0x28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40013000 	.word	0x40013000
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40010800 	.word	0x40010800
 8002df4:	40003800 	.word	0x40003800
 8002df8:	40010c00 	.word	0x40010c00

08002dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e02:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <HAL_MspInit+0x68>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <HAL_MspInit+0x68>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6193      	str	r3, [r2, #24]
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_MspInit+0x68>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_MspInit+0x68>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <HAL_MspInit+0x68>)
 8002e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e24:	61d3      	str	r3, [r2, #28]
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_MspInit+0x68>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	210f      	movs	r1, #15
 8002e36:	f06f 0001 	mvn.w	r0, #1
 8002e3a:	f000 ff18 	bl	8003c6e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_MspInit+0x6c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_MspInit+0x6c>)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40010000 	.word	0x40010000

08002e6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08e      	sub	sp, #56	; 0x38
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002e82:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_InitTick+0xe8>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	4a33      	ldr	r2, [pc, #204]	; (8002f54 <HAL_InitTick+0xe8>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	61d3      	str	r3, [r2, #28]
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_InitTick+0xe8>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e9a:	f107 0210 	add.w	r2, r7, #16
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f001 fd21 	bl	80048ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002eb4:	f001 fd06 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 8002eb8:	6378      	str	r0, [r7, #52]	; 0x34
 8002eba:	e004      	b.n	8002ec6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ebc:	f001 fd02 	bl	80048c4 <HAL_RCC_GetPCLK1Freq>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec8:	4a23      	ldr	r2, [pc, #140]	; (8002f58 <HAL_InitTick+0xec>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002ed4:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <HAL_InitTick+0xf0>)
 8002ed6:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <HAL_InitTick+0xf4>)
 8002ed8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002eda:	4b20      	ldr	r3, [pc, #128]	; (8002f5c <HAL_InitTick+0xf0>)
 8002edc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ee0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	; (8002f5c <HAL_InitTick+0xf0>)
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_InitTick+0xf0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_InitTick+0xf0>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <HAL_InitTick+0xf0>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002efa:	4818      	ldr	r0, [pc, #96]	; (8002f5c <HAL_InitTick+0xf0>)
 8002efc:	f002 fbb4 	bl	8005668 <HAL_TIM_Base_Init>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002f06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d11b      	bne.n	8002f46 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002f0e:	4813      	ldr	r0, [pc, #76]	; (8002f5c <HAL_InitTick+0xf0>)
 8002f10:	f002 fc02 	bl	8005718 <HAL_TIM_Base_Start_IT>
 8002f14:	4603      	mov	r3, r0
 8002f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002f1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d111      	bne.n	8002f46 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f22:	201e      	movs	r0, #30
 8002f24:	f000 febf 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b0f      	cmp	r3, #15
 8002f2c:	d808      	bhi.n	8002f40 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	201e      	movs	r0, #30
 8002f34:	f000 fe9b 	bl	8003c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f38:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_InitTick+0xf8>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e002      	b.n	8002f46 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3738      	adds	r7, #56	; 0x38
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000
 8002f58:	431bde83 	.word	0x431bde83
 8002f5c:	200002f8 	.word	0x200002f8
 8002f60:	40000800 	.word	0x40000800
 8002f64:	2000001c 	.word	0x2000001c

08002f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f6c:	e7fe      	b.n	8002f6c <NMI_Handler+0x4>

08002f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f72:	e7fe      	b.n	8002f72 <HardFault_Handler+0x4>

08002f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f78:	e7fe      	b.n	8002f78 <MemManage_Handler+0x4>

08002f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7e:	e7fe      	b.n	8002f7e <BusFault_Handler+0x4>

08002f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f84:	e7fe      	b.n	8002f84 <UsageFault_Handler+0x4>

08002f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
	...

08002f94 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8002f9a:	f000 fb87 	bl	80036ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200000e4 	.word	0x200000e4

08002fa8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002fae:	f000 fb7d 	bl	80036ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200000e4 	.word	0x200000e4

08002fbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <TIM4_IRQHandler+0x10>)
 8002fc2:	f002 fbfb 	bl	80057bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200002f8 	.word	0x200002f8

08002fd0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <SPI2_IRQHandler+0x10>)
 8002fd6:	f002 f94b 	bl	8005270 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200002a0 	.word	0x200002a0

08002fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff0:	480c      	ldr	r0, [pc, #48]	; (8003024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ff2:	490d      	ldr	r1, [pc, #52]	; (8003028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	; (800302c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff8:	e002      	b.n	8003000 <LoopCopyDataInit>

08002ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ffe:	3304      	adds	r3, #4

08003000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003004:	d3f9      	bcc.n	8002ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003008:	4c0a      	ldr	r4, [pc, #40]	; (8003034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800300c:	e001      	b.n	8003012 <LoopFillZerobss>

0800300e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800300e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003010:	3204      	adds	r2, #4

08003012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003014:	d3fb      	bcc.n	800300e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003016:	f7ff ffe5 	bl	8002fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800301a:	f005 ff1b 	bl	8008e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800301e:	f7ff fce5 	bl	80029ec <main>
  bx lr
 8003022:	4770      	bx	lr
  ldr r0, =_sdata
 8003024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003028:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800302c:	080091a0 	.word	0x080091a0
  ldr r2, =_sbss
 8003030:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003034:	20001d54 	.word	0x20001d54

08003038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003038:	e7fe      	b.n	8003038 <ADC1_2_IRQHandler>
	...

0800303c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <HAL_Init+0x28>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a07      	ldr	r2, [pc, #28]	; (8003064 <HAL_Init+0x28>)
 8003046:	f043 0310 	orr.w	r3, r3, #16
 800304a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800304c:	2003      	movs	r0, #3
 800304e:	f000 fe03 	bl	8003c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003052:	200f      	movs	r0, #15
 8003054:	f7ff ff0a 	bl	8002e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003058:	f7ff fed0 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40022000 	.word	0x40022000

08003068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_IncTick+0x1c>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_IncTick+0x20>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4413      	add	r3, r2
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <HAL_IncTick+0x20>)
 800307a:	6013      	str	r3, [r2, #0]
}
 800307c:	bf00      	nop
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	20000020 	.word	0x20000020
 8003088:	20000340 	.word	0x20000340

0800308c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return uwTick;
 8003090:	4b02      	ldr	r3, [pc, #8]	; (800309c <HAL_GetTick+0x10>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr
 800309c:	20000340 	.word	0x20000340

080030a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a8:	f7ff fff0 	bl	800308c <HAL_GetTick>
 80030ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d005      	beq.n	80030c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_Delay+0x44>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030c6:	bf00      	nop
 80030c8:	f7ff ffe0 	bl	800308c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d8f7      	bhi.n	80030c8 <HAL_Delay+0x28>
  {
  }
}
 80030d8:	bf00      	nop
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000020 	.word	0x20000020

080030e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0ed      	b.n	80032d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe fd58 	bl	8001bbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]
  //CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);

  /* Get tick */
  tickstart = HAL_GetTick();
 800311c:	f7ff ffb6 	bl	800308c <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003122:	e012      	b.n	800314a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003124:	f7ff ffb2 	bl	800308c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b0a      	cmp	r3, #10
 8003130:	d90b      	bls.n	800314a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2205      	movs	r2, #5
 8003142:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0c5      	b.n	80032d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0e5      	beq.n	8003124 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0202 	bic.w	r2, r2, #2
 8003166:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003168:	f7ff ff90 	bl	800308c <HAL_GetTick>
 800316c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800316e:	e012      	b.n	8003196 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003170:	f7ff ff8c 	bl	800308c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b0a      	cmp	r3, #10
 800317c:	d90b      	bls.n	8003196 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2205      	movs	r2, #5
 800318e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e09f      	b.n	80032d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e5      	bne.n	8003170 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	7e1b      	ldrb	r3, [r3, #24]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d108      	bne.n	80031be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e007      	b.n	80031ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	7e5b      	ldrb	r3, [r3, #25]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d108      	bne.n	80031e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e007      	b.n	80031f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	7e9b      	ldrb	r3, [r3, #26]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d108      	bne.n	8003212 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0220 	orr.w	r2, r2, #32
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e007      	b.n	8003222 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0220 	bic.w	r2, r2, #32
 8003220:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7edb      	ldrb	r3, [r3, #27]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d108      	bne.n	800323c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0210 	bic.w	r2, r2, #16
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e007      	b.n	800324c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0210 	orr.w	r2, r2, #16
 800324a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7f1b      	ldrb	r3, [r3, #28]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d108      	bne.n	8003266 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0208 	orr.w	r2, r2, #8
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e007      	b.n	8003276 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0208 	bic.w	r2, r2, #8
 8003274:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7f5b      	ldrb	r3, [r3, #29]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d108      	bne.n	8003290 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0204 	orr.w	r2, r2, #4
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e007      	b.n	80032a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0204 	bic.w	r2, r2, #4
 800329e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	ea42 0103 	orr.w	r1, r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	1e5a      	subs	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80032de:	b480      	push	{r7}
 80032e0:	b087      	sub	sp, #28
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032f4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80032f6:	7cfb      	ldrb	r3, [r7, #19]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d003      	beq.n	8003304 <HAL_CAN_ConfigFilter+0x26>
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	f040 80aa 	bne.w	8003458 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2201      	movs	r2, #1
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43db      	mvns	r3, r3
 800332e:	401a      	ands	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d123      	bne.n	8003386 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	43db      	mvns	r3, r3
 8003348:	401a      	ands	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003360:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3248      	adds	r2, #72	; 0x48
 8003366:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800337a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800337c:	6979      	ldr	r1, [r7, #20]
 800337e:	3348      	adds	r3, #72	; 0x48
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d122      	bne.n	80033d4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	431a      	orrs	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3248      	adds	r2, #72	; 0x48
 80033b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ca:	6979      	ldr	r1, [r7, #20]
 80033cc:	3348      	adds	r3, #72	; 0x48
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	401a      	ands	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80033ee:	e007      	b.n	8003400 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	43db      	mvns	r3, r3
 8003412:	401a      	ands	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800341a:	e007      	b.n	800342c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	431a      	orrs	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d107      	bne.n	8003444 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	431a      	orrs	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800344a:	f023 0201 	bic.w	r2, r3, #1
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	e006      	b.n	8003466 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr

08003470 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	d12e      	bne.n	80034e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800349c:	f7ff fdf6 	bl	800308c <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034a2:	e012      	b.n	80034ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034a4:	f7ff fdf2 	bl	800308c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b0a      	cmp	r3, #10
 80034b0:	d90b      	bls.n	80034ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2205      	movs	r2, #5
 80034c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e012      	b.n	80034f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e5      	bne.n	80034a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e006      	b.n	80034f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800350c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003516:	7ffb      	ldrb	r3, [r7, #31]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d003      	beq.n	8003524 <HAL_CAN_AddTxMessage+0x2c>
 800351c:	7ffb      	ldrb	r3, [r7, #31]
 800351e:	2b02      	cmp	r3, #2
 8003520:	f040 80b8 	bne.w	8003694 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10a      	bne.n	8003544 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003534:	2b00      	cmp	r3, #0
 8003536:	d105      	bne.n	8003544 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80a0 	beq.w	8003684 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	0e1b      	lsrs	r3, r3, #24
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d907      	bls.n	8003564 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e09e      	b.n	80036a2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003564:	2201      	movs	r2, #1
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	409a      	lsls	r2, r3
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003580:	68f9      	ldr	r1, [r7, #12]
 8003582:	6809      	ldr	r1, [r1, #0]
 8003584:	431a      	orrs	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3318      	adds	r3, #24
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	440b      	add	r3, r1
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e00f      	b.n	80035b2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800359c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035a2:	68f9      	ldr	r1, [r7, #12]
 80035a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3318      	adds	r3, #24
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	440b      	add	r3, r1
 80035b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6819      	ldr	r1, [r3, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3318      	adds	r3, #24
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	440b      	add	r3, r1
 80035c2:	3304      	adds	r3, #4
 80035c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	7d1b      	ldrb	r3, [r3, #20]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d111      	bne.n	80035f2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	3318      	adds	r3, #24
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	6811      	ldr	r1, [r2, #0]
 80035e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	3318      	adds	r3, #24
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	440b      	add	r3, r1
 80035ee:	3304      	adds	r3, #4
 80035f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	3307      	adds	r3, #7
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	061a      	lsls	r2, r3, #24
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3306      	adds	r3, #6
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3305      	adds	r3, #5
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	4313      	orrs	r3, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	3204      	adds	r2, #4
 8003612:	7812      	ldrb	r2, [r2, #0]
 8003614:	4610      	mov	r0, r2
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	6811      	ldr	r1, [r2, #0]
 800361a:	ea43 0200 	orr.w	r2, r3, r0
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	440b      	add	r3, r1
 8003624:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003628:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3303      	adds	r3, #3
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	061a      	lsls	r2, r3, #24
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3302      	adds	r3, #2
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	041b      	lsls	r3, r3, #16
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3301      	adds	r3, #1
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	4313      	orrs	r3, r2
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	7812      	ldrb	r2, [r2, #0]
 800364a:	4610      	mov	r0, r2
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	6811      	ldr	r1, [r2, #0]
 8003650:	ea43 0200 	orr.w	r2, r3, r0
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	440b      	add	r3, r1
 800365a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800365e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	3318      	adds	r3, #24
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	4413      	add	r3, r2
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	6811      	ldr	r1, [r2, #0]
 8003672:	f043 0201 	orr.w	r2, r3, #1
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	3318      	adds	r3, #24
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	440b      	add	r3, r1
 800367e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e00e      	b.n	80036a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e006      	b.n	80036a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d07c      	beq.n	80037ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d023      	beq.n	8003744 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f983 	bl	8003a1a <HAL_CAN_TxMailbox0CompleteCallback>
 8003714:	e016      	b.n	8003744 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
 8003728:	e00c      	b.n	8003744 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
 800373c:	e002      	b.n	8003744 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f986 	bl	8003a50 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d024      	beq.n	8003798 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003756:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f962 	bl	8003a2c <HAL_CAN_TxMailbox1CompleteCallback>
 8003768:	e016      	b.n	8003798 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003770:	2b00      	cmp	r3, #0
 8003772:	d004      	beq.n	800377e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
 800377c:	e00c      	b.n	8003798 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	e002      	b.n	8003798 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f965 	bl	8003a62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d024      	beq.n	80037ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f941 	bl	8003a3e <HAL_CAN_TxMailbox2CompleteCallback>
 80037bc:	e016      	b.n	80037ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d004      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ce:	627b      	str	r3, [r7, #36]	; 0x24
 80037d0:	e00c      	b.n	80037ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
 80037e4:	e002      	b.n	80037ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f944 	bl	8003a74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00c      	beq.n	8003810 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d007      	beq.n	8003810 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003806:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2210      	movs	r2, #16
 800380e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d006      	beq.n	8003832 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2208      	movs	r2, #8
 800382a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f933 	bl	8003a98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f91b 	bl	8003a86 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003850:	6a3b      	ldr	r3, [r7, #32]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 0310 	and.w	r3, r3, #16
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800386a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2210      	movs	r2, #16
 8003872:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d006      	beq.n	8003896 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f913 	bl	8003abc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d002      	beq.n	80038b4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8fb 	bl	8003aaa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d006      	beq.n	80038d6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2210      	movs	r2, #16
 80038ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f8fc 	bl	8003ace <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d006      	beq.n	80038f8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2208      	movs	r2, #8
 80038f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8f4 	bl	8003ae0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d07b      	beq.n	80039fa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d072      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	f043 0302 	orr.w	r3, r3, #2
 8003942:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003966:	2b00      	cmp	r3, #0
 8003968:	d043      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003970:	2b00      	cmp	r3, #0
 8003972:	d03e      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800397a:	2b60      	cmp	r3, #96	; 0x60
 800397c:	d02b      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x32a>
 800397e:	2b60      	cmp	r3, #96	; 0x60
 8003980:	d82e      	bhi.n	80039e0 <HAL_CAN_IRQHandler+0x334>
 8003982:	2b50      	cmp	r3, #80	; 0x50
 8003984:	d022      	beq.n	80039cc <HAL_CAN_IRQHandler+0x320>
 8003986:	2b50      	cmp	r3, #80	; 0x50
 8003988:	d82a      	bhi.n	80039e0 <HAL_CAN_IRQHandler+0x334>
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d019      	beq.n	80039c2 <HAL_CAN_IRQHandler+0x316>
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d826      	bhi.n	80039e0 <HAL_CAN_IRQHandler+0x334>
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	d010      	beq.n	80039b8 <HAL_CAN_IRQHandler+0x30c>
 8003996:	2b30      	cmp	r3, #48	; 0x30
 8003998:	d822      	bhi.n	80039e0 <HAL_CAN_IRQHandler+0x334>
 800399a:	2b10      	cmp	r3, #16
 800399c:	d002      	beq.n	80039a4 <HAL_CAN_IRQHandler+0x2f8>
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d005      	beq.n	80039ae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039a2:	e01d      	b.n	80039e0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f043 0308 	orr.w	r3, r3, #8
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ac:	e019      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	f043 0310 	orr.w	r3, r3, #16
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039b6:	e014      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f043 0320 	orr.w	r3, r3, #32
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039c0:	e00f      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ca:	e00a      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039d4:	e005      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039de:	e000      	b.n	80039e2 <HAL_CAN_IRQHandler+0x336>
            break;
 80039e0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2204      	movs	r2, #4
 80039f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f870 	bl	8003af2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a12:	bf00      	nop
 8003a14:	3728      	adds	r7, #40	; 0x28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr

08003a2c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr

08003a86 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr

08003a98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	60d3      	str	r3, [r2, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4906      	ldr	r1, [pc, #24]	; (8003b9c <__NVIC_EnableIRQ+0x34>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	e000e100 	.word	0xe000e100

08003ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	6039      	str	r1, [r7, #0]
 8003baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	db0a      	blt.n	8003bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	490c      	ldr	r1, [pc, #48]	; (8003bec <__NVIC_SetPriority+0x4c>)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	0112      	lsls	r2, r2, #4
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc8:	e00a      	b.n	8003be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4908      	ldr	r1, [pc, #32]	; (8003bf0 <__NVIC_SetPriority+0x50>)
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	3b04      	subs	r3, #4
 8003bd8:	0112      	lsls	r2, r2, #4
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	440b      	add	r3, r1
 8003bde:	761a      	strb	r2, [r3, #24]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	e000e100 	.word	0xe000e100
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f1c3 0307 	rsb	r3, r3, #7
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	bf28      	it	cs
 8003c12:	2304      	movcs	r3, #4
 8003c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d902      	bls.n	8003c24 <NVIC_EncodePriority+0x30>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3b03      	subs	r3, #3
 8003c22:	e000      	b.n	8003c26 <NVIC_EncodePriority+0x32>
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	401a      	ands	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	43d9      	mvns	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	4313      	orrs	r3, r2
         );
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3724      	adds	r7, #36	; 0x24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff4f 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c80:	f7ff ff64 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ffb2 	bl	8003bf4 <NVIC_EncodePriority>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff81 	bl	8003ba0 <__NVIC_SetPriority>
}
 8003c9e:	bf00      	nop
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff57 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d005      	beq.n	8003ce6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2204      	movs	r2, #4
 8003cde:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e051      	b.n	8003d8a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 020e 	bic.w	r2, r2, #14
 8003cf4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a22      	ldr	r2, [pc, #136]	; (8003d94 <HAL_DMA_Abort_IT+0xd0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d029      	beq.n	8003d64 <HAL_DMA_Abort_IT+0xa0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a20      	ldr	r2, [pc, #128]	; (8003d98 <HAL_DMA_Abort_IT+0xd4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d022      	beq.n	8003d60 <HAL_DMA_Abort_IT+0x9c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1f      	ldr	r2, [pc, #124]	; (8003d9c <HAL_DMA_Abort_IT+0xd8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d01a      	beq.n	8003d5a <HAL_DMA_Abort_IT+0x96>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <HAL_DMA_Abort_IT+0xdc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d012      	beq.n	8003d54 <HAL_DMA_Abort_IT+0x90>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <HAL_DMA_Abort_IT+0xe0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00a      	beq.n	8003d4e <HAL_DMA_Abort_IT+0x8a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <HAL_DMA_Abort_IT+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d102      	bne.n	8003d48 <HAL_DMA_Abort_IT+0x84>
 8003d42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d46:	e00e      	b.n	8003d66 <HAL_DMA_Abort_IT+0xa2>
 8003d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d4c:	e00b      	b.n	8003d66 <HAL_DMA_Abort_IT+0xa2>
 8003d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d52:	e008      	b.n	8003d66 <HAL_DMA_Abort_IT+0xa2>
 8003d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d58:	e005      	b.n	8003d66 <HAL_DMA_Abort_IT+0xa2>
 8003d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d5e:	e002      	b.n	8003d66 <HAL_DMA_Abort_IT+0xa2>
 8003d60:	2310      	movs	r3, #16
 8003d62:	e000      	b.n	8003d66 <HAL_DMA_Abort_IT+0xa2>
 8003d64:	2301      	movs	r3, #1
 8003d66:	4a11      	ldr	r2, [pc, #68]	; (8003dac <HAL_DMA_Abort_IT+0xe8>)
 8003d68:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
    } 
  }
  return status;
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40020008 	.word	0x40020008
 8003d98:	4002001c 	.word	0x4002001c
 8003d9c:	40020030 	.word	0x40020030
 8003da0:	40020044 	.word	0x40020044
 8003da4:	40020058 	.word	0x40020058
 8003da8:	4002006c 	.word	0x4002006c
 8003dac:	40020000 	.word	0x40020000

08003db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b08b      	sub	sp, #44	; 0x2c
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc2:	e169      	b.n	8004098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69fa      	ldr	r2, [r7, #28]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	f040 8158 	bne.w	8004092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4a9a      	ldr	r2, [pc, #616]	; (8004050 <HAL_GPIO_Init+0x2a0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d05e      	beq.n	8003eaa <HAL_GPIO_Init+0xfa>
 8003dec:	4a98      	ldr	r2, [pc, #608]	; (8004050 <HAL_GPIO_Init+0x2a0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d875      	bhi.n	8003ede <HAL_GPIO_Init+0x12e>
 8003df2:	4a98      	ldr	r2, [pc, #608]	; (8004054 <HAL_GPIO_Init+0x2a4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d058      	beq.n	8003eaa <HAL_GPIO_Init+0xfa>
 8003df8:	4a96      	ldr	r2, [pc, #600]	; (8004054 <HAL_GPIO_Init+0x2a4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d86f      	bhi.n	8003ede <HAL_GPIO_Init+0x12e>
 8003dfe:	4a96      	ldr	r2, [pc, #600]	; (8004058 <HAL_GPIO_Init+0x2a8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d052      	beq.n	8003eaa <HAL_GPIO_Init+0xfa>
 8003e04:	4a94      	ldr	r2, [pc, #592]	; (8004058 <HAL_GPIO_Init+0x2a8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d869      	bhi.n	8003ede <HAL_GPIO_Init+0x12e>
 8003e0a:	4a94      	ldr	r2, [pc, #592]	; (800405c <HAL_GPIO_Init+0x2ac>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d04c      	beq.n	8003eaa <HAL_GPIO_Init+0xfa>
 8003e10:	4a92      	ldr	r2, [pc, #584]	; (800405c <HAL_GPIO_Init+0x2ac>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d863      	bhi.n	8003ede <HAL_GPIO_Init+0x12e>
 8003e16:	4a92      	ldr	r2, [pc, #584]	; (8004060 <HAL_GPIO_Init+0x2b0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d046      	beq.n	8003eaa <HAL_GPIO_Init+0xfa>
 8003e1c:	4a90      	ldr	r2, [pc, #576]	; (8004060 <HAL_GPIO_Init+0x2b0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d85d      	bhi.n	8003ede <HAL_GPIO_Init+0x12e>
 8003e22:	2b12      	cmp	r3, #18
 8003e24:	d82a      	bhi.n	8003e7c <HAL_GPIO_Init+0xcc>
 8003e26:	2b12      	cmp	r3, #18
 8003e28:	d859      	bhi.n	8003ede <HAL_GPIO_Init+0x12e>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <HAL_GPIO_Init+0x80>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003eab 	.word	0x08003eab
 8003e34:	08003e85 	.word	0x08003e85
 8003e38:	08003e97 	.word	0x08003e97
 8003e3c:	08003ed9 	.word	0x08003ed9
 8003e40:	08003edf 	.word	0x08003edf
 8003e44:	08003edf 	.word	0x08003edf
 8003e48:	08003edf 	.word	0x08003edf
 8003e4c:	08003edf 	.word	0x08003edf
 8003e50:	08003edf 	.word	0x08003edf
 8003e54:	08003edf 	.word	0x08003edf
 8003e58:	08003edf 	.word	0x08003edf
 8003e5c:	08003edf 	.word	0x08003edf
 8003e60:	08003edf 	.word	0x08003edf
 8003e64:	08003edf 	.word	0x08003edf
 8003e68:	08003edf 	.word	0x08003edf
 8003e6c:	08003edf 	.word	0x08003edf
 8003e70:	08003edf 	.word	0x08003edf
 8003e74:	08003e8d 	.word	0x08003e8d
 8003e78:	08003ea1 	.word	0x08003ea1
 8003e7c:	4a79      	ldr	r2, [pc, #484]	; (8004064 <HAL_GPIO_Init+0x2b4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e82:	e02c      	b.n	8003ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	623b      	str	r3, [r7, #32]
          break;
 8003e8a:	e029      	b.n	8003ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	3304      	adds	r3, #4
 8003e92:	623b      	str	r3, [r7, #32]
          break;
 8003e94:	e024      	b.n	8003ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	623b      	str	r3, [r7, #32]
          break;
 8003e9e:	e01f      	b.n	8003ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	623b      	str	r3, [r7, #32]
          break;
 8003ea8:	e01a      	b.n	8003ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d102      	bne.n	8003eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	623b      	str	r3, [r7, #32]
          break;
 8003eb6:	e013      	b.n	8003ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	611a      	str	r2, [r3, #16]
          break;
 8003eca:	e009      	b.n	8003ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ecc:	2308      	movs	r3, #8
 8003ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	615a      	str	r2, [r3, #20]
          break;
 8003ed6:	e003      	b.n	8003ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
          break;
 8003edc:	e000      	b.n	8003ee0 <HAL_GPIO_Init+0x130>
          break;
 8003ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2bff      	cmp	r3, #255	; 0xff
 8003ee4:	d801      	bhi.n	8003eea <HAL_GPIO_Init+0x13a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	e001      	b.n	8003eee <HAL_GPIO_Init+0x13e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3304      	adds	r3, #4
 8003eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2bff      	cmp	r3, #255	; 0xff
 8003ef4:	d802      	bhi.n	8003efc <HAL_GPIO_Init+0x14c>
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	e002      	b.n	8003f02 <HAL_GPIO_Init+0x152>
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	3b08      	subs	r3, #8
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	210f      	movs	r1, #15
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	6a39      	ldr	r1, [r7, #32]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80b1 	beq.w	8004092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f30:	4b4d      	ldr	r3, [pc, #308]	; (8004068 <HAL_GPIO_Init+0x2b8>)
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	4a4c      	ldr	r2, [pc, #304]	; (8004068 <HAL_GPIO_Init+0x2b8>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6193      	str	r3, [r2, #24]
 8003f3c:	4b4a      	ldr	r3, [pc, #296]	; (8004068 <HAL_GPIO_Init+0x2b8>)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f48:	4a48      	ldr	r2, [pc, #288]	; (800406c <HAL_GPIO_Init+0x2bc>)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	220f      	movs	r2, #15
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a40      	ldr	r2, [pc, #256]	; (8004070 <HAL_GPIO_Init+0x2c0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d013      	beq.n	8003f9c <HAL_GPIO_Init+0x1ec>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a3f      	ldr	r2, [pc, #252]	; (8004074 <HAL_GPIO_Init+0x2c4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00d      	beq.n	8003f98 <HAL_GPIO_Init+0x1e8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a3e      	ldr	r2, [pc, #248]	; (8004078 <HAL_GPIO_Init+0x2c8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <HAL_GPIO_Init+0x1e4>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a3d      	ldr	r2, [pc, #244]	; (800407c <HAL_GPIO_Init+0x2cc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_GPIO_Init+0x1e0>
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e006      	b.n	8003f9e <HAL_GPIO_Init+0x1ee>
 8003f90:	2304      	movs	r3, #4
 8003f92:	e004      	b.n	8003f9e <HAL_GPIO_Init+0x1ee>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e002      	b.n	8003f9e <HAL_GPIO_Init+0x1ee>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_GPIO_Init+0x1ee>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	f002 0203 	and.w	r2, r2, #3
 8003fa4:	0092      	lsls	r2, r2, #2
 8003fa6:	4093      	lsls	r3, r2
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fae:	492f      	ldr	r1, [pc, #188]	; (800406c <HAL_GPIO_Init+0x2bc>)
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d006      	beq.n	8003fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fc8:	4b2d      	ldr	r3, [pc, #180]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	492c      	ldr	r1, [pc, #176]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	e006      	b.n	8003fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fd6:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	4928      	ldr	r1, [pc, #160]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d006      	beq.n	8003ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ff0:	4b23      	ldr	r3, [pc, #140]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	4922      	ldr	r1, [pc, #136]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
 8003ffc:	e006      	b.n	800400c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	43db      	mvns	r3, r3
 8004006:	491e      	ldr	r1, [pc, #120]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8004008:	4013      	ands	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d006      	beq.n	8004026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	4918      	ldr	r1, [pc, #96]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]
 8004024:	e006      	b.n	8004034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004026:	4b16      	ldr	r3, [pc, #88]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	43db      	mvns	r3, r3
 800402e:	4914      	ldr	r1, [pc, #80]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8004030:	4013      	ands	r3, r2
 8004032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d021      	beq.n	8004084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	490e      	ldr	r1, [pc, #56]	; (8004080 <HAL_GPIO_Init+0x2d0>)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	60cb      	str	r3, [r1, #12]
 800404c:	e021      	b.n	8004092 <HAL_GPIO_Init+0x2e2>
 800404e:	bf00      	nop
 8004050:	10320000 	.word	0x10320000
 8004054:	10310000 	.word	0x10310000
 8004058:	10220000 	.word	0x10220000
 800405c:	10210000 	.word	0x10210000
 8004060:	10120000 	.word	0x10120000
 8004064:	10110000 	.word	0x10110000
 8004068:	40021000 	.word	0x40021000
 800406c:	40010000 	.word	0x40010000
 8004070:	40010800 	.word	0x40010800
 8004074:	40010c00 	.word	0x40010c00
 8004078:	40011000 	.word	0x40011000
 800407c:	40011400 	.word	0x40011400
 8004080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <HAL_GPIO_Init+0x304>)
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	43db      	mvns	r3, r3
 800408c:	4909      	ldr	r1, [pc, #36]	; (80040b4 <HAL_GPIO_Init+0x304>)
 800408e:	4013      	ands	r3, r2
 8004090:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	3301      	adds	r3, #1
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f47f ae8e 	bne.w	8003dc4 <HAL_GPIO_Init+0x14>
  }
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	372c      	adds	r7, #44	; 0x2c
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	40010400 	.word	0x40010400

080040b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
 80040c4:	4613      	mov	r3, r2
 80040c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040c8:	787b      	ldrb	r3, [r7, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040d4:	e003      	b.n	80040de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040d6:	887b      	ldrh	r3, [r7, #2]
 80040d8:	041a      	lsls	r2, r3, #16
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	611a      	str	r2, [r3, #16]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	041a      	lsls	r2, r3, #16
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	43d9      	mvns	r1, r3
 8004106:	887b      	ldrh	r3, [r7, #2]
 8004108:	400b      	ands	r3, r1
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	611a      	str	r2, [r3, #16]
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr
	...

0800411c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e272      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 8087 	beq.w	800424a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800413c:	4b92      	ldr	r3, [pc, #584]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b04      	cmp	r3, #4
 8004146:	d00c      	beq.n	8004162 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004148:	4b8f      	ldr	r3, [pc, #572]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b08      	cmp	r3, #8
 8004152:	d112      	bne.n	800417a <HAL_RCC_OscConfig+0x5e>
 8004154:	4b8c      	ldr	r3, [pc, #560]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004160:	d10b      	bne.n	800417a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004162:	4b89      	ldr	r3, [pc, #548]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d06c      	beq.n	8004248 <HAL_RCC_OscConfig+0x12c>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d168      	bne.n	8004248 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e24c      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004182:	d106      	bne.n	8004192 <HAL_RCC_OscConfig+0x76>
 8004184:	4b80      	ldr	r3, [pc, #512]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a7f      	ldr	r2, [pc, #508]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 800418a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	e02e      	b.n	80041f0 <HAL_RCC_OscConfig+0xd4>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x98>
 800419a:	4b7b      	ldr	r3, [pc, #492]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a7a      	ldr	r2, [pc, #488]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b78      	ldr	r3, [pc, #480]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a77      	ldr	r2, [pc, #476]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e01d      	b.n	80041f0 <HAL_RCC_OscConfig+0xd4>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0xbc>
 80041be:	4b72      	ldr	r3, [pc, #456]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a71      	ldr	r2, [pc, #452]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b6f      	ldr	r3, [pc, #444]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a6e      	ldr	r2, [pc, #440]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e00b      	b.n	80041f0 <HAL_RCC_OscConfig+0xd4>
 80041d8:	4b6b      	ldr	r3, [pc, #428]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a6a      	ldr	r2, [pc, #424]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b68      	ldr	r3, [pc, #416]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a67      	ldr	r2, [pc, #412]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d013      	beq.n	8004220 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7fe ff48 	bl	800308c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004200:	f7fe ff44 	bl	800308c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e200      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b5d      	ldr	r3, [pc, #372]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0xe4>
 800421e:	e014      	b.n	800424a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004220:	f7fe ff34 	bl	800308c <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004228:	f7fe ff30 	bl	800308c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e1ec      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423a:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f0      	bne.n	8004228 <HAL_RCC_OscConfig+0x10c>
 8004246:	e000      	b.n	800424a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d063      	beq.n	800431e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004256:	4b4c      	ldr	r3, [pc, #304]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004262:	4b49      	ldr	r3, [pc, #292]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b08      	cmp	r3, #8
 800426c:	d11c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x18c>
 800426e:	4b46      	ldr	r3, [pc, #280]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d116      	bne.n	80042a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427a:	4b43      	ldr	r3, [pc, #268]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_RCC_OscConfig+0x176>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d001      	beq.n	8004292 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e1c0      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004292:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4939      	ldr	r1, [pc, #228]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a6:	e03a      	b.n	800431e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d020      	beq.n	80042f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b0:	4b36      	ldr	r3, [pc, #216]	; (800438c <HAL_RCC_OscConfig+0x270>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b6:	f7fe fee9 	bl	800308c <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042bc:	e008      	b.n	80042d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042be:	f7fe fee5 	bl	800308c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e1a1      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d0:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f0      	beq.n	80042be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042dc:	4b2a      	ldr	r3, [pc, #168]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4927      	ldr	r1, [pc, #156]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]
 80042f0:	e015      	b.n	800431e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f2:	4b26      	ldr	r3, [pc, #152]	; (800438c <HAL_RCC_OscConfig+0x270>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fe fec8 	bl	800308c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004300:	f7fe fec4 	bl	800308c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e180      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004312:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f0      	bne.n	8004300 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d03a      	beq.n	80043a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d019      	beq.n	8004366 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004332:	4b17      	ldr	r3, [pc, #92]	; (8004390 <HAL_RCC_OscConfig+0x274>)
 8004334:	2201      	movs	r2, #1
 8004336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004338:	f7fe fea8 	bl	800308c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004340:	f7fe fea4 	bl	800308c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e160      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <HAL_RCC_OscConfig+0x26c>)
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800435e:	2001      	movs	r0, #1
 8004360:	f000 faf4 	bl	800494c <RCC_Delay>
 8004364:	e01c      	b.n	80043a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_RCC_OscConfig+0x274>)
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436c:	f7fe fe8e 	bl	800308c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004372:	e00f      	b.n	8004394 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004374:	f7fe fe8a 	bl	800308c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d908      	bls.n	8004394 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e146      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	42420000 	.word	0x42420000
 8004390:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004394:	4b92      	ldr	r3, [pc, #584]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e9      	bne.n	8004374 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80a6 	beq.w	80044fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ae:	2300      	movs	r3, #0
 80043b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b2:	4b8b      	ldr	r3, [pc, #556]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	4b88      	ldr	r3, [pc, #544]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	4a87      	ldr	r2, [pc, #540]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c8:	61d3      	str	r3, [r2, #28]
 80043ca:	4b85      	ldr	r3, [pc, #532]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043d6:	2301      	movs	r3, #1
 80043d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043da:	4b82      	ldr	r3, [pc, #520]	; (80045e4 <HAL_RCC_OscConfig+0x4c8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d118      	bne.n	8004418 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e6:	4b7f      	ldr	r3, [pc, #508]	; (80045e4 <HAL_RCC_OscConfig+0x4c8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a7e      	ldr	r2, [pc, #504]	; (80045e4 <HAL_RCC_OscConfig+0x4c8>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043f2:	f7fe fe4b 	bl	800308c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043fa:	f7fe fe47 	bl	800308c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	; 0x64
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e103      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440c:	4b75      	ldr	r3, [pc, #468]	; (80045e4 <HAL_RCC_OscConfig+0x4c8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d106      	bne.n	800442e <HAL_RCC_OscConfig+0x312>
 8004420:	4b6f      	ldr	r3, [pc, #444]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	4a6e      	ldr	r2, [pc, #440]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6213      	str	r3, [r2, #32]
 800442c:	e02d      	b.n	800448a <HAL_RCC_OscConfig+0x36e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10c      	bne.n	8004450 <HAL_RCC_OscConfig+0x334>
 8004436:	4b6a      	ldr	r3, [pc, #424]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	4a69      	ldr	r2, [pc, #420]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	6213      	str	r3, [r2, #32]
 8004442:	4b67      	ldr	r3, [pc, #412]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4a66      	ldr	r2, [pc, #408]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004448:	f023 0304 	bic.w	r3, r3, #4
 800444c:	6213      	str	r3, [r2, #32]
 800444e:	e01c      	b.n	800448a <HAL_RCC_OscConfig+0x36e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	2b05      	cmp	r3, #5
 8004456:	d10c      	bne.n	8004472 <HAL_RCC_OscConfig+0x356>
 8004458:	4b61      	ldr	r3, [pc, #388]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	4a60      	ldr	r2, [pc, #384]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 800445e:	f043 0304 	orr.w	r3, r3, #4
 8004462:	6213      	str	r3, [r2, #32]
 8004464:	4b5e      	ldr	r3, [pc, #376]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	4a5d      	ldr	r2, [pc, #372]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	6213      	str	r3, [r2, #32]
 8004470:	e00b      	b.n	800448a <HAL_RCC_OscConfig+0x36e>
 8004472:	4b5b      	ldr	r3, [pc, #364]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	4a5a      	ldr	r2, [pc, #360]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	6213      	str	r3, [r2, #32]
 800447e:	4b58      	ldr	r3, [pc, #352]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	4a57      	ldr	r2, [pc, #348]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d015      	beq.n	80044be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004492:	f7fe fdfb 	bl	800308c <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004498:	e00a      	b.n	80044b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449a:	f7fe fdf7 	bl	800308c <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0b1      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b0:	4b4b      	ldr	r3, [pc, #300]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0ee      	beq.n	800449a <HAL_RCC_OscConfig+0x37e>
 80044bc:	e014      	b.n	80044e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044be:	f7fe fde5 	bl	800308c <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044c4:	e00a      	b.n	80044dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fe fde1 	bl	800308c <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e09b      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044dc:	4b40      	ldr	r3, [pc, #256]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ee      	bne.n	80044c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d105      	bne.n	80044fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044ee:	4b3c      	ldr	r3, [pc, #240]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	4a3b      	ldr	r2, [pc, #236]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 8087 	beq.w	8004612 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004504:	4b36      	ldr	r3, [pc, #216]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b08      	cmp	r3, #8
 800450e:	d061      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d146      	bne.n	80045a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004518:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <HAL_RCC_OscConfig+0x4cc>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fe fdb5 	bl	800308c <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004526:	f7fe fdb1 	bl	800308c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e06d      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004538:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454c:	d108      	bne.n	8004560 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800454e:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	4921      	ldr	r1, [pc, #132]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	4313      	orrs	r3, r2
 800455e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004560:	4b1f      	ldr	r3, [pc, #124]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a19      	ldr	r1, [r3, #32]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	430b      	orrs	r3, r1
 8004572:	491b      	ldr	r1, [pc, #108]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004578:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <HAL_RCC_OscConfig+0x4cc>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457e:	f7fe fd85 	bl	800308c <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004586:	f7fe fd81 	bl	800308c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e03d      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x46a>
 80045a4:	e035      	b.n	8004612 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <HAL_RCC_OscConfig+0x4cc>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ac:	f7fe fd6e 	bl	800308c <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fe fd6a 	bl	800308c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e026      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x498>
 80045d2:	e01e      	b.n	8004612 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d107      	bne.n	80045ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e019      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40007000 	.word	0x40007000
 80045e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_OscConfig+0x500>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000

08004620 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0d0      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004634:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d910      	bls.n	8004664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b67      	ldr	r3, [pc, #412]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 0207 	bic.w	r2, r3, #7
 800464a:	4965      	ldr	r1, [pc, #404]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b63      	ldr	r3, [pc, #396]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e0b8      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800467c:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a58      	ldr	r2, [pc, #352]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004682:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004686:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004694:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a52      	ldr	r2, [pc, #328]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800469a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800469e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a0:	4b50      	ldr	r3, [pc, #320]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	494d      	ldr	r1, [pc, #308]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d040      	beq.n	8004740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c6:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d115      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07f      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d107      	bne.n	80046ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046de:	4b41      	ldr	r3, [pc, #260]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e073      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ee:	4b3d      	ldr	r3, [pc, #244]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e06b      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046fe:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f023 0203 	bic.w	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4936      	ldr	r1, [pc, #216]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004710:	f7fe fcbc 	bl	800308c <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	e00a      	b.n	800472e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004718:	f7fe fcb8 	bl	800308c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d901      	bls.n	800472e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e053      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472e:	4b2d      	ldr	r3, [pc, #180]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 020c 	and.w	r2, r3, #12
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	429a      	cmp	r2, r3
 800473e:	d1eb      	bne.n	8004718 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004740:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d210      	bcs.n	8004770 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474e:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f023 0207 	bic.w	r2, r3, #7
 8004756:	4922      	ldr	r1, [pc, #136]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e032      	b.n	80047d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d008      	beq.n	800478e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800477c:	4b19      	ldr	r3, [pc, #100]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4916      	ldr	r1, [pc, #88]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	490e      	ldr	r1, [pc, #56]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ae:	f000 f821 	bl	80047f4 <HAL_RCC_GetSysClockFreq>
 80047b2:	4602      	mov	r2, r0
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 030f 	and.w	r3, r3, #15
 80047be:	490a      	ldr	r1, [pc, #40]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	5ccb      	ldrb	r3, [r1, r3]
 80047c2:	fa22 f303 	lsr.w	r3, r2, r3
 80047c6:	4a09      	ldr	r2, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x1cc>)
 80047c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <HAL_RCC_ClockConfig+0x1d0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe fb4c 	bl	8002e6c <HAL_InitTick>

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40021000 	.word	0x40021000
 80047e8:	080090e4 	.word	0x080090e4
 80047ec:	20000018 	.word	0x20000018
 80047f0:	2000001c 	.word	0x2000001c

080047f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f4:	b490      	push	{r4, r7}
 80047f6:	b08a      	sub	sp, #40	; 0x28
 80047f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80047fa:	4b29      	ldr	r3, [pc, #164]	; (80048a0 <HAL_RCC_GetSysClockFreq+0xac>)
 80047fc:	1d3c      	adds	r4, r7, #4
 80047fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004804:	f240 2301 	movw	r3, #513	; 0x201
 8004808:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	2300      	movs	r3, #0
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800481e:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b04      	cmp	r3, #4
 800482c:	d002      	beq.n	8004834 <HAL_RCC_GetSysClockFreq+0x40>
 800482e:	2b08      	cmp	r3, #8
 8004830:	d003      	beq.n	800483a <HAL_RCC_GetSysClockFreq+0x46>
 8004832:	e02b      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004834:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004836:	623b      	str	r3, [r7, #32]
      break;
 8004838:	e02b      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	0c9b      	lsrs	r3, r3, #18
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	3328      	adds	r3, #40	; 0x28
 8004844:	443b      	add	r3, r7
 8004846:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800484a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d012      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	0c5b      	lsrs	r3, r3, #17
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	3328      	adds	r3, #40	; 0x28
 8004862:	443b      	add	r3, r7
 8004864:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004868:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	4a0e      	ldr	r2, [pc, #56]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800486e:	fb03 f202 	mul.w	r2, r3, r2
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
 800487a:	e004      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	4a0b      	ldr	r2, [pc, #44]	; (80048ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8004880:	fb02 f303 	mul.w	r3, r2, r3
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	623b      	str	r3, [r7, #32]
      break;
 800488a:	e002      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800488e:	623b      	str	r3, [r7, #32]
      break;
 8004890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004892:	6a3b      	ldr	r3, [r7, #32]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3728      	adds	r7, #40	; 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bc90      	pop	{r4, r7}
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	08009074 	.word	0x08009074
 80048a4:	40021000 	.word	0x40021000
 80048a8:	007a1200 	.word	0x007a1200
 80048ac:	003d0900 	.word	0x003d0900

080048b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b4:	4b02      	ldr	r3, [pc, #8]	; (80048c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80048b6:	681b      	ldr	r3, [r3, #0]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr
 80048c0:	20000018 	.word	0x20000018

080048c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048c8:	f7ff fff2 	bl	80048b0 <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	080090f4 	.word	0x080090f4

080048ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	220f      	movs	r2, #15
 80048fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048fc:	4b11      	ldr	r3, [pc, #68]	; (8004944 <HAL_RCC_GetClockConfig+0x58>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 0203 	and.w	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004908:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <HAL_RCC_GetClockConfig+0x58>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004914:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCC_GetClockConfig+0x58>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004920:	4b08      	ldr	r3, [pc, #32]	; (8004944 <HAL_RCC_GetClockConfig+0x58>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0207 	and.w	r2, r3, #7
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr
 8004944:	40021000 	.word	0x40021000
 8004948:	40022000 	.word	0x40022000

0800494c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <RCC_Delay+0x34>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0a      	ldr	r2, [pc, #40]	; (8004984 <RCC_Delay+0x38>)
 800495a:	fba2 2303 	umull	r2, r3, r2, r3
 800495e:	0a5b      	lsrs	r3, r3, #9
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004968:	bf00      	nop
  }
  while (Delay --);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	60fa      	str	r2, [r7, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f9      	bne.n	8004968 <RCC_Delay+0x1c>
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr
 8004980:	20000018 	.word	0x20000018
 8004984:	10624dd3 	.word	0x10624dd3

08004988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e076      	b.n	8004a88 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d108      	bne.n	80049b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049aa:	d009      	beq.n	80049c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	61da      	str	r2, [r3, #28]
 80049b2:	e005      	b.n	80049c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7fe f980 	bl	8002ce0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a44:	ea42 0103 	orr.w	r1, r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	0c1a      	lsrs	r2, r3, #16
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f002 0204 	and.w	r2, r2, #4
 8004a66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69da      	ldr	r2, [r3, #28]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_SPI_Transmit+0x22>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e126      	b.n	8004d00 <HAL_SPI_Transmit+0x270>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aba:	f7fe fae7 	bl	800308c <HAL_GetTick>
 8004abe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d002      	beq.n	8004ad6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ad4:	e10b      	b.n	8004cee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_SPI_Transmit+0x52>
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d102      	bne.n	8004ae8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ae6:	e102      	b.n	8004cee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2203      	movs	r2, #3
 8004aec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2e:	d10f      	bne.n	8004b50 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b40      	cmp	r3, #64	; 0x40
 8004b5c:	d007      	beq.n	8004b6e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b76:	d14b      	bne.n	8004c10 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_SPI_Transmit+0xf6>
 8004b80:	8afb      	ldrh	r3, [r7, #22]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d13e      	bne.n	8004c04 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004baa:	e02b      	b.n	8004c04 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d112      	bne.n	8004be0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bde:	e011      	b.n	8004c04 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004be0:	f7fe fa54 	bl	800308c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d803      	bhi.n	8004bf8 <HAL_SPI_Transmit+0x168>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d102      	bne.n	8004bfe <HAL_SPI_Transmit+0x16e>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c02:	e074      	b.n	8004cee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ce      	bne.n	8004bac <HAL_SPI_Transmit+0x11c>
 8004c0e:	e04c      	b.n	8004caa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_SPI_Transmit+0x18e>
 8004c18:	8afb      	ldrh	r3, [r7, #22]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d140      	bne.n	8004ca0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c44:	e02c      	b.n	8004ca0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d113      	bne.n	8004c7c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	7812      	ldrb	r2, [r2, #0]
 8004c60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c7a:	e011      	b.n	8004ca0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c7c:	f7fe fa06 	bl	800308c <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d803      	bhi.n	8004c94 <HAL_SPI_Transmit+0x204>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d102      	bne.n	8004c9a <HAL_SPI_Transmit+0x20a>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d102      	bne.n	8004ca0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c9e:	e026      	b.n	8004cee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1cd      	bne.n	8004c46 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 fcbc 	bl	800562c <SPI_EndRxTxTransaction>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e000      	b.n	8004cee <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b088      	sub	sp, #32
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	4613      	mov	r3, r2
 8004d16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d24:	d112      	bne.n	8004d4c <HAL_SPI_Receive+0x44>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10e      	bne.n	8004d4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2204      	movs	r2, #4
 8004d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f8f1 	bl	8004f2a <HAL_SPI_TransmitReceive>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	e0ea      	b.n	8004f22 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_SPI_Receive+0x52>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e0e3      	b.n	8004f22 <HAL_SPI_Receive+0x21a>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d62:	f7fe f993 	bl	800308c <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d002      	beq.n	8004d7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
 8004d76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d78:	e0ca      	b.n	8004f10 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_SPI_Receive+0x7e>
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d102      	bne.n	8004d8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d8a:	e0c1      	b.n	8004f10 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	88fa      	ldrh	r2, [r7, #6]
 8004daa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd2:	d10f      	bne.n	8004df4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004df2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d007      	beq.n	8004e12 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d162      	bne.n	8004ee0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e1a:	e02e      	b.n	8004e7a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d115      	bne.n	8004e56 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f103 020c 	add.w	r2, r3, #12
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	7812      	ldrb	r2, [r2, #0]
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e54:	e011      	b.n	8004e7a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e56:	f7fe f919 	bl	800308c <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d803      	bhi.n	8004e6e <HAL_SPI_Receive+0x166>
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d102      	bne.n	8004e74 <HAL_SPI_Receive+0x16c>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e78:	e04a      	b.n	8004f10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1cb      	bne.n	8004e1c <HAL_SPI_Receive+0x114>
 8004e84:	e031      	b.n	8004eea <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d113      	bne.n	8004ebc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	b292      	uxth	r2, r2
 8004ea0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	1c9a      	adds	r2, r3, #2
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eba:	e011      	b.n	8004ee0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ebc:	f7fe f8e6 	bl	800308c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d803      	bhi.n	8004ed4 <HAL_SPI_Receive+0x1cc>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d102      	bne.n	8004eda <HAL_SPI_Receive+0x1d2>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d102      	bne.n	8004ee0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ede:	e017      	b.n	8004f10 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1cd      	bne.n	8004e86 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	6839      	ldr	r1, [r7, #0]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fb4a 	bl	8005588 <SPI_EndRxTransaction>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	75fb      	strb	r3, [r7, #23]
 8004f0c:	e000      	b.n	8004f10 <HAL_SPI_Receive+0x208>
  }

error :
 8004f0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b08c      	sub	sp, #48	; 0x30
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x26>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e18a      	b.n	8005266 <HAL_SPI_TransmitReceive+0x33c>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f58:	f7fe f898 	bl	800308c <HAL_GetTick>
 8004f5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f6e:	887b      	ldrh	r3, [r7, #2]
 8004f70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d00f      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x70>
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f80:	d107      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d103      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x68>
 8004f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d003      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f92:	2302      	movs	r3, #2
 8004f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f98:	e15b      	b.n	8005252 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x82>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x82>
 8004fa6:	887b      	ldrh	r3, [r7, #2]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d103      	bne.n	8004fb4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fb2:	e14e      	b.n	8005252 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d003      	beq.n	8004fc8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2205      	movs	r2, #5
 8004fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	887a      	ldrh	r2, [r7, #2]
 8004fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	887a      	ldrh	r2, [r7, #2]
 8004fde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	887a      	ldrh	r2, [r7, #2]
 8004fea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	887a      	ldrh	r2, [r7, #2]
 8004ff0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d007      	beq.n	800501c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005024:	d178      	bne.n	8005118 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_SPI_TransmitReceive+0x10a>
 800502e:	8b7b      	ldrh	r3, [r7, #26]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d166      	bne.n	8005102 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	881a      	ldrh	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005058:	e053      	b.n	8005102 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	d11b      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x176>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_SPI_TransmitReceive+0x176>
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d113      	bne.n	80050a0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	881a      	ldrh	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	1c9a      	adds	r2, r3, #2
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005092:	b29b      	uxth	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d119      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x1b8>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d014      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	b292      	uxth	r2, r2
 80050c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ca:	1c9a      	adds	r2, r3, #2
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050de:	2301      	movs	r3, #1
 80050e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050e2:	f7fd ffd3 	bl	800308c <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d807      	bhi.n	8005102 <HAL_SPI_TransmitReceive+0x1d8>
 80050f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d003      	beq.n	8005102 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005100:	e0a7      	b.n	8005252 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1a6      	bne.n	800505a <HAL_SPI_TransmitReceive+0x130>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1a1      	bne.n	800505a <HAL_SPI_TransmitReceive+0x130>
 8005116:	e07c      	b.n	8005212 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_SPI_TransmitReceive+0x1fc>
 8005120:	8b7b      	ldrh	r3, [r7, #26]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d16b      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	7812      	ldrb	r2, [r2, #0]
 8005132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800514c:	e057      	b.n	80051fe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	d11c      	bne.n	8005196 <HAL_SPI_TransmitReceive+0x26c>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d017      	beq.n	8005196 <HAL_SPI_TransmitReceive+0x26c>
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d114      	bne.n	8005196 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	330c      	adds	r3, #12
 8005176:	7812      	ldrb	r2, [r2, #0]
 8005178:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d119      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x2ae>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d014      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051d4:	2301      	movs	r3, #1
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051d8:	f7fd ff58 	bl	800308c <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d803      	bhi.n	80051f0 <HAL_SPI_TransmitReceive+0x2c6>
 80051e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ee:	d102      	bne.n	80051f6 <HAL_SPI_TransmitReceive+0x2cc>
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051fc:	e029      	b.n	8005252 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1a2      	bne.n	800514e <HAL_SPI_TransmitReceive+0x224>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d19d      	bne.n	800514e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fa08 	bl	800562c <SPI_EndRxTxTransaction>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d006      	beq.n	8005230 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800522e:	e010      	b.n	8005252 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	e000      	b.n	8005252 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005250:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005262:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005266:	4618      	mov	r0, r3
 8005268:	3730      	adds	r7, #48	; 0x30
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	099b      	lsrs	r3, r3, #6
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10f      	bne.n	80052b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	099b      	lsrs	r3, r3, #6
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
    return;
 80052b2:	e0be      	b.n	8005432 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	085b      	lsrs	r3, r3, #1
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <HAL_SPI_IRQHandler+0x66>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	09db      	lsrs	r3, r3, #7
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d004      	beq.n	80052d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
    return;
 80052d4:	e0ad      	b.n	8005432 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	095b      	lsrs	r3, r3, #5
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_SPI_IRQHandler+0x80>
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	099b      	lsrs	r3, r3, #6
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80a1 	beq.w	8005432 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 809a 	beq.w	8005432 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	099b      	lsrs	r3, r3, #6
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d023      	beq.n	8005352 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b03      	cmp	r3, #3
 8005314:	d011      	beq.n	800533a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	e00b      	b.n	8005352 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]
        return;
 8005350:	e06f      	b.n	8005432 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d014      	beq.n	8005388 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005362:	f043 0201 	orr.w	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538c:	2b00      	cmp	r3, #0
 800538e:	d04f      	beq.n	8005430 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800539e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <HAL_SPI_IRQHandler+0x14c>
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d034      	beq.n	8005426 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0203 	bic.w	r2, r2, #3
 80053ca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d011      	beq.n	80053f8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d8:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_SPI_IRQHandler+0x1c8>)
 80053da:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe fc6f 	bl	8003cc4 <HAL_DMA_Abort_IT>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d016      	beq.n	800542e <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005404:	4a0c      	ldr	r2, [pc, #48]	; (8005438 <HAL_SPI_IRQHandler+0x1c8>)
 8005406:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800540c:	4618      	mov	r0, r3
 800540e:	f7fe fc59 	bl	8003cc4 <HAL_DMA_Abort_IT>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005424:	e003      	b.n	800542e <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f808 	bl	800543c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800542c:	e000      	b.n	8005430 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800542e:	bf00      	nop
    return;
 8005430:	bf00      	nop
  }
}
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	0800544f 	.word	0x0800544f

0800543c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7ff ffe7 	bl	800543c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800546e:	bf00      	nop
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005488:	f7fd fe00 	bl	800308c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	4413      	add	r3, r2
 8005496:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005498:	f7fd fdf8 	bl	800308c <HAL_GetTick>
 800549c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800549e:	4b39      	ldr	r3, [pc, #228]	; (8005584 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	015b      	lsls	r3, r3, #5
 80054a4:	0d1b      	lsrs	r3, r3, #20
 80054a6:	69fa      	ldr	r2, [r7, #28]
 80054a8:	fb02 f303 	mul.w	r3, r2, r3
 80054ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054ae:	e054      	b.n	800555a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b6:	d050      	beq.n	800555a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054b8:	f7fd fde8 	bl	800308c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d902      	bls.n	80054ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d13d      	bne.n	800554a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e6:	d111      	bne.n	800550c <SPI_WaitFlagStateUntilTimeout+0x94>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f0:	d004      	beq.n	80054fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054fa:	d107      	bne.n	800550c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800550a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005514:	d10f      	bne.n	8005536 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e017      	b.n	800557a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	3b01      	subs	r3, #1
 8005558:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	429a      	cmp	r2, r3
 8005576:	d19b      	bne.n	80054b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3720      	adds	r7, #32
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000018 	.word	0x20000018

08005588 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af02      	add	r7, sp, #8
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559c:	d111      	bne.n	80055c2 <SPI_EndRxTransaction+0x3a>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a6:	d004      	beq.n	80055b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b0:	d107      	bne.n	80055c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055c0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ca:	d117      	bne.n	80055fc <SPI_EndRxTransaction+0x74>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d4:	d112      	bne.n	80055fc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2200      	movs	r2, #0
 80055de:	2101      	movs	r1, #1
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f7ff ff49 	bl	8005478 <SPI_WaitFlagStateUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e013      	b.n	8005624 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2200      	movs	r2, #0
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f7ff ff36 	bl	8005478 <SPI_WaitFlagStateUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e000      	b.n	8005624 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f7ff ff18 	bl	8005478 <SPI_WaitFlagStateUntilTimeout>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e000      	b.n	8005660 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e041      	b.n	80056fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f839 	bl	8005706 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f000 f9b4 	bl	8005a14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b01      	cmp	r3, #1
 800572a:	d001      	beq.n	8005730 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e03a      	b.n	80057a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <HAL_TIM_Base_Start_IT+0x98>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00e      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x58>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575a:	d009      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x58>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a14      	ldr	r2, [pc, #80]	; (80057b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x58>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d111      	bne.n	8005794 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b06      	cmp	r3, #6
 8005780:	d010      	beq.n	80057a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0201 	orr.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005792:	e007      	b.n	80057a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800

080057bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0202 	mvn.w	r2, #2
 80057e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f8ed 	bl	80059de <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f8e0 	bl	80059cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f8ef 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b04      	cmp	r3, #4
 8005824:	d122      	bne.n	800586c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b04      	cmp	r3, #4
 8005832:	d11b      	bne.n	800586c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0204 	mvn.w	r2, #4
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8c3 	bl	80059de <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f8b6 	bl	80059cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f8c5 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b08      	cmp	r3, #8
 8005878:	d122      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b08      	cmp	r3, #8
 8005886:	d11b      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0208 	mvn.w	r2, #8
 8005890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2204      	movs	r2, #4
 8005896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f899 	bl	80059de <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f88c 	bl	80059cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f89b 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d122      	bne.n	8005914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d11b      	bne.n	8005914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0210 	mvn.w	r2, #16
 80058e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2208      	movs	r2, #8
 80058ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f86f 	bl	80059de <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f862 	bl	80059cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f871 	bl	80059f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10e      	bne.n	8005940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	d107      	bne.n	8005940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0201 	mvn.w	r2, #1
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fd f94c 	bl	8002bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b80      	cmp	r3, #128	; 0x80
 800594c:	d10e      	bne.n	800596c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005958:	2b80      	cmp	r3, #128	; 0x80
 800595a:	d107      	bne.n	800596c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f8bf 	bl	8005aea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005976:	2b40      	cmp	r3, #64	; 0x40
 8005978:	d10e      	bne.n	8005998 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d107      	bne.n	8005998 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f835 	bl	8005a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0320 	and.w	r3, r3, #32
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d10e      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0320 	and.w	r3, r3, #32
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d107      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0220 	mvn.w	r2, #32
 80059bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f88a 	bl	8005ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr

080059de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059de:	b480      	push	{r7}
 80059e0:	b083      	sub	sp, #12
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr

08005a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bc80      	pop	{r7}
 8005a12:	4770      	bx	lr

08005a14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a29      	ldr	r2, [pc, #164]	; (8005acc <TIM_Base_SetConfig+0xb8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00b      	beq.n	8005a44 <TIM_Base_SetConfig+0x30>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d007      	beq.n	8005a44 <TIM_Base_SetConfig+0x30>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a26      	ldr	r2, [pc, #152]	; (8005ad0 <TIM_Base_SetConfig+0xbc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <TIM_Base_SetConfig+0x30>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a25      	ldr	r2, [pc, #148]	; (8005ad4 <TIM_Base_SetConfig+0xc0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d108      	bne.n	8005a56 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <TIM_Base_SetConfig+0xb8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00b      	beq.n	8005a76 <TIM_Base_SetConfig+0x62>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a64:	d007      	beq.n	8005a76 <TIM_Base_SetConfig+0x62>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a19      	ldr	r2, [pc, #100]	; (8005ad0 <TIM_Base_SetConfig+0xbc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d003      	beq.n	8005a76 <TIM_Base_SetConfig+0x62>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <TIM_Base_SetConfig+0xc0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d108      	bne.n	8005a88 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a07      	ldr	r2, [pc, #28]	; (8005acc <TIM_Base_SetConfig+0xb8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d103      	bne.n	8005abc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	615a      	str	r2, [r3, #20]
}
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800

08005ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b02:	f3ef 8305 	mrs	r3, IPSR
 8005b06:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10f      	bne.n	8005b2e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b12:	607b      	str	r3, [r7, #4]
  return(result);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <osKernelInitialize+0x32>
 8005b1a:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <osKernelInitialize+0x60>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d109      	bne.n	8005b36 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b22:	f3ef 8311 	mrs	r3, BASEPRI
 8005b26:	603b      	str	r3, [r7, #0]
  return(result);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005b2e:	f06f 0305 	mvn.w	r3, #5
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e00c      	b.n	8005b50 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <osKernelInitialize+0x60>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d105      	bne.n	8005b4a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005b3e:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <osKernelInitialize+0x60>)
 8005b40:	2201      	movs	r2, #1
 8005b42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	e002      	b.n	8005b50 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005b50:	68fb      	ldr	r3, [r7, #12]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bc80      	pop	{r7}
 8005b5a:	4770      	bx	lr
 8005b5c:	20000344 	.word	0x20000344

08005b60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b66:	f3ef 8305 	mrs	r3, IPSR
 8005b6a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b72:	f3ef 8310 	mrs	r3, PRIMASK
 8005b76:	607b      	str	r3, [r7, #4]
  return(result);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <osKernelStart+0x32>
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <osKernelStart+0x64>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d109      	bne.n	8005b9a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b86:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8a:	603b      	str	r3, [r7, #0]
  return(result);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005b92:	f06f 0305 	mvn.w	r3, #5
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	e00e      	b.n	8005bb8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <osKernelStart+0x64>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d107      	bne.n	8005bb2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005ba2:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <osKernelStart+0x64>)
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005ba8:	f001 f90e 	bl	8006dc8 <vTaskStartScheduler>
      stat = osOK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e002      	b.n	8005bb8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000344 	.word	0x20000344

08005bc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b092      	sub	sp, #72	; 0x48
 8005bcc:	af04      	add	r7, sp, #16
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd8:	f3ef 8305 	mrs	r3, IPSR
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f040 8094 	bne.w	8005d0e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005be6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bea:	623b      	str	r3, [r7, #32]
  return(result);
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 808d 	bne.w	8005d0e <osThreadNew+0x146>
 8005bf4:	4b48      	ldr	r3, [pc, #288]	; (8005d18 <osThreadNew+0x150>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d106      	bne.n	8005c0a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8005c00:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f040 8082 	bne.w	8005d0e <osThreadNew+0x146>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d07e      	beq.n	8005d0e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005c14:	2318      	movs	r3, #24
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005c18:	2300      	movs	r3, #0
 8005c1a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005c1c:	f107 031b 	add.w	r3, r7, #27
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d045      	beq.n	8005cba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <osThreadNew+0x74>
        name = attr->name;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <osThreadNew+0x9a>
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	2b38      	cmp	r3, #56	; 0x38
 8005c54:	d805      	bhi.n	8005c62 <osThreadNew+0x9a>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <osThreadNew+0x9e>
        return (NULL);
 8005c62:	2300      	movs	r3, #0
 8005c64:	e054      	b.n	8005d10 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00e      	beq.n	8005c9c <osThreadNew+0xd4>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	2bbb      	cmp	r3, #187	; 0xbb
 8005c84:	d90a      	bls.n	8005c9c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d006      	beq.n	8005c9c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <osThreadNew+0xd4>
        mem = 1;
 8005c96:	2301      	movs	r3, #1
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9a:	e010      	b.n	8005cbe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10c      	bne.n	8005cbe <osThreadNew+0xf6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d108      	bne.n	8005cbe <osThreadNew+0xf6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <osThreadNew+0xf6>
          mem = 0;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb8:	e001      	b.n	8005cbe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d110      	bne.n	8005ce6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ccc:	9202      	str	r2, [sp, #8]
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fe12 	bl	8006904 <xTaskCreateStatic>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e013      	b.n	8005d0e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d110      	bne.n	8005d0e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	f107 0314 	add.w	r3, r7, #20
 8005cf4:	9301      	str	r3, [sp, #4]
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fe5c 	bl	80069bc <xTaskCreate>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d001      	beq.n	8005d0e <osThreadNew+0x146>
          hTask = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d0e:	697b      	ldr	r3, [r7, #20]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3738      	adds	r7, #56	; 0x38
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000344 	.word	0x20000344

08005d1c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d24:	f3ef 8305 	mrs	r3, IPSR
 8005d28:	613b      	str	r3, [r7, #16]
  return(result);
 8005d2a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10f      	bne.n	8005d50 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d30:	f3ef 8310 	mrs	r3, PRIMASK
 8005d34:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <osDelay+0x34>
 8005d3c:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <osDelay+0x58>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d109      	bne.n	8005d58 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d44:	f3ef 8311 	mrs	r3, BASEPRI
 8005d48:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <osDelay+0x3c>
    stat = osErrorISR;
 8005d50:	f06f 0305 	mvn.w	r3, #5
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e007      	b.n	8005d68 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fffc 	bl	8006d60 <vTaskDelay>
    }
  }

  return (stat);
 8005d68:	697b      	ldr	r3, [r7, #20]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000344 	.word	0x20000344

08005d78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4a06      	ldr	r2, [pc, #24]	; (8005da0 <vApplicationGetIdleTaskMemory+0x28>)
 8005d88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4a05      	ldr	r2, [pc, #20]	; (8005da4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005d8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr
 8005da0:	20000348 	.word	0x20000348
 8005da4:	20000404 	.word	0x20000404

08005da8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005db8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	4a06      	ldr	r2, [pc, #24]	; (8005dd8 <vApplicationGetTimerTaskMemory+0x30>)
 8005dbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dc6:	601a      	str	r2, [r3, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000604 	.word	0x20000604
 8005dd8:	200006c0 	.word	0x200006c0

08005ddc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f103 0208 	add.w	r2, r3, #8
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f103 0208 	add.w	r2, r3, #8
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f103 0208 	add.w	r2, r3, #8
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bc80      	pop	{r7}
 8005e30:	4770      	bx	lr

08005e32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
 8005e3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
}
 8005e6e:	bf00      	nop
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d103      	bne.n	8005e98 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e00c      	b.n	8005eb2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3308      	adds	r3, #8
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	e002      	b.n	8005ea6 <vListInsert+0x2e>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d2f6      	bcs.n	8005ea0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr

08005ee8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6892      	ldr	r2, [r2, #8]
 8005efe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6852      	ldr	r2, [r2, #4]
 8005f08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d103      	bne.n	8005f1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	1e5a      	subs	r2, r3, #1
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr
	...

08005f3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10a      	bne.n	8005f66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f62:	bf00      	nop
 8005f64:	e7fe      	b.n	8005f64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f66:	f002 f871 	bl	800804c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	68f9      	ldr	r1, [r7, #12]
 8005f74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f76:	fb01 f303 	mul.w	r3, r1, r3
 8005f7a:	441a      	add	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	3b01      	subs	r3, #1
 8005f98:	68f9      	ldr	r1, [r7, #12]
 8005f9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	441a      	add	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	22ff      	movs	r2, #255	; 0xff
 8005faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	22ff      	movs	r2, #255	; 0xff
 8005fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d114      	bne.n	8005fe6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01a      	beq.n	8005ffa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3310      	adds	r3, #16
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f999 	bl	8007300 <xTaskRemoveFromEventList>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d012      	beq.n	8005ffa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <xQueueGenericReset+0xcc>)
 8005fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	e009      	b.n	8005ffa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3310      	adds	r3, #16
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff fef6 	bl	8005ddc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3324      	adds	r3, #36	; 0x24
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fef1 	bl	8005ddc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ffa:	f002 f857 	bl	80080ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ffe:	2301      	movs	r3, #1
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08e      	sub	sp, #56	; 0x38
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <xQueueGenericCreateStatic+0x52>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <xQueueGenericCreateStatic+0x56>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <xQueueGenericCreateStatic+0x58>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	623b      	str	r3, [r7, #32]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d102      	bne.n	800608a <xQueueGenericCreateStatic+0x7e>
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <xQueueGenericCreateStatic+0x82>
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <xQueueGenericCreateStatic+0x84>
 800608e:	2300      	movs	r3, #0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10a      	bne.n	80060aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	61fb      	str	r3, [r7, #28]
}
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060aa:	2350      	movs	r3, #80	; 0x50
 80060ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b50      	cmp	r3, #80	; 0x50
 80060b2:	d00a      	beq.n	80060ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	61bb      	str	r3, [r7, #24]
}
 80060c6:	bf00      	nop
 80060c8:	e7fe      	b.n	80060c8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80060ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00d      	beq.n	80060f0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80060d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80060dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80060e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f805 	bl	80060fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3730      	adds	r7, #48	; 0x30
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	607a      	str	r2, [r7, #4]
 8006106:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e002      	b.n	800611c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006128:	2101      	movs	r1, #1
 800612a:	69b8      	ldr	r0, [r7, #24]
 800612c:	f7ff ff06 	bl	8005f3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	78fa      	ldrb	r2, [r7, #3]
 8006134:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	; 0x38
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xQueueGenericSend+0x32>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <xQueueGenericSend+0x40>
 8006178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <xQueueGenericSend+0x44>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <xQueueGenericSend+0x46>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10a      	bne.n	80061a0 <xQueueGenericSend+0x60>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800619c:	bf00      	nop
 800619e:	e7fe      	b.n	800619e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d103      	bne.n	80061ae <xQueueGenericSend+0x6e>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <xQueueGenericSend+0x72>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <xQueueGenericSend+0x74>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10a      	bne.n	80061ce <xQueueGenericSend+0x8e>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	623b      	str	r3, [r7, #32]
}
 80061ca:	bf00      	nop
 80061cc:	e7fe      	b.n	80061cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061ce:	f001 fa5d 	bl	800768c <xTaskGetSchedulerState>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d102      	bne.n	80061de <xQueueGenericSend+0x9e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <xQueueGenericSend+0xa2>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <xQueueGenericSend+0xa4>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericSend+0xbe>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	61fb      	str	r3, [r7, #28]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061fe:	f001 ff25 	bl	800804c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620a:	429a      	cmp	r2, r3
 800620c:	d302      	bcc.n	8006214 <xQueueGenericSend+0xd4>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d129      	bne.n	8006268 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800621a:	f000 fa07 	bl	800662c <prvCopyDataToQueue>
 800621e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d010      	beq.n	800624a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	3324      	adds	r3, #36	; 0x24
 800622c:	4618      	mov	r0, r3
 800622e:	f001 f867 	bl	8007300 <xTaskRemoveFromEventList>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d013      	beq.n	8006260 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006238:	4b3f      	ldr	r3, [pc, #252]	; (8006338 <xQueueGenericSend+0x1f8>)
 800623a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	e00a      	b.n	8006260 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d007      	beq.n	8006260 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006250:	4b39      	ldr	r3, [pc, #228]	; (8006338 <xQueueGenericSend+0x1f8>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006260:	f001 ff24 	bl	80080ac <vPortExitCritical>
				return pdPASS;
 8006264:	2301      	movs	r3, #1
 8006266:	e063      	b.n	8006330 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d103      	bne.n	8006276 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800626e:	f001 ff1d 	bl	80080ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006272:	2300      	movs	r3, #0
 8006274:	e05c      	b.n	8006330 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006278:	2b00      	cmp	r3, #0
 800627a:	d106      	bne.n	800628a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800627c:	f107 0314 	add.w	r3, r7, #20
 8006280:	4618      	mov	r0, r3
 8006282:	f001 f8a1 	bl	80073c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006286:	2301      	movs	r3, #1
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800628a:	f001 ff0f 	bl	80080ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800628e:	f000 fe0b 	bl	8006ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006292:	f001 fedb 	bl	800804c <vPortEnterCritical>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800629c:	b25b      	sxtb	r3, r3
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d103      	bne.n	80062ac <xQueueGenericSend+0x16c>
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSend+0x182>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c2:	f001 fef3 	bl	80080ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062c6:	1d3a      	adds	r2, r7, #4
 80062c8:	f107 0314 	add.w	r3, r7, #20
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 f890 	bl	80073f4 <xTaskCheckForTimeOut>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d124      	bne.n	8006324 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80062da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062dc:	f000 fa9e 	bl	800681c <prvIsQueueFull>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d018      	beq.n	8006318 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	3310      	adds	r3, #16
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 ffb6 	bl	8007260 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80062f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062f6:	f000 fa29 	bl	800674c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80062fa:	f000 fde3 	bl	8006ec4 <xTaskResumeAll>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	f47f af7c 	bne.w	80061fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <xQueueGenericSend+0x1f8>)
 8006308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	e772      	b.n	80061fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800631a:	f000 fa17 	bl	800674c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800631e:	f000 fdd1 	bl	8006ec4 <xTaskResumeAll>
 8006322:	e76c      	b.n	80061fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006326:	f000 fa11 	bl	800674c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800632a:	f000 fdcb 	bl	8006ec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800632e:	2300      	movs	r3, #0
		}
	}
}
 8006330:	4618      	mov	r0, r3
 8006332:	3738      	adds	r7, #56	; 0x38
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08e      	sub	sp, #56	; 0x38
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d103      	bne.n	8006378 <xQueueGenericSendFromISR+0x3c>
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <xQueueGenericSendFromISR+0x40>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <xQueueGenericSendFromISR+0x42>
 800637c:	2300      	movs	r3, #0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10a      	bne.n	8006398 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	623b      	str	r3, [r7, #32]
}
 8006394:	bf00      	nop
 8006396:	e7fe      	b.n	8006396 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d103      	bne.n	80063a6 <xQueueGenericSendFromISR+0x6a>
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <xQueueGenericSendFromISR+0x6e>
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <xQueueGenericSendFromISR+0x70>
 80063aa:	2300      	movs	r3, #0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	61fb      	str	r3, [r7, #28]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063c6:	f001 ff03 	bl	80081d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80063ca:	f3ef 8211 	mrs	r2, BASEPRI
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	61ba      	str	r2, [r7, #24]
 80063e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80063e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80063e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <xQueueGenericSendFromISR+0xbc>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d12c      	bne.n	8006452 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006408:	f000 f910 	bl	800662c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800640c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006414:	d112      	bne.n	800643c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d016      	beq.n	800644c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	3324      	adds	r3, #36	; 0x24
 8006422:	4618      	mov	r0, r3
 8006424:	f000 ff6c 	bl	8007300 <xTaskRemoveFromEventList>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00e      	beq.n	800644c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00b      	beq.n	800644c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e007      	b.n	800644c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800643c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006440:	3301      	adds	r3, #1
 8006442:	b2db      	uxtb	r3, r3
 8006444:	b25a      	sxtb	r2, r3
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800644c:	2301      	movs	r3, #1
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006450:	e001      	b.n	8006456 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006452:	2300      	movs	r3, #0
 8006454:	637b      	str	r3, [r7, #52]	; 0x34
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006460:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006464:	4618      	mov	r0, r3
 8006466:	3738      	adds	r7, #56	; 0x38
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	; 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <xQueueReceive+0x30>
	__asm volatile
 8006486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648a:	f383 8811 	msr	BASEPRI, r3
 800648e:	f3bf 8f6f 	isb	sy
 8006492:	f3bf 8f4f 	dsb	sy
 8006496:	623b      	str	r3, [r7, #32]
}
 8006498:	bf00      	nop
 800649a:	e7fe      	b.n	800649a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d103      	bne.n	80064aa <xQueueReceive+0x3e>
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <xQueueReceive+0x42>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <xQueueReceive+0x44>
 80064ae:	2300      	movs	r3, #0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <xQueueReceive+0x5e>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	61fb      	str	r3, [r7, #28]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064ca:	f001 f8df 	bl	800768c <xTaskGetSchedulerState>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <xQueueReceive+0x6e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <xQueueReceive+0x72>
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <xQueueReceive+0x74>
 80064de:	2300      	movs	r3, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xQueueReceive+0x8e>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	61bb      	str	r3, [r7, #24]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80064fa:	f001 fda7 	bl	800804c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01f      	beq.n	800654a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650e:	f000 f8f7 	bl	8006700 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	1e5a      	subs	r2, r3, #1
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00f      	beq.n	8006542 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	3310      	adds	r3, #16
 8006526:	4618      	mov	r0, r3
 8006528:	f000 feea 	bl	8007300 <xTaskRemoveFromEventList>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d007      	beq.n	8006542 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006532:	4b3d      	ldr	r3, [pc, #244]	; (8006628 <xQueueReceive+0x1bc>)
 8006534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006542:	f001 fdb3 	bl	80080ac <vPortExitCritical>
				return pdPASS;
 8006546:	2301      	movs	r3, #1
 8006548:	e069      	b.n	800661e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006550:	f001 fdac 	bl	80080ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006554:	2300      	movs	r3, #0
 8006556:	e062      	b.n	800661e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655a:	2b00      	cmp	r3, #0
 800655c:	d106      	bne.n	800656c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800655e:	f107 0310 	add.w	r3, r7, #16
 8006562:	4618      	mov	r0, r3
 8006564:	f000 ff30 	bl	80073c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006568:	2301      	movs	r3, #1
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800656c:	f001 fd9e 	bl	80080ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006570:	f000 fc9a 	bl	8006ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006574:	f001 fd6a 	bl	800804c <vPortEnterCritical>
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800657e:	b25b      	sxtb	r3, r3
 8006580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006584:	d103      	bne.n	800658e <xQueueReceive+0x122>
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006594:	b25b      	sxtb	r3, r3
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659a:	d103      	bne.n	80065a4 <xQueueReceive+0x138>
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065a4:	f001 fd82 	bl	80080ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065a8:	1d3a      	adds	r2, r7, #4
 80065aa:	f107 0310 	add.w	r3, r7, #16
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 ff1f 	bl	80073f4 <xTaskCheckForTimeOut>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d123      	bne.n	8006604 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065be:	f000 f917 	bl	80067f0 <prvIsQueueEmpty>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d017      	beq.n	80065f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	3324      	adds	r3, #36	; 0x24
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4611      	mov	r1, r2
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fe45 	bl	8007260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80065d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d8:	f000 f8b8 	bl	800674c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80065dc:	f000 fc72 	bl	8006ec4 <xTaskResumeAll>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d189      	bne.n	80064fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80065e6:	4b10      	ldr	r3, [pc, #64]	; (8006628 <xQueueReceive+0x1bc>)
 80065e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	e780      	b.n	80064fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80065f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065fa:	f000 f8a7 	bl	800674c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065fe:	f000 fc61 	bl	8006ec4 <xTaskResumeAll>
 8006602:	e77a      	b.n	80064fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006606:	f000 f8a1 	bl	800674c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800660a:	f000 fc5b 	bl	8006ec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800660e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006610:	f000 f8ee 	bl	80067f0 <prvIsQueueEmpty>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	f43f af6f 	beq.w	80064fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800661c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800661e:	4618      	mov	r0, r3
 8006620:	3730      	adds	r7, #48	; 0x30
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	e000ed04 	.word	0xe000ed04

0800662c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006638:	2300      	movs	r3, #0
 800663a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10d      	bne.n	8006666 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d14d      	bne.n	80066ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	4618      	mov	r0, r3
 8006658:	f001 f836 	bl	80076c8 <xTaskPriorityDisinherit>
 800665c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	605a      	str	r2, [r3, #4]
 8006664:	e043      	b.n	80066ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d119      	bne.n	80066a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6898      	ldr	r0, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	461a      	mov	r2, r3
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	f002 fc12 	bl	8008ea0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	441a      	add	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	429a      	cmp	r2, r3
 8006694:	d32b      	bcc.n	80066ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	609a      	str	r2, [r3, #8]
 800669e:	e026      	b.n	80066ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68d8      	ldr	r0, [r3, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	461a      	mov	r2, r3
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	f002 fbf8 	bl	8008ea0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	425b      	negs	r3, r3
 80066ba:	441a      	add	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d207      	bcs.n	80066dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	425b      	negs	r3, r3
 80066d6:	441a      	add	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d105      	bne.n	80066ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d002      	beq.n	80066ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066f6:	697b      	ldr	r3, [r7, #20]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	2b00      	cmp	r3, #0
 8006710:	d018      	beq.n	8006744 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	441a      	add	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	429a      	cmp	r2, r3
 800672a:	d303      	bcc.n	8006734 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68d9      	ldr	r1, [r3, #12]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	461a      	mov	r2, r3
 800673e:	6838      	ldr	r0, [r7, #0]
 8006740:	f002 fbae 	bl	8008ea0 <memcpy>
	}
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006754:	f001 fc7a 	bl	800804c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800675e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006760:	e011      	b.n	8006786 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	2b00      	cmp	r3, #0
 8006768:	d012      	beq.n	8006790 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	3324      	adds	r3, #36	; 0x24
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fdc6 	bl	8007300 <xTaskRemoveFromEventList>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800677a:	f000 fe9d 	bl	80074b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	3b01      	subs	r3, #1
 8006782:	b2db      	uxtb	r3, r3
 8006784:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800678a:	2b00      	cmp	r3, #0
 800678c:	dce9      	bgt.n	8006762 <prvUnlockQueue+0x16>
 800678e:	e000      	b.n	8006792 <prvUnlockQueue+0x46>
					break;
 8006790:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	22ff      	movs	r2, #255	; 0xff
 8006796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800679a:	f001 fc87 	bl	80080ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800679e:	f001 fc55 	bl	800804c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067aa:	e011      	b.n	80067d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d012      	beq.n	80067da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3310      	adds	r3, #16
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fda1 	bl	8007300 <xTaskRemoveFromEventList>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067c4:	f000 fe78 	bl	80074b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067c8:	7bbb      	ldrb	r3, [r7, #14]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dce9      	bgt.n	80067ac <prvUnlockQueue+0x60>
 80067d8:	e000      	b.n	80067dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	22ff      	movs	r2, #255	; 0xff
 80067e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067e4:	f001 fc62 	bl	80080ac <vPortExitCritical>
}
 80067e8:	bf00      	nop
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067f8:	f001 fc28 	bl	800804c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	2b00      	cmp	r3, #0
 8006802:	d102      	bne.n	800680a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006804:	2301      	movs	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e001      	b.n	800680e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800680e:	f001 fc4d 	bl	80080ac <vPortExitCritical>

	return xReturn;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006824:	f001 fc12 	bl	800804c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006830:	429a      	cmp	r2, r3
 8006832:	d102      	bne.n	800683a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006834:	2301      	movs	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e001      	b.n	800683e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800683e:	f001 fc35 	bl	80080ac <vPortExitCritical>

	return xReturn;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e014      	b.n	8006886 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800685c:	4a0e      	ldr	r2, [pc, #56]	; (8006898 <vQueueAddToRegistry+0x4c>)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006868:	490b      	ldr	r1, [pc, #44]	; (8006898 <vQueueAddToRegistry+0x4c>)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006872:	4a09      	ldr	r2, [pc, #36]	; (8006898 <vQueueAddToRegistry+0x4c>)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	4413      	add	r3, r2
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800687e:	e006      	b.n	800688e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b07      	cmp	r3, #7
 800688a:	d9e7      	bls.n	800685c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr
 8006898:	20000ac0 	.word	0x20000ac0

0800689c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068ac:	f001 fbce 	bl	800804c <vPortEnterCritical>
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d103      	bne.n	80068c6 <vQueueWaitForMessageRestricted+0x2a>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d103      	bne.n	80068dc <vQueueWaitForMessageRestricted+0x40>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068dc:	f001 fbe6 	bl	80080ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	3324      	adds	r3, #36	; 0x24
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fcd9 	bl	80072a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068f6:	6978      	ldr	r0, [r7, #20]
 80068f8:	f7ff ff28 	bl	800674c <prvUnlockQueue>
	}
 80068fc:	bf00      	nop
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08e      	sub	sp, #56	; 0x38
 8006908:	af04      	add	r7, sp, #16
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	623b      	str	r3, [r7, #32]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10a      	bne.n	800694a <xTaskCreateStatic+0x46>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	61fb      	str	r3, [r7, #28]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800694a:	23bc      	movs	r3, #188	; 0xbc
 800694c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2bbc      	cmp	r3, #188	; 0xbc
 8006952:	d00a      	beq.n	800696a <xTaskCreateStatic+0x66>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	61bb      	str	r3, [r7, #24]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01e      	beq.n	80069ae <xTaskCreateStatic+0xaa>
 8006970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01b      	beq.n	80069ae <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800697e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006982:	2202      	movs	r2, #2
 8006984:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006988:	2300      	movs	r3, #0
 800698a:	9303      	str	r3, [sp, #12]
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	9302      	str	r3, [sp, #8]
 8006990:	f107 0314 	add.w	r3, r7, #20
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f851 	bl	8006a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069a8:	f000 f8ec 	bl	8006b84 <prvAddNewTaskToReadyList>
 80069ac:	e001      	b.n	80069b2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069b2:	697b      	ldr	r3, [r7, #20]
	}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3728      	adds	r7, #40	; 0x28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08c      	sub	sp, #48	; 0x30
 80069c0:	af04      	add	r7, sp, #16
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	4613      	mov	r3, r2
 80069ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 fc3b 	bl	800824c <pvPortMalloc>
 80069d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80069de:	20bc      	movs	r0, #188	; 0xbc
 80069e0:	f001 fc34 	bl	800824c <pvPortMalloc>
 80069e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	631a      	str	r2, [r3, #48]	; 0x30
 80069f2:	e005      	b.n	8006a00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069f4:	6978      	ldr	r0, [r7, #20]
 80069f6:	f001 fced 	bl	80083d4 <vPortFree>
 80069fa:	e001      	b.n	8006a00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d017      	beq.n	8006a36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a0e:	88fa      	ldrh	r2, [r7, #6]
 8006a10:	2300      	movs	r3, #0
 8006a12:	9303      	str	r3, [sp, #12]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	9302      	str	r3, [sp, #8]
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f80f 	bl	8006a48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a2a:	69f8      	ldr	r0, [r7, #28]
 8006a2c:	f000 f8aa 	bl	8006b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a30:	2301      	movs	r3, #1
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	e002      	b.n	8006a3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295
 8006a3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a3c:	69bb      	ldr	r3, [r7, #24]
	}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	461a      	mov	r2, r3
 8006a60:	21a5      	movs	r1, #165	; 0xa5
 8006a62:	f002 fa2b 	bl	8008ebc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	3b01      	subs	r3, #1
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f023 0307 	bic.w	r3, r3, #7
 8006a7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f003 0307 	and.w	r3, r3, #7
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00a      	beq.n	8006aa0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	617b      	str	r3, [r7, #20]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	e012      	b.n	8006acc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	4413      	add	r3, r2
 8006aac:	7819      	ldrb	r1, [r3, #0]
 8006aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3334      	adds	r3, #52	; 0x34
 8006ab6:	460a      	mov	r2, r1
 8006ab8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d006      	beq.n	8006ad4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	2b0f      	cmp	r3, #15
 8006ad0:	d9e9      	bls.n	8006aa6 <prvInitialiseNewTask+0x5e>
 8006ad2:	e000      	b.n	8006ad6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006ad4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	2b37      	cmp	r3, #55	; 0x37
 8006ae2:	d901      	bls.n	8006ae8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ae4:	2337      	movs	r3, #55	; 0x37
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	2200      	movs	r2, #0
 8006af8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	3304      	adds	r3, #4
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff f98b 	bl	8005e1a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	3318      	adds	r3, #24
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff f986 	bl	8005e1a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	3354      	adds	r3, #84	; 0x54
 8006b38:	2260      	movs	r2, #96	; 0x60
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f002 f9bd 	bl	8008ebc <memset>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	4a0c      	ldr	r2, [pc, #48]	; (8006b78 <prvInitialiseNewTask+0x130>)
 8006b46:	659a      	str	r2, [r3, #88]	; 0x58
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	4a0c      	ldr	r2, [pc, #48]	; (8006b7c <prvInitialiseNewTask+0x134>)
 8006b4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	4a0b      	ldr	r2, [pc, #44]	; (8006b80 <prvInitialiseNewTask+0x138>)
 8006b52:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	69b8      	ldr	r0, [r7, #24]
 8006b5a:	f001 f989 	bl	8007e70 <pxPortInitialiseStack>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b70:	bf00      	nop
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	08009158 	.word	0x08009158
 8006b7c:	08009178 	.word	0x08009178
 8006b80:	08009138 	.word	0x08009138

08006b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b8c:	f001 fa5e 	bl	800804c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b90:	4b2d      	ldr	r3, [pc, #180]	; (8006c48 <prvAddNewTaskToReadyList+0xc4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	4a2c      	ldr	r2, [pc, #176]	; (8006c48 <prvAddNewTaskToReadyList+0xc4>)
 8006b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b9a:	4b2c      	ldr	r3, [pc, #176]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ba8:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <prvAddNewTaskToReadyList+0xc4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d110      	bne.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bb0:	f000 fca6 	bl	8007500 <prvInitialiseTaskLists>
 8006bb4:	e00d      	b.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bb6:	4b26      	ldr	r3, [pc, #152]	; (8006c50 <prvAddNewTaskToReadyList+0xcc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bbe:	4b23      	ldr	r3, [pc, #140]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d802      	bhi.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bd2:	4b20      	ldr	r3, [pc, #128]	; (8006c54 <prvAddNewTaskToReadyList+0xd0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <prvAddNewTaskToReadyList+0xd0>)
 8006bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <prvAddNewTaskToReadyList+0xd0>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <prvAddNewTaskToReadyList+0xd4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d903      	bls.n	8006bf8 <prvAddNewTaskToReadyList+0x74>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <prvAddNewTaskToReadyList+0xd4>)
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <prvAddNewTaskToReadyList+0xd8>)
 8006c06:	441a      	add	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f7ff f90f 	bl	8005e32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c14:	f001 fa4a 	bl	80080ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c18:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <prvAddNewTaskToReadyList+0xcc>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00e      	beq.n	8006c3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c20:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d207      	bcs.n	8006c3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <prvAddNewTaskToReadyList+0xdc>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000fd4 	.word	0x20000fd4
 8006c4c:	20000b00 	.word	0x20000b00
 8006c50:	20000fe0 	.word	0x20000fe0
 8006c54:	20000ff0 	.word	0x20000ff0
 8006c58:	20000fdc 	.word	0x20000fdc
 8006c5c:	20000b04 	.word	0x20000b04
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	; 0x28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <vTaskDelayUntil+0x2a>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	617b      	str	r3, [r7, #20]
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <vTaskDelayUntil+0x46>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	613b      	str	r3, [r7, #16]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006caa:	4b2a      	ldr	r3, [pc, #168]	; (8006d54 <vTaskDelayUntil+0xf0>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00a      	beq.n	8006cc8 <vTaskDelayUntil+0x64>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	60fb      	str	r3, [r7, #12]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006cc8:	f000 f8ee 	bl	8006ea8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006ccc:	4b22      	ldr	r3, [pc, #136]	; (8006d58 <vTaskDelayUntil+0xf4>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	4413      	add	r3, r2
 8006cda:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6a3a      	ldr	r2, [r7, #32]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d20b      	bcs.n	8006cfe <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d211      	bcs.n	8006d14 <vTaskDelayUntil+0xb0>
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d90d      	bls.n	8006d14 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfc:	e00a      	b.n	8006d14 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69fa      	ldr	r2, [r7, #28]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d303      	bcc.n	8006d10 <vTaskDelayUntil+0xac>
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d901      	bls.n	8006d14 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006d10:	2301      	movs	r3, #1
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d006      	beq.n	8006d2e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fd3b 	bl	80077a4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006d2e:	f000 f8c9 	bl	8006ec4 <xTaskResumeAll>
 8006d32:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d107      	bne.n	8006d4a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <vTaskDelayUntil+0xf8>)
 8006d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d4a:	bf00      	nop
 8006d4c:	3728      	adds	r7, #40	; 0x28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	20000ffc 	.word	0x20000ffc
 8006d58:	20000fd8 	.word	0x20000fd8
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d017      	beq.n	8006da2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d72:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <vTaskDelay+0x60>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <vTaskDelay+0x30>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	60bb      	str	r3, [r7, #8]
}
 8006d8c:	bf00      	nop
 8006d8e:	e7fe      	b.n	8006d8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d90:	f000 f88a 	bl	8006ea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d94:	2100      	movs	r1, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fd04 	bl	80077a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d9c:	f000 f892 	bl	8006ec4 <xTaskResumeAll>
 8006da0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d107      	bne.n	8006db8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006da8:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <vTaskDelay+0x64>)
 8006daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006db8:	bf00      	nop
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20000ffc 	.word	0x20000ffc
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dd6:	463a      	mov	r2, r7
 8006dd8:	1d39      	adds	r1, r7, #4
 8006dda:	f107 0308 	add.w	r3, r7, #8
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fe ffca 	bl	8005d78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	9202      	str	r2, [sp, #8]
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	2300      	movs	r3, #0
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	460a      	mov	r2, r1
 8006df6:	4924      	ldr	r1, [pc, #144]	; (8006e88 <vTaskStartScheduler+0xc0>)
 8006df8:	4824      	ldr	r0, [pc, #144]	; (8006e8c <vTaskStartScheduler+0xc4>)
 8006dfa:	f7ff fd83 	bl	8006904 <xTaskCreateStatic>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <vTaskStartScheduler+0xc8>)
 8006e02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e04:	4b22      	ldr	r3, [pc, #136]	; (8006e90 <vTaskStartScheduler+0xc8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e001      	b.n	8006e16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d102      	bne.n	8006e22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e1c:	f000 fd16 	bl	800784c <xTimerCreateTimerTask>
 8006e20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d11b      	bne.n	8006e60 <vTaskStartScheduler+0x98>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	613b      	str	r3, [r7, #16]
}
 8006e3a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e3c:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <vTaskStartScheduler+0xcc>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3354      	adds	r3, #84	; 0x54
 8006e42:	4a15      	ldr	r2, [pc, #84]	; (8006e98 <vTaskStartScheduler+0xd0>)
 8006e44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e46:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <vTaskStartScheduler+0xd4>)
 8006e48:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e4e:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <vTaskStartScheduler+0xd8>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006e54:	4b13      	ldr	r3, [pc, #76]	; (8006ea4 <vTaskStartScheduler+0xdc>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e5a:	f001 f885 	bl	8007f68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e5e:	e00e      	b.n	8006e7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d10a      	bne.n	8006e7e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	60fb      	str	r3, [r7, #12]
}
 8006e7a:	bf00      	nop
 8006e7c:	e7fe      	b.n	8006e7c <vTaskStartScheduler+0xb4>
}
 8006e7e:	bf00      	nop
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	08009084 	.word	0x08009084
 8006e8c:	080074d1 	.word	0x080074d1
 8006e90:	20000ff8 	.word	0x20000ff8
 8006e94:	20000b00 	.word	0x20000b00
 8006e98:	20000028 	.word	0x20000028
 8006e9c:	20000ff4 	.word	0x20000ff4
 8006ea0:	20000fe0 	.word	0x20000fe0
 8006ea4:	20000fd8 	.word	0x20000fd8

08006ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <vTaskSuspendAll+0x18>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	4a03      	ldr	r2, [pc, #12]	; (8006ec0 <vTaskSuspendAll+0x18>)
 8006eb4:	6013      	str	r3, [r2, #0]
}
 8006eb6:	bf00      	nop
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000ffc 	.word	0x20000ffc

08006ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ed2:	4b42      	ldr	r3, [pc, #264]	; (8006fdc <xTaskResumeAll+0x118>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10a      	bne.n	8006ef0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	603b      	str	r3, [r7, #0]
}
 8006eec:	bf00      	nop
 8006eee:	e7fe      	b.n	8006eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ef0:	f001 f8ac 	bl	800804c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ef4:	4b39      	ldr	r3, [pc, #228]	; (8006fdc <xTaskResumeAll+0x118>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	4a38      	ldr	r2, [pc, #224]	; (8006fdc <xTaskResumeAll+0x118>)
 8006efc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006efe:	4b37      	ldr	r3, [pc, #220]	; (8006fdc <xTaskResumeAll+0x118>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d162      	bne.n	8006fcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f06:	4b36      	ldr	r3, [pc, #216]	; (8006fe0 <xTaskResumeAll+0x11c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d05e      	beq.n	8006fcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f0e:	e02f      	b.n	8006f70 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006f10:	4b34      	ldr	r3, [pc, #208]	; (8006fe4 <xTaskResumeAll+0x120>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3318      	adds	r3, #24
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe ffe3 	bl	8005ee8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe ffde 	bl	8005ee8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f30:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <xTaskResumeAll+0x124>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d903      	bls.n	8006f40 <xTaskResumeAll+0x7c>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4a2a      	ldr	r2, [pc, #168]	; (8006fe8 <xTaskResumeAll+0x124>)
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4a27      	ldr	r2, [pc, #156]	; (8006fec <xTaskResumeAll+0x128>)
 8006f4e:	441a      	add	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fe ff6b 	bl	8005e32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4b23      	ldr	r3, [pc, #140]	; (8006ff0 <xTaskResumeAll+0x12c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f6a:	4b22      	ldr	r3, [pc, #136]	; (8006ff4 <xTaskResumeAll+0x130>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f70:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <xTaskResumeAll+0x120>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1cb      	bne.n	8006f10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f7e:	f000 fb61 	bl	8007644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f82:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <xTaskResumeAll+0x134>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d010      	beq.n	8006fb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f8e:	f000 f845 	bl	800701c <xTaskIncrementTick>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f98:	4b16      	ldr	r3, [pc, #88]	; (8006ff4 <xTaskResumeAll+0x130>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f1      	bne.n	8006f8e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006faa:	4b13      	ldr	r3, [pc, #76]	; (8006ff8 <xTaskResumeAll+0x134>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fb0:	4b10      	ldr	r3, [pc, #64]	; (8006ff4 <xTaskResumeAll+0x130>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d009      	beq.n	8006fcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <xTaskResumeAll+0x138>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fcc:	f001 f86e 	bl	80080ac <vPortExitCritical>

	return xAlreadyYielded;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000ffc 	.word	0x20000ffc
 8006fe0:	20000fd4 	.word	0x20000fd4
 8006fe4:	20000f94 	.word	0x20000f94
 8006fe8:	20000fdc 	.word	0x20000fdc
 8006fec:	20000b04 	.word	0x20000b04
 8006ff0:	20000b00 	.word	0x20000b00
 8006ff4:	20000fe8 	.word	0x20000fe8
 8006ff8:	20000fe4 	.word	0x20000fe4
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007006:	4b04      	ldr	r3, [pc, #16]	; (8007018 <xTaskGetTickCount+0x18>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800700c:	687b      	ldr	r3, [r7, #4]
}
 800700e:	4618      	mov	r0, r3
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr
 8007018:	20000fd8 	.word	0x20000fd8

0800701c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007022:	2300      	movs	r3, #0
 8007024:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007026:	4b51      	ldr	r3, [pc, #324]	; (800716c <xTaskIncrementTick+0x150>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f040 808e 	bne.w	800714c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007030:	4b4f      	ldr	r3, [pc, #316]	; (8007170 <xTaskIncrementTick+0x154>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007038:	4a4d      	ldr	r2, [pc, #308]	; (8007170 <xTaskIncrementTick+0x154>)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d120      	bne.n	8007086 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007044:	4b4b      	ldr	r3, [pc, #300]	; (8007174 <xTaskIncrementTick+0x158>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <xTaskIncrementTick+0x48>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	603b      	str	r3, [r7, #0]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <xTaskIncrementTick+0x46>
 8007064:	4b43      	ldr	r3, [pc, #268]	; (8007174 <xTaskIncrementTick+0x158>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	4b43      	ldr	r3, [pc, #268]	; (8007178 <xTaskIncrementTick+0x15c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a41      	ldr	r2, [pc, #260]	; (8007174 <xTaskIncrementTick+0x158>)
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	4a41      	ldr	r2, [pc, #260]	; (8007178 <xTaskIncrementTick+0x15c>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4b40      	ldr	r3, [pc, #256]	; (800717c <xTaskIncrementTick+0x160>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	4a3f      	ldr	r2, [pc, #252]	; (800717c <xTaskIncrementTick+0x160>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	f000 fadf 	bl	8007644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007086:	4b3e      	ldr	r3, [pc, #248]	; (8007180 <xTaskIncrementTick+0x164>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	d34e      	bcc.n	800712e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007090:	4b38      	ldr	r3, [pc, #224]	; (8007174 <xTaskIncrementTick+0x158>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <xTaskIncrementTick+0x82>
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <xTaskIncrementTick+0x84>
 800709e:	2300      	movs	r3, #0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d004      	beq.n	80070ae <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a4:	4b36      	ldr	r3, [pc, #216]	; (8007180 <xTaskIncrementTick+0x164>)
 80070a6:	f04f 32ff 	mov.w	r2, #4294967295
 80070aa:	601a      	str	r2, [r3, #0]
					break;
 80070ac:	e03f      	b.n	800712e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80070ae:	4b31      	ldr	r3, [pc, #196]	; (8007174 <xTaskIncrementTick+0x158>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d203      	bcs.n	80070ce <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070c6:	4a2e      	ldr	r2, [pc, #184]	; (8007180 <xTaskIncrementTick+0x164>)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6013      	str	r3, [r2, #0]
						break;
 80070cc:	e02f      	b.n	800712e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	3304      	adds	r3, #4
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe ff08 	bl	8005ee8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	3318      	adds	r3, #24
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe feff 	bl	8005ee8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ee:	4b25      	ldr	r3, [pc, #148]	; (8007184 <xTaskIncrementTick+0x168>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d903      	bls.n	80070fe <xTaskIncrementTick+0xe2>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	4a22      	ldr	r2, [pc, #136]	; (8007184 <xTaskIncrementTick+0x168>)
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4a1f      	ldr	r2, [pc, #124]	; (8007188 <xTaskIncrementTick+0x16c>)
 800710c:	441a      	add	r2, r3
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	3304      	adds	r3, #4
 8007112:	4619      	mov	r1, r3
 8007114:	4610      	mov	r0, r2
 8007116:	f7fe fe8c 	bl	8005e32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711e:	4b1b      	ldr	r3, [pc, #108]	; (800718c <xTaskIncrementTick+0x170>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007124:	429a      	cmp	r2, r3
 8007126:	d3b3      	bcc.n	8007090 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007128:	2301      	movs	r3, #1
 800712a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800712c:	e7b0      	b.n	8007090 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800712e:	4b17      	ldr	r3, [pc, #92]	; (800718c <xTaskIncrementTick+0x170>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007134:	4914      	ldr	r1, [pc, #80]	; (8007188 <xTaskIncrementTick+0x16c>)
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	440b      	add	r3, r1
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d907      	bls.n	8007156 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007146:	2301      	movs	r3, #1
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	e004      	b.n	8007156 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800714c:	4b10      	ldr	r3, [pc, #64]	; (8007190 <xTaskIncrementTick+0x174>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	4a0f      	ldr	r2, [pc, #60]	; (8007190 <xTaskIncrementTick+0x174>)
 8007154:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007156:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <xTaskIncrementTick+0x178>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800715e:	2301      	movs	r3, #1
 8007160:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007162:	697b      	ldr	r3, [r7, #20]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20000ffc 	.word	0x20000ffc
 8007170:	20000fd8 	.word	0x20000fd8
 8007174:	20000f8c 	.word	0x20000f8c
 8007178:	20000f90 	.word	0x20000f90
 800717c:	20000fec 	.word	0x20000fec
 8007180:	20000ff4 	.word	0x20000ff4
 8007184:	20000fdc 	.word	0x20000fdc
 8007188:	20000b04 	.word	0x20000b04
 800718c:	20000b00 	.word	0x20000b00
 8007190:	20000fe4 	.word	0x20000fe4
 8007194:	20000fe8 	.word	0x20000fe8

08007198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800719e:	4b2a      	ldr	r3, [pc, #168]	; (8007248 <vTaskSwitchContext+0xb0>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071a6:	4b29      	ldr	r3, [pc, #164]	; (800724c <vTaskSwitchContext+0xb4>)
 80071a8:	2201      	movs	r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071ac:	e046      	b.n	800723c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80071ae:	4b27      	ldr	r3, [pc, #156]	; (800724c <vTaskSwitchContext+0xb4>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80071b4:	4b26      	ldr	r3, [pc, #152]	; (8007250 <vTaskSwitchContext+0xb8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	e010      	b.n	80071de <vTaskSwitchContext+0x46>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	607b      	str	r3, [r7, #4]
}
 80071d4:	bf00      	nop
 80071d6:	e7fe      	b.n	80071d6 <vTaskSwitchContext+0x3e>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3b01      	subs	r3, #1
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	491d      	ldr	r1, [pc, #116]	; (8007254 <vTaskSwitchContext+0xbc>)
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	440b      	add	r3, r1
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0e4      	beq.n	80071bc <vTaskSwitchContext+0x24>
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4a15      	ldr	r2, [pc, #84]	; (8007254 <vTaskSwitchContext+0xbc>)
 80071fe:	4413      	add	r3, r2
 8007200:	60bb      	str	r3, [r7, #8]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	605a      	str	r2, [r3, #4]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3308      	adds	r3, #8
 8007214:	429a      	cmp	r2, r3
 8007216:	d104      	bne.n	8007222 <vTaskSwitchContext+0x8a>
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4a0b      	ldr	r2, [pc, #44]	; (8007258 <vTaskSwitchContext+0xc0>)
 800722a:	6013      	str	r3, [r2, #0]
 800722c:	4a08      	ldr	r2, [pc, #32]	; (8007250 <vTaskSwitchContext+0xb8>)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007232:	4b09      	ldr	r3, [pc, #36]	; (8007258 <vTaskSwitchContext+0xc0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3354      	adds	r3, #84	; 0x54
 8007238:	4a08      	ldr	r2, [pc, #32]	; (800725c <vTaskSwitchContext+0xc4>)
 800723a:	6013      	str	r3, [r2, #0]
}
 800723c:	bf00      	nop
 800723e:	3714      	adds	r7, #20
 8007240:	46bd      	mov	sp, r7
 8007242:	bc80      	pop	{r7}
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	20000ffc 	.word	0x20000ffc
 800724c:	20000fe8 	.word	0x20000fe8
 8007250:	20000fdc 	.word	0x20000fdc
 8007254:	20000b04 	.word	0x20000b04
 8007258:	20000b00 	.word	0x20000b00
 800725c:	20000028 	.word	0x20000028

08007260 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007286:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <vTaskPlaceOnEventList+0x44>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3318      	adds	r3, #24
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fe fdf2 	bl	8005e78 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007294:	2101      	movs	r1, #1
 8007296:	6838      	ldr	r0, [r7, #0]
 8007298:	f000 fa84 	bl	80077a4 <prvAddCurrentTaskToDelayedList>
}
 800729c:	bf00      	nop
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	20000b00 	.word	0x20000b00

080072a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10a      	bne.n	80072d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	617b      	str	r3, [r7, #20]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <vTaskPlaceOnEventListRestricted+0x54>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3318      	adds	r3, #24
 80072d6:	4619      	mov	r1, r3
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7fe fdaa 	bl	8005e32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072e4:	f04f 33ff 	mov.w	r3, #4294967295
 80072e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	68b8      	ldr	r0, [r7, #8]
 80072ee:	f000 fa59 	bl	80077a4 <prvAddCurrentTaskToDelayedList>
	}
 80072f2:	bf00      	nop
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	20000b00 	.word	0x20000b00

08007300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10a      	bne.n	800732c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	f383 8811 	msr	BASEPRI, r3
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	60fb      	str	r3, [r7, #12]
}
 8007328:	bf00      	nop
 800732a:	e7fe      	b.n	800732a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	3318      	adds	r3, #24
 8007330:	4618      	mov	r0, r3
 8007332:	f7fe fdd9 	bl	8005ee8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007336:	4b1e      	ldr	r3, [pc, #120]	; (80073b0 <xTaskRemoveFromEventList+0xb0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d11d      	bne.n	800737a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	3304      	adds	r3, #4
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fdd0 	bl	8005ee8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <xTaskRemoveFromEventList+0xb4>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d903      	bls.n	800735c <xTaskRemoveFromEventList+0x5c>
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	4a16      	ldr	r2, [pc, #88]	; (80073b4 <xTaskRemoveFromEventList+0xb4>)
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <xTaskRemoveFromEventList+0xb8>)
 800736a:	441a      	add	r2, r3
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f7fe fd5d 	bl	8005e32 <vListInsertEnd>
 8007378:	e005      	b.n	8007386 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3318      	adds	r3, #24
 800737e:	4619      	mov	r1, r3
 8007380:	480e      	ldr	r0, [pc, #56]	; (80073bc <xTaskRemoveFromEventList+0xbc>)
 8007382:	f7fe fd56 	bl	8005e32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738a:	4b0d      	ldr	r3, [pc, #52]	; (80073c0 <xTaskRemoveFromEventList+0xc0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	429a      	cmp	r2, r3
 8007392:	d905      	bls.n	80073a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007394:	2301      	movs	r3, #1
 8007396:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <xTaskRemoveFromEventList+0xc4>)
 800739a:	2201      	movs	r2, #1
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e001      	b.n	80073a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80073a4:	697b      	ldr	r3, [r7, #20]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000ffc 	.word	0x20000ffc
 80073b4:	20000fdc 	.word	0x20000fdc
 80073b8:	20000b04 	.word	0x20000b04
 80073bc:	20000f94 	.word	0x20000f94
 80073c0:	20000b00 	.word	0x20000b00
 80073c4:	20000fe8 	.word	0x20000fe8

080073c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073d0:	4b06      	ldr	r3, [pc, #24]	; (80073ec <vTaskInternalSetTimeOutState+0x24>)
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <vTaskInternalSetTimeOutState+0x28>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	605a      	str	r2, [r3, #4]
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bc80      	pop	{r7}
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	20000fec 	.word	0x20000fec
 80073f0:	20000fd8 	.word	0x20000fd8

080073f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	f383 8811 	msr	BASEPRI, r3
 800740c:	f3bf 8f6f 	isb	sy
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	613b      	str	r3, [r7, #16]
}
 8007416:	bf00      	nop
 8007418:	e7fe      	b.n	8007418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007436:	f000 fe09 	bl	800804c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800743a:	4b1d      	ldr	r3, [pc, #116]	; (80074b0 <xTaskCheckForTimeOut+0xbc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007452:	d102      	bne.n	800745a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007454:	2300      	movs	r3, #0
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	e023      	b.n	80074a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <xTaskCheckForTimeOut+0xc0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d007      	beq.n	8007476 <xTaskCheckForTimeOut+0x82>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	429a      	cmp	r2, r3
 800746e:	d302      	bcc.n	8007476 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007470:	2301      	movs	r3, #1
 8007472:	61fb      	str	r3, [r7, #28]
 8007474:	e015      	b.n	80074a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	429a      	cmp	r2, r3
 800747e:	d20b      	bcs.n	8007498 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	1ad2      	subs	r2, r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff ff9b 	bl	80073c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	61fb      	str	r3, [r7, #28]
 8007496:	e004      	b.n	80074a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800749e:	2301      	movs	r3, #1
 80074a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074a2:	f000 fe03 	bl	80080ac <vPortExitCritical>

	return xReturn;
 80074a6:	69fb      	ldr	r3, [r7, #28]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3720      	adds	r7, #32
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000fd8 	.word	0x20000fd8
 80074b4:	20000fec 	.word	0x20000fec

080074b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074bc:	4b03      	ldr	r3, [pc, #12]	; (80074cc <vTaskMissedYield+0x14>)
 80074be:	2201      	movs	r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
}
 80074c2:	bf00      	nop
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bc80      	pop	{r7}
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20000fe8 	.word	0x20000fe8

080074d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074d8:	f000 f852 	bl	8007580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074dc:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <prvIdleTask+0x28>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d9f9      	bls.n	80074d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074e4:	4b05      	ldr	r3, [pc, #20]	; (80074fc <prvIdleTask+0x2c>)
 80074e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074f4:	e7f0      	b.n	80074d8 <prvIdleTask+0x8>
 80074f6:	bf00      	nop
 80074f8:	20000b04 	.word	0x20000b04
 80074fc:	e000ed04 	.word	0xe000ed04

08007500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007506:	2300      	movs	r3, #0
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	e00c      	b.n	8007526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4a12      	ldr	r2, [pc, #72]	; (8007560 <prvInitialiseTaskLists+0x60>)
 8007518:	4413      	add	r3, r2
 800751a:	4618      	mov	r0, r3
 800751c:	f7fe fc5e 	bl	8005ddc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3301      	adds	r3, #1
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b37      	cmp	r3, #55	; 0x37
 800752a:	d9ef      	bls.n	800750c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800752c:	480d      	ldr	r0, [pc, #52]	; (8007564 <prvInitialiseTaskLists+0x64>)
 800752e:	f7fe fc55 	bl	8005ddc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007532:	480d      	ldr	r0, [pc, #52]	; (8007568 <prvInitialiseTaskLists+0x68>)
 8007534:	f7fe fc52 	bl	8005ddc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007538:	480c      	ldr	r0, [pc, #48]	; (800756c <prvInitialiseTaskLists+0x6c>)
 800753a:	f7fe fc4f 	bl	8005ddc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800753e:	480c      	ldr	r0, [pc, #48]	; (8007570 <prvInitialiseTaskLists+0x70>)
 8007540:	f7fe fc4c 	bl	8005ddc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007544:	480b      	ldr	r0, [pc, #44]	; (8007574 <prvInitialiseTaskLists+0x74>)
 8007546:	f7fe fc49 	bl	8005ddc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800754a:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <prvInitialiseTaskLists+0x78>)
 800754c:	4a05      	ldr	r2, [pc, #20]	; (8007564 <prvInitialiseTaskLists+0x64>)
 800754e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007550:	4b0a      	ldr	r3, [pc, #40]	; (800757c <prvInitialiseTaskLists+0x7c>)
 8007552:	4a05      	ldr	r2, [pc, #20]	; (8007568 <prvInitialiseTaskLists+0x68>)
 8007554:	601a      	str	r2, [r3, #0]
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000b04 	.word	0x20000b04
 8007564:	20000f64 	.word	0x20000f64
 8007568:	20000f78 	.word	0x20000f78
 800756c:	20000f94 	.word	0x20000f94
 8007570:	20000fa8 	.word	0x20000fa8
 8007574:	20000fc0 	.word	0x20000fc0
 8007578:	20000f8c 	.word	0x20000f8c
 800757c:	20000f90 	.word	0x20000f90

08007580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007586:	e019      	b.n	80075bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007588:	f000 fd60 	bl	800804c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800758c:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <prvCheckTasksWaitingTermination+0x50>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe fca5 	bl	8005ee8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800759e:	4b0d      	ldr	r3, [pc, #52]	; (80075d4 <prvCheckTasksWaitingTermination+0x54>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	4a0b      	ldr	r2, [pc, #44]	; (80075d4 <prvCheckTasksWaitingTermination+0x54>)
 80075a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	4a0a      	ldr	r2, [pc, #40]	; (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075b2:	f000 fd7b 	bl	80080ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f810 	bl	80075dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <prvCheckTasksWaitingTermination+0x58>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e1      	bne.n	8007588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000fa8 	.word	0x20000fa8
 80075d4:	20000fd4 	.word	0x20000fd4
 80075d8:	20000fbc 	.word	0x20000fbc

080075dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3354      	adds	r3, #84	; 0x54
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 fc7d 	bl	8008ee8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d108      	bne.n	800760a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	4618      	mov	r0, r3
 80075fe:	f000 fee9 	bl	80083d4 <vPortFree>
				vPortFree( pxTCB );
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fee6 	bl	80083d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007608:	e018      	b.n	800763c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007610:	2b01      	cmp	r3, #1
 8007612:	d103      	bne.n	800761c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fedd 	bl	80083d4 <vPortFree>
	}
 800761a:	e00f      	b.n	800763c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007622:	2b02      	cmp	r3, #2
 8007624:	d00a      	beq.n	800763c <prvDeleteTCB+0x60>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <prvDeleteTCB+0x5e>
	}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800764a:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <prvResetNextTaskUnblockTime+0x40>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <prvResetNextTaskUnblockTime+0x14>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <prvResetNextTaskUnblockTime+0x16>
 8007658:	2300      	movs	r3, #0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800765e:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <prvResetNextTaskUnblockTime+0x44>)
 8007660:	f04f 32ff 	mov.w	r2, #4294967295
 8007664:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007666:	e008      	b.n	800767a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007668:	4b06      	ldr	r3, [pc, #24]	; (8007684 <prvResetNextTaskUnblockTime+0x40>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	4a04      	ldr	r2, [pc, #16]	; (8007688 <prvResetNextTaskUnblockTime+0x44>)
 8007678:	6013      	str	r3, [r2, #0]
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr
 8007684:	20000f8c 	.word	0x20000f8c
 8007688:	20000ff4 	.word	0x20000ff4

0800768c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007692:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <xTaskGetSchedulerState+0x34>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800769a:	2301      	movs	r3, #1
 800769c:	607b      	str	r3, [r7, #4]
 800769e:	e008      	b.n	80076b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <xTaskGetSchedulerState+0x38>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076a8:	2302      	movs	r3, #2
 80076aa:	607b      	str	r3, [r7, #4]
 80076ac:	e001      	b.n	80076b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076b2:	687b      	ldr	r3, [r7, #4]
	}
 80076b4:	4618      	mov	r0, r3
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	20000fe0 	.word	0x20000fe0
 80076c4:	20000ffc 	.word	0x20000ffc

080076c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d056      	beq.n	800778c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076de:	4b2e      	ldr	r3, [pc, #184]	; (8007798 <xTaskPriorityDisinherit+0xd0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d00a      	beq.n	80076fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	60fb      	str	r3, [r7, #12]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10a      	bne.n	800771c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60bb      	str	r3, [r7, #8]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007720:	1e5a      	subs	r2, r3, #1
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	429a      	cmp	r2, r3
 8007730:	d02c      	beq.n	800778c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007736:	2b00      	cmp	r3, #0
 8007738:	d128      	bne.n	800778c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	3304      	adds	r3, #4
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fbd2 	bl	8005ee8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	4b0f      	ldr	r3, [pc, #60]	; (800779c <xTaskPriorityDisinherit+0xd4>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d903      	bls.n	800776c <xTaskPriorityDisinherit+0xa4>
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	4a0c      	ldr	r2, [pc, #48]	; (800779c <xTaskPriorityDisinherit+0xd4>)
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007770:	4613      	mov	r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <xTaskPriorityDisinherit+0xd8>)
 800777a:	441a      	add	r2, r3
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	3304      	adds	r3, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f7fe fb55 	bl	8005e32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800778c:	697b      	ldr	r3, [r7, #20]
	}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000b00 	.word	0x20000b00
 800779c:	20000fdc 	.word	0x20000fdc
 80077a0:	20000b04 	.word	0x20000b04

080077a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077ae:	4b21      	ldr	r3, [pc, #132]	; (8007834 <prvAddCurrentTaskToDelayedList+0x90>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077b4:	4b20      	ldr	r3, [pc, #128]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fb94 	bl	8005ee8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	d10a      	bne.n	80077de <prvAddCurrentTaskToDelayedList+0x3a>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d007      	beq.n	80077de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ce:	4b1a      	ldr	r3, [pc, #104]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4819      	ldr	r0, [pc, #100]	; (800783c <prvAddCurrentTaskToDelayedList+0x98>)
 80077d8:	f7fe fb2b 	bl	8005e32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077dc:	e026      	b.n	800782c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4413      	add	r3, r2
 80077e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077ee:	68ba      	ldr	r2, [r7, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d209      	bcs.n	800780a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077f6:	4b12      	ldr	r3, [pc, #72]	; (8007840 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3304      	adds	r3, #4
 8007800:	4619      	mov	r1, r3
 8007802:	4610      	mov	r0, r2
 8007804:	f7fe fb38 	bl	8005e78 <vListInsert>
}
 8007808:	e010      	b.n	800782c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800780a:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <prvAddCurrentTaskToDelayedList+0x94>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3304      	adds	r3, #4
 8007814:	4619      	mov	r1, r3
 8007816:	4610      	mov	r0, r2
 8007818:	f7fe fb2e 	bl	8005e78 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800781c:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	429a      	cmp	r2, r3
 8007824:	d202      	bcs.n	800782c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007826:	4a08      	ldr	r2, [pc, #32]	; (8007848 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	6013      	str	r3, [r2, #0]
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000fd8 	.word	0x20000fd8
 8007838:	20000b00 	.word	0x20000b00
 800783c:	20000fc0 	.word	0x20000fc0
 8007840:	20000f90 	.word	0x20000f90
 8007844:	20000f8c 	.word	0x20000f8c
 8007848:	20000ff4 	.word	0x20000ff4

0800784c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08a      	sub	sp, #40	; 0x28
 8007850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007856:	f000 facb 	bl	8007df0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800785a:	4b1c      	ldr	r3, [pc, #112]	; (80078cc <xTimerCreateTimerTask+0x80>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d021      	beq.n	80078a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800786a:	1d3a      	adds	r2, r7, #4
 800786c:	f107 0108 	add.w	r1, r7, #8
 8007870:	f107 030c 	add.w	r3, r7, #12
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe fa97 	bl	8005da8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	9202      	str	r2, [sp, #8]
 8007882:	9301      	str	r3, [sp, #4]
 8007884:	2302      	movs	r3, #2
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	2300      	movs	r3, #0
 800788a:	460a      	mov	r2, r1
 800788c:	4910      	ldr	r1, [pc, #64]	; (80078d0 <xTimerCreateTimerTask+0x84>)
 800788e:	4811      	ldr	r0, [pc, #68]	; (80078d4 <xTimerCreateTimerTask+0x88>)
 8007890:	f7ff f838 	bl	8006904 <xTaskCreateStatic>
 8007894:	4603      	mov	r3, r0
 8007896:	4a10      	ldr	r2, [pc, #64]	; (80078d8 <xTimerCreateTimerTask+0x8c>)
 8007898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800789a:	4b0f      	ldr	r3, [pc, #60]	; (80078d8 <xTimerCreateTimerTask+0x8c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80078a2:	2301      	movs	r3, #1
 80078a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10a      	bne.n	80078c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	613b      	str	r3, [r7, #16]
}
 80078be:	bf00      	nop
 80078c0:	e7fe      	b.n	80078c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80078c2:	697b      	ldr	r3, [r7, #20]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20001030 	.word	0x20001030
 80078d0:	0800908c 	.word	0x0800908c
 80078d4:	080079f9 	.word	0x080079f9
 80078d8:	20001034 	.word	0x20001034

080078dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08a      	sub	sp, #40	; 0x28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10a      	bne.n	800790a <xTimerGenericCommand+0x2e>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	623b      	str	r3, [r7, #32]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800790a:	4b1a      	ldr	r3, [pc, #104]	; (8007974 <xTimerGenericCommand+0x98>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d02a      	beq.n	8007968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b05      	cmp	r3, #5
 8007922:	dc18      	bgt.n	8007956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007924:	f7ff feb2 	bl	800768c <xTaskGetSchedulerState>
 8007928:	4603      	mov	r3, r0
 800792a:	2b02      	cmp	r3, #2
 800792c:	d109      	bne.n	8007942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800792e:	4b11      	ldr	r3, [pc, #68]	; (8007974 <xTimerGenericCommand+0x98>)
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	f107 0110 	add.w	r1, r7, #16
 8007936:	2300      	movs	r3, #0
 8007938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800793a:	f7fe fc01 	bl	8006140 <xQueueGenericSend>
 800793e:	6278      	str	r0, [r7, #36]	; 0x24
 8007940:	e012      	b.n	8007968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007942:	4b0c      	ldr	r3, [pc, #48]	; (8007974 <xTimerGenericCommand+0x98>)
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	f107 0110 	add.w	r1, r7, #16
 800794a:	2300      	movs	r3, #0
 800794c:	2200      	movs	r2, #0
 800794e:	f7fe fbf7 	bl	8006140 <xQueueGenericSend>
 8007952:	6278      	str	r0, [r7, #36]	; 0x24
 8007954:	e008      	b.n	8007968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007956:	4b07      	ldr	r3, [pc, #28]	; (8007974 <xTimerGenericCommand+0x98>)
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	f107 0110 	add.w	r1, r7, #16
 800795e:	2300      	movs	r3, #0
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	f7fe fceb 	bl	800633c <xQueueGenericSendFromISR>
 8007966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800796a:	4618      	mov	r0, r3
 800796c:	3728      	adds	r7, #40	; 0x28
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20001030 	.word	0x20001030

08007978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af02      	add	r7, sp, #8
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007982:	4b1c      	ldr	r3, [pc, #112]	; (80079f4 <prvProcessExpiredTimer+0x7c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	3304      	adds	r3, #4
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe faa9 	bl	8005ee8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d122      	bne.n	80079e4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	18d1      	adds	r1, r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	6978      	ldr	r0, [r7, #20]
 80079ac:	f000 f8c8 	bl	8007b40 <prvInsertTimerInActiveList>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d016      	beq.n	80079e4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079b6:	2300      	movs	r3, #0
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	2300      	movs	r3, #0
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	2100      	movs	r1, #0
 80079c0:	6978      	ldr	r0, [r7, #20]
 80079c2:	f7ff ff8b 	bl	80078dc <xTimerGenericCommand>
 80079c6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60fb      	str	r3, [r7, #12]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	6978      	ldr	r0, [r7, #20]
 80079ea:	4798      	blx	r3
}
 80079ec:	bf00      	nop
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20001028 	.word	0x20001028

080079f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a00:	f107 0308 	add.w	r3, r7, #8
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f857 	bl	8007ab8 <prvGetNextExpireTime>
 8007a0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f803 	bl	8007a1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a16:	f000 f8d5 	bl	8007bc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a1a:	e7f1      	b.n	8007a00 <prvTimerTask+0x8>

08007a1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a26:	f7ff fa3f 	bl	8006ea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a2a:	f107 0308 	add.w	r3, r7, #8
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 f866 	bl	8007b00 <prvSampleTimeNow>
 8007a34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d130      	bne.n	8007a9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10a      	bne.n	8007a58 <prvProcessTimerOrBlockTask+0x3c>
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d806      	bhi.n	8007a58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a4a:	f7ff fa3b 	bl	8006ec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a4e:	68f9      	ldr	r1, [r7, #12]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff ff91 	bl	8007978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a56:	e024      	b.n	8007aa2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d008      	beq.n	8007a70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a5e:	4b13      	ldr	r3, [pc, #76]	; (8007aac <prvProcessTimerOrBlockTask+0x90>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	bf0c      	ite	eq
 8007a68:	2301      	moveq	r3, #1
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a70:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <prvProcessTimerOrBlockTask+0x94>)
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	f7fe ff0d 	bl	800689c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a82:	f7ff fa1f 	bl	8006ec4 <xTaskResumeAll>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a8c:	4b09      	ldr	r3, [pc, #36]	; (8007ab4 <prvProcessTimerOrBlockTask+0x98>)
 8007a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	f3bf 8f4f 	dsb	sy
 8007a98:	f3bf 8f6f 	isb	sy
}
 8007a9c:	e001      	b.n	8007aa2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a9e:	f7ff fa11 	bl	8006ec4 <xTaskResumeAll>
}
 8007aa2:	bf00      	nop
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	2000102c 	.word	0x2000102c
 8007ab0:	20001030 	.word	0x20001030
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <prvGetNextExpireTime+0x44>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bf0c      	ite	eq
 8007aca:	2301      	moveq	r3, #1
 8007acc:	2300      	movne	r3, #0
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d105      	bne.n	8007aea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ade:	4b07      	ldr	r3, [pc, #28]	; (8007afc <prvGetNextExpireTime+0x44>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	e001      	b.n	8007aee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007aee:	68fb      	ldr	r3, [r7, #12]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	20001028 	.word	0x20001028

08007b00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b08:	f7ff fa7a 	bl	8007000 <xTaskGetTickCount>
 8007b0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <prvSampleTimeNow+0x3c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d205      	bcs.n	8007b24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b18:	f000 f908 	bl	8007d2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e002      	b.n	8007b2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b2a:	4a04      	ldr	r2, [pc, #16]	; (8007b3c <prvSampleTimeNow+0x3c>)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b30:	68fb      	ldr	r3, [r7, #12]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20001038 	.word	0x20001038

08007b40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d812      	bhi.n	8007b8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	1ad2      	subs	r2, r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d302      	bcc.n	8007b7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	e01b      	b.n	8007bb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b7a:	4b10      	ldr	r3, [pc, #64]	; (8007bbc <prvInsertTimerInActiveList+0x7c>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7fe f977 	bl	8005e78 <vListInsert>
 8007b8a:	e012      	b.n	8007bb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d206      	bcs.n	8007ba2 <prvInsertTimerInActiveList+0x62>
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d302      	bcc.n	8007ba2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e007      	b.n	8007bb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ba2:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <prvInsertTimerInActiveList+0x80>)
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	4619      	mov	r1, r3
 8007bac:	4610      	mov	r0, r2
 8007bae:	f7fe f963 	bl	8005e78 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bb2:	697b      	ldr	r3, [r7, #20]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3718      	adds	r7, #24
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	2000102c 	.word	0x2000102c
 8007bc0:	20001028 	.word	0x20001028

08007bc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08e      	sub	sp, #56	; 0x38
 8007bc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bca:	e09d      	b.n	8007d08 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	da18      	bge.n	8007c04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bd2:	1d3b      	adds	r3, r7, #4
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10a      	bne.n	8007bf4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	61fb      	str	r3, [r7, #28]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bfa:	6850      	ldr	r0, [r2, #4]
 8007bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bfe:	6892      	ldr	r2, [r2, #8]
 8007c00:	4611      	mov	r1, r2
 8007c02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	db7d      	blt.n	8007d06 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d004      	beq.n	8007c20 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c18:	3304      	adds	r3, #4
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fe f964 	bl	8005ee8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c20:	463b      	mov	r3, r7
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff ff6c 	bl	8007b00 <prvSampleTimeNow>
 8007c28:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d86b      	bhi.n	8007d08 <prvProcessReceivedCommands+0x144>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <prvProcessReceivedCommands+0x74>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c61 	.word	0x08007c61
 8007c3c:	08007c61 	.word	0x08007c61
 8007c40:	08007c61 	.word	0x08007c61
 8007c44:	08007d09 	.word	0x08007d09
 8007c48:	08007cbd 	.word	0x08007cbd
 8007c4c:	08007cf5 	.word	0x08007cf5
 8007c50:	08007c61 	.word	0x08007c61
 8007c54:	08007c61 	.word	0x08007c61
 8007c58:	08007d09 	.word	0x08007d09
 8007c5c:	08007cbd 	.word	0x08007cbd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	18d1      	adds	r1, r2, r3
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c6e:	f7ff ff67 	bl	8007b40 <prvInsertTimerInActiveList>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d047      	beq.n	8007d08 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c7e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d13f      	bne.n	8007d08 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	441a      	add	r2, r3
 8007c90:	2300      	movs	r3, #0
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	2300      	movs	r3, #0
 8007c96:	2100      	movs	r1, #0
 8007c98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c9a:	f7ff fe1f 	bl	80078dc <xTimerGenericCommand>
 8007c9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d130      	bne.n	8007d08 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	61bb      	str	r3, [r7, #24]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	617b      	str	r3, [r7, #20]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	699a      	ldr	r2, [r3, #24]
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	18d1      	adds	r1, r2, r3
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cee:	f7ff ff27 	bl	8007b40 <prvInsertTimerInActiveList>
					break;
 8007cf2:	e009      	b.n	8007d08 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d104      	bne.n	8007d08 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d00:	f000 fb68 	bl	80083d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d04:	e000      	b.n	8007d08 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d06:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d08:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <prvProcessReceivedCommands+0x164>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	1d39      	adds	r1, r7, #4
 8007d0e:	2200      	movs	r2, #0
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fbab 	bl	800646c <xQueueReceive>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f47f af57 	bne.w	8007bcc <prvProcessReceivedCommands+0x8>
	}
}
 8007d1e:	bf00      	nop
 8007d20:	bf00      	nop
 8007d22:	3730      	adds	r7, #48	; 0x30
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20001030 	.word	0x20001030

08007d2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d32:	e045      	b.n	8007dc0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d34:	4b2c      	ldr	r3, [pc, #176]	; (8007de8 <prvSwitchTimerLists+0xbc>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d3e:	4b2a      	ldr	r3, [pc, #168]	; (8007de8 <prvSwitchTimerLists+0xbc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe f8cb 	bl	8005ee8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d12e      	bne.n	8007dc0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4413      	add	r3, r2
 8007d6a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d90e      	bls.n	8007d92 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d80:	4b19      	ldr	r3, [pc, #100]	; (8007de8 <prvSwitchTimerLists+0xbc>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f7fe f874 	bl	8005e78 <vListInsert>
 8007d90:	e016      	b.n	8007dc0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d92:	2300      	movs	r3, #0
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	2300      	movs	r3, #0
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff fd9d 	bl	80078dc <xTimerGenericCommand>
 8007da2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10a      	bne.n	8007dc0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	603b      	str	r3, [r7, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	e7fe      	b.n	8007dbe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dc0:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <prvSwitchTimerLists+0xbc>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1b4      	bne.n	8007d34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <prvSwitchTimerLists+0xbc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dd0:	4b06      	ldr	r3, [pc, #24]	; (8007dec <prvSwitchTimerLists+0xc0>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a04      	ldr	r2, [pc, #16]	; (8007de8 <prvSwitchTimerLists+0xbc>)
 8007dd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007dd8:	4a04      	ldr	r2, [pc, #16]	; (8007dec <prvSwitchTimerLists+0xc0>)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	6013      	str	r3, [r2, #0]
}
 8007dde:	bf00      	nop
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20001028 	.word	0x20001028
 8007dec:	2000102c 	.word	0x2000102c

08007df0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007df6:	f000 f929 	bl	800804c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007dfa:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <prvCheckForValidListAndQueue+0x60>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d120      	bne.n	8007e44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e02:	4814      	ldr	r0, [pc, #80]	; (8007e54 <prvCheckForValidListAndQueue+0x64>)
 8007e04:	f7fd ffea 	bl	8005ddc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e08:	4813      	ldr	r0, [pc, #76]	; (8007e58 <prvCheckForValidListAndQueue+0x68>)
 8007e0a:	f7fd ffe7 	bl	8005ddc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e0e:	4b13      	ldr	r3, [pc, #76]	; (8007e5c <prvCheckForValidListAndQueue+0x6c>)
 8007e10:	4a10      	ldr	r2, [pc, #64]	; (8007e54 <prvCheckForValidListAndQueue+0x64>)
 8007e12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e14:	4b12      	ldr	r3, [pc, #72]	; (8007e60 <prvCheckForValidListAndQueue+0x70>)
 8007e16:	4a10      	ldr	r2, [pc, #64]	; (8007e58 <prvCheckForValidListAndQueue+0x68>)
 8007e18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <prvCheckForValidListAndQueue+0x74>)
 8007e20:	4a11      	ldr	r2, [pc, #68]	; (8007e68 <prvCheckForValidListAndQueue+0x78>)
 8007e22:	2110      	movs	r1, #16
 8007e24:	200a      	movs	r0, #10
 8007e26:	f7fe f8f1 	bl	800600c <xQueueGenericCreateStatic>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4a08      	ldr	r2, [pc, #32]	; (8007e50 <prvCheckForValidListAndQueue+0x60>)
 8007e2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e30:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <prvCheckForValidListAndQueue+0x60>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <prvCheckForValidListAndQueue+0x60>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	490b      	ldr	r1, [pc, #44]	; (8007e6c <prvCheckForValidListAndQueue+0x7c>)
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fd04 	bl	800684c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e44:	f000 f932 	bl	80080ac <vPortExitCritical>
}
 8007e48:	bf00      	nop
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20001030 	.word	0x20001030
 8007e54:	20001000 	.word	0x20001000
 8007e58:	20001014 	.word	0x20001014
 8007e5c:	20001028 	.word	0x20001028
 8007e60:	2000102c 	.word	0x2000102c
 8007e64:	200010dc 	.word	0x200010dc
 8007e68:	2000103c 	.word	0x2000103c
 8007e6c:	08009094 	.word	0x08009094

08007e70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3b04      	subs	r3, #4
 8007e80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3b04      	subs	r3, #4
 8007e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f023 0201 	bic.w	r2, r3, #1
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ea0:	4a08      	ldr	r2, [pc, #32]	; (8007ec4 <pxPortInitialiseStack+0x54>)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	3b14      	subs	r3, #20
 8007eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	3b20      	subs	r3, #32
 8007eb6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3714      	adds	r7, #20
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr
 8007ec4:	08007ec9 	.word	0x08007ec9

08007ec8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ed2:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <prvTaskExitError+0x54>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eda:	d00a      	beq.n	8007ef2 <prvTaskExitError+0x2a>
	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	60fb      	str	r3, [r7, #12]
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <prvTaskExitError+0x28>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	60bb      	str	r3, [r7, #8]
}
 8007f04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f06:	bf00      	nop
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0fc      	beq.n	8007f08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f0e:	bf00      	nop
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	20000024 	.word	0x20000024

08007f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <pxCurrentTCBConst2>)
 8007f22:	6819      	ldr	r1, [r3, #0]
 8007f24:	6808      	ldr	r0, [r1, #0]
 8007f26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f2a:	f380 8809 	msr	PSP, r0
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8811 	msr	BASEPRI, r0
 8007f3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007f3e:	4770      	bx	lr

08007f40 <pxCurrentTCBConst2>:
 8007f40:	20000b00 	.word	0x20000b00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop

08007f48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007f48:	4806      	ldr	r0, [pc, #24]	; (8007f64 <prvPortStartFirstTask+0x1c>)
 8007f4a:	6800      	ldr	r0, [r0, #0]
 8007f4c:	6800      	ldr	r0, [r0, #0]
 8007f4e:	f380 8808 	msr	MSP, r0
 8007f52:	b662      	cpsie	i
 8007f54:	b661      	cpsie	f
 8007f56:	f3bf 8f4f 	dsb	sy
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	df00      	svc	0
 8007f60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f62:	bf00      	nop
 8007f64:	e000ed08 	.word	0xe000ed08

08007f68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f6e:	4b32      	ldr	r3, [pc, #200]	; (8008038 <xPortStartScheduler+0xd0>)
 8007f70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	22ff      	movs	r2, #255	; 0xff
 8007f7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f88:	78fb      	ldrb	r3, [r7, #3]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	4b2a      	ldr	r3, [pc, #168]	; (800803c <xPortStartScheduler+0xd4>)
 8007f94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f96:	4b2a      	ldr	r3, [pc, #168]	; (8008040 <xPortStartScheduler+0xd8>)
 8007f98:	2207      	movs	r2, #7
 8007f9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f9c:	e009      	b.n	8007fb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007f9e:	4b28      	ldr	r3, [pc, #160]	; (8008040 <xPortStartScheduler+0xd8>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	4a26      	ldr	r2, [pc, #152]	; (8008040 <xPortStartScheduler+0xd8>)
 8007fa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	005b      	lsls	r3, r3, #1
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fb2:	78fb      	ldrb	r3, [r7, #3]
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	2b80      	cmp	r3, #128	; 0x80
 8007fbc:	d0ef      	beq.n	8007f9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fbe:	4b20      	ldr	r3, [pc, #128]	; (8008040 <xPortStartScheduler+0xd8>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f1c3 0307 	rsb	r3, r3, #7
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d00a      	beq.n	8007fe0 <xPortStartScheduler+0x78>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	60bb      	str	r3, [r7, #8]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fe0:	4b17      	ldr	r3, [pc, #92]	; (8008040 <xPortStartScheduler+0xd8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	4a16      	ldr	r2, [pc, #88]	; (8008040 <xPortStartScheduler+0xd8>)
 8007fe8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fea:	4b15      	ldr	r3, [pc, #84]	; (8008040 <xPortStartScheduler+0xd8>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ff2:	4a13      	ldr	r2, [pc, #76]	; (8008040 <xPortStartScheduler+0xd8>)
 8007ff4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ffe:	4b11      	ldr	r3, [pc, #68]	; (8008044 <xPortStartScheduler+0xdc>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a10      	ldr	r2, [pc, #64]	; (8008044 <xPortStartScheduler+0xdc>)
 8008004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008008:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800800a:	4b0e      	ldr	r3, [pc, #56]	; (8008044 <xPortStartScheduler+0xdc>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a0d      	ldr	r2, [pc, #52]	; (8008044 <xPortStartScheduler+0xdc>)
 8008010:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008014:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008016:	f000 f8b9 	bl	800818c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800801a:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <xPortStartScheduler+0xe0>)
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008020:	f7ff ff92 	bl	8007f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008024:	f7ff f8b8 	bl	8007198 <vTaskSwitchContext>
	prvTaskExitError();
 8008028:	f7ff ff4e 	bl	8007ec8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	e000e400 	.word	0xe000e400
 800803c:	2000112c 	.word	0x2000112c
 8008040:	20001130 	.word	0x20001130
 8008044:	e000ed20 	.word	0xe000ed20
 8008048:	20000024 	.word	0x20000024

0800804c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	607b      	str	r3, [r7, #4]
}
 8008064:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008066:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <vPortEnterCritical+0x58>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3301      	adds	r3, #1
 800806c:	4a0d      	ldr	r2, [pc, #52]	; (80080a4 <vPortEnterCritical+0x58>)
 800806e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008070:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <vPortEnterCritical+0x58>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10f      	bne.n	8008098 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <vPortEnterCritical+0x5c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	b2db      	uxtb	r3, r3
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <vPortEnterCritical+0x4c>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	603b      	str	r3, [r7, #0]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <vPortEnterCritical+0x4a>
	}
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000024 	.word	0x20000024
 80080a8:	e000ed04 	.word	0xe000ed04

080080ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080b2:	4b11      	ldr	r3, [pc, #68]	; (80080f8 <vPortExitCritical+0x4c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <vPortExitCritical+0x24>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	607b      	str	r3, [r7, #4]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080d0:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <vPortExitCritical+0x4c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	4a08      	ldr	r2, [pc, #32]	; (80080f8 <vPortExitCritical+0x4c>)
 80080d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080da:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <vPortExitCritical+0x4c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d105      	bne.n	80080ee <vPortExitCritical+0x42>
 80080e2:	2300      	movs	r3, #0
 80080e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	f383 8811 	msr	BASEPRI, r3
}
 80080ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bc80      	pop	{r7}
 80080f6:	4770      	bx	lr
 80080f8:	20000024 	.word	0x20000024
 80080fc:	00000000 	.word	0x00000000

08008100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008100:	f3ef 8009 	mrs	r0, PSP
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <pxCurrentTCBConst>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008110:	6010      	str	r0, [r2, #0]
 8008112:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008116:	f04f 0050 	mov.w	r0, #80	; 0x50
 800811a:	f380 8811 	msr	BASEPRI, r0
 800811e:	f7ff f83b 	bl	8007198 <vTaskSwitchContext>
 8008122:	f04f 0000 	mov.w	r0, #0
 8008126:	f380 8811 	msr	BASEPRI, r0
 800812a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800812e:	6819      	ldr	r1, [r3, #0]
 8008130:	6808      	ldr	r0, [r1, #0]
 8008132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008136:	f380 8809 	msr	PSP, r0
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	4770      	bx	lr

08008140 <pxCurrentTCBConst>:
 8008140:	20000b00 	.word	0x20000b00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	f383 8811 	msr	BASEPRI, r3
 8008156:	f3bf 8f6f 	isb	sy
 800815a:	f3bf 8f4f 	dsb	sy
 800815e:	607b      	str	r3, [r7, #4]
}
 8008160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008162:	f7fe ff5b 	bl	800701c <xTaskIncrementTick>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800816c:	4b06      	ldr	r3, [pc, #24]	; (8008188 <SysTick_Handler+0x40>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	f383 8811 	msr	BASEPRI, r3
}
 800817e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008190:	4b0a      	ldr	r3, [pc, #40]	; (80081bc <vPortSetupTimerInterrupt+0x30>)
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008196:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <vPortSetupTimerInterrupt+0x34>)
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800819c:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <vPortSetupTimerInterrupt+0x38>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a09      	ldr	r2, [pc, #36]	; (80081c8 <vPortSetupTimerInterrupt+0x3c>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	099b      	lsrs	r3, r3, #6
 80081a8:	4a08      	ldr	r2, [pc, #32]	; (80081cc <vPortSetupTimerInterrupt+0x40>)
 80081aa:	3b01      	subs	r3, #1
 80081ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <vPortSetupTimerInterrupt+0x30>)
 80081b0:	2207      	movs	r2, #7
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bc80      	pop	{r7}
 80081ba:	4770      	bx	lr
 80081bc:	e000e010 	.word	0xe000e010
 80081c0:	e000e018 	.word	0xe000e018
 80081c4:	20000018 	.word	0x20000018
 80081c8:	10624dd3 	.word	0x10624dd3
 80081cc:	e000e014 	.word	0xe000e014

080081d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80081d6:	f3ef 8305 	mrs	r3, IPSR
 80081da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b0f      	cmp	r3, #15
 80081e0:	d914      	bls.n	800820c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80081e2:	4a16      	ldr	r2, [pc, #88]	; (800823c <vPortValidateInterruptPriority+0x6c>)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80081ec:	4b14      	ldr	r3, [pc, #80]	; (8008240 <vPortValidateInterruptPriority+0x70>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	7afa      	ldrb	r2, [r7, #11]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d20a      	bcs.n	800820c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	607b      	str	r3, [r7, #4]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800820c:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <vPortValidateInterruptPriority+0x74>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008214:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <vPortValidateInterruptPriority+0x78>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d90a      	bls.n	8008232 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	603b      	str	r3, [r7, #0]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <vPortValidateInterruptPriority+0x60>
	}
 8008232:	bf00      	nop
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	bc80      	pop	{r7}
 800823a:	4770      	bx	lr
 800823c:	e000e3f0 	.word	0xe000e3f0
 8008240:	2000112c 	.word	0x2000112c
 8008244:	e000ed0c 	.word	0xe000ed0c
 8008248:	20001130 	.word	0x20001130

0800824c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	; 0x28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008254:	2300      	movs	r3, #0
 8008256:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008258:	f7fe fe26 	bl	8006ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800825c:	4b58      	ldr	r3, [pc, #352]	; (80083c0 <pvPortMalloc+0x174>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008264:	f000 f910 	bl	8008488 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008268:	4b56      	ldr	r3, [pc, #344]	; (80083c4 <pvPortMalloc+0x178>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4013      	ands	r3, r2
 8008270:	2b00      	cmp	r3, #0
 8008272:	f040 808e 	bne.w	8008392 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d01d      	beq.n	80082b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800827c:	2208      	movs	r2, #8
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4413      	add	r3, r2
 8008282:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f003 0307 	and.w	r3, r3, #7
 800828a:	2b00      	cmp	r3, #0
 800828c:	d014      	beq.n	80082b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f023 0307 	bic.w	r3, r3, #7
 8008294:	3308      	adds	r3, #8
 8008296:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f003 0307 	and.w	r3, r3, #7
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <pvPortMalloc+0x6c>
	__asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	617b      	str	r3, [r7, #20]
}
 80082b4:	bf00      	nop
 80082b6:	e7fe      	b.n	80082b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d069      	beq.n	8008392 <pvPortMalloc+0x146>
 80082be:	4b42      	ldr	r3, [pc, #264]	; (80083c8 <pvPortMalloc+0x17c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d864      	bhi.n	8008392 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082c8:	4b40      	ldr	r3, [pc, #256]	; (80083cc <pvPortMalloc+0x180>)
 80082ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082cc:	4b3f      	ldr	r3, [pc, #252]	; (80083cc <pvPortMalloc+0x180>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082d2:	e004      	b.n	80082de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d903      	bls.n	80082f0 <pvPortMalloc+0xa4>
 80082e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1f1      	bne.n	80082d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80082f0:	4b33      	ldr	r3, [pc, #204]	; (80083c0 <pvPortMalloc+0x174>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d04b      	beq.n	8008392 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2208      	movs	r2, #8
 8008300:	4413      	add	r3, r2
 8008302:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	1ad2      	subs	r2, r2, r3
 8008314:	2308      	movs	r3, #8
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	429a      	cmp	r2, r3
 800831a:	d91f      	bls.n	800835c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800831c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4413      	add	r3, r2
 8008322:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <pvPortMalloc+0xf8>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	613b      	str	r3, [r7, #16]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	1ad2      	subs	r2, r2, r3
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008356:	69b8      	ldr	r0, [r7, #24]
 8008358:	f000 f8f8 	bl	800854c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800835c:	4b1a      	ldr	r3, [pc, #104]	; (80083c8 <pvPortMalloc+0x17c>)
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	4a18      	ldr	r2, [pc, #96]	; (80083c8 <pvPortMalloc+0x17c>)
 8008368:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800836a:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <pvPortMalloc+0x17c>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <pvPortMalloc+0x184>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d203      	bcs.n	800837e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008376:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <pvPortMalloc+0x17c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a15      	ldr	r2, [pc, #84]	; (80083d0 <pvPortMalloc+0x184>)
 800837c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <pvPortMalloc+0x178>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	431a      	orrs	r2, r3
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008392:	f7fe fd97 	bl	8006ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00a      	beq.n	80083b6 <pvPortMalloc+0x16a>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	60fb      	str	r3, [r7, #12]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <pvPortMalloc+0x168>
	return pvReturn;
 80083b6:	69fb      	ldr	r3, [r7, #28]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3728      	adds	r7, #40	; 0x28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20001d3c 	.word	0x20001d3c
 80083c4:	20001d48 	.word	0x20001d48
 80083c8:	20001d40 	.word	0x20001d40
 80083cc:	20001d34 	.word	0x20001d34
 80083d0:	20001d44 	.word	0x20001d44

080083d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d048      	beq.n	8008478 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80083e6:	2308      	movs	r3, #8
 80083e8:	425b      	negs	r3, r3
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	4413      	add	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	4b21      	ldr	r3, [pc, #132]	; (8008480 <vPortFree+0xac>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4013      	ands	r3, r2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10a      	bne.n	8008418 <vPortFree+0x44>
	__asm volatile
 8008402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	60fb      	str	r3, [r7, #12]
}
 8008414:	bf00      	nop
 8008416:	e7fe      	b.n	8008416 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00a      	beq.n	8008436 <vPortFree+0x62>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	60bb      	str	r3, [r7, #8]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	4b11      	ldr	r3, [pc, #68]	; (8008480 <vPortFree+0xac>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4013      	ands	r3, r2
 8008440:	2b00      	cmp	r3, #0
 8008442:	d019      	beq.n	8008478 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d115      	bne.n	8008478 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <vPortFree+0xac>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	43db      	mvns	r3, r3
 8008456:	401a      	ands	r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800845c:	f7fe fd24 	bl	8006ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	4b07      	ldr	r3, [pc, #28]	; (8008484 <vPortFree+0xb0>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4413      	add	r3, r2
 800846a:	4a06      	ldr	r2, [pc, #24]	; (8008484 <vPortFree+0xb0>)
 800846c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800846e:	6938      	ldr	r0, [r7, #16]
 8008470:	f000 f86c 	bl	800854c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008474:	f7fe fd26 	bl	8006ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008478:	bf00      	nop
 800847a:	3718      	adds	r7, #24
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20001d48 	.word	0x20001d48
 8008484:	20001d40 	.word	0x20001d40

08008488 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800848e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008492:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008494:	4b27      	ldr	r3, [pc, #156]	; (8008534 <prvHeapInit+0xac>)
 8008496:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00c      	beq.n	80084bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3307      	adds	r3, #7
 80084a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f023 0307 	bic.w	r3, r3, #7
 80084ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	4a1f      	ldr	r2, [pc, #124]	; (8008534 <prvHeapInit+0xac>)
 80084b8:	4413      	add	r3, r2
 80084ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084c0:	4a1d      	ldr	r2, [pc, #116]	; (8008538 <prvHeapInit+0xb0>)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084c6:	4b1c      	ldr	r3, [pc, #112]	; (8008538 <prvHeapInit+0xb0>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	4413      	add	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084d4:	2208      	movs	r2, #8
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	1a9b      	subs	r3, r3, r2
 80084da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 0307 	bic.w	r3, r3, #7
 80084e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	4a15      	ldr	r2, [pc, #84]	; (800853c <prvHeapInit+0xb4>)
 80084e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80084ea:	4b14      	ldr	r3, [pc, #80]	; (800853c <prvHeapInit+0xb4>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2200      	movs	r2, #0
 80084f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80084f2:	4b12      	ldr	r3, [pc, #72]	; (800853c <prvHeapInit+0xb4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	1ad2      	subs	r2, r2, r3
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <prvHeapInit+0xb4>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	4a0a      	ldr	r2, [pc, #40]	; (8008540 <prvHeapInit+0xb8>)
 8008516:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	4a09      	ldr	r2, [pc, #36]	; (8008544 <prvHeapInit+0xbc>)
 800851e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <prvHeapInit+0xc0>)
 8008522:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008526:	601a      	str	r2, [r3, #0]
}
 8008528:	bf00      	nop
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	20001134 	.word	0x20001134
 8008538:	20001d34 	.word	0x20001d34
 800853c:	20001d3c 	.word	0x20001d3c
 8008540:	20001d44 	.word	0x20001d44
 8008544:	20001d40 	.word	0x20001d40
 8008548:	20001d48 	.word	0x20001d48

0800854c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008554:	4b27      	ldr	r3, [pc, #156]	; (80085f4 <prvInsertBlockIntoFreeList+0xa8>)
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	e002      	b.n	8008560 <prvInsertBlockIntoFreeList+0x14>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	429a      	cmp	r2, r3
 8008568:	d8f7      	bhi.n	800855a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	4413      	add	r3, r2
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	429a      	cmp	r2, r3
 800857a:	d108      	bne.n	800858e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	441a      	add	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	441a      	add	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d118      	bne.n	80085d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	4b14      	ldr	r3, [pc, #80]	; (80085f8 <prvInsertBlockIntoFreeList+0xac>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d00d      	beq.n	80085ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	441a      	add	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	e008      	b.n	80085dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085ca:	4b0b      	ldr	r3, [pc, #44]	; (80085f8 <prvInsertBlockIntoFreeList+0xac>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e003      	b.n	80085dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d002      	beq.n	80085ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr
 80085f4:	20001d34 	.word	0x20001d34
 80085f8:	20001d3c 	.word	0x20001d3c

080085fc <sqrt>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	4606      	mov	r6, r0
 8008600:	460f      	mov	r7, r1
 8008602:	f000 f841 	bl	8008688 <__ieee754_sqrt>
 8008606:	4632      	mov	r2, r6
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	463b      	mov	r3, r7
 800860e:	4630      	mov	r0, r6
 8008610:	4639      	mov	r1, r7
 8008612:	f7f8 f9f3 	bl	80009fc <__aeabi_dcmpun>
 8008616:	b990      	cbnz	r0, 800863e <sqrt+0x42>
 8008618:	2200      	movs	r2, #0
 800861a:	2300      	movs	r3, #0
 800861c:	4630      	mov	r0, r6
 800861e:	4639      	mov	r1, r7
 8008620:	f7f8 f9c4 	bl	80009ac <__aeabi_dcmplt>
 8008624:	b158      	cbz	r0, 800863e <sqrt+0x42>
 8008626:	f000 fc0f 	bl	8008e48 <__errno>
 800862a:	2321      	movs	r3, #33	; 0x21
 800862c:	2200      	movs	r2, #0
 800862e:	6003      	str	r3, [r0, #0]
 8008630:	2300      	movs	r3, #0
 8008632:	4610      	mov	r0, r2
 8008634:	4619      	mov	r1, r3
 8008636:	f7f8 f871 	bl	800071c <__aeabi_ddiv>
 800863a:	4604      	mov	r4, r0
 800863c:	460d      	mov	r5, r1
 800863e:	4620      	mov	r0, r4
 8008640:	4629      	mov	r1, r5
 8008642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008644 <asinf>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4604      	mov	r4, r0
 8008648:	f000 f8ce 	bl	80087e8 <__ieee754_asinf>
 800864c:	4621      	mov	r1, r4
 800864e:	4605      	mov	r5, r0
 8008650:	4620      	mov	r0, r4
 8008652:	f7f8 fd0d 	bl	8001070 <__aeabi_fcmpun>
 8008656:	b980      	cbnz	r0, 800867a <asinf+0x36>
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fbed 	bl	8008e38 <fabsf>
 800865e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008662:	f7f8 fcfb 	bl	800105c <__aeabi_fcmpgt>
 8008666:	b140      	cbz	r0, 800867a <asinf+0x36>
 8008668:	f000 fbee 	bl	8008e48 <__errno>
 800866c:	2321      	movs	r3, #33	; 0x21
 800866e:	6003      	str	r3, [r0, #0]
 8008670:	4803      	ldr	r0, [pc, #12]	; (8008680 <asinf+0x3c>)
 8008672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008676:	f000 bbe3 	b.w	8008e40 <nanf>
 800867a:	4628      	mov	r0, r5
 800867c:	bd38      	pop	{r3, r4, r5, pc}
 800867e:	bf00      	nop
 8008680:	080090fc 	.word	0x080090fc

08008684 <atan2f>:
 8008684:	f000 b9f4 	b.w	8008a70 <__ieee754_atan2f>

08008688 <__ieee754_sqrt>:
 8008688:	f8df c158 	ldr.w	ip, [pc, #344]	; 80087e4 <__ieee754_sqrt+0x15c>
 800868c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008690:	ea3c 0c01 	bics.w	ip, ip, r1
 8008694:	4606      	mov	r6, r0
 8008696:	460d      	mov	r5, r1
 8008698:	460c      	mov	r4, r1
 800869a:	460a      	mov	r2, r1
 800869c:	4607      	mov	r7, r0
 800869e:	4603      	mov	r3, r0
 80086a0:	d10f      	bne.n	80086c2 <__ieee754_sqrt+0x3a>
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	f7f7 ff0f 	bl	80004c8 <__aeabi_dmul>
 80086aa:	4602      	mov	r2, r0
 80086ac:	460b      	mov	r3, r1
 80086ae:	4630      	mov	r0, r6
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f7 fd53 	bl	800015c <__adddf3>
 80086b6:	4606      	mov	r6, r0
 80086b8:	460d      	mov	r5, r1
 80086ba:	4630      	mov	r0, r6
 80086bc:	4629      	mov	r1, r5
 80086be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c2:	2900      	cmp	r1, #0
 80086c4:	dc0e      	bgt.n	80086e4 <__ieee754_sqrt+0x5c>
 80086c6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80086ca:	ea5c 0707 	orrs.w	r7, ip, r7
 80086ce:	d0f4      	beq.n	80086ba <__ieee754_sqrt+0x32>
 80086d0:	b141      	cbz	r1, 80086e4 <__ieee754_sqrt+0x5c>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	f7f7 fd3f 	bl	8000158 <__aeabi_dsub>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	f7f8 f81d 	bl	800071c <__aeabi_ddiv>
 80086e2:	e7e8      	b.n	80086b6 <__ieee754_sqrt+0x2e>
 80086e4:	1521      	asrs	r1, r4, #20
 80086e6:	d075      	beq.n	80087d4 <__ieee754_sqrt+0x14c>
 80086e8:	07cc      	lsls	r4, r1, #31
 80086ea:	f04f 0400 	mov.w	r4, #0
 80086ee:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80086f2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80086f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80086fa:	bf5e      	ittt	pl
 80086fc:	0fd9      	lsrpl	r1, r3, #31
 80086fe:	005b      	lslpl	r3, r3, #1
 8008700:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008704:	0fd9      	lsrs	r1, r3, #31
 8008706:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800870a:	2516      	movs	r5, #22
 800870c:	4620      	mov	r0, r4
 800870e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008712:	107f      	asrs	r7, r7, #1
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	1846      	adds	r6, r0, r1
 8008718:	4296      	cmp	r6, r2
 800871a:	bfde      	ittt	le
 800871c:	1b92      	suble	r2, r2, r6
 800871e:	1870      	addle	r0, r6, r1
 8008720:	1864      	addle	r4, r4, r1
 8008722:	0052      	lsls	r2, r2, #1
 8008724:	3d01      	subs	r5, #1
 8008726:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800872a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800872e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008732:	d1f0      	bne.n	8008716 <__ieee754_sqrt+0x8e>
 8008734:	4629      	mov	r1, r5
 8008736:	f04f 0e20 	mov.w	lr, #32
 800873a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800873e:	4282      	cmp	r2, r0
 8008740:	eb06 0c05 	add.w	ip, r6, r5
 8008744:	dc02      	bgt.n	800874c <__ieee754_sqrt+0xc4>
 8008746:	d113      	bne.n	8008770 <__ieee754_sqrt+0xe8>
 8008748:	459c      	cmp	ip, r3
 800874a:	d811      	bhi.n	8008770 <__ieee754_sqrt+0xe8>
 800874c:	f1bc 0f00 	cmp.w	ip, #0
 8008750:	eb0c 0506 	add.w	r5, ip, r6
 8008754:	da43      	bge.n	80087de <__ieee754_sqrt+0x156>
 8008756:	2d00      	cmp	r5, #0
 8008758:	db41      	blt.n	80087de <__ieee754_sqrt+0x156>
 800875a:	f100 0801 	add.w	r8, r0, #1
 800875e:	1a12      	subs	r2, r2, r0
 8008760:	4640      	mov	r0, r8
 8008762:	459c      	cmp	ip, r3
 8008764:	bf88      	it	hi
 8008766:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800876a:	eba3 030c 	sub.w	r3, r3, ip
 800876e:	4431      	add	r1, r6
 8008770:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008774:	f1be 0e01 	subs.w	lr, lr, #1
 8008778:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800877c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008780:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008784:	d1db      	bne.n	800873e <__ieee754_sqrt+0xb6>
 8008786:	4313      	orrs	r3, r2
 8008788:	d006      	beq.n	8008798 <__ieee754_sqrt+0x110>
 800878a:	1c48      	adds	r0, r1, #1
 800878c:	bf0b      	itete	eq
 800878e:	4671      	moveq	r1, lr
 8008790:	3101      	addne	r1, #1
 8008792:	3401      	addeq	r4, #1
 8008794:	f021 0101 	bicne.w	r1, r1, #1
 8008798:	1063      	asrs	r3, r4, #1
 800879a:	0849      	lsrs	r1, r1, #1
 800879c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80087a0:	07e2      	lsls	r2, r4, #31
 80087a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80087a6:	bf48      	it	mi
 80087a8:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80087ac:	460e      	mov	r6, r1
 80087ae:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80087b2:	e782      	b.n	80086ba <__ieee754_sqrt+0x32>
 80087b4:	0ada      	lsrs	r2, r3, #11
 80087b6:	3815      	subs	r0, #21
 80087b8:	055b      	lsls	r3, r3, #21
 80087ba:	2a00      	cmp	r2, #0
 80087bc:	d0fa      	beq.n	80087b4 <__ieee754_sqrt+0x12c>
 80087be:	02d5      	lsls	r5, r2, #11
 80087c0:	d50a      	bpl.n	80087d8 <__ieee754_sqrt+0x150>
 80087c2:	f1c1 0420 	rsb	r4, r1, #32
 80087c6:	fa23 f404 	lsr.w	r4, r3, r4
 80087ca:	1e4d      	subs	r5, r1, #1
 80087cc:	408b      	lsls	r3, r1
 80087ce:	4322      	orrs	r2, r4
 80087d0:	1b41      	subs	r1, r0, r5
 80087d2:	e789      	b.n	80086e8 <__ieee754_sqrt+0x60>
 80087d4:	4608      	mov	r0, r1
 80087d6:	e7f0      	b.n	80087ba <__ieee754_sqrt+0x132>
 80087d8:	0052      	lsls	r2, r2, #1
 80087da:	3101      	adds	r1, #1
 80087dc:	e7ef      	b.n	80087be <__ieee754_sqrt+0x136>
 80087de:	4680      	mov	r8, r0
 80087e0:	e7bd      	b.n	800875e <__ieee754_sqrt+0xd6>
 80087e2:	bf00      	nop
 80087e4:	7ff00000 	.word	0x7ff00000

080087e8 <__ieee754_asinf>:
 80087e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ec:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80087f0:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80087f4:	4604      	mov	r4, r0
 80087f6:	4605      	mov	r5, r0
 80087f8:	d10c      	bne.n	8008814 <__ieee754_asinf+0x2c>
 80087fa:	498d      	ldr	r1, [pc, #564]	; (8008a30 <__ieee754_asinf+0x248>)
 80087fc:	f7f8 fa72 	bl	8000ce4 <__aeabi_fmul>
 8008800:	498c      	ldr	r1, [pc, #560]	; (8008a34 <__ieee754_asinf+0x24c>)
 8008802:	4605      	mov	r5, r0
 8008804:	4620      	mov	r0, r4
 8008806:	f7f8 fa6d 	bl	8000ce4 <__aeabi_fmul>
 800880a:	4601      	mov	r1, r0
 800880c:	4628      	mov	r0, r5
 800880e:	f7f8 f961 	bl	8000ad4 <__addsf3>
 8008812:	e006      	b.n	8008822 <__ieee754_asinf+0x3a>
 8008814:	dd07      	ble.n	8008826 <__ieee754_asinf+0x3e>
 8008816:	4601      	mov	r1, r0
 8008818:	f7f8 f95a 	bl	8000ad0 <__aeabi_fsub>
 800881c:	4601      	mov	r1, r0
 800881e:	f7f8 fb15 	bl	8000e4c <__aeabi_fdiv>
 8008822:	4604      	mov	r4, r0
 8008824:	e00e      	b.n	8008844 <__ieee754_asinf+0x5c>
 8008826:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 800882a:	da58      	bge.n	80088de <__ieee754_asinf+0xf6>
 800882c:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8008830:	da0b      	bge.n	800884a <__ieee754_asinf+0x62>
 8008832:	4981      	ldr	r1, [pc, #516]	; (8008a38 <__ieee754_asinf+0x250>)
 8008834:	f7f8 f94e 	bl	8000ad4 <__addsf3>
 8008838:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800883c:	f7f8 fc0e 	bl	800105c <__aeabi_fcmpgt>
 8008840:	2800      	cmp	r0, #0
 8008842:	d04c      	beq.n	80088de <__ieee754_asinf+0xf6>
 8008844:	4620      	mov	r0, r4
 8008846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800884a:	4601      	mov	r1, r0
 800884c:	f7f8 fa4a 	bl	8000ce4 <__aeabi_fmul>
 8008850:	4605      	mov	r5, r0
 8008852:	497a      	ldr	r1, [pc, #488]	; (8008a3c <__ieee754_asinf+0x254>)
 8008854:	f7f8 fa46 	bl	8000ce4 <__aeabi_fmul>
 8008858:	4979      	ldr	r1, [pc, #484]	; (8008a40 <__ieee754_asinf+0x258>)
 800885a:	f7f8 f93b 	bl	8000ad4 <__addsf3>
 800885e:	4629      	mov	r1, r5
 8008860:	f7f8 fa40 	bl	8000ce4 <__aeabi_fmul>
 8008864:	4977      	ldr	r1, [pc, #476]	; (8008a44 <__ieee754_asinf+0x25c>)
 8008866:	f7f8 f933 	bl	8000ad0 <__aeabi_fsub>
 800886a:	4629      	mov	r1, r5
 800886c:	f7f8 fa3a 	bl	8000ce4 <__aeabi_fmul>
 8008870:	4975      	ldr	r1, [pc, #468]	; (8008a48 <__ieee754_asinf+0x260>)
 8008872:	f7f8 f92f 	bl	8000ad4 <__addsf3>
 8008876:	4629      	mov	r1, r5
 8008878:	f7f8 fa34 	bl	8000ce4 <__aeabi_fmul>
 800887c:	4973      	ldr	r1, [pc, #460]	; (8008a4c <__ieee754_asinf+0x264>)
 800887e:	f7f8 f927 	bl	8000ad0 <__aeabi_fsub>
 8008882:	4629      	mov	r1, r5
 8008884:	f7f8 fa2e 	bl	8000ce4 <__aeabi_fmul>
 8008888:	4971      	ldr	r1, [pc, #452]	; (8008a50 <__ieee754_asinf+0x268>)
 800888a:	f7f8 f923 	bl	8000ad4 <__addsf3>
 800888e:	4629      	mov	r1, r5
 8008890:	f7f8 fa28 	bl	8000ce4 <__aeabi_fmul>
 8008894:	496f      	ldr	r1, [pc, #444]	; (8008a54 <__ieee754_asinf+0x26c>)
 8008896:	4606      	mov	r6, r0
 8008898:	4628      	mov	r0, r5
 800889a:	f7f8 fa23 	bl	8000ce4 <__aeabi_fmul>
 800889e:	496e      	ldr	r1, [pc, #440]	; (8008a58 <__ieee754_asinf+0x270>)
 80088a0:	f7f8 f916 	bl	8000ad0 <__aeabi_fsub>
 80088a4:	4629      	mov	r1, r5
 80088a6:	f7f8 fa1d 	bl	8000ce4 <__aeabi_fmul>
 80088aa:	496c      	ldr	r1, [pc, #432]	; (8008a5c <__ieee754_asinf+0x274>)
 80088ac:	f7f8 f912 	bl	8000ad4 <__addsf3>
 80088b0:	4629      	mov	r1, r5
 80088b2:	f7f8 fa17 	bl	8000ce4 <__aeabi_fmul>
 80088b6:	496a      	ldr	r1, [pc, #424]	; (8008a60 <__ieee754_asinf+0x278>)
 80088b8:	f7f8 f90a 	bl	8000ad0 <__aeabi_fsub>
 80088bc:	4629      	mov	r1, r5
 80088be:	f7f8 fa11 	bl	8000ce4 <__aeabi_fmul>
 80088c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80088c6:	f7f8 f905 	bl	8000ad4 <__addsf3>
 80088ca:	4601      	mov	r1, r0
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7f8 fabd 	bl	8000e4c <__aeabi_fdiv>
 80088d2:	4621      	mov	r1, r4
 80088d4:	f7f8 fa06 	bl	8000ce4 <__aeabi_fmul>
 80088d8:	4601      	mov	r1, r0
 80088da:	4620      	mov	r0, r4
 80088dc:	e797      	b.n	800880e <__ieee754_asinf+0x26>
 80088de:	4620      	mov	r0, r4
 80088e0:	f000 faaa 	bl	8008e38 <fabsf>
 80088e4:	4601      	mov	r1, r0
 80088e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80088ea:	f7f8 f8f1 	bl	8000ad0 <__aeabi_fsub>
 80088ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80088f2:	f7f8 f9f7 	bl	8000ce4 <__aeabi_fmul>
 80088f6:	4606      	mov	r6, r0
 80088f8:	4950      	ldr	r1, [pc, #320]	; (8008a3c <__ieee754_asinf+0x254>)
 80088fa:	f7f8 f9f3 	bl	8000ce4 <__aeabi_fmul>
 80088fe:	4950      	ldr	r1, [pc, #320]	; (8008a40 <__ieee754_asinf+0x258>)
 8008900:	f7f8 f8e8 	bl	8000ad4 <__addsf3>
 8008904:	4631      	mov	r1, r6
 8008906:	f7f8 f9ed 	bl	8000ce4 <__aeabi_fmul>
 800890a:	494e      	ldr	r1, [pc, #312]	; (8008a44 <__ieee754_asinf+0x25c>)
 800890c:	f7f8 f8e0 	bl	8000ad0 <__aeabi_fsub>
 8008910:	4631      	mov	r1, r6
 8008912:	f7f8 f9e7 	bl	8000ce4 <__aeabi_fmul>
 8008916:	494c      	ldr	r1, [pc, #304]	; (8008a48 <__ieee754_asinf+0x260>)
 8008918:	f7f8 f8dc 	bl	8000ad4 <__addsf3>
 800891c:	4631      	mov	r1, r6
 800891e:	f7f8 f9e1 	bl	8000ce4 <__aeabi_fmul>
 8008922:	494a      	ldr	r1, [pc, #296]	; (8008a4c <__ieee754_asinf+0x264>)
 8008924:	f7f8 f8d4 	bl	8000ad0 <__aeabi_fsub>
 8008928:	4631      	mov	r1, r6
 800892a:	f7f8 f9db 	bl	8000ce4 <__aeabi_fmul>
 800892e:	4948      	ldr	r1, [pc, #288]	; (8008a50 <__ieee754_asinf+0x268>)
 8008930:	f7f8 f8d0 	bl	8000ad4 <__addsf3>
 8008934:	4631      	mov	r1, r6
 8008936:	f7f8 f9d5 	bl	8000ce4 <__aeabi_fmul>
 800893a:	4946      	ldr	r1, [pc, #280]	; (8008a54 <__ieee754_asinf+0x26c>)
 800893c:	4681      	mov	r9, r0
 800893e:	4630      	mov	r0, r6
 8008940:	f7f8 f9d0 	bl	8000ce4 <__aeabi_fmul>
 8008944:	4944      	ldr	r1, [pc, #272]	; (8008a58 <__ieee754_asinf+0x270>)
 8008946:	f7f8 f8c3 	bl	8000ad0 <__aeabi_fsub>
 800894a:	4631      	mov	r1, r6
 800894c:	f7f8 f9ca 	bl	8000ce4 <__aeabi_fmul>
 8008950:	4942      	ldr	r1, [pc, #264]	; (8008a5c <__ieee754_asinf+0x274>)
 8008952:	f7f8 f8bf 	bl	8000ad4 <__addsf3>
 8008956:	4631      	mov	r1, r6
 8008958:	f7f8 f9c4 	bl	8000ce4 <__aeabi_fmul>
 800895c:	4940      	ldr	r1, [pc, #256]	; (8008a60 <__ieee754_asinf+0x278>)
 800895e:	f7f8 f8b7 	bl	8000ad0 <__aeabi_fsub>
 8008962:	4631      	mov	r1, r6
 8008964:	f7f8 f9be 	bl	8000ce4 <__aeabi_fmul>
 8008968:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800896c:	f7f8 f8b2 	bl	8000ad4 <__addsf3>
 8008970:	4682      	mov	sl, r0
 8008972:	4630      	mov	r0, r6
 8008974:	f000 f902 	bl	8008b7c <__ieee754_sqrtf>
 8008978:	4b3a      	ldr	r3, [pc, #232]	; (8008a64 <__ieee754_asinf+0x27c>)
 800897a:	4607      	mov	r7, r0
 800897c:	4598      	cmp	r8, r3
 800897e:	dd1a      	ble.n	80089b6 <__ieee754_asinf+0x1ce>
 8008980:	4651      	mov	r1, sl
 8008982:	4648      	mov	r0, r9
 8008984:	f7f8 fa62 	bl	8000e4c <__aeabi_fdiv>
 8008988:	4639      	mov	r1, r7
 800898a:	f7f8 f9ab 	bl	8000ce4 <__aeabi_fmul>
 800898e:	4639      	mov	r1, r7
 8008990:	f7f8 f8a0 	bl	8000ad4 <__addsf3>
 8008994:	4601      	mov	r1, r0
 8008996:	f7f8 f89d 	bl	8000ad4 <__addsf3>
 800899a:	4933      	ldr	r1, [pc, #204]	; (8008a68 <__ieee754_asinf+0x280>)
 800899c:	f7f8 f89a 	bl	8000ad4 <__addsf3>
 80089a0:	4601      	mov	r1, r0
 80089a2:	4823      	ldr	r0, [pc, #140]	; (8008a30 <__ieee754_asinf+0x248>)
 80089a4:	f7f8 f894 	bl	8000ad0 <__aeabi_fsub>
 80089a8:	2d00      	cmp	r5, #0
 80089aa:	4604      	mov	r4, r0
 80089ac:	f73f af4a 	bgt.w	8008844 <__ieee754_asinf+0x5c>
 80089b0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80089b4:	e735      	b.n	8008822 <__ieee754_asinf+0x3a>
 80089b6:	4601      	mov	r1, r0
 80089b8:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 80089bc:	f7f8 f88a 	bl	8000ad4 <__addsf3>
 80089c0:	4651      	mov	r1, sl
 80089c2:	4604      	mov	r4, r0
 80089c4:	4648      	mov	r0, r9
 80089c6:	f7f8 fa41 	bl	8000e4c <__aeabi_fdiv>
 80089ca:	4601      	mov	r1, r0
 80089cc:	4620      	mov	r0, r4
 80089ce:	f7f8 f989 	bl	8000ce4 <__aeabi_fmul>
 80089d2:	f028 080f 	bic.w	r8, r8, #15
 80089d6:	4681      	mov	r9, r0
 80089d8:	4641      	mov	r1, r8
 80089da:	4640      	mov	r0, r8
 80089dc:	f7f8 f982 	bl	8000ce4 <__aeabi_fmul>
 80089e0:	4601      	mov	r1, r0
 80089e2:	4630      	mov	r0, r6
 80089e4:	f7f8 f874 	bl	8000ad0 <__aeabi_fsub>
 80089e8:	4641      	mov	r1, r8
 80089ea:	4604      	mov	r4, r0
 80089ec:	4638      	mov	r0, r7
 80089ee:	f7f8 f871 	bl	8000ad4 <__addsf3>
 80089f2:	4601      	mov	r1, r0
 80089f4:	4620      	mov	r0, r4
 80089f6:	f7f8 fa29 	bl	8000e4c <__aeabi_fdiv>
 80089fa:	4601      	mov	r1, r0
 80089fc:	f7f8 f86a 	bl	8000ad4 <__addsf3>
 8008a00:	4601      	mov	r1, r0
 8008a02:	480c      	ldr	r0, [pc, #48]	; (8008a34 <__ieee754_asinf+0x24c>)
 8008a04:	f7f8 f864 	bl	8000ad0 <__aeabi_fsub>
 8008a08:	4601      	mov	r1, r0
 8008a0a:	4648      	mov	r0, r9
 8008a0c:	f7f8 f860 	bl	8000ad0 <__aeabi_fsub>
 8008a10:	4641      	mov	r1, r8
 8008a12:	4604      	mov	r4, r0
 8008a14:	4640      	mov	r0, r8
 8008a16:	f7f8 f85d 	bl	8000ad4 <__addsf3>
 8008a1a:	4601      	mov	r1, r0
 8008a1c:	4813      	ldr	r0, [pc, #76]	; (8008a6c <__ieee754_asinf+0x284>)
 8008a1e:	f7f8 f857 	bl	8000ad0 <__aeabi_fsub>
 8008a22:	4601      	mov	r1, r0
 8008a24:	4620      	mov	r0, r4
 8008a26:	f7f8 f853 	bl	8000ad0 <__aeabi_fsub>
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	480f      	ldr	r0, [pc, #60]	; (8008a6c <__ieee754_asinf+0x284>)
 8008a2e:	e7b9      	b.n	80089a4 <__ieee754_asinf+0x1bc>
 8008a30:	3fc90fdb 	.word	0x3fc90fdb
 8008a34:	b33bbd2e 	.word	0xb33bbd2e
 8008a38:	7149f2ca 	.word	0x7149f2ca
 8008a3c:	3811ef08 	.word	0x3811ef08
 8008a40:	3a4f7f04 	.word	0x3a4f7f04
 8008a44:	3d241146 	.word	0x3d241146
 8008a48:	3e4e0aa8 	.word	0x3e4e0aa8
 8008a4c:	3ea6b090 	.word	0x3ea6b090
 8008a50:	3e2aaaab 	.word	0x3e2aaaab
 8008a54:	3d9dc62e 	.word	0x3d9dc62e
 8008a58:	3f303361 	.word	0x3f303361
 8008a5c:	4001572d 	.word	0x4001572d
 8008a60:	4019d139 	.word	0x4019d139
 8008a64:	3f799999 	.word	0x3f799999
 8008a68:	333bbd2e 	.word	0x333bbd2e
 8008a6c:	3f490fdb 	.word	0x3f490fdb

08008a70 <__ieee754_atan2f>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008a76:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	dc05      	bgt.n	8008a8a <__ieee754_atan2f+0x1a>
 8008a7e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008a82:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008a86:	4607      	mov	r7, r0
 8008a88:	dd04      	ble.n	8008a94 <__ieee754_atan2f+0x24>
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7f8 f822 	bl	8000ad4 <__addsf3>
 8008a90:	4603      	mov	r3, r0
 8008a92:	e011      	b.n	8008ab8 <__ieee754_atan2f+0x48>
 8008a94:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8008a98:	d103      	bne.n	8008aa2 <__ieee754_atan2f+0x32>
 8008a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a9e:	f000 b8bf 	b.w	8008c20 <atanf>
 8008aa2:	178c      	asrs	r4, r1, #30
 8008aa4:	f004 0402 	and.w	r4, r4, #2
 8008aa8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008aac:	b932      	cbnz	r2, 8008abc <__ieee754_atan2f+0x4c>
 8008aae:	2c02      	cmp	r4, #2
 8008ab0:	d04c      	beq.n	8008b4c <__ieee754_atan2f+0xdc>
 8008ab2:	2c03      	cmp	r4, #3
 8008ab4:	d100      	bne.n	8008ab8 <__ieee754_atan2f+0x48>
 8008ab6:	4b29      	ldr	r3, [pc, #164]	; (8008b5c <__ieee754_atan2f+0xec>)
 8008ab8:	4618      	mov	r0, r3
 8008aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008abc:	b91e      	cbnz	r6, 8008ac6 <__ieee754_atan2f+0x56>
 8008abe:	2f00      	cmp	r7, #0
 8008ac0:	da4a      	bge.n	8008b58 <__ieee754_atan2f+0xe8>
 8008ac2:	4b27      	ldr	r3, [pc, #156]	; (8008b60 <__ieee754_atan2f+0xf0>)
 8008ac4:	e7f8      	b.n	8008ab8 <__ieee754_atan2f+0x48>
 8008ac6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8008aca:	d10e      	bne.n	8008aea <__ieee754_atan2f+0x7a>
 8008acc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008ad0:	f104 34ff 	add.w	r4, r4, #4294967295
 8008ad4:	d105      	bne.n	8008ae2 <__ieee754_atan2f+0x72>
 8008ad6:	2c02      	cmp	r4, #2
 8008ad8:	d83a      	bhi.n	8008b50 <__ieee754_atan2f+0xe0>
 8008ada:	4b22      	ldr	r3, [pc, #136]	; (8008b64 <__ieee754_atan2f+0xf4>)
 8008adc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008ae0:	e7ea      	b.n	8008ab8 <__ieee754_atan2f+0x48>
 8008ae2:	2c02      	cmp	r4, #2
 8008ae4:	d836      	bhi.n	8008b54 <__ieee754_atan2f+0xe4>
 8008ae6:	4b20      	ldr	r3, [pc, #128]	; (8008b68 <__ieee754_atan2f+0xf8>)
 8008ae8:	e7f8      	b.n	8008adc <__ieee754_atan2f+0x6c>
 8008aea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008aee:	d0e6      	beq.n	8008abe <__ieee754_atan2f+0x4e>
 8008af0:	1b92      	subs	r2, r2, r6
 8008af2:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8008af6:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8008afa:	da17      	bge.n	8008b2c <__ieee754_atan2f+0xbc>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	da01      	bge.n	8008b04 <__ieee754_atan2f+0x94>
 8008b00:	303c      	adds	r0, #60	; 0x3c
 8008b02:	db15      	blt.n	8008b30 <__ieee754_atan2f+0xc0>
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7f8 f9a1 	bl	8000e4c <__aeabi_fdiv>
 8008b0a:	f000 f995 	bl	8008e38 <fabsf>
 8008b0e:	f000 f887 	bl	8008c20 <atanf>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2c01      	cmp	r4, #1
 8008b16:	d00d      	beq.n	8008b34 <__ieee754_atan2f+0xc4>
 8008b18:	2c02      	cmp	r4, #2
 8008b1a:	d00e      	beq.n	8008b3a <__ieee754_atan2f+0xca>
 8008b1c:	2c00      	cmp	r4, #0
 8008b1e:	d0cb      	beq.n	8008ab8 <__ieee754_atan2f+0x48>
 8008b20:	4912      	ldr	r1, [pc, #72]	; (8008b6c <__ieee754_atan2f+0xfc>)
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f7 ffd6 	bl	8000ad4 <__addsf3>
 8008b28:	4911      	ldr	r1, [pc, #68]	; (8008b70 <__ieee754_atan2f+0x100>)
 8008b2a:	e00c      	b.n	8008b46 <__ieee754_atan2f+0xd6>
 8008b2c:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <__ieee754_atan2f+0x104>)
 8008b2e:	e7f1      	b.n	8008b14 <__ieee754_atan2f+0xa4>
 8008b30:	2300      	movs	r3, #0
 8008b32:	e7ef      	b.n	8008b14 <__ieee754_atan2f+0xa4>
 8008b34:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b38:	e7be      	b.n	8008ab8 <__ieee754_atan2f+0x48>
 8008b3a:	490c      	ldr	r1, [pc, #48]	; (8008b6c <__ieee754_atan2f+0xfc>)
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7f7 ffc9 	bl	8000ad4 <__addsf3>
 8008b42:	4601      	mov	r1, r0
 8008b44:	480a      	ldr	r0, [pc, #40]	; (8008b70 <__ieee754_atan2f+0x100>)
 8008b46:	f7f7 ffc3 	bl	8000ad0 <__aeabi_fsub>
 8008b4a:	e7a1      	b.n	8008a90 <__ieee754_atan2f+0x20>
 8008b4c:	4b08      	ldr	r3, [pc, #32]	; (8008b70 <__ieee754_atan2f+0x100>)
 8008b4e:	e7b3      	b.n	8008ab8 <__ieee754_atan2f+0x48>
 8008b50:	4b09      	ldr	r3, [pc, #36]	; (8008b78 <__ieee754_atan2f+0x108>)
 8008b52:	e7b1      	b.n	8008ab8 <__ieee754_atan2f+0x48>
 8008b54:	2300      	movs	r3, #0
 8008b56:	e7af      	b.n	8008ab8 <__ieee754_atan2f+0x48>
 8008b58:	4b06      	ldr	r3, [pc, #24]	; (8008b74 <__ieee754_atan2f+0x104>)
 8008b5a:	e7ad      	b.n	8008ab8 <__ieee754_atan2f+0x48>
 8008b5c:	c0490fdb 	.word	0xc0490fdb
 8008b60:	bfc90fdb 	.word	0xbfc90fdb
 8008b64:	08009100 	.word	0x08009100
 8008b68:	0800910c 	.word	0x0800910c
 8008b6c:	33bbbd2e 	.word	0x33bbbd2e
 8008b70:	40490fdb 	.word	0x40490fdb
 8008b74:	3fc90fdb 	.word	0x3fc90fdb
 8008b78:	3f490fdb 	.word	0x3f490fdb

08008b7c <__ieee754_sqrtf>:
 8008b7c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008b80:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008b84:	b570      	push	{r4, r5, r6, lr}
 8008b86:	4603      	mov	r3, r0
 8008b88:	4604      	mov	r4, r0
 8008b8a:	d309      	bcc.n	8008ba0 <__ieee754_sqrtf+0x24>
 8008b8c:	4601      	mov	r1, r0
 8008b8e:	f7f8 f8a9 	bl	8000ce4 <__aeabi_fmul>
 8008b92:	4601      	mov	r1, r0
 8008b94:	4620      	mov	r0, r4
 8008b96:	f7f7 ff9d 	bl	8000ad4 <__addsf3>
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	2a00      	cmp	r2, #0
 8008ba2:	d0fb      	beq.n	8008b9c <__ieee754_sqrtf+0x20>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	da06      	bge.n	8008bb6 <__ieee754_sqrtf+0x3a>
 8008ba8:	4601      	mov	r1, r0
 8008baa:	f7f7 ff91 	bl	8000ad0 <__aeabi_fsub>
 8008bae:	4601      	mov	r1, r0
 8008bb0:	f7f8 f94c 	bl	8000e4c <__aeabi_fdiv>
 8008bb4:	e7f1      	b.n	8008b9a <__ieee754_sqrtf+0x1e>
 8008bb6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8008bba:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8008bbe:	d029      	beq.n	8008c14 <__ieee754_sqrtf+0x98>
 8008bc0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8008bc4:	07cb      	lsls	r3, r1, #31
 8008bc6:	f04f 0300 	mov.w	r3, #0
 8008bca:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8008bce:	f04f 0419 	mov.w	r4, #25
 8008bd2:	461e      	mov	r6, r3
 8008bd4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8008bd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008bdc:	bf58      	it	pl
 8008bde:	0052      	lslpl	r2, r2, #1
 8008be0:	1040      	asrs	r0, r0, #1
 8008be2:	0052      	lsls	r2, r2, #1
 8008be4:	1875      	adds	r5, r6, r1
 8008be6:	4295      	cmp	r5, r2
 8008be8:	bfde      	ittt	le
 8008bea:	186e      	addle	r6, r5, r1
 8008bec:	1b52      	suble	r2, r2, r5
 8008bee:	185b      	addle	r3, r3, r1
 8008bf0:	3c01      	subs	r4, #1
 8008bf2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008bf6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008bfa:	d1f3      	bne.n	8008be4 <__ieee754_sqrtf+0x68>
 8008bfc:	b112      	cbz	r2, 8008c04 <__ieee754_sqrtf+0x88>
 8008bfe:	3301      	adds	r3, #1
 8008c00:	f023 0301 	bic.w	r3, r3, #1
 8008c04:	105c      	asrs	r4, r3, #1
 8008c06:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8008c0a:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8008c0e:	e7c5      	b.n	8008b9c <__ieee754_sqrtf+0x20>
 8008c10:	005b      	lsls	r3, r3, #1
 8008c12:	3201      	adds	r2, #1
 8008c14:	0218      	lsls	r0, r3, #8
 8008c16:	d5fb      	bpl.n	8008c10 <__ieee754_sqrtf+0x94>
 8008c18:	3a01      	subs	r2, #1
 8008c1a:	1a89      	subs	r1, r1, r2
 8008c1c:	e7d0      	b.n	8008bc0 <__ieee754_sqrtf+0x44>
	...

08008c20 <atanf>:
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c24:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8008c28:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	4680      	mov	r8, r0
 8008c30:	db0e      	blt.n	8008c50 <atanf+0x30>
 8008c32:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008c36:	dd04      	ble.n	8008c42 <atanf+0x22>
 8008c38:	4601      	mov	r1, r0
 8008c3a:	f7f7 ff4b 	bl	8000ad4 <__addsf3>
 8008c3e:	4604      	mov	r4, r0
 8008c40:	e003      	b.n	8008c4a <atanf+0x2a>
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f300 80ce 	bgt.w	8008de4 <atanf+0x1c4>
 8008c48:	4c67      	ldr	r4, [pc, #412]	; (8008de8 <atanf+0x1c8>)
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c50:	4b66      	ldr	r3, [pc, #408]	; (8008dec <atanf+0x1cc>)
 8008c52:	429d      	cmp	r5, r3
 8008c54:	dc0e      	bgt.n	8008c74 <atanf+0x54>
 8008c56:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8008c5a:	da08      	bge.n	8008c6e <atanf+0x4e>
 8008c5c:	4964      	ldr	r1, [pc, #400]	; (8008df0 <atanf+0x1d0>)
 8008c5e:	f7f7 ff39 	bl	8000ad4 <__addsf3>
 8008c62:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008c66:	f7f8 f9f9 	bl	800105c <__aeabi_fcmpgt>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d1ed      	bne.n	8008c4a <atanf+0x2a>
 8008c6e:	f04f 36ff 	mov.w	r6, #4294967295
 8008c72:	e01c      	b.n	8008cae <atanf+0x8e>
 8008c74:	f000 f8e0 	bl	8008e38 <fabsf>
 8008c78:	4b5e      	ldr	r3, [pc, #376]	; (8008df4 <atanf+0x1d4>)
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	429d      	cmp	r5, r3
 8008c7e:	dc7c      	bgt.n	8008d7a <atanf+0x15a>
 8008c80:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008c84:	429d      	cmp	r5, r3
 8008c86:	dc67      	bgt.n	8008d58 <atanf+0x138>
 8008c88:	4601      	mov	r1, r0
 8008c8a:	f7f7 ff23 	bl	8000ad4 <__addsf3>
 8008c8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008c92:	f7f7 ff1d 	bl	8000ad0 <__aeabi_fsub>
 8008c96:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008c9a:	4605      	mov	r5, r0
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f7f7 ff19 	bl	8000ad4 <__addsf3>
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f7f8 f8d1 	bl	8000e4c <__aeabi_fdiv>
 8008caa:	2600      	movs	r6, #0
 8008cac:	4604      	mov	r4, r0
 8008cae:	4621      	mov	r1, r4
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7f8 f817 	bl	8000ce4 <__aeabi_fmul>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	4607      	mov	r7, r0
 8008cba:	f7f8 f813 	bl	8000ce4 <__aeabi_fmul>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	494d      	ldr	r1, [pc, #308]	; (8008df8 <atanf+0x1d8>)
 8008cc2:	f7f8 f80f 	bl	8000ce4 <__aeabi_fmul>
 8008cc6:	494d      	ldr	r1, [pc, #308]	; (8008dfc <atanf+0x1dc>)
 8008cc8:	f7f7 ff04 	bl	8000ad4 <__addsf3>
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7f8 f809 	bl	8000ce4 <__aeabi_fmul>
 8008cd2:	494b      	ldr	r1, [pc, #300]	; (8008e00 <atanf+0x1e0>)
 8008cd4:	f7f7 fefe 	bl	8000ad4 <__addsf3>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	f7f8 f803 	bl	8000ce4 <__aeabi_fmul>
 8008cde:	4949      	ldr	r1, [pc, #292]	; (8008e04 <atanf+0x1e4>)
 8008ce0:	f7f7 fef8 	bl	8000ad4 <__addsf3>
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7f7 fffd 	bl	8000ce4 <__aeabi_fmul>
 8008cea:	4947      	ldr	r1, [pc, #284]	; (8008e08 <atanf+0x1e8>)
 8008cec:	f7f7 fef2 	bl	8000ad4 <__addsf3>
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	f7f7 fff7 	bl	8000ce4 <__aeabi_fmul>
 8008cf6:	4945      	ldr	r1, [pc, #276]	; (8008e0c <atanf+0x1ec>)
 8008cf8:	f7f7 feec 	bl	8000ad4 <__addsf3>
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	f7f7 fff1 	bl	8000ce4 <__aeabi_fmul>
 8008d02:	4943      	ldr	r1, [pc, #268]	; (8008e10 <atanf+0x1f0>)
 8008d04:	4607      	mov	r7, r0
 8008d06:	4628      	mov	r0, r5
 8008d08:	f7f7 ffec 	bl	8000ce4 <__aeabi_fmul>
 8008d0c:	4941      	ldr	r1, [pc, #260]	; (8008e14 <atanf+0x1f4>)
 8008d0e:	f7f7 fedf 	bl	8000ad0 <__aeabi_fsub>
 8008d12:	4629      	mov	r1, r5
 8008d14:	f7f7 ffe6 	bl	8000ce4 <__aeabi_fmul>
 8008d18:	493f      	ldr	r1, [pc, #252]	; (8008e18 <atanf+0x1f8>)
 8008d1a:	f7f7 fed9 	bl	8000ad0 <__aeabi_fsub>
 8008d1e:	4629      	mov	r1, r5
 8008d20:	f7f7 ffe0 	bl	8000ce4 <__aeabi_fmul>
 8008d24:	493d      	ldr	r1, [pc, #244]	; (8008e1c <atanf+0x1fc>)
 8008d26:	f7f7 fed3 	bl	8000ad0 <__aeabi_fsub>
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	f7f7 ffda 	bl	8000ce4 <__aeabi_fmul>
 8008d30:	493b      	ldr	r1, [pc, #236]	; (8008e20 <atanf+0x200>)
 8008d32:	f7f7 fecd 	bl	8000ad0 <__aeabi_fsub>
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7f7 ffd4 	bl	8000ce4 <__aeabi_fmul>
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f7f7 fec8 	bl	8000ad4 <__addsf3>
 8008d44:	4621      	mov	r1, r4
 8008d46:	f7f7 ffcd 	bl	8000ce4 <__aeabi_fmul>
 8008d4a:	1c73      	adds	r3, r6, #1
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	d133      	bne.n	8008db8 <atanf+0x198>
 8008d50:	4620      	mov	r0, r4
 8008d52:	f7f7 febd 	bl	8000ad0 <__aeabi_fsub>
 8008d56:	e772      	b.n	8008c3e <atanf+0x1e>
 8008d58:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008d5c:	f7f7 feb8 	bl	8000ad0 <__aeabi_fsub>
 8008d60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008d64:	4605      	mov	r5, r0
 8008d66:	4620      	mov	r0, r4
 8008d68:	f7f7 feb4 	bl	8000ad4 <__addsf3>
 8008d6c:	4601      	mov	r1, r0
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f7f8 f86c 	bl	8000e4c <__aeabi_fdiv>
 8008d74:	2601      	movs	r6, #1
 8008d76:	4604      	mov	r4, r0
 8008d78:	e799      	b.n	8008cae <atanf+0x8e>
 8008d7a:	4b2a      	ldr	r3, [pc, #168]	; (8008e24 <atanf+0x204>)
 8008d7c:	429d      	cmp	r5, r3
 8008d7e:	dc14      	bgt.n	8008daa <atanf+0x18a>
 8008d80:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008d84:	f7f7 fea4 	bl	8000ad0 <__aeabi_fsub>
 8008d88:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f7f7 ffa8 	bl	8000ce4 <__aeabi_fmul>
 8008d94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008d98:	f7f7 fe9c 	bl	8000ad4 <__addsf3>
 8008d9c:	4601      	mov	r1, r0
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f7f8 f854 	bl	8000e4c <__aeabi_fdiv>
 8008da4:	2602      	movs	r6, #2
 8008da6:	4604      	mov	r4, r0
 8008da8:	e781      	b.n	8008cae <atanf+0x8e>
 8008daa:	4601      	mov	r1, r0
 8008dac:	481e      	ldr	r0, [pc, #120]	; (8008e28 <atanf+0x208>)
 8008dae:	f7f8 f84d 	bl	8000e4c <__aeabi_fdiv>
 8008db2:	2603      	movs	r6, #3
 8008db4:	4604      	mov	r4, r0
 8008db6:	e77a      	b.n	8008cae <atanf+0x8e>
 8008db8:	4b1c      	ldr	r3, [pc, #112]	; (8008e2c <atanf+0x20c>)
 8008dba:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008dbe:	f7f7 fe87 	bl	8000ad0 <__aeabi_fsub>
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	f7f7 fe84 	bl	8000ad0 <__aeabi_fsub>
 8008dc8:	4b19      	ldr	r3, [pc, #100]	; (8008e30 <atanf+0x210>)
 8008dca:	4601      	mov	r1, r0
 8008dcc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008dd0:	f7f7 fe7e 	bl	8000ad0 <__aeabi_fsub>
 8008dd4:	f1b8 0f00 	cmp.w	r8, #0
 8008dd8:	4604      	mov	r4, r0
 8008dda:	f6bf af36 	bge.w	8008c4a <atanf+0x2a>
 8008dde:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008de2:	e72c      	b.n	8008c3e <atanf+0x1e>
 8008de4:	4c13      	ldr	r4, [pc, #76]	; (8008e34 <atanf+0x214>)
 8008de6:	e730      	b.n	8008c4a <atanf+0x2a>
 8008de8:	bfc90fdb 	.word	0xbfc90fdb
 8008dec:	3edfffff 	.word	0x3edfffff
 8008df0:	7149f2ca 	.word	0x7149f2ca
 8008df4:	3f97ffff 	.word	0x3f97ffff
 8008df8:	3c8569d7 	.word	0x3c8569d7
 8008dfc:	3d4bda59 	.word	0x3d4bda59
 8008e00:	3d886b35 	.word	0x3d886b35
 8008e04:	3dba2e6e 	.word	0x3dba2e6e
 8008e08:	3e124925 	.word	0x3e124925
 8008e0c:	3eaaaaab 	.word	0x3eaaaaab
 8008e10:	bd15a221 	.word	0xbd15a221
 8008e14:	3d6ef16b 	.word	0x3d6ef16b
 8008e18:	3d9d8795 	.word	0x3d9d8795
 8008e1c:	3de38e38 	.word	0x3de38e38
 8008e20:	3e4ccccd 	.word	0x3e4ccccd
 8008e24:	401bffff 	.word	0x401bffff
 8008e28:	bf800000 	.word	0xbf800000
 8008e2c:	08009128 	.word	0x08009128
 8008e30:	08009118 	.word	0x08009118
 8008e34:	3fc90fdb 	.word	0x3fc90fdb

08008e38 <fabsf>:
 8008e38:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008e3c:	4770      	bx	lr
	...

08008e40 <nanf>:
 8008e40:	4800      	ldr	r0, [pc, #0]	; (8008e44 <nanf+0x4>)
 8008e42:	4770      	bx	lr
 8008e44:	7fc00000 	.word	0x7fc00000

08008e48 <__errno>:
 8008e48:	4b01      	ldr	r3, [pc, #4]	; (8008e50 <__errno+0x8>)
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	20000028 	.word	0x20000028

08008e54 <__libc_init_array>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	2600      	movs	r6, #0
 8008e58:	4d0c      	ldr	r5, [pc, #48]	; (8008e8c <__libc_init_array+0x38>)
 8008e5a:	4c0d      	ldr	r4, [pc, #52]	; (8008e90 <__libc_init_array+0x3c>)
 8008e5c:	1b64      	subs	r4, r4, r5
 8008e5e:	10a4      	asrs	r4, r4, #2
 8008e60:	42a6      	cmp	r6, r4
 8008e62:	d109      	bne.n	8008e78 <__libc_init_array+0x24>
 8008e64:	f000 f8f0 	bl	8009048 <_init>
 8008e68:	2600      	movs	r6, #0
 8008e6a:	4d0a      	ldr	r5, [pc, #40]	; (8008e94 <__libc_init_array+0x40>)
 8008e6c:	4c0a      	ldr	r4, [pc, #40]	; (8008e98 <__libc_init_array+0x44>)
 8008e6e:	1b64      	subs	r4, r4, r5
 8008e70:	10a4      	asrs	r4, r4, #2
 8008e72:	42a6      	cmp	r6, r4
 8008e74:	d105      	bne.n	8008e82 <__libc_init_array+0x2e>
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7c:	4798      	blx	r3
 8008e7e:	3601      	adds	r6, #1
 8008e80:	e7ee      	b.n	8008e60 <__libc_init_array+0xc>
 8008e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e86:	4798      	blx	r3
 8008e88:	3601      	adds	r6, #1
 8008e8a:	e7f2      	b.n	8008e72 <__libc_init_array+0x1e>
 8008e8c:	08009198 	.word	0x08009198
 8008e90:	08009198 	.word	0x08009198
 8008e94:	08009198 	.word	0x08009198
 8008e98:	0800919c 	.word	0x0800919c

08008e9c <__retarget_lock_acquire_recursive>:
 8008e9c:	4770      	bx	lr

08008e9e <__retarget_lock_release_recursive>:
 8008e9e:	4770      	bx	lr

08008ea0 <memcpy>:
 8008ea0:	440a      	add	r2, r1
 8008ea2:	4291      	cmp	r1, r2
 8008ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ea8:	d100      	bne.n	8008eac <memcpy+0xc>
 8008eaa:	4770      	bx	lr
 8008eac:	b510      	push	{r4, lr}
 8008eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eb2:	4291      	cmp	r1, r2
 8008eb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eb8:	d1f9      	bne.n	8008eae <memcpy+0xe>
 8008eba:	bd10      	pop	{r4, pc}

08008ebc <memset>:
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	4402      	add	r2, r0
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d100      	bne.n	8008ec6 <memset+0xa>
 8008ec4:	4770      	bx	lr
 8008ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8008eca:	e7f9      	b.n	8008ec0 <memset+0x4>

08008ecc <cleanup_glue>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	460c      	mov	r4, r1
 8008ed0:	6809      	ldr	r1, [r1, #0]
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	b109      	cbz	r1, 8008eda <cleanup_glue+0xe>
 8008ed6:	f7ff fff9 	bl	8008ecc <cleanup_glue>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ee2:	f000 b869 	b.w	8008fb8 <_free_r>
	...

08008ee8 <_reclaim_reent>:
 8008ee8:	4b2c      	ldr	r3, [pc, #176]	; (8008f9c <_reclaim_reent+0xb4>)
 8008eea:	b570      	push	{r4, r5, r6, lr}
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4283      	cmp	r3, r0
 8008ef2:	d051      	beq.n	8008f98 <_reclaim_reent+0xb0>
 8008ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ef6:	b143      	cbz	r3, 8008f0a <_reclaim_reent+0x22>
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d14a      	bne.n	8008f94 <_reclaim_reent+0xac>
 8008efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f00:	6819      	ldr	r1, [r3, #0]
 8008f02:	b111      	cbz	r1, 8008f0a <_reclaim_reent+0x22>
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 f857 	bl	8008fb8 <_free_r>
 8008f0a:	6961      	ldr	r1, [r4, #20]
 8008f0c:	b111      	cbz	r1, 8008f14 <_reclaim_reent+0x2c>
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f000 f852 	bl	8008fb8 <_free_r>
 8008f14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f16:	b111      	cbz	r1, 8008f1e <_reclaim_reent+0x36>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f000 f84d 	bl	8008fb8 <_free_r>
 8008f1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008f20:	b111      	cbz	r1, 8008f28 <_reclaim_reent+0x40>
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 f848 	bl	8008fb8 <_free_r>
 8008f28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008f2a:	b111      	cbz	r1, 8008f32 <_reclaim_reent+0x4a>
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 f843 	bl	8008fb8 <_free_r>
 8008f32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008f34:	b111      	cbz	r1, 8008f3c <_reclaim_reent+0x54>
 8008f36:	4620      	mov	r0, r4
 8008f38:	f000 f83e 	bl	8008fb8 <_free_r>
 8008f3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008f3e:	b111      	cbz	r1, 8008f46 <_reclaim_reent+0x5e>
 8008f40:	4620      	mov	r0, r4
 8008f42:	f000 f839 	bl	8008fb8 <_free_r>
 8008f46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008f48:	b111      	cbz	r1, 8008f50 <_reclaim_reent+0x68>
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 f834 	bl	8008fb8 <_free_r>
 8008f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f52:	b111      	cbz	r1, 8008f5a <_reclaim_reent+0x72>
 8008f54:	4620      	mov	r0, r4
 8008f56:	f000 f82f 	bl	8008fb8 <_free_r>
 8008f5a:	69a3      	ldr	r3, [r4, #24]
 8008f5c:	b1e3      	cbz	r3, 8008f98 <_reclaim_reent+0xb0>
 8008f5e:	4620      	mov	r0, r4
 8008f60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f62:	4798      	blx	r3
 8008f64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f66:	b1b9      	cbz	r1, 8008f98 <_reclaim_reent+0xb0>
 8008f68:	4620      	mov	r0, r4
 8008f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f6e:	f7ff bfad 	b.w	8008ecc <cleanup_glue>
 8008f72:	5949      	ldr	r1, [r1, r5]
 8008f74:	b941      	cbnz	r1, 8008f88 <_reclaim_reent+0xa0>
 8008f76:	3504      	adds	r5, #4
 8008f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f7a:	2d80      	cmp	r5, #128	; 0x80
 8008f7c:	68d9      	ldr	r1, [r3, #12]
 8008f7e:	d1f8      	bne.n	8008f72 <_reclaim_reent+0x8a>
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 f819 	bl	8008fb8 <_free_r>
 8008f86:	e7ba      	b.n	8008efe <_reclaim_reent+0x16>
 8008f88:	680e      	ldr	r6, [r1, #0]
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 f814 	bl	8008fb8 <_free_r>
 8008f90:	4631      	mov	r1, r6
 8008f92:	e7ef      	b.n	8008f74 <_reclaim_reent+0x8c>
 8008f94:	2500      	movs	r5, #0
 8008f96:	e7ef      	b.n	8008f78 <_reclaim_reent+0x90>
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	bf00      	nop
 8008f9c:	20000028 	.word	0x20000028

08008fa0 <__malloc_lock>:
 8008fa0:	4801      	ldr	r0, [pc, #4]	; (8008fa8 <__malloc_lock+0x8>)
 8008fa2:	f7ff bf7b 	b.w	8008e9c <__retarget_lock_acquire_recursive>
 8008fa6:	bf00      	nop
 8008fa8:	20001d4c 	.word	0x20001d4c

08008fac <__malloc_unlock>:
 8008fac:	4801      	ldr	r0, [pc, #4]	; (8008fb4 <__malloc_unlock+0x8>)
 8008fae:	f7ff bf76 	b.w	8008e9e <__retarget_lock_release_recursive>
 8008fb2:	bf00      	nop
 8008fb4:	20001d4c 	.word	0x20001d4c

08008fb8 <_free_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4605      	mov	r5, r0
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	d040      	beq.n	8009042 <_free_r+0x8a>
 8008fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc4:	1f0c      	subs	r4, r1, #4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfb8      	it	lt
 8008fca:	18e4      	addlt	r4, r4, r3
 8008fcc:	f7ff ffe8 	bl	8008fa0 <__malloc_lock>
 8008fd0:	4a1c      	ldr	r2, [pc, #112]	; (8009044 <_free_r+0x8c>)
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	b933      	cbnz	r3, 8008fe4 <_free_r+0x2c>
 8008fd6:	6063      	str	r3, [r4, #4]
 8008fd8:	6014      	str	r4, [r2, #0]
 8008fda:	4628      	mov	r0, r5
 8008fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe0:	f7ff bfe4 	b.w	8008fac <__malloc_unlock>
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	d908      	bls.n	8008ffa <_free_r+0x42>
 8008fe8:	6820      	ldr	r0, [r4, #0]
 8008fea:	1821      	adds	r1, r4, r0
 8008fec:	428b      	cmp	r3, r1
 8008fee:	bf01      	itttt	eq
 8008ff0:	6819      	ldreq	r1, [r3, #0]
 8008ff2:	685b      	ldreq	r3, [r3, #4]
 8008ff4:	1809      	addeq	r1, r1, r0
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	e7ed      	b.n	8008fd6 <_free_r+0x1e>
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	b10b      	cbz	r3, 8009004 <_free_r+0x4c>
 8009000:	42a3      	cmp	r3, r4
 8009002:	d9fa      	bls.n	8008ffa <_free_r+0x42>
 8009004:	6811      	ldr	r1, [r2, #0]
 8009006:	1850      	adds	r0, r2, r1
 8009008:	42a0      	cmp	r0, r4
 800900a:	d10b      	bne.n	8009024 <_free_r+0x6c>
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	4401      	add	r1, r0
 8009010:	1850      	adds	r0, r2, r1
 8009012:	4283      	cmp	r3, r0
 8009014:	6011      	str	r1, [r2, #0]
 8009016:	d1e0      	bne.n	8008fda <_free_r+0x22>
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4401      	add	r1, r0
 800901e:	6011      	str	r1, [r2, #0]
 8009020:	6053      	str	r3, [r2, #4]
 8009022:	e7da      	b.n	8008fda <_free_r+0x22>
 8009024:	d902      	bls.n	800902c <_free_r+0x74>
 8009026:	230c      	movs	r3, #12
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	e7d6      	b.n	8008fda <_free_r+0x22>
 800902c:	6820      	ldr	r0, [r4, #0]
 800902e:	1821      	adds	r1, r4, r0
 8009030:	428b      	cmp	r3, r1
 8009032:	bf01      	itttt	eq
 8009034:	6819      	ldreq	r1, [r3, #0]
 8009036:	685b      	ldreq	r3, [r3, #4]
 8009038:	1809      	addeq	r1, r1, r0
 800903a:	6021      	streq	r1, [r4, #0]
 800903c:	6063      	str	r3, [r4, #4]
 800903e:	6054      	str	r4, [r2, #4]
 8009040:	e7cb      	b.n	8008fda <_free_r+0x22>
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	20001d50 	.word	0x20001d50

08009048 <_init>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr

08009054 <_fini>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	bf00      	nop
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr
