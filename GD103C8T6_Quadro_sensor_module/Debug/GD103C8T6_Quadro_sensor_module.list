
GD103C8T6_Quadro_sensor_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c24  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08008d38  08008d38  00018d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e4  080091e4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  080091e4  080091e4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091e4  080091e4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080091ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cfc  200001f4  080093e0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ef0  080093e0  00021ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000254f4  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005598  00000000  00000000  00045711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00015bd0  00000000  00000000  0004aca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  00060880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020d0  00000000  00000000  00061da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c337  00000000  00000000  00063e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022610  00000000  00000000  000801af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b64a  00000000  00000000  000a27bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013de09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000533c  00000000  00000000  0013de5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d1c 	.word	0x08008d1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08008d1c 	.word	0x08008d1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <expRunningAverageGX>:

uint8_t _buffer[21];

static uint8_t _mag_adjust[3];

float expRunningAverageGX(float newVal) {
 80010fc:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 80010fe:	4c07      	ldr	r4, [pc, #28]	; (800111c <expRunningAverageGX+0x20>)
 8001100:	6825      	ldr	r5, [r4, #0]
 8001102:	4629      	mov	r1, r5
 8001104:	f7ff fd14 	bl	8000b30 <__aeabi_fsub>
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <expRunningAverageGX+0x24>)
 800110a:	6819      	ldr	r1, [r3, #0]
 800110c:	f7ff fe1a 	bl	8000d44 <__aeabi_fmul>
 8001110:	4629      	mov	r1, r5
 8001112:	f7ff fd0f 	bl	8000b34 <__addsf3>
 8001116:	6020      	str	r0, [r4, #0]
  return filVal;
}
 8001118:	bd38      	pop	{r3, r4, r5, pc}
 800111a:	bf00      	nop
 800111c:	20000240 	.word	0x20000240
 8001120:	20000000 	.word	0x20000000

08001124 <expRunningAverageGY>:

float expRunningAverageGY(float newVal) {
 8001124:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 8001126:	4c07      	ldr	r4, [pc, #28]	; (8001144 <expRunningAverageGY+0x20>)
 8001128:	6825      	ldr	r5, [r4, #0]
 800112a:	4629      	mov	r1, r5
 800112c:	f7ff fd00 	bl	8000b30 <__aeabi_fsub>
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <expRunningAverageGY+0x24>)
 8001132:	6819      	ldr	r1, [r3, #0]
 8001134:	f7ff fe06 	bl	8000d44 <__aeabi_fmul>
 8001138:	4629      	mov	r1, r5
 800113a:	f7ff fcfb 	bl	8000b34 <__addsf3>
 800113e:	6020      	str	r0, [r4, #0]
  return filVal;
}
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop
 8001144:	2000023c 	.word	0x2000023c
 8001148:	20000000 	.word	0x20000000

0800114c <expRunningAverageGZ>:

float expRunningAverageGZ(float newVal) {
 800114c:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 800114e:	4c07      	ldr	r4, [pc, #28]	; (800116c <expRunningAverageGZ+0x20>)
 8001150:	6825      	ldr	r5, [r4, #0]
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff fcec 	bl	8000b30 <__aeabi_fsub>
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <expRunningAverageGZ+0x24>)
 800115a:	6819      	ldr	r1, [r3, #0]
 800115c:	f7ff fdf2 	bl	8000d44 <__aeabi_fmul>
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff fce7 	bl	8000b34 <__addsf3>
 8001166:	6020      	str	r0, [r4, #0]
  return filVal;
}
 8001168:	bd38      	pop	{r3, r4, r5, pc}
 800116a:	bf00      	nop
 800116c:	20000238 	.word	0x20000238
 8001170:	20000000 	.word	0x20000000

08001174 <expRunningAverageAX>:

float expRunningAverageAX(float newVal) {
 8001174:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 8001176:	4c07      	ldr	r4, [pc, #28]	; (8001194 <expRunningAverageAX+0x20>)
 8001178:	6825      	ldr	r5, [r4, #0]
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fcd8 	bl	8000b30 <__aeabi_fsub>
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <expRunningAverageAX+0x24>)
 8001182:	6819      	ldr	r1, [r3, #0]
 8001184:	f7ff fdde 	bl	8000d44 <__aeabi_fmul>
 8001188:	4629      	mov	r1, r5
 800118a:	f7ff fcd3 	bl	8000b34 <__addsf3>
 800118e:	6020      	str	r0, [r4, #0]
  return filVal;
}
 8001190:	bd38      	pop	{r3, r4, r5, pc}
 8001192:	bf00      	nop
 8001194:	20000234 	.word	0x20000234
 8001198:	20000000 	.word	0x20000000

0800119c <expRunningAverageAY>:

float expRunningAverageAY(float newVal) {
 800119c:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 800119e:	4c07      	ldr	r4, [pc, #28]	; (80011bc <expRunningAverageAY+0x20>)
 80011a0:	6825      	ldr	r5, [r4, #0]
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff fcc4 	bl	8000b30 <__aeabi_fsub>
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <expRunningAverageAY+0x24>)
 80011aa:	6819      	ldr	r1, [r3, #0]
 80011ac:	f7ff fdca 	bl	8000d44 <__aeabi_fmul>
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff fcbf 	bl	8000b34 <__addsf3>
 80011b6:	6020      	str	r0, [r4, #0]
  return filVal;
}
 80011b8:	bd38      	pop	{r3, r4, r5, pc}
 80011ba:	bf00      	nop
 80011bc:	20000230 	.word	0x20000230
 80011c0:	20000000 	.word	0x20000000

080011c4 <expRunningAverageAZ>:

float expRunningAverageAZ(float newVal) {
 80011c4:	b538      	push	{r3, r4, r5, lr}
  static float filVal = 0;
  filVal += (newVal - filVal) * K;
 80011c6:	4c07      	ldr	r4, [pc, #28]	; (80011e4 <expRunningAverageAZ+0x20>)
 80011c8:	6825      	ldr	r5, [r4, #0]
 80011ca:	4629      	mov	r1, r5
 80011cc:	f7ff fcb0 	bl	8000b30 <__aeabi_fsub>
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <expRunningAverageAZ+0x24>)
 80011d2:	6819      	ldr	r1, [r3, #0]
 80011d4:	f7ff fdb6 	bl	8000d44 <__aeabi_fmul>
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff fcab 	bl	8000b34 <__addsf3>
 80011de:	6020      	str	r0, [r4, #0]
  return filVal;
}
 80011e0:	bd38      	pop	{r3, r4, r5, pc}
 80011e2:	bf00      	nop
 80011e4:	2000022c 	.word	0x2000022c
 80011e8:	20000000 	.word	0x20000000

080011ec <MPU9250_OnActivate>:
return(Xe);
}

__weak void MPU9250_OnActivate()
{
}
 80011ec:	4770      	bx	lr
	...

080011f0 <SPIx_WriteRead>:
{
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80011f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t receivedbyte = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f88d 3017 	strb.w	r3, [sp, #23]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80011f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 80011fc:	f88d 000f 	strb.w	r0, [sp, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <SPIx_WriteRead+0x34>)
 8001204:	2301      	movs	r3, #1
 8001206:	f10d 0217 	add.w	r2, sp, #23
 800120a:	f10d 010f 	add.w	r1, sp, #15
 800120e:	f002 fac5 	bl	800379c <HAL_SPI_TransmitReceive>
 8001212:	b920      	cbnz	r0, 800121e <SPIx_WriteRead+0x2e>
		return -1;
	}
	else
	{
	}
	return receivedbyte;
 8001214:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
 8001218:	b007      	add	sp, #28
 800121a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -1;
 800121e:	20ff      	movs	r0, #255	; 0xff
 8001220:	e7fa      	b.n	8001218 <SPIx_WriteRead+0x28>
 8001222:	bf00      	nop
 8001224:	20000398 	.word	0x20000398

08001228 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *p_buffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001228:	b570      	push	{r4, r5, r6, lr}
 800122a:	460e      	mov	r6, r1
 800122c:	4604      	mov	r4, r0
 800122e:	4615      	mov	r5, r2
	MPU9250_OnActivate();
 8001230:	f7ff ffdc 	bl	80011ec <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2110      	movs	r1, #16
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <MPU_SPI_Write+0x3c>)
 800123a:	f001 fe61 	bl	8002f00 <HAL_GPIO_WritePin>
	MPU9250_Activate();
	SPIx_WriteRead(WriteAddr);
 800123e:	4630      	mov	r0, r6
 8001240:	f7ff ffd6 	bl	80011f0 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8001244:	4425      	add	r5, r4
 8001246:	42ac      	cmp	r4, r5
 8001248:	d106      	bne.n	8001258 <MPU_SPI_Write+0x30>
		SPIx_WriteRead(*p_buffer);
		NumByteToWrite--;
		p_buffer++;
	}
	MPU9250_Deactivate();
}
 800124a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 800124e:	2201      	movs	r2, #1
 8001250:	2110      	movs	r1, #16
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <MPU_SPI_Write+0x3c>)
 8001254:	f001 be54 	b.w	8002f00 <HAL_GPIO_WritePin>
		SPIx_WriteRead(*p_buffer);
 8001258:	f814 0b01 	ldrb.w	r0, [r4], #1
 800125c:	f7ff ffc8 	bl	80011f0 <SPIx_WriteRead>
		p_buffer++;
 8001260:	e7f1      	b.n	8001246 <MPU_SPI_Write+0x1e>
 8001262:	bf00      	nop
 8001264:	40010800 	.word	0x40010800

08001268 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *p_buffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001268:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800126a:	460c      	mov	r4, r1
 800126c:	4605      	mov	r5, r0
 800126e:	4616      	mov	r6, r2
	MPU9250_OnActivate();
 8001270:	f7ff ffbc 	bl	80011ec <MPU9250_OnActivate>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	2110      	movs	r1, #16
 8001278:	4810      	ldr	r0, [pc, #64]	; (80012bc <MPU_SPI_Read+0x54>)
 800127a:	f001 fe41 	bl	8002f00 <HAL_GPIO_WritePin>
	MPU9250_Activate();
	uint8_t data = ReadAddr | READWRITE_CMD;
 800127e:	f064 047f 	orn	r4, r4, #127	; 0x7f
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	2201      	movs	r2, #1
 8001288:	f10d 0107 	add.w	r1, sp, #7
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MPU_SPI_Read+0x58>)
	uint8_t data = ReadAddr | READWRITE_CMD;
 800128e:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 8001292:	f002 f9d6 	bl	8003642 <HAL_SPI_Transmit>
	if (HAL_SPI_Receive(&MPU9250_SPI, p_buffer, NumByteToRead, HAL_MAX_DELAY) == HAL_OK) {
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	4632      	mov	r2, r6
 800129c:	4629      	mov	r1, r5
 800129e:	4808      	ldr	r0, [pc, #32]	; (80012c0 <MPU_SPI_Read+0x58>)
 80012a0:	f002 fb70 	bl	8003984 <HAL_SPI_Receive>
 80012a4:	b918      	cbnz	r0, 80012ae <MPU_SPI_Read+0x46>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80012a6:	2110      	movs	r1, #16
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <MPU_SPI_Read+0x5c>)
 80012aa:	f001 fe2e 	bl	8002f0a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(MPU9250_CS_GPIO, MPU9250_CS_PIN, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2110      	movs	r1, #16
 80012b2:	4802      	ldr	r0, [pc, #8]	; (80012bc <MPU_SPI_Read+0x54>)
 80012b4:	f001 fe24 	bl	8002f00 <HAL_GPIO_WritePin>
	else {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	}
	MPU9250_Deactivate();
}
 80012b8:	b002      	add	sp, #8
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
 80012bc:	40010800 	.word	0x40010800
 80012c0:	20000398 	.word	0x20000398
 80012c4:	40010c00 	.word	0x40010c00

080012c8 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 80012c8:	b507      	push	{r0, r1, r2, lr}
	MPU_SPI_Write(&data, subAddress, 1);
 80012ca:	2201      	movs	r2, #1
{
 80012cc:	f88d 1007 	strb.w	r1, [sp, #7]
	MPU_SPI_Write(&data, subAddress, 1);
 80012d0:	4601      	mov	r1, r0
 80012d2:	f10d 0007 	add.w	r0, sp, #7
 80012d6:	f7ff ffa7 	bl	8001228 <MPU_SPI_Write>
	HAL_Delay(10);
 80012da:	200a      	movs	r0, #10
 80012dc:	f001 fa1a 	bl	8002714 <HAL_Delay>
}
 80012e0:	b003      	add	sp, #12
 80012e2:	f85d fb04 	ldr.w	pc, [sp], #4

080012e6 <writeAK8963Register>:
	MPU_SPI_Read(dest, subAddress, count);
}

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80012e6:	b538      	push	{r3, r4, r5, lr}
 80012e8:	4605      	mov	r5, r0
 80012ea:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80012ec:	2025      	movs	r0, #37	; 0x25
 80012ee:	210c      	movs	r1, #12
 80012f0:	f7ff ffea 	bl	80012c8 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80012f4:	4629      	mov	r1, r5
 80012f6:	2026      	movs	r0, #38	; 0x26
 80012f8:	f7ff ffe6 	bl	80012c8 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80012fc:	4621      	mov	r1, r4
 80012fe:	2063      	movs	r0, #99	; 0x63
 8001300:	f7ff ffe2 	bl	80012c8 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
}
 8001304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 8001308:	2181      	movs	r1, #129	; 0x81
 800130a:	2027      	movs	r0, #39	; 0x27
 800130c:	f7ff bfdc 	b.w	80012c8 <writeRegister>

08001310 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	4606      	mov	r6, r0
 8001314:	460c      	mov	r4, r1
 8001316:	4615      	mov	r5, r2
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8001318:	218c      	movs	r1, #140	; 0x8c
 800131a:	2025      	movs	r0, #37	; 0x25
 800131c:	f7ff ffd4 	bl	80012c8 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001320:	4631      	mov	r1, r6
 8001322:	2026      	movs	r0, #38	; 0x26
 8001324:	f7ff ffd0 	bl	80012c8 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8001328:	f044 0180 	orr.w	r1, r4, #128	; 0x80
 800132c:	2027      	movs	r0, #39	; 0x27
 800132e:	f7ff ffcb 	bl	80012c8 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8001332:	2001      	movs	r0, #1
 8001334:	f001 f9ee 	bl	8002714 <HAL_Delay>
	MPU_SPI_Read(dest, subAddress, count);
 8001338:	4622      	mov	r2, r4
 800133a:	4628      	mov	r0, r5

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
}
 800133c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MPU_SPI_Read(dest, subAddress, count);
 8001340:	2149      	movs	r1, #73	; 0x49
 8001342:	f7ff bf91 	b.w	8001268 <MPU_SPI_Read>
	...

08001348 <MPU9250_Init>:
	return _buffer[0];
}

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8001348:	b510      	push	{r4, lr}
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800134a:	2101      	movs	r1, #1
 800134c:	206b      	movs	r0, #107	; 0x6b
 800134e:	f7ff ffbb 	bl	80012c8 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 8001352:	2120      	movs	r1, #32
 8001354:	206a      	movs	r0, #106	; 0x6a
 8001356:	f7ff ffb7 	bl	80012c8 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 800135a:	210d      	movs	r1, #13
 800135c:	2024      	movs	r0, #36	; 0x24
 800135e:	f7ff ffb3 	bl	80012c8 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001362:	2100      	movs	r1, #0
 8001364:	200a      	movs	r0, #10
 8001366:	f7ff ffbe 	bl	80012e6 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1, PWR_RESET);
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	206b      	movs	r0, #107	; 0x6b
 800136e:	f7ff ffab 	bl	80012c8 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 8001372:	200a      	movs	r0, #10
 8001374:	f001 f9ce 	bl	8002714 <HAL_Delay>
	MPU_SPI_Read(dest, subAddress, count);
 8001378:	4c39      	ldr	r4, [pc, #228]	; (8001460 <MPU9250_Init+0x118>)
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2, AK8963_RESET);
 800137a:	2101      	movs	r1, #1
 800137c:	200b      	movs	r0, #11
 800137e:	f7ff ffb2 	bl	80012e6 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001382:	2101      	movs	r1, #1
 8001384:	206b      	movs	r0, #107	; 0x6b
 8001386:	f7ff ff9f 	bl	80012c8 <writeRegister>
	MPU_SPI_Read(dest, subAddress, count);
 800138a:	2201      	movs	r2, #1
 800138c:	2175      	movs	r1, #117	; 0x75
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff ff6a 	bl	8001268 <MPU_SPI_Read>
	{
		//return 1;
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 8001394:	2100      	movs	r1, #0
 8001396:	206c      	movs	r0, #108	; 0x6c
 8001398:	f7ff ff96 	bl	80012c8 <writeRegister>

	// setting accel range to 8G as default
	writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_16G);
 800139c:	2118      	movs	r1, #24
 800139e:	201c      	movs	r0, #28
 80013a0:	f7ff ff92 	bl	80012c8 <writeRegister>

	// setting the gyro range to 500DPS as default
	writeRegister(GYRO_CONFIG, GYRO_FS_SEL_2000DPS);
 80013a4:	2118      	movs	r1, #24
 80013a6:	201b      	movs	r0, #27
 80013a8:	f7ff ff8e 	bl	80012c8 <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2, DLPF_5);
 80013ac:	2106      	movs	r1, #6
 80013ae:	201d      	movs	r0, #29
 80013b0:	f7ff ff8a 	bl	80012c8 <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG, DLPF_5);
 80013b4:	2106      	movs	r1, #6
 80013b6:	201a      	movs	r0, #26
 80013b8:	f7ff ff86 	bl	80012c8 <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV, 0x00);
 80013bc:	2100      	movs	r1, #0
 80013be:	2019      	movs	r0, #25
 80013c0:	f7ff ff82 	bl	80012c8 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80013c4:	2120      	movs	r1, #32
 80013c6:	206a      	movs	r0, #106	; 0x6a
 80013c8:	f7ff ff7e 	bl	80012c8 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80013cc:	210d      	movs	r1, #13
 80013ce:	2024      	movs	r0, #36	; 0x24
 80013d0:	f7ff ff7a 	bl	80012c8 <writeRegister>
	MPU_SPI_Read(dest, subAddress, count);
 80013d4:	2201      	movs	r2, #1
 80013d6:	211a      	movs	r1, #26
 80013d8:	4822      	ldr	r0, [pc, #136]	; (8001464 <MPU9250_Init+0x11c>)
 80013da:	f7ff ff45 	bl	8001268 <MPU_SPI_Read>
 80013de:	2201      	movs	r2, #1
 80013e0:	211b      	movs	r1, #27
 80013e2:	4821      	ldr	r0, [pc, #132]	; (8001468 <MPU9250_Init+0x120>)
 80013e4:	f7ff ff40 	bl	8001268 <MPU_SPI_Read>
 80013e8:	2201      	movs	r2, #1
 80013ea:	211d      	movs	r1, #29
 80013ec:	481f      	ldr	r0, [pc, #124]	; (800146c <MPU9250_Init+0x124>)
 80013ee:	f7ff ff3b 	bl	8001268 <MPU_SPI_Read>
	readAK8963Registers(AK8963_WHO_AM_I, 1, _buffer);
 80013f2:	4622      	mov	r2, r4
 80013f4:	2101      	movs	r1, #1
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff ff8a 	bl	8001310 <readAK8963Registers>
	readRegisters(CONFIG, 1, &config_register);
	readRegisters(GYRO_CONFIG, 1, &gyro_config_register);
	readRegisters(ACCEL_CONFIG2, 1, &accel_config_2_register);

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 80013fc:	7823      	ldrb	r3, [r4, #0]
 80013fe:	2b48      	cmp	r3, #72	; 0x48
 8001400:	d12b      	bne.n	800145a <MPU9250_Init+0x112>
		return 1;
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001402:	2100      	movs	r1, #0
 8001404:	200a      	movs	r0, #10
 8001406:	f7ff ff6e 	bl	80012e6 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 800140a:	2064      	movs	r0, #100	; 0x64
 800140c:	f001 f982 	bl	8002714 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1, AK8963_FUSE_ROM);
 8001410:	210f      	movs	r1, #15
 8001412:	200a      	movs	r0, #10
 8001414:	f7ff ff67 	bl	80012e6 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001418:	2064      	movs	r0, #100	; 0x64
 800141a:	f001 f97b 	bl	8002714 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <MPU9250_Init+0x128>)
 8001420:	2103      	movs	r1, #3
 8001422:	2010      	movs	r0, #16
 8001424:	f7ff ff74 	bl	8001310 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1, AK8963_PWR_DOWN);
 8001428:	2100      	movs	r1, #0
 800142a:	200a      	movs	r0, #10
 800142c:	f7ff ff5b 	bl	80012e6 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001430:	2064      	movs	r0, #100	; 0x64
 8001432:	f001 f96f 	bl	8002714 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1, AK8963_CNT_MEAS2);
 8001436:	2116      	movs	r1, #22
 8001438:	200a      	movs	r0, #10
 800143a:	f7ff ff54 	bl	80012e6 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800143e:	2064      	movs	r0, #100	; 0x64
 8001440:	f001 f968 	bl	8002714 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001444:	2101      	movs	r1, #1
 8001446:	206b      	movs	r0, #107	; 0x6b
 8001448:	f7ff ff3e 	bl	80012c8 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL, 7 , _buffer);
 800144c:	2003      	movs	r0, #3
 800144e:	4622      	mov	r2, r4
 8001450:	2107      	movs	r1, #7
 8001452:	f7ff ff5d 	bl	8001310 <readAK8963Registers>
//	writeRegister(GYRO_CONFIG, 0x08);
//	//accel config 8g
//	writeRegister(ACCEL_CONFIG, 0x10);

	// successful init, return 0
	return 0;
 8001456:	2000      	movs	r0, #0
}
 8001458:	bd10      	pop	{r4, pc}
		return 1;
 800145a:	2001      	movs	r0, #1
 800145c:	e7fc      	b.n	8001458 <MPU9250_Init+0x110>
 800145e:	bf00      	nop
 8001460:	20000210 	.word	0x20000210
 8001464:	20000229 	.word	0x20000229
 8001468:	20000244 	.word	0x20000244
 800146c:	20000228 	.word	0x20000228
 8001470:	20000225 	.word	0x20000225

08001474 <MPU9250_calibrate>:
}

uint16_t ii, packet_count, fifo_count;

void MPU9250_calibrate()
{
 8001474:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
    //uint16_t ii, packet_count, fifo_count;
    //int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

    // reset device
    writeRegister(PWR_MGMNT_1, PWR_RESET); // Write a one to bit 7 reset bit; toggle reset device
 8001478:	2180      	movs	r1, #128	; 0x80
 800147a:	206b      	movs	r0, #107	; 0x6b
 800147c:	f7ff ff24 	bl	80012c8 <writeRegister>
    HAL_Delay(100);
 8001480:	2064      	movs	r0, #100	; 0x64
 8001482:	f001 f947 	bl	8002714 <HAL_Delay>

    // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
    // else use the internal oscillator, bits 2:0 = 001
    writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001486:	2101      	movs	r1, #1
 8001488:	206b      	movs	r0, #107	; 0x6b
 800148a:	f7ff ff1d 	bl	80012c8 <writeRegister>
    writeRegister(PWR_MGMNT_2, SEN_ENABLE);
 800148e:	2100      	movs	r1, #0
 8001490:	206c      	movs	r0, #108	; 0x6c
 8001492:	f7ff ff19 	bl	80012c8 <writeRegister>
    HAL_Delay(200);
 8001496:	20c8      	movs	r0, #200	; 0xc8
 8001498:	f001 f93c 	bl	8002714 <HAL_Delay>

    // Configure device for bias calculation
    writeRegister(INT_ENABLE, INT_DISABLE);   // Disable all interrupts
 800149c:	2100      	movs	r1, #0
 800149e:	2038      	movs	r0, #56	; 0x38
 80014a0:	f7ff ff12 	bl	80012c8 <writeRegister>
    writeRegister(FIFO_EN, 0x00);      // Disable FIFO
 80014a4:	2100      	movs	r1, #0
 80014a6:	2023      	movs	r0, #35	; 0x23
 80014a8:	f7ff ff0e 	bl	80012c8 <writeRegister>
    writeRegister(PWR_MGMNT_1, SEN_ENABLE);   // Turn on internal clock source
 80014ac:	2100      	movs	r1, #0
 80014ae:	206b      	movs	r0, #107	; 0x6b
 80014b0:	f7ff ff0a 	bl	80012c8 <writeRegister>
    writeRegister(I2C_MST_CTRL, 0x00); // Disable I2C master
 80014b4:	2100      	movs	r1, #0
 80014b6:	2024      	movs	r0, #36	; 0x24
 80014b8:	f7ff ff06 	bl	80012c8 <writeRegister>
    writeRegister(USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 80014bc:	2100      	movs	r1, #0
 80014be:	206a      	movs	r0, #106	; 0x6a
 80014c0:	f7ff ff02 	bl	80012c8 <writeRegister>
    writeRegister(USER_CTRL, 0x0C);    // Reset FIFO and DMP
 80014c4:	210c      	movs	r1, #12
 80014c6:	206a      	movs	r0, #106	; 0x6a
 80014c8:	f7ff fefe 	bl	80012c8 <writeRegister>
    HAL_Delay(15);
 80014cc:	200f      	movs	r0, #15
 80014ce:	f001 f921 	bl	8002714 <HAL_Delay>

    // Configure MPU6050 gyro and accelerometer for bias calculation
    writeRegister(CONFIG, DLPF_184);      // Set low-pass filter to 184 Hz
 80014d2:	2101      	movs	r1, #1
 80014d4:	201a      	movs	r0, #26
 80014d6:	f7ff fef7 	bl	80012c8 <writeRegister>
    writeRegister(SMPDIV, 0x00);  // Set sample rate to 1 kHz
 80014da:	2100      	movs	r1, #0
 80014dc:	2019      	movs	r0, #25
 80014de:	f7ff fef3 	bl	80012c8 <writeRegister>
    writeRegister(GYRO_CONFIG, GYRO_FS_SEL_250DPS);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 80014e2:	2100      	movs	r1, #0
 80014e4:	201b      	movs	r0, #27
 80014e6:	f7ff feef 	bl	80012c8 <writeRegister>
    writeRegister(ACCEL_CONFIG, ACCEL_FS_SEL_2G); // Set accelerometer full-scale to 2 g, maximum sensitivity
 80014ea:	2100      	movs	r1, #0
 80014ec:	201c      	movs	r0, #28
 80014ee:	f7ff feeb 	bl	80012c8 <writeRegister>

    //uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
    uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
    writeRegister(USER_CTRL, 0x40);   // Enable FIFO
 80014f2:	2140      	movs	r1, #64	; 0x40
 80014f4:	206a      	movs	r0, #106	; 0x6a
 80014f6:	f7ff fee7 	bl	80012c8 <writeRegister>
    writeRegister(FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9250)
 80014fa:	2178      	movs	r1, #120	; 0x78
 80014fc:	2023      	movs	r0, #35	; 0x23
 80014fe:	f7ff fee3 	bl	80012c8 <writeRegister>
    HAL_Delay(28); // accumulate 40 samples in 27 milliseconds = 480 bytes
 8001502:	201c      	movs	r0, #28
 8001504:	f001 f906 	bl	8002714 <HAL_Delay>

    // At end of sample accumulation, turn off FIFO sensor read
    writeRegister(FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001508:	2100      	movs	r1, #0
 800150a:	2023      	movs	r0, #35	; 0x23
 800150c:	f7ff fedc 	bl	80012c8 <writeRegister>
	MPU_SPI_Read(dest, subAddress, count);
 8001510:	2202      	movs	r2, #2
 8001512:	2172      	movs	r1, #114	; 0x72
 8001514:	4668      	mov	r0, sp
 8001516:	f7ff fea7 	bl	8001268 <MPU_SPI_Read>
    //readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
    uint8_t fifoCount_buffer[2];
    readRegisters(FIFO_COUNT, 2, fifoCount_buffer);

    fifo_count = (fifoCount_buffer[0] << 8) | fifoCount_buffer[1];
 800151a:	f8bd 3000 	ldrh.w	r3, [sp]
 800151e:	4931      	ldr	r1, [pc, #196]	; (80015e4 <MPU9250_calibrate+0x170>)
 8001520:	ba5b      	rev16	r3, r3
 8001522:	b29a      	uxth	r2, r3
 8001524:	800b      	strh	r3, [r1, #0]
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8001526:	230c      	movs	r3, #12
 8001528:	fbb2 f3f3 	udiv	r3, r2, r3
 800152c:	4f2e      	ldr	r7, [pc, #184]	; (80015e8 <MPU9250_calibrate+0x174>)

    for (ii = 0; ii < packet_count; ii++)
 800152e:	4e2f      	ldr	r6, [pc, #188]	; (80015ec <MPU9250_calibrate+0x178>)
    packet_count = fifo_count / 12;// How many sets of full gyro and accelerometer data for averaging
 8001530:	803b      	strh	r3, [r7, #0]
    for (ii = 0; ii < packet_count; ii++)
 8001532:	2300      	movs	r3, #0
 8001534:	4c2e      	ldr	r4, [pc, #184]	; (80015f0 <MPU9250_calibrate+0x17c>)
 8001536:	4d2f      	ldr	r5, [pc, #188]	; (80015f4 <MPU9250_calibrate+0x180>)
 8001538:	8033      	strh	r3, [r6, #0]
 800153a:	883a      	ldrh	r2, [r7, #0]
 800153c:	8833      	ldrh	r3, [r6, #0]
 800153e:	4293      	cmp	r3, r2
 8001540:	d320      	bcc.n	8001584 <MPU9250_calibrate+0x110>
        accel_bias[2] += (int32_t) accel_temp[2];
        gyro_bias[0]  += (int32_t) gyro_temp[0];
        gyro_bias[1]  += (int32_t) gyro_temp[1];
        gyro_bias[2]  += (int32_t) gyro_temp[2];
    }
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001542:	6823      	ldr	r3, [r4, #0]
    accel_bias[1] /= (int32_t) packet_count;
    accel_bias[2] /= (int32_t) packet_count;
    gyro_bias[0]  /= (int32_t) packet_count;
 8001544:	6829      	ldr	r1, [r5, #0]
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001546:	fb93 f3f2 	sdiv	r3, r3, r2
    gyro_bias[0]  /= (int32_t) packet_count;
 800154a:	fb91 f1f2 	sdiv	r1, r1, r2
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 800154e:	6023      	str	r3, [r4, #0]
    accel_bias[1] /= (int32_t) packet_count;
 8001550:	6863      	ldr	r3, [r4, #4]
    gyro_bias[0]  /= (int32_t) packet_count;
 8001552:	6029      	str	r1, [r5, #0]
    accel_bias[1] /= (int32_t) packet_count;
 8001554:	fb93 f3f2 	sdiv	r3, r3, r2
    gyro_bias[1]  /= (int32_t) packet_count;
 8001558:	6869      	ldr	r1, [r5, #4]
    accel_bias[1] /= (int32_t) packet_count;
 800155a:	6063      	str	r3, [r4, #4]
    gyro_bias[1]  /= (int32_t) packet_count;
 800155c:	fb91 f1f2 	sdiv	r1, r1, r2
    accel_bias[2] /= (int32_t) packet_count;
 8001560:	68a3      	ldr	r3, [r4, #8]
    gyro_bias[1]  /= (int32_t) packet_count;
 8001562:	6069      	str	r1, [r5, #4]
    accel_bias[2] /= (int32_t) packet_count;
 8001564:	fb93 f3f2 	sdiv	r3, r3, r2
    gyro_bias[2]  /= (int32_t) packet_count;
 8001568:	68a9      	ldr	r1, [r5, #8]
    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 800156a:	2b00      	cmp	r3, #0
    gyro_bias[2]  /= (int32_t) packet_count;
 800156c:	fb91 f2f2 	sdiv	r2, r1, r2
    if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001570:	bfcc      	ite	gt
 8001572:	f5a3 4380 	subgt.w	r3, r3, #16384	; 0x4000
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001576:	f503 4380 	addle.w	r3, r3, #16384	; 0x4000
    gyro_bias[2]  /= (int32_t) packet_count;
 800157a:	60aa      	str	r2, [r5, #8]
    else {accel_bias[2] += (int32_t) accelsensitivity;}
 800157c:	60a3      	str	r3, [r4, #8]
//	acc_ofset_data_corrected[2] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_H);
//	acc_ofset_data_corrected[3] = MPU9250_readReg(MPU9250_ADDRESS, YA_OFFSET_L);
//	acc_ofset_data_corrected[4] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_H);
//	acc_ofset_data_corrected[5] = MPU9250_readReg(MPU9250_ADDRESS, ZA_OFFSET_L);

}
 800157e:	b004      	add	sp, #16
 8001580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	MPU_SPI_Read(dest, subAddress, count);
 8001584:	220c      	movs	r2, #12
 8001586:	2174      	movs	r1, #116	; 0x74
 8001588:	a801      	add	r0, sp, #4
 800158a:	f7ff fe6d 	bl	8001268 <MPU_SPI_Read>
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 800158e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001592:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8001596:	fa93 feb3 	revsh.w	lr, r3
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 800159a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
        accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 800159e:	fa90 f8b0 	revsh.w	r8, r0
        gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 80015a2:	fa93 fcb3 	revsh.w	ip, r3
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80015a6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80015aa:	6820      	ldr	r0, [r4, #0]
        gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 80015ac:	bad9      	revsh	r1, r3
        gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 80015ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80015b2:	bada      	revsh	r2, r3
        accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 80015b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80015b8:	badb      	revsh	r3, r3
        accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 80015ba:	4403      	add	r3, r0
 80015bc:	6023      	str	r3, [r4, #0]
        accel_bias[2] += (int32_t) accel_temp[2];
 80015be:	68a3      	ldr	r3, [r4, #8]
        accel_bias[1] += (int32_t) accel_temp[1];
 80015c0:	6860      	ldr	r0, [r4, #4]
        accel_bias[2] += (int32_t) accel_temp[2];
 80015c2:	4473      	add	r3, lr
 80015c4:	60a3      	str	r3, [r4, #8]
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 80015c6:	682b      	ldr	r3, [r5, #0]
        accel_bias[1] += (int32_t) accel_temp[1];
 80015c8:	4440      	add	r0, r8
        gyro_bias[0]  += (int32_t) gyro_temp[0];
 80015ca:	4463      	add	r3, ip
 80015cc:	602b      	str	r3, [r5, #0]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 80015ce:	686b      	ldr	r3, [r5, #4]
        accel_bias[1] += (int32_t) accel_temp[1];
 80015d0:	6060      	str	r0, [r4, #4]
        gyro_bias[1]  += (int32_t) gyro_temp[1];
 80015d2:	440b      	add	r3, r1
 80015d4:	606b      	str	r3, [r5, #4]
        gyro_bias[2]  += (int32_t) gyro_temp[2];
 80015d6:	68ab      	ldr	r3, [r5, #8]
 80015d8:	4413      	add	r3, r2
 80015da:	60ab      	str	r3, [r5, #8]
    for (ii = 0; ii < packet_count; ii++)
 80015dc:	8833      	ldrh	r3, [r6, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	8033      	strh	r3, [r6, #0]
 80015e2:	e7aa      	b.n	800153a <MPU9250_calibrate+0xc6>
 80015e4:	2000022a 	.word	0x2000022a
 80015e8:	20000248 	.word	0x20000248
 80015ec:	20000246 	.word	0x20000246
 80015f0:	2000029c 	.word	0x2000029c
 80015f4:	200002dc 	.word	0x200002dc

080015f8 <MPU9250_GetData>:

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(int16_t* AccData, int16_t* MagData, int16_t* GyroData)
{
 80015f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015fc:	4606      	mov	r6, r0
 80015fe:	4615      	mov	r5, r2
	MPU_SPI_Read(dest, subAddress, count);
 8001600:	4c8b      	ldr	r4, [pc, #556]	; (8001830 <MPU9250_GetData+0x238>)
 8001602:	2215      	movs	r2, #21
 8001604:	213b      	movs	r1, #59	; 0x3b
 8001606:	4620      	mov	r0, r4
 8001608:	f7ff fe2e 	bl	8001268 <MPU_SPI_Read>
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);

	// combine into 16 bit values
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 800160c:	8823      	ldrh	r3, [r4, #0]
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 2048.0f * 9.8f;
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 2048.0f * 9.8f;
//	accelX=((((int16_t)((uint16_t)_buffer[6] << 8) + _buffer[7])))/4096.0f*9.8f;
//	accelY=((((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])))/4096.0f*9.8f;
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 16.4f * 3.14f / 180.0f;
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 16.4f * 3.14f / 180.0f;
 800160e:	f8df a224 	ldr.w	sl, [pc, #548]	; 8001834 <MPU9250_GetData+0x23c>
	AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001612:	ba5b      	rev16	r3, r3
 8001614:	8033      	strh	r3, [r6, #0]
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001616:	8863      	ldrh	r3, [r4, #2]
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 16.4f * 3.14f / 180.0f;
 8001618:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8001838 <MPU9250_GetData+0x240>
	AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800161c:	ba5b      	rev16	r3, r3
 800161e:	8073      	strh	r3, [r6, #2]
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001620:	88a3      	ldrh	r3, [r4, #4]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 8001622:	f8df b218 	ldr.w	fp, [pc, #536]	; 800183c <MPU9250_GetData+0x244>
	AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001626:	ba5b      	rev16	r3, r3
 8001628:	80b3      	strh	r3, [r6, #4]
	GyroData[0] = (((int16_t)_buffer[8]) << 8) |_buffer[9];
 800162a:	8923      	ldrh	r3, [r4, #8]
 800162c:	ba5b      	rev16	r3, r3
 800162e:	802b      	strh	r3, [r5, #0]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001630:	8963      	ldrh	r3, [r4, #10]
	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 2048.0f * 9.8f;
 8001632:	f994 0000 	ldrsb.w	r0, [r4]
	GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001636:	ba5b      	rev16	r3, r3
 8001638:	806b      	strh	r3, [r5, #2]
	GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 800163a:	89a3      	ldrh	r3, [r4, #12]
 800163c:	ba5b      	rev16	r3, r3
 800163e:	80ab      	strh	r3, [r5, #4]
	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 2048.0f * 9.8f;
 8001640:	7863      	ldrb	r3, [r4, #1]
 8001642:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001646:	f7ff fb29 	bl	8000c9c <__aeabi_i2f>
 800164a:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
 800164e:	f7ff fb79 	bl	8000d44 <__aeabi_fmul>
 8001652:	497b      	ldr	r1, [pc, #492]	; (8001840 <MPU9250_GetData+0x248>)
 8001654:	f7ff fb76 	bl	8000d44 <__aeabi_fmul>
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 2048.0f * 9.8f;
 8001658:	78e3      	ldrb	r3, [r4, #3]
	accelX = (((int16_t)((uint16_t)_buffer[0] << 8) + _buffer[1])) / 2048.0f * 9.8f;
 800165a:	4680      	mov	r8, r0
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 2048.0f * 9.8f;
 800165c:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8001660:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001664:	f7ff fb1a 	bl	8000c9c <__aeabi_i2f>
 8001668:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
 800166c:	f7ff fb6a 	bl	8000d44 <__aeabi_fmul>
 8001670:	4973      	ldr	r1, [pc, #460]	; (8001840 <MPU9250_GetData+0x248>)
 8001672:	f7ff fb67 	bl	8000d44 <__aeabi_fmul>
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 2048.0f * 9.8f;
 8001676:	7963      	ldrb	r3, [r4, #5]
	accelY = (((int16_t)((uint16_t)_buffer[2] << 8) + _buffer[3])) / 2048.0f * 9.8f;
 8001678:	4607      	mov	r7, r0
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 2048.0f * 9.8f;
 800167a:	f994 0004 	ldrsb.w	r0, [r4, #4]
 800167e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8001682:	f7ff fb0b 	bl	8000c9c <__aeabi_i2f>
 8001686:	f04f 5168 	mov.w	r1, #973078528	; 0x3a000000
 800168a:	f7ff fb5b 	bl	8000d44 <__aeabi_fmul>
 800168e:	496c      	ldr	r1, [pc, #432]	; (8001840 <MPU9250_GetData+0x248>)
 8001690:	f7ff fb58 	bl	8000d44 <__aeabi_fmul>
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 16.4f * 3.14f / 180.0f;
 8001694:	7a63      	ldrb	r3, [r4, #9]
	accelZ = (((int16_t)((uint16_t)_buffer[4] << 8) + _buffer[5])) / 2048.0f * 9.8f;
 8001696:	4606      	mov	r6, r0
	gyroX = (((int16_t)((uint16_t)_buffer[8] << 8) + _buffer[9])) / 16.4f * 3.14f / 180.0f;
 8001698:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800169c:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80016a0:	f7ff fafc 	bl	8000c9c <__aeabi_i2f>
 80016a4:	4967      	ldr	r1, [pc, #412]	; (8001844 <MPU9250_GetData+0x24c>)
 80016a6:	f7ff fc01 	bl	8000eac <__aeabi_fdiv>
 80016aa:	4967      	ldr	r1, [pc, #412]	; (8001848 <MPU9250_GetData+0x250>)
 80016ac:	f7ff fb4a 	bl	8000d44 <__aeabi_fmul>
 80016b0:	4966      	ldr	r1, [pc, #408]	; (800184c <MPU9250_GetData+0x254>)
 80016b2:	f7ff fbfb 	bl	8000eac <__aeabi_fdiv>
 80016b6:	4b66      	ldr	r3, [pc, #408]	; (8001850 <MPU9250_GetData+0x258>)
 80016b8:	4605      	mov	r5, r0
 80016ba:	6018      	str	r0, [r3, #0]
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 16.4f * 3.14f / 180.0f;
 80016bc:	7ae3      	ldrb	r3, [r4, #11]
 80016be:	f994 000a 	ldrsb.w	r0, [r4, #10]
 80016c2:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80016c6:	f7ff fae9 	bl	8000c9c <__aeabi_i2f>
 80016ca:	495e      	ldr	r1, [pc, #376]	; (8001844 <MPU9250_GetData+0x24c>)
 80016cc:	f7ff fbee 	bl	8000eac <__aeabi_fdiv>
 80016d0:	495d      	ldr	r1, [pc, #372]	; (8001848 <MPU9250_GetData+0x250>)
 80016d2:	f7ff fb37 	bl	8000d44 <__aeabi_fmul>
 80016d6:	495d      	ldr	r1, [pc, #372]	; (800184c <MPU9250_GetData+0x254>)
 80016d8:	f7ff fbe8 	bl	8000eac <__aeabi_fdiv>
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 16.4f * 3.14f / 180.0f;
 80016dc:	7b63      	ldrb	r3, [r4, #13]
	gyroY = (((int16_t)((uint16_t)_buffer[10] << 8) + _buffer[11])) / 16.4f * 3.14f / 180.0f;
 80016de:	f8ca 0000 	str.w	r0, [sl]
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 16.4f * 3.14f / 180.0f;
 80016e2:	f994 000c 	ldrsb.w	r0, [r4, #12]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 80016e6:	4c5b      	ldr	r4, [pc, #364]	; (8001854 <MPU9250_GetData+0x25c>)
	gyroZ = (((int16_t)((uint16_t)_buffer[12] << 8) + _buffer[13])) / 16.4f * 3.14f / 180.0f;
 80016e8:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80016ec:	f7ff fad6 	bl	8000c9c <__aeabi_i2f>
 80016f0:	4954      	ldr	r1, [pc, #336]	; (8001844 <MPU9250_GetData+0x24c>)
 80016f2:	f7ff fbdb 	bl	8000eac <__aeabi_fdiv>
 80016f6:	4954      	ldr	r1, [pc, #336]	; (8001848 <MPU9250_GetData+0x250>)
 80016f8:	f7ff fb24 	bl	8000d44 <__aeabi_fmul>
 80016fc:	4953      	ldr	r1, [pc, #332]	; (800184c <MPU9250_GetData+0x254>)
 80016fe:	f7ff fbd5 	bl	8000eac <__aeabi_fdiv>
 8001702:	f8c9 0000 	str.w	r0, [r9]
	accelX = accelX - (accel_bias[0] / 16384.0f * 9.8f);
 8001706:	6820      	ldr	r0, [r4, #0]
 8001708:	f7ff fac8 	bl	8000c9c <__aeabi_i2f>
 800170c:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8001710:	f7ff fb18 	bl	8000d44 <__aeabi_fmul>
 8001714:	494a      	ldr	r1, [pc, #296]	; (8001840 <MPU9250_GetData+0x248>)
 8001716:	f7ff fb15 	bl	8000d44 <__aeabi_fmul>
 800171a:	4601      	mov	r1, r0
 800171c:	4640      	mov	r0, r8
 800171e:	f7ff fa07 	bl	8000b30 <__aeabi_fsub>
 8001722:	f8cb 0000 	str.w	r0, [fp]
	accelY = accelY - (accel_bias[1] / 16384.0f * 9.8f);
 8001726:	6860      	ldr	r0, [r4, #4]
 8001728:	f7ff fab8 	bl	8000c9c <__aeabi_i2f>
 800172c:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8001730:	f7ff fb08 	bl	8000d44 <__aeabi_fmul>
 8001734:	4942      	ldr	r1, [pc, #264]	; (8001840 <MPU9250_GetData+0x248>)
 8001736:	f7ff fb05 	bl	8000d44 <__aeabi_fmul>
 800173a:	4601      	mov	r1, r0
 800173c:	4638      	mov	r0, r7
 800173e:	f7ff f9f7 	bl	8000b30 <__aeabi_fsub>
 8001742:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8001858 <MPU9250_GetData+0x260>
	accelZ = accelZ - (accel_bias[2] / 16384.0f * 9.8f);
 8001746:	4f45      	ldr	r7, [pc, #276]	; (800185c <MPU9250_GetData+0x264>)
	accelY = accelY - (accel_bias[1] / 16384.0f * 9.8f);
 8001748:	f8c8 0000 	str.w	r0, [r8]
	accelZ = accelZ - (accel_bias[2] / 16384.0f * 9.8f);
 800174c:	68a0      	ldr	r0, [r4, #8]
 800174e:	f7ff faa5 	bl	8000c9c <__aeabi_i2f>
 8001752:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8001756:	f7ff faf5 	bl	8000d44 <__aeabi_fmul>
 800175a:	4939      	ldr	r1, [pc, #228]	; (8001840 <MPU9250_GetData+0x248>)
 800175c:	f7ff faf2 	bl	8000d44 <__aeabi_fmul>
 8001760:	4601      	mov	r1, r0
 8001762:	4630      	mov	r0, r6
 8001764:	f7ff f9e4 	bl	8000b30 <__aeabi_fsub>
 8001768:	6038      	str	r0, [r7, #0]
	gyroX_filtered = expRunningAverageGX(gyroX) - 0.0050;
 800176a:	4628      	mov	r0, r5
 800176c:	f7ff fcc6 	bl	80010fc <expRunningAverageGX>
 8001770:	f7fe fe5a 	bl	8000428 <__aeabi_f2d>
 8001774:	a326      	add	r3, pc, #152	; (adr r3, 8001810 <MPU9250_GetData+0x218>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe fcf5 	bl	8000168 <__aeabi_dsub>
 800177e:	f7ff f983 	bl	8000a88 <__aeabi_d2f>
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <MPU9250_GetData+0x268>)
 8001784:	6018      	str	r0, [r3, #0]
	gyroY_filtered = expRunningAverageGY(gyroY) - 0.019;
 8001786:	f8da 0000 	ldr.w	r0, [sl]
 800178a:	f7ff fccb 	bl	8001124 <expRunningAverageGY>
 800178e:	f7fe fe4b 	bl	8000428 <__aeabi_f2d>
 8001792:	a321      	add	r3, pc, #132	; (adr r3, 8001818 <MPU9250_GetData+0x220>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe fce6 	bl	8000168 <__aeabi_dsub>
 800179c:	f7ff f974 	bl	8000a88 <__aeabi_d2f>
 80017a0:	4b30      	ldr	r3, [pc, #192]	; (8001864 <MPU9250_GetData+0x26c>)
 80017a2:	6018      	str	r0, [r3, #0]
	gyroZ_filtered = expRunningAverageGZ(gyroZ) - 0.004;
 80017a4:	f8d9 0000 	ldr.w	r0, [r9]
 80017a8:	f7ff fcd0 	bl	800114c <expRunningAverageGZ>
 80017ac:	f7fe fe3c 	bl	8000428 <__aeabi_f2d>
 80017b0:	a31b      	add	r3, pc, #108	; (adr r3, 8001820 <MPU9250_GetData+0x228>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe fcd7 	bl	8000168 <__aeabi_dsub>
 80017ba:	f7ff f965 	bl	8000a88 <__aeabi_d2f>
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <MPU9250_GetData+0x270>)
 80017c0:	6018      	str	r0, [r3, #0]
	accelX_filtered = expRunningAverageAX(accelX) - 0.018;
 80017c2:	f8db 0000 	ldr.w	r0, [fp]
 80017c6:	f7ff fcd5 	bl	8001174 <expRunningAverageAX>
 80017ca:	f7fe fe2d 	bl	8000428 <__aeabi_f2d>
 80017ce:	a316      	add	r3, pc, #88	; (adr r3, 8001828 <MPU9250_GetData+0x230>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe fcc8 	bl	8000168 <__aeabi_dsub>
 80017d8:	f7ff f956 	bl	8000a88 <__aeabi_d2f>
 80017dc:	4b23      	ldr	r3, [pc, #140]	; (800186c <MPU9250_GetData+0x274>)
 80017de:	6018      	str	r0, [r3, #0]
	accelY_filtered = expRunningAverageAY(accelY) - 0.004;
 80017e0:	f8d8 0000 	ldr.w	r0, [r8]
 80017e4:	f7ff fcda 	bl	800119c <expRunningAverageAY>
 80017e8:	f7fe fe1e 	bl	8000428 <__aeabi_f2d>
 80017ec:	a30c      	add	r3, pc, #48	; (adr r3, 8001820 <MPU9250_GetData+0x228>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe fcb9 	bl	8000168 <__aeabi_dsub>
 80017f6:	f7ff f947 	bl	8000a88 <__aeabi_d2f>
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MPU9250_GetData+0x278>)
 80017fc:	6018      	str	r0, [r3, #0]
	accelZ_filtered = expRunningAverageAZ(accelZ);
 80017fe:	6838      	ldr	r0, [r7, #0]
 8001800:	f7ff fce0 	bl	80011c4 <expRunningAverageAZ>
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <MPU9250_GetData+0x27c>)
 8001806:	6018      	str	r0, [r3, #0]
}
 8001808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800180c:	f3af 8000 	nop.w
 8001810:	47ae147b 	.word	0x47ae147b
 8001814:	3f747ae1 	.word	0x3f747ae1
 8001818:	6a7ef9db 	.word	0x6a7ef9db
 800181c:	3f9374bc 	.word	0x3f9374bc
 8001820:	d2f1a9fc 	.word	0xd2f1a9fc
 8001824:	3f70624d 	.word	0x3f70624d
 8001828:	8d4fdf3b 	.word	0x8d4fdf3b
 800182c:	3f926e97 	.word	0x3f926e97
 8001830:	20000210 	.word	0x20000210
 8001834:	200002c4 	.word	0x200002c4
 8001838:	200002d0 	.word	0x200002d0
 800183c:	20000278 	.word	0x20000278
 8001840:	411ccccd 	.word	0x411ccccd
 8001844:	41833333 	.word	0x41833333
 8001848:	4048f5c3 	.word	0x4048f5c3
 800184c:	43340000 	.word	0x43340000
 8001850:	200002b8 	.word	0x200002b8
 8001854:	2000029c 	.word	0x2000029c
 8001858:	20000284 	.word	0x20000284
 800185c:	20000290 	.word	0x20000290
 8001860:	200002c0 	.word	0x200002c0
 8001864:	200002cc 	.word	0x200002cc
 8001868:	200002d8 	.word	0x200002d8
 800186c:	20000280 	.word	0x20000280
 8001870:	2000028c 	.word	0x2000028c
 8001874:	20000298 	.word	0x20000298

08001878 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001878:	b508      	push	{r3, lr}

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 800187a:	2310      	movs	r3, #16
  hcan.Instance = CAN1;
 800187c:	480a      	ldr	r0, [pc, #40]	; (80018a8 <MX_CAN_Init+0x30>)
  hcan.Init.Prescaler = 16;
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <MX_CAN_Init+0x34>)
 8001880:	e9c0 2300 	strd	r2, r3, [r0]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001884:	2300      	movs	r3, #0
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001886:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 800188a:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800188c:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800188e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001892:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001896:	f000 ff4f 	bl	8002738 <HAL_CAN_Init>
 800189a:	b118      	cbz	r0, 80018a4 <MX_CAN_Init+0x2c>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800189c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80018a0:	f000 bcf4 	b.w	800228c <Error_Handler>
}
 80018a4:	bd08      	pop	{r3, pc}
 80018a6:	bf00      	nop
 80018a8:	2000024c 	.word	0x2000024c
 80018ac:	40006400 	.word	0x40006400

080018b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80018b0:	b510      	push	{r4, lr}
 80018b2:	4604      	mov	r4, r0
 80018b4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	2210      	movs	r2, #16
 80018b8:	2100      	movs	r1, #0
 80018ba:	a802      	add	r0, sp, #8
 80018bc:	f004 fdb7 	bl	800642e <memset>
  if(canHandle->Instance==CAN1)
 80018c0:	6822      	ldr	r2, [r4, #0]
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_CAN_MspInit+0x88>)
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d135      	bne.n	8001934 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018c8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80018cc:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	481b      	ldr	r0, [pc, #108]	; (800193c <HAL_CAN_MspInit+0x8c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018d0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80018d4:	61da      	str	r2, [r3, #28]
 80018d6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018da:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80018de:	9200      	str	r2, [sp, #0]
 80018e0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	699a      	ldr	r2, [r3, #24]
 80018e4:	f042 0204 	orr.w	r2, r2, #4
 80018e8:	619a      	str	r2, [r3, #24]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f001 fa27 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001902:	2302      	movs	r3, #2
 8001904:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001908:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	480c      	ldr	r0, [pc, #48]	; (800193c <HAL_CAN_MspInit+0x8c>)
 800190c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f001 fa1c 	bl	8002d4c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 5, 0);
 8001914:	2200      	movs	r2, #0
 8001916:	2105      	movs	r1, #5
 8001918:	2013      	movs	r0, #19
 800191a:	f001 f991 	bl	8002c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800191e:	2013      	movs	r0, #19
 8001920:	f001 f9c0 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8001924:	2014      	movs	r0, #20
 8001926:	2200      	movs	r2, #0
 8001928:	2105      	movs	r1, #5
 800192a:	f001 f989 	bl	8002c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800192e:	2014      	movs	r0, #20
 8001930:	f001 f9b8 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001934:	b006      	add	sp, #24
 8001936:	bd10      	pop	{r4, pc}
 8001938:	40006400 	.word	0x40006400
 800193c:	40010800 	.word	0x40010800

08001940 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001942:	2001      	movs	r0, #1
 8001944:	f002 fb7a 	bl	800403c <osDelay>
  for(;;)
 8001948:	e7fb      	b.n	8001942 <StartDefaultTask+0x2>
	...

0800194c <StartMPUTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMPUTask */
void StartMPUTask(void *argument)
{
 800194c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001950:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN StartMPUTask */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = 1;
  xLastWakeTime = xTaskGetTickCount();
 8001952:	f003 f917 	bl	8004b84 <xTaskGetTickCount>
	accelY_average = accelY_filtered;
	accelZ_average = accelZ_filtered;
	gyroX_average = gyroX_filtered;
	gyroY_average = gyroY_filtered;
	gyroZ_average = gyroZ_filtered;
	imu_filter(accelX_average, accelY_average, accelZ_average, gyroX_average, gyroY_average, 0);
 8001956:	2500      	movs	r5, #0
//	memcpy(can_data, &accelZ_average, 4);
//	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
//		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
//	}

	memcpy(can_data, &roll, 4);
 8001958:	4c31      	ldr	r4, [pc, #196]	; (8001a20 <StartMPUTask+0xd4>)
	memcpy(&can_data[4], &pitch, 4);
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 800195a:	4f32      	ldr	r7, [pc, #200]	; (8001a24 <StartMPUTask+0xd8>)
  xLastWakeTime = xTaskGetTickCount();
 800195c:	9005      	str	r0, [sp, #20]
	MPU9250_GetData(AccData, GyroData, MagData);
 800195e:	aa0a      	add	r2, sp, #40	; 0x28
 8001960:	a908      	add	r1, sp, #32
 8001962:	a806      	add	r0, sp, #24
 8001964:	f7ff fe48 	bl	80015f8 <MPU9250_GetData>
	accelX_average = accelX_filtered;
 8001968:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <StartMPUTask+0xdc>)
	gyroX_average = gyroX_filtered;
 800196a:	4e30      	ldr	r6, [pc, #192]	; (8001a2c <StartMPUTask+0xe0>)
	accelX_average = accelX_filtered;
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	4b30      	ldr	r3, [pc, #192]	; (8001a30 <StartMPUTask+0xe4>)
	gyroY_average = gyroY_filtered;
 8001970:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8001a34 <StartMPUTask+0xe8>
	accelX_average = accelX_filtered;
 8001974:	6018      	str	r0, [r3, #0]
	accelY_average = accelY_filtered;
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <StartMPUTask+0xec>)
	eulerAngles(q_est, &roll, &pitch, &yaw);
 8001978:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8001a3c <StartMPUTask+0xf0>
	accelY_average = accelY_filtered;
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <StartMPUTask+0xf4>)
	eulerAngles(q_est, &roll, &pitch, &yaw);
 8001980:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001a44 <StartMPUTask+0xf8>
	accelY_average = accelY_filtered;
 8001984:	6019      	str	r1, [r3, #0]
	accelZ_average = accelZ_filtered;
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <StartMPUTask+0xfc>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <StartMPUTask+0x100>)
 800198c:	601a      	str	r2, [r3, #0]
	gyroX_average = gyroX_filtered;
 800198e:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <StartMPUTask+0x104>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6033      	str	r3, [r6, #0]
	gyroY_average = gyroY_filtered;
 8001994:	4e2f      	ldr	r6, [pc, #188]	; (8001a54 <StartMPUTask+0x108>)
 8001996:	6836      	ldr	r6, [r6, #0]
 8001998:	f8cc 6000 	str.w	r6, [ip]
	gyroZ_average = gyroZ_filtered;
 800199c:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8001a58 <StartMPUTask+0x10c>
 80019a0:	f8dc e000 	ldr.w	lr, [ip]
 80019a4:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8001a5c <StartMPUTask+0x110>
 80019a8:	f8cc e000 	str.w	lr, [ip]
	imu_filter(accelX_average, accelY_average, accelZ_average, gyroX_average, gyroY_average, 0);
 80019ac:	9600      	str	r6, [sp, #0]
 80019ae:	9501      	str	r5, [sp, #4]
 80019b0:	f000 f9bc 	bl	8001d2c <imu_filter>
	yaw = 0;
 80019b4:	4e2a      	ldr	r6, [pc, #168]	; (8001a60 <StartMPUTask+0x114>)
	q_est.q4 = 0;
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <StartMPUTask+0x118>)
	yaw = 0;
 80019b8:	6035      	str	r5, [r6, #0]
	q_est.q4 = 0;
 80019ba:	60dd      	str	r5, [r3, #12]
	eulerAngles(q_est, &roll, &pitch, &yaw);
 80019bc:	9602      	str	r6, [sp, #8]
 80019be:	f8cd 8004 	str.w	r8, [sp, #4]
 80019c2:	f8cd 9000 	str.w	r9, [sp]
 80019c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c8:	f000 fb2e 	bl	8002028 <eulerAngles>
	memcpy(can_data, &roll, 4);
 80019cc:	f8d9 3000 	ldr.w	r3, [r9]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 80019d0:	4a13      	ldr	r2, [pc, #76]	; (8001a20 <StartMPUTask+0xd4>)
	memcpy(can_data, &roll, 4);
 80019d2:	6023      	str	r3, [r4, #0]
	memcpy(&can_data[4], &pitch, 4);
 80019d4:	f8d8 3000 	ldr.w	r3, [r8]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 80019d8:	4923      	ldr	r1, [pc, #140]	; (8001a68 <StartMPUTask+0x11c>)
	memcpy(&can_data[4], &pitch, 4);
 80019da:	6063      	str	r3, [r4, #4]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderRoll, can_data, &TxMailbox) == HAL_OK) {
 80019dc:	4823      	ldr	r0, [pc, #140]	; (8001a6c <StartMPUTask+0x120>)
 80019de:	463b      	mov	r3, r7
 80019e0:	f000 ffc2 	bl	8002968 <HAL_CAN_AddTxMessage>
 80019e4:	b918      	cbnz	r0, 80019ee <StartMPUTask+0xa2>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80019e6:	2108      	movs	r1, #8
 80019e8:	4821      	ldr	r0, [pc, #132]	; (8001a70 <StartMPUTask+0x124>)
 80019ea:	f001 fa8e 	bl	8002f0a <HAL_GPIO_TogglePin>
	}
	osDelay(1);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f002 fb24 	bl	800403c <osDelay>
	memcpy(can_data, &yaw, 4);
 80019f4:	6833      	ldr	r3, [r6, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
 80019f6:	4622      	mov	r2, r4
	memcpy(can_data, &yaw, 4);
 80019f8:	6023      	str	r3, [r4, #0]
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeaderYaw, can_data, &TxMailbox) == HAL_OK) {
 80019fa:	491e      	ldr	r1, [pc, #120]	; (8001a74 <StartMPUTask+0x128>)
 80019fc:	463b      	mov	r3, r7
 80019fe:	481b      	ldr	r0, [pc, #108]	; (8001a6c <StartMPUTask+0x120>)
 8001a00:	f000 ffb2 	bl	8002968 <HAL_CAN_AddTxMessage>
 8001a04:	b918      	cbnz	r0, 8001a0e <StartMPUTask+0xc2>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001a06:	2108      	movs	r1, #8
 8001a08:	4819      	ldr	r0, [pc, #100]	; (8001a70 <StartMPUTask+0x124>)
 8001a0a:	f001 fa7e 	bl	8002f0a <HAL_GPIO_TogglePin>
	}
	count = HAL_GetTick();
 8001a0e:	f000 fe7b 	bl	8002708 <HAL_GetTick>
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <StartMPUTask+0x12c>)
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001a14:	2101      	movs	r1, #1
	count = HAL_GetTick();
 8001a16:	6018      	str	r0, [r3, #0]
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001a18:	a805      	add	r0, sp, #20
 8001a1a:	f003 f9bd 	bl	8004d98 <vTaskDelayUntil>
  {
 8001a1e:	e79e      	b.n	800195e <StartMPUTask+0x12>
 8001a20:	200002a8 	.word	0x200002a8
 8001a24:	2000036c 	.word	0x2000036c
 8001a28:	20000280 	.word	0x20000280
 8001a2c:	200002bc 	.word	0x200002bc
 8001a30:	2000027c 	.word	0x2000027c
 8001a34:	200002c8 	.word	0x200002c8
 8001a38:	2000028c 	.word	0x2000028c
 8001a3c:	200002e8 	.word	0x200002e8
 8001a40:	20000288 	.word	0x20000288
 8001a44:	200002ec 	.word	0x200002ec
 8001a48:	20000298 	.word	0x20000298
 8001a4c:	20000294 	.word	0x20000294
 8001a50:	200002c0 	.word	0x200002c0
 8001a54:	200002cc 	.word	0x200002cc
 8001a58:	200002d8 	.word	0x200002d8
 8001a5c:	200002d4 	.word	0x200002d4
 8001a60:	200002f0 	.word	0x200002f0
 8001a64:	20000004 	.word	0x20000004
 8001a68:	2000033c 	.word	0x2000033c
 8001a6c:	2000024c 	.word	0x2000024c
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	20000354 	.word	0x20000354
 8001a78:	200002b0 	.word	0x200002b0

08001a7c <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001a7c:	b508      	push	{r3, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <MX_FREERTOS_Init+0x20>)
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_FREERTOS_Init+0x24>)
 8001a84:	f002 fa7e 	bl	8003f84 <osThreadNew>
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_FREERTOS_Init+0x28>)
  MPUTaskHandle = osThreadNew(StartMPUTask, NULL, &MPUTask_attributes);
 8001a8a:	2100      	movs	r1, #0
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a8c:	6018      	str	r0, [r3, #0]
  MPUTaskHandle = osThreadNew(StartMPUTask, NULL, &MPUTask_attributes);
 8001a8e:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <MX_FREERTOS_Init+0x2c>)
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_FREERTOS_Init+0x30>)
 8001a92:	f002 fa77 	bl	8003f84 <osThreadNew>
 8001a96:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_FREERTOS_Init+0x34>)
 8001a98:	6018      	str	r0, [r3, #0]
}
 8001a9a:	bd08      	pop	{r3, pc}
 8001a9c:	08008d70 	.word	0x08008d70
 8001aa0:	08001941 	.word	0x08001941
 8001aa4:	200002b4 	.word	0x200002b4
 8001aa8:	08008d4c 	.word	0x08008d4c
 8001aac:	0800194d 	.word	0x0800194d
 8001ab0:	20000274 	.word	0x20000274

08001ab4 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	2210      	movs	r2, #16
{
 8001ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	eb0d 0002 	add.w	r0, sp, r2
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	f004 fcb4 	bl	800642e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001ac8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8001b50 <MX_GPIO_Init+0x9c>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001acc:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001ace:	4c21      	ldr	r4, [pc, #132]	; (8001b54 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad0:	f042 0220 	orr.w	r2, r2, #32
 8001ad4:	619a      	str	r2, [r3, #24]
 8001ad6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001ad8:	4640      	mov	r0, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ada:	f002 0220 	and.w	r2, r2, #32
 8001ade:	9201      	str	r2, [sp, #4]
 8001ae0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001ae4:	f248 3110 	movw	r1, #33552	; 0x8310
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	f042 0204 	orr.w	r2, r2, #4
 8001aec:	619a      	str	r2, [r3, #24]
 8001aee:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	f002 0204 	and.w	r2, r2, #4
 8001af6:	9202      	str	r2, [sp, #8]
 8001af8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	f042 0208 	orr.w	r2, r2, #8
 8001b02:	619a      	str	r2, [r3, #24]
 8001b04:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	9303      	str	r3, [sp, #12]
 8001b0e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, NSS_MPU_Pin|NSS_W25Q_Pin|NSS_MS_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001b10:	f001 f9f6 	bl	8002f00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	4620      	mov	r0, r4
 8001b18:	2118      	movs	r1, #24
 8001b1a:	f001 f9f1 	bl	8002f00 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1e:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	f248 3310 	movw	r3, #33552	; 0x8310
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	4640      	mov	r0, r8
 8001b26:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f001 f90c 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001b34:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	4620      	mov	r0, r4
 8001b38:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f001 f903 	bl	8002d4c <HAL_GPIO_Init>

}
 8001b46:	b008      	add	sp, #32
 8001b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010800 	.word	0x40010800
 8001b54:	40010c00 	.word	0x40010c00

08001b58 <quat_Normalization>:
// norm of a quaternion is the same as a complex number
// sqrt( q1^2 + q2^2 + q3^2 + q4^2)
// the norm is also the sqrt(q * conjugate(q)), but thats a lot of operations in the quaternion multiplication
static inline float quat_Norm (struct quaternion q)
{
    return sqrt(q.q1*q.q1 + q.q2*q.q2 + q.q3*q.q3 +q.q4*q.q4);
 8001b58:	6801      	ldr	r1, [r0, #0]
}

// Normalizes pointer q by calling quat_Norm(q),
static inline void quat_Normalization(struct quaternion * q){
 8001b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5e:	4604      	mov	r4, r0
 8001b60:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8001b64:	6887      	ldr	r7, [r0, #8]
 8001b66:	68c6      	ldr	r6, [r0, #12]
    return sqrt(q.q1*q.q1 + q.q2*q.q2 + q.q3*q.q3 +q.q4*q.q4);
 8001b68:	4608      	mov	r0, r1
 8001b6a:	f7ff f8eb 	bl	8000d44 <__aeabi_fmul>
 8001b6e:	4641      	mov	r1, r8
 8001b70:	4605      	mov	r5, r0
 8001b72:	4640      	mov	r0, r8
 8001b74:	f7ff f8e6 	bl	8000d44 <__aeabi_fmul>
 8001b78:	4601      	mov	r1, r0
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f7fe ffda 	bl	8000b34 <__addsf3>
 8001b80:	4639      	mov	r1, r7
 8001b82:	4605      	mov	r5, r0
 8001b84:	4638      	mov	r0, r7
 8001b86:	f7ff f8dd 	bl	8000d44 <__aeabi_fmul>
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	4628      	mov	r0, r5
 8001b8e:	f7fe ffd1 	bl	8000b34 <__addsf3>
 8001b92:	4631      	mov	r1, r6
 8001b94:	4605      	mov	r5, r0
 8001b96:	4630      	mov	r0, r6
 8001b98:	f7ff f8d4 	bl	8000d44 <__aeabi_fmul>
 8001b9c:	4601      	mov	r1, r0
 8001b9e:	4628      	mov	r0, r5
 8001ba0:	f7fe ffc8 	bl	8000b34 <__addsf3>
 8001ba4:	f7fe fc40 	bl	8000428 <__aeabi_f2d>
 8001ba8:	f003 feea 	bl	8005980 <sqrt>
 8001bac:	f7fe ff6c 	bl	8000a88 <__aeabi_d2f>
 8001bb0:	4605      	mov	r5, r0
    float norm = quat_Norm(*q);
    q -> q1 /= norm;
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	6820      	ldr	r0, [r4, #0]
 8001bb6:	f7ff f979 	bl	8000eac <__aeabi_fdiv>
    q -> q2 /= norm;
 8001bba:	4629      	mov	r1, r5
    q -> q1 /= norm;
 8001bbc:	6020      	str	r0, [r4, #0]
    q -> q2 /= norm;
 8001bbe:	6860      	ldr	r0, [r4, #4]
 8001bc0:	f7ff f974 	bl	8000eac <__aeabi_fdiv>
    q -> q3 /= norm;
 8001bc4:	4629      	mov	r1, r5
    q -> q2 /= norm;
 8001bc6:	6060      	str	r0, [r4, #4]
    q -> q3 /= norm;
 8001bc8:	68a0      	ldr	r0, [r4, #8]
 8001bca:	f7ff f96f 	bl	8000eac <__aeabi_fdiv>
    q -> q4 /= norm;
 8001bce:	4629      	mov	r1, r5
    q -> q3 /= norm;
 8001bd0:	60a0      	str	r0, [r4, #8]
    q -> q4 /= norm;
 8001bd2:	68e0      	ldr	r0, [r4, #12]
 8001bd4:	f7ff f96a 	bl	8000eac <__aeabi_fdiv>
 8001bd8:	60e0      	str	r0, [r4, #12]
}
 8001bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bde <quat_mult>:

#include "madgwickFilter.h"

struct quaternion q_est = { 1, 0, 0, 0};       // initialize with as unit vector with real component  = 1

struct quaternion quat_mult (struct quaternion L, struct quaternion R){
 8001bde:	b084      	sub	sp, #16
 8001be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be4:	9000      	str	r0, [sp, #0]
 8001be6:	a80d      	add	r0, sp, #52	; 0x34
 8001be8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001bec:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8001bee:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    
    
    struct quaternion product;
    product.q1 = (L.q1 * R.q1) - (L.q2 * R.q2) - (L.q3 * R.q3) - (L.q4 * R.q4);
 8001bf2:	4631      	mov	r1, r6
 8001bf4:	4658      	mov	r0, fp
 8001bf6:	f7ff f8a5 	bl	8000d44 <__aeabi_fmul>
 8001bfa:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8001bfe:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8001c02:	9001      	str	r0, [sp, #4]
 8001c04:	4641      	mov	r1, r8
 8001c06:	4648      	mov	r0, r9
 8001c08:	f7ff f89c 	bl	8000d44 <__aeabi_fmul>
 8001c0c:	9a01      	ldr	r2, [sp, #4]
 8001c0e:	4601      	mov	r1, r0
 8001c10:	4610      	mov	r0, r2
 8001c12:	f7fe ff8d 	bl	8000b30 <__aeabi_fsub>
 8001c16:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001c18:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8001c1c:	9001      	str	r0, [sp, #4]
 8001c1e:	4651      	mov	r1, sl
 8001c20:	4638      	mov	r0, r7
 8001c22:	f7ff f88f 	bl	8000d44 <__aeabi_fmul>
 8001c26:	9a01      	ldr	r2, [sp, #4]
 8001c28:	4601      	mov	r1, r0
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f7fe ff80 	bl	8000b30 <__aeabi_fsub>
 8001c30:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8001c32:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8001c34:	9001      	str	r0, [sp, #4]
 8001c36:	4621      	mov	r1, r4
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f7ff f883 	bl	8000d44 <__aeabi_fmul>
 8001c3e:	9a01      	ldr	r2, [sp, #4]
 8001c40:	4601      	mov	r1, r0
 8001c42:	4610      	mov	r0, r2
 8001c44:	f7fe ff74 	bl	8000b30 <__aeabi_fsub>
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
    
    return product;
 8001c48:	9b00      	ldr	r3, [sp, #0]
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 8001c4a:	4641      	mov	r1, r8
    return product;
 8001c4c:	6018      	str	r0, [r3, #0]
    product.q2 = (L.q1 * R.q2) + (L.q2 * R.q1) + (L.q3 * R.q4) - (L.q4 * R.q3);
 8001c4e:	4658      	mov	r0, fp
 8001c50:	f7ff f878 	bl	8000d44 <__aeabi_fmul>
 8001c54:	4631      	mov	r1, r6
 8001c56:	9001      	str	r0, [sp, #4]
 8001c58:	4648      	mov	r0, r9
 8001c5a:	f7ff f873 	bl	8000d44 <__aeabi_fmul>
 8001c5e:	9a01      	ldr	r2, [sp, #4]
 8001c60:	4601      	mov	r1, r0
 8001c62:	4610      	mov	r0, r2
 8001c64:	f7fe ff66 	bl	8000b34 <__addsf3>
 8001c68:	4621      	mov	r1, r4
 8001c6a:	9001      	str	r0, [sp, #4]
 8001c6c:	4638      	mov	r0, r7
 8001c6e:	f7ff f869 	bl	8000d44 <__aeabi_fmul>
 8001c72:	9a01      	ldr	r2, [sp, #4]
 8001c74:	4601      	mov	r1, r0
 8001c76:	4610      	mov	r0, r2
 8001c78:	f7fe ff5c 	bl	8000b34 <__addsf3>
 8001c7c:	4651      	mov	r1, sl
 8001c7e:	9001      	str	r0, [sp, #4]
 8001c80:	4628      	mov	r0, r5
 8001c82:	f7ff f85f 	bl	8000d44 <__aeabi_fmul>
 8001c86:	9a01      	ldr	r2, [sp, #4]
 8001c88:	4601      	mov	r1, r0
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f7fe ff50 	bl	8000b30 <__aeabi_fsub>
    return product;
 8001c90:	9b00      	ldr	r3, [sp, #0]
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 8001c92:	4651      	mov	r1, sl
    return product;
 8001c94:	6058      	str	r0, [r3, #4]
    product.q3 = (L.q1 * R.q3) - (L.q2 * R.q4) + (L.q3 * R.q1) + (L.q4 * R.q2);
 8001c96:	4658      	mov	r0, fp
 8001c98:	f7ff f854 	bl	8000d44 <__aeabi_fmul>
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	9001      	str	r0, [sp, #4]
 8001ca0:	4648      	mov	r0, r9
 8001ca2:	f7ff f84f 	bl	8000d44 <__aeabi_fmul>
 8001ca6:	9a01      	ldr	r2, [sp, #4]
 8001ca8:	4601      	mov	r1, r0
 8001caa:	4610      	mov	r0, r2
 8001cac:	f7fe ff40 	bl	8000b30 <__aeabi_fsub>
 8001cb0:	4631      	mov	r1, r6
 8001cb2:	9001      	str	r0, [sp, #4]
 8001cb4:	4638      	mov	r0, r7
 8001cb6:	f7ff f845 	bl	8000d44 <__aeabi_fmul>
 8001cba:	9a01      	ldr	r2, [sp, #4]
 8001cbc:	4601      	mov	r1, r0
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f7fe ff38 	bl	8000b34 <__addsf3>
 8001cc4:	4641      	mov	r1, r8
 8001cc6:	9001      	str	r0, [sp, #4]
 8001cc8:	4628      	mov	r0, r5
 8001cca:	f7ff f83b 	bl	8000d44 <__aeabi_fmul>
 8001cce:	9a01      	ldr	r2, [sp, #4]
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7fe ff2e 	bl	8000b34 <__addsf3>
    return product;
 8001cd8:	9b00      	ldr	r3, [sp, #0]
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 8001cda:	4621      	mov	r1, r4
    return product;
 8001cdc:	6098      	str	r0, [r3, #8]
    product.q4 = (L.q1 * R.q4) + (L.q2 * R.q3) - (L.q3 * R.q2) + (L.q4 * R.q1);
 8001cde:	4658      	mov	r0, fp
 8001ce0:	f7ff f830 	bl	8000d44 <__aeabi_fmul>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	4683      	mov	fp, r0
 8001ce8:	4648      	mov	r0, r9
 8001cea:	f7ff f82b 	bl	8000d44 <__aeabi_fmul>
 8001cee:	4601      	mov	r1, r0
 8001cf0:	4658      	mov	r0, fp
 8001cf2:	f7fe ff1f 	bl	8000b34 <__addsf3>
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	4681      	mov	r9, r0
 8001cfa:	4638      	mov	r0, r7
 8001cfc:	f7ff f822 	bl	8000d44 <__aeabi_fmul>
 8001d00:	4601      	mov	r1, r0
 8001d02:	4648      	mov	r0, r9
 8001d04:	f7fe ff14 	bl	8000b30 <__aeabi_fsub>
 8001d08:	4631      	mov	r1, r6
 8001d0a:	4607      	mov	r7, r0
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff f819 	bl	8000d44 <__aeabi_fmul>
 8001d12:	4601      	mov	r1, r0
 8001d14:	4638      	mov	r0, r7
 8001d16:	f7fe ff0d 	bl	8000b34 <__addsf3>
    return product;
 8001d1a:	9b00      	ldr	r3, [sp, #0]
 8001d1c:	60d8      	str	r0, [r3, #12]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	b003      	add	sp, #12
 8001d22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d26:	b004      	add	sp, #16
 8001d28:	4770      	bx	lr
	...

08001d2c <imu_filter>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void imu_filter(float ax, float ay, float az, float gx, float gy, float gz){
 8001d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d30:	4694      	mov	ip, r2
 8001d32:	468e      	mov	lr, r1
    
    //Variables and constants
    struct quaternion q_est_prev = q_est;
    struct quaternion q_est_dot = {0};            // used as a place holder in equations 42 and 43
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8001d34:	2700      	movs	r7, #0
void imu_filter(float ax, float ay, float az, float gx, float gy, float gz){
 8001d36:	4683      	mov	fp, r0
 8001d38:	4698      	mov	r8, r3
 8001d3a:	b0a3      	sub	sp, #140	; 0x8c
    struct quaternion q_est_prev = q_est;
 8001d3c:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 8002014 <imu_filter+0x2e8>
 8001d40:	f10d 0948 	add.w	r9, sp, #72	; 0x48
 8001d44:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8001d48:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8001d4c:	f8da 300c 	ldr.w	r3, [sl, #12]
    
    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
    float J_g [3][4] = {0};                     // jacobian matrix for gravity
    
    struct quaternion gradient = {0};
 8001d50:	2210      	movs	r2, #16
 8001d52:	2100      	movs	r1, #0
 8001d54:	a81a      	add	r0, sp, #104	; 0x68
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8001d56:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
    struct quaternion q_est_prev = q_est;
 8001d5a:	f8da 4008 	ldr.w	r4, [sl, #8]
 8001d5e:	f8da 5004 	ldr.w	r5, [sl, #4]
 8001d62:	f8da 6000 	ldr.w	r6, [sl]
 8001d66:	9306      	str	r3, [sp, #24]
    struct quaternion q_a = {0, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8001d68:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 8001d6c:	9716      	str	r7, [sp, #88]	; 0x58
 8001d6e:	f8cd b05c 	str.w	fp, [sp, #92]	; 0x5c
    struct quaternion gradient = {0};
 8001d72:	f004 fb5c 	bl	800642e <memset>
    q -> q2 *= scalar;
 8001d76:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001d7a:	4640      	mov	r0, r8
    q_w.q2 = gx;
    q_w.q3 = gy;
    q_w.q4 = gz;
    
    quat_scalar(&q_w, 0.5);                  // equation (12) dq/dt = (1/2)q*w
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 8001d7c:	971e      	str	r7, [sp, #120]	; 0x78
 8001d7e:	f7fe ffe1 	bl	8000d44 <__aeabi_fmul>
    q -> q3 *= scalar;
 8001d82:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001d86:	901f      	str	r0, [sp, #124]	; 0x7c
 8001d88:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001d8a:	f7fe ffdb 	bl	8000d44 <__aeabi_fmul>
    q -> q4 *= scalar;
 8001d8e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001d92:	9020      	str	r0, [sp, #128]	; 0x80
 8001d94:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8001d96:	f7fe ffd5 	bl	8000d44 <__aeabi_fmul>
 8001d9a:	f10d 0878 	add.w	r8, sp, #120	; 0x78
 8001d9e:	f10d 0c04 	add.w	ip, sp, #4
 8001da2:	9021      	str	r0, [sp, #132]	; 0x84
 8001da4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8001da8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8001dac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001dae:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	4658      	mov	r0, fp
 8001db6:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
 8001dba:	f7ff ff10 	bl	8001bde <quat_mult>
 8001dbe:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8001dc2:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 8001dc6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
     The matrix multiplcation can also be done hard coded to reduce code.
     
     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */
    
    quat_Normalization(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 8001dc8:	a816      	add	r0, sp, #88	; 0x58
    q_w = quat_mult(q_est_prev, q_w);        // equation (12)
 8001dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8001dcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001dce:	9308      	str	r3, [sp, #32]
 8001dd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8001dd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8001dd6:	930a      	str	r3, [sp, #40]	; 0x28
    quat_Normalization(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 8001dd8:	f7ff febe 	bl	8001b58 <quat_Normalization>
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 8001ddc:	9906      	ldr	r1, [sp, #24]
 8001dde:	4628      	mov	r0, r5
 8001de0:	f7fe ffb0 	bl	8000d44 <__aeabi_fmul>
 8001de4:	4621      	mov	r1, r4
 8001de6:	4680      	mov	r8, r0
 8001de8:	4630      	mov	r0, r6
 8001dea:	f7fe ffab 	bl	8000d44 <__aeabi_fmul>
 8001dee:	4601      	mov	r1, r0
 8001df0:	4640      	mov	r0, r8
 8001df2:	f7fe fe9d 	bl	8000b30 <__aeabi_fsub>
 8001df6:	4601      	mov	r1, r0
 8001df8:	f7fe fe9c 	bl	8000b34 <__addsf3>
 8001dfc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001dfe:	f7fe fe97 	bl	8000b30 <__aeabi_fsub>
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 8001e02:	4629      	mov	r1, r5
    F_g[0] = 2*(q_est_prev.q2 * q_est_prev.q4 - q_est_prev.q1 * q_est_prev.q3) - q_a.q2;
 8001e04:	9007      	str	r0, [sp, #28]
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 8001e06:	4630      	mov	r0, r6
 8001e08:	f7fe ff9c 	bl	8000d44 <__aeabi_fmul>
 8001e0c:	9906      	ldr	r1, [sp, #24]
 8001e0e:	4680      	mov	r8, r0
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7fe ff97 	bl	8000d44 <__aeabi_fmul>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4640      	mov	r0, r8
 8001e1a:	f7fe fe8b 	bl	8000b34 <__addsf3>
 8001e1e:	4601      	mov	r1, r0
 8001e20:	f7fe fe88 	bl	8000b34 <__addsf3>
 8001e24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8001e26:	f7fe fe83 	bl	8000b30 <__aeabi_fsub>
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8001e2a:	4629      	mov	r1, r5
    F_g[1] = 2*(q_est_prev.q1 * q_est_prev.q2 + q_est_prev.q3* q_est_prev.q4) - q_a.q3;
 8001e2c:	4683      	mov	fp, r0
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f7fe ff88 	bl	8000d44 <__aeabi_fmul>
 8001e34:	f7fe faf8 	bl	8000428 <__aeabi_f2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	4976      	ldr	r1, [pc, #472]	; (8002018 <imu_filter+0x2ec>)
 8001e40:	f7fe f992 	bl	8000168 <__aeabi_dsub>
 8001e44:	4680      	mov	r8, r0
 8001e46:	4689      	mov	r9, r1
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4621      	mov	r1, r4
 8001e4c:	f7fe ff7a 	bl	8000d44 <__aeabi_fmul>
 8001e50:	f7fe faea 	bl	8000428 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4640      	mov	r0, r8
 8001e5a:	4649      	mov	r1, r9
 8001e5c:	f7fe f984 	bl	8000168 <__aeabi_dsub>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	f7fe f982 	bl	800016c <__adddf3>
 8001e68:	4680      	mov	r8, r0
 8001e6a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001e6c:	4689      	mov	r9, r1
 8001e6e:	f7fe fadb 	bl	8000428 <__aeabi_f2d>
 8001e72:	460b      	mov	r3, r1
 8001e74:	4602      	mov	r2, r0
 8001e76:	4649      	mov	r1, r9
 8001e78:	4640      	mov	r0, r8
 8001e7a:	f7fe f975 	bl	8000168 <__aeabi_dsub>
 8001e7e:	f7fe fe03 	bl	8000a88 <__aeabi_d2f>
    
    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2 * q_est_prev.q3;
    J_g[0][1] =  2 * q_est_prev.q4;
 8001e82:	9906      	ldr	r1, [sp, #24]
    F_g[2] = 2*(0.5 - q_est_prev.q2 * q_est_prev.q2 - q_est_prev.q3 * q_est_prev.q3) - q_a.q4;
 8001e84:	4680      	mov	r8, r0
    J_g[0][1] =  2 * q_est_prev.q4;
 8001e86:	4608      	mov	r0, r1
 8001e88:	f7fe fe54 	bl	8000b34 <__addsf3>
    J_g[0][2] = -2 * q_est_prev.q1;
    J_g[0][3] =  2 * q_est_prev.q2;
 8001e8c:	4629      	mov	r1, r5
    J_g[0][1] =  2 * q_est_prev.q4;
 8001e8e:	4681      	mov	r9, r0
    J_g[0][3] =  2 * q_est_prev.q2;
 8001e90:	4628      	mov	r0, r5
 8001e92:	f7fe fe4f 	bl	8000b34 <__addsf3>
    J_g[2][1] = -4 * q_est_prev.q2;
    J_g[2][2] = -4 * q_est_prev.q3;
    J_g[2][3] = 0;
    
    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8001e96:	4639      	mov	r1, r7
    J_g[0][3] =  2 * q_est_prev.q2;
 8001e98:	900d      	str	r0, [sp, #52]	; 0x34
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8001e9a:	4640      	mov	r0, r8
 8001e9c:	f7fe ff52 	bl	8000d44 <__aeabi_fmul>
    J_g[0][0] = -2 * q_est_prev.q3;
 8001ea0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8001ea4:	900c      	str	r0, [sp, #48]	; 0x30
    J_g[0][0] = -2 * q_est_prev.q3;
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7fe ff4c 	bl	8000d44 <__aeabi_fmul>
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8001eac:	9907      	ldr	r1, [sp, #28]
 8001eae:	f7fe ff49 	bl	8000d44 <__aeabi_fmul>
 8001eb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001eb4:	4607      	mov	r7, r0
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4658      	mov	r0, fp
 8001eba:	f7fe ff43 	bl	8000d44 <__aeabi_fmul>
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	4638      	mov	r0, r7
 8001ec2:	f7fe fe37 	bl	8000b34 <__addsf3>
 8001ec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fe33 	bl	8000b34 <__addsf3>
    J_g[1][1] = 2 * q_est_prev.q1;
 8001ece:	4631      	mov	r1, r6
    gradient.q1 = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8001ed0:	901a      	str	r0, [sp, #104]	; 0x68
    J_g[1][1] = 2 * q_est_prev.q1;
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	f7fe fe2e 	bl	8000b34 <__addsf3>
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8001ed8:	4659      	mov	r1, fp
 8001eda:	f7fe ff33 	bl	8000d44 <__aeabi_fmul>
 8001ede:	4649      	mov	r1, r9
 8001ee0:	4607      	mov	r7, r0
 8001ee2:	9807      	ldr	r0, [sp, #28]
 8001ee4:	f7fe ff2e 	bl	8000d44 <__aeabi_fmul>
 8001ee8:	4601      	mov	r1, r0
 8001eea:	4638      	mov	r0, r7
 8001eec:	f7fe fe22 	bl	8000b34 <__addsf3>
    J_g[2][1] = -4 * q_est_prev.q2;
 8001ef0:	494a      	ldr	r1, [pc, #296]	; (800201c <imu_filter+0x2f0>)
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8001ef2:	4607      	mov	r7, r0
    J_g[2][1] = -4 * q_est_prev.q2;
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f7fe ff25 	bl	8000d44 <__aeabi_fmul>
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8001efa:	4641      	mov	r1, r8
 8001efc:	f7fe ff22 	bl	8000d44 <__aeabi_fmul>
 8001f00:	4601      	mov	r1, r0
 8001f02:	4638      	mov	r0, r7
 8001f04:	f7fe fe16 	bl	8000b34 <__addsf3>
    J_g[0][2] = -2 * q_est_prev.q1;
 8001f08:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    gradient.q2 = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 8001f0c:	901b      	str	r0, [sp, #108]	; 0x6c
    J_g[0][2] = -2 * q_est_prev.q1;
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f7fe ff18 	bl	8000d44 <__aeabi_fmul>
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8001f14:	9907      	ldr	r1, [sp, #28]
 8001f16:	f7fe ff15 	bl	8000d44 <__aeabi_fmul>
 8001f1a:	4649      	mov	r1, r9
 8001f1c:	4607      	mov	r7, r0
 8001f1e:	4658      	mov	r0, fp
 8001f20:	f7fe ff10 	bl	8000d44 <__aeabi_fmul>
 8001f24:	4601      	mov	r1, r0
 8001f26:	4638      	mov	r0, r7
 8001f28:	f7fe fe04 	bl	8000b34 <__addsf3>
    J_g[2][2] = -4 * q_est_prev.q3;
 8001f2c:	493b      	ldr	r1, [pc, #236]	; (800201c <imu_filter+0x2f0>)
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8001f2e:	4607      	mov	r7, r0
    J_g[2][2] = -4 * q_est_prev.q3;
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7fe ff07 	bl	8000d44 <__aeabi_fmul>
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8001f36:	4641      	mov	r1, r8
 8001f38:	f7fe ff04 	bl	8000d44 <__aeabi_fmul>
 8001f3c:	4601      	mov	r1, r0
 8001f3e:	4638      	mov	r0, r7
 8001f40:	f7fe fdf8 	bl	8000b34 <__addsf3>
    J_g[1][3] = 2 * q_est_prev.q3;
 8001f44:	4621      	mov	r1, r4
    gradient.q3 = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8001f46:	901c      	str	r0, [sp, #112]	; 0x70
    J_g[1][3] = 2 * q_est_prev.q3;
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7fe fdf3 	bl	8000b34 <__addsf3>
    gradient.q4 = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8001f4e:	4659      	mov	r1, fp
 8001f50:	f7fe fef8 	bl	8000d44 <__aeabi_fmul>
 8001f54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001f56:	4607      	mov	r7, r0
 8001f58:	4611      	mov	r1, r2
 8001f5a:	9807      	ldr	r0, [sp, #28]
 8001f5c:	f7fe fef2 	bl	8000d44 <__aeabi_fmul>
 8001f60:	4601      	mov	r1, r0
 8001f62:	4638      	mov	r0, r7
 8001f64:	f7fe fde6 	bl	8000b34 <__addsf3>
 8001f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fde2 	bl	8000b34 <__addsf3>
 8001f70:	901d      	str	r0, [sp, #116]	; 0x74
    
    // Normalize the gradient, equation (44)
    quat_Normalization(&gradient);
 8001f72:	a81a      	add	r0, sp, #104	; 0x68
 8001f74:	f7ff fdf0 	bl	8001b58 <quat_Normalization>
    q -> q1 *= scalar;
 8001f78:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001f7a:	4929      	ldr	r1, [pc, #164]	; (8002020 <imu_filter+0x2f4>)
 8001f7c:	f7fe fee2 	bl	8000d44 <__aeabi_fmul>
    q -> q2 *= scalar;
 8001f80:	4927      	ldr	r1, [pc, #156]	; (8002020 <imu_filter+0x2f4>)
    q -> q1 *= scalar;
 8001f82:	4683      	mov	fp, r0
 8001f84:	901a      	str	r0, [sp, #104]	; 0x68
    q -> q2 *= scalar;
 8001f86:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001f88:	f7fe fedc 	bl	8000d44 <__aeabi_fmul>
    q -> q3 *= scalar;
 8001f8c:	4924      	ldr	r1, [pc, #144]	; (8002020 <imu_filter+0x2f4>)
    q -> q2 *= scalar;
 8001f8e:	4681      	mov	r9, r0
 8001f90:	901b      	str	r0, [sp, #108]	; 0x6c
    q -> q3 *= scalar;
 8001f92:	981c      	ldr	r0, [sp, #112]	; 0x70
 8001f94:	f7fe fed6 	bl	8000d44 <__aeabi_fmul>
    q -> q4 *= scalar;
 8001f98:	4921      	ldr	r1, [pc, #132]	; (8002020 <imu_filter+0x2f4>)
    q -> q3 *= scalar;
 8001f9a:	4680      	mov	r8, r0
 8001f9c:	901c      	str	r0, [sp, #112]	; 0x70
    q -> q4 *= scalar;
 8001f9e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001fa0:	f7fe fed0 	bl	8000d44 <__aeabi_fmul>
    Sum -> q1 = L.q1 - R.q1;
 8001fa4:	4659      	mov	r1, fp
    q -> q4 *= scalar;
 8001fa6:	4607      	mov	r7, r0
 8001fa8:	901d      	str	r0, [sp, #116]	; 0x74
    Sum -> q1 = L.q1 - R.q1;
 8001faa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001fac:	f7fe fdc0 	bl	8000b30 <__aeabi_fsub>
    q -> q1 *= scalar;
 8001fb0:	491c      	ldr	r1, [pc, #112]	; (8002024 <imu_filter+0x2f8>)
 8001fb2:	f7fe fec7 	bl	8000d44 <__aeabi_fmul>
    Sum -> q1 = L.q1 + R.q1;
 8001fb6:	4631      	mov	r1, r6
 8001fb8:	f7fe fdbc 	bl	8000b34 <__addsf3>
    Sum -> q2 = L.q2 - R.q2;
 8001fbc:	4649      	mov	r1, r9
    Sum -> q1 = L.q1 + R.q1;
 8001fbe:	f8ca 0000 	str.w	r0, [sl]
    Sum -> q2 = L.q2 - R.q2;
 8001fc2:	9808      	ldr	r0, [sp, #32]
 8001fc4:	f7fe fdb4 	bl	8000b30 <__aeabi_fsub>
    q -> q2 *= scalar;
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <imu_filter+0x2f8>)
 8001fca:	f7fe febb 	bl	8000d44 <__aeabi_fmul>
    Sum -> q2 = L.q2 + R.q2;
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f7fe fdb0 	bl	8000b34 <__addsf3>
    Sum -> q3 = L.q3 - R.q3;
 8001fd4:	4641      	mov	r1, r8
    Sum -> q2 = L.q2 + R.q2;
 8001fd6:	f8ca 0004 	str.w	r0, [sl, #4]
    Sum -> q3 = L.q3 - R.q3;
 8001fda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fdc:	f7fe fda8 	bl	8000b30 <__aeabi_fsub>
    q -> q3 *= scalar;
 8001fe0:	4910      	ldr	r1, [pc, #64]	; (8002024 <imu_filter+0x2f8>)
 8001fe2:	f7fe feaf 	bl	8000d44 <__aeabi_fmul>
    Sum -> q3 = L.q3 + R.q3;
 8001fe6:	4621      	mov	r1, r4
 8001fe8:	f7fe fda4 	bl	8000b34 <__addsf3>
    Sum -> q4 = L.q4 - R.q4;
 8001fec:	4639      	mov	r1, r7
    Sum -> q3 = L.q3 + R.q3;
 8001fee:	f8ca 0008 	str.w	r0, [sl, #8]
    Sum -> q4 = L.q4 - R.q4;
 8001ff2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001ff4:	f7fe fd9c 	bl	8000b30 <__aeabi_fsub>
    q -> q4 *= scalar;
 8001ff8:	490a      	ldr	r1, [pc, #40]	; (8002024 <imu_filter+0x2f8>)
 8001ffa:	f7fe fea3 	bl	8000d44 <__aeabi_fmul>
    Sum -> q4 = L.q4 + R.q4;
 8001ffe:	9906      	ldr	r1, [sp, #24]
 8002000:	f7fe fd98 	bl	8000b34 <__addsf3>
 8002004:	f8ca 000c 	str.w	r0, [sl, #12]
    */
    quat_scalar(&gradient, BETA);             // multiply normalized gradient by beta
    quat_sub(&q_est_dot, q_w, gradient);        // subtract above from q_w, the integrated gyro quaternion
    quat_scalar(&q_est_dot, DELTA_T);
    quat_add(&q_est, q_est_prev, q_est_dot);     // Integrate orientation rate to find position
    quat_Normalization(&q_est);                 // normalize the orientation of the estimate
 8002008:	4650      	mov	r0, sl
 800200a:	f7ff fda5 	bl	8001b58 <quat_Normalization>
                                                //(shown in diagram, plus always use unit quaternions for orientation)
   
}
 800200e:	b023      	add	sp, #140	; 0x8c
 8002010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002014:	20000004 	.word	0x20000004
 8002018:	3fe00000 	.word	0x3fe00000
 800201c:	c0800000 	.word	0xc0800000
 8002020:	3d9ac70e 	.word	0x3d9ac70e
 8002024:	3a83126f 	.word	0x3a83126f

08002028 <eulerAngles>:
 Assume right hand system
 Roll is about the x axis, represented as phi
 Pitch is about the y axis, represented as theta
 Yaw is about the z axis, represented as psi (trident looking greek symbol)
 */
void eulerAngles(struct quaternion q, float* roll, float* pitch, float* yaw){
 8002028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800202c:	b085      	sub	sp, #20
 800202e:	ac04      	add	r4, sp, #16
 8002030:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8002034:	9f01      	ldr	r7, [sp, #4]
 8002036:	f8dd 8000 	ldr.w	r8, [sp]
    
    *yaw = atan2f((2*q.q2*q.q3 - 2*q.q1*q.q4), (2*q.q1*q.q1 + 2*q.q2*q.q2 -1));  // equation (7)
 800203a:	4639      	mov	r1, r7
 800203c:	4638      	mov	r0, r7
 800203e:	f7fe fd79 	bl	8000b34 <__addsf3>
 8002042:	4641      	mov	r1, r8
 8002044:	4606      	mov	r6, r0
 8002046:	4640      	mov	r0, r8
 8002048:	f7fe fd74 	bl	8000b34 <__addsf3>
 800204c:	4641      	mov	r1, r8
 800204e:	4605      	mov	r5, r0
 8002050:	f7fe fe78 	bl	8000d44 <__aeabi_fmul>
 8002054:	4680      	mov	r8, r0
 8002056:	4639      	mov	r1, r7
 8002058:	4630      	mov	r0, r6
 800205a:	f7fe fe73 	bl	8000d44 <__aeabi_fmul>
 800205e:	4641      	mov	r1, r8
 8002060:	f7fe fd68 	bl	8000b34 <__addsf3>
 8002064:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002068:	f7fe fd62 	bl	8000b30 <__aeabi_fsub>
 800206c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002070:	4681      	mov	r9, r0
 8002072:	4659      	mov	r1, fp
 8002074:	4630      	mov	r0, r6
 8002076:	f7fe fe65 	bl	8000d44 <__aeabi_fmul>
 800207a:	9c03      	ldr	r4, [sp, #12]
 800207c:	4682      	mov	sl, r0
 800207e:	4621      	mov	r1, r4
 8002080:	4628      	mov	r0, r5
 8002082:	f7fe fe5f 	bl	8000d44 <__aeabi_fmul>
 8002086:	4601      	mov	r1, r0
 8002088:	4650      	mov	r0, sl
 800208a:	f7fe fd51 	bl	8000b30 <__aeabi_fsub>
 800208e:	4649      	mov	r1, r9
 8002090:	f003 fcba 	bl	8005a08 <atan2f>
 8002094:	9b10      	ldr	r3, [sp, #64]	; 0x40
    *pitch = -asinf(2*q.q2*q.q4 + 2*q.q1*q.q3);                                  // equatino (8)
 8002096:	4621      	mov	r1, r4
    *yaw = atan2f((2*q.q2*q.q3 - 2*q.q1*q.q4), (2*q.q1*q.q1 + 2*q.q2*q.q2 -1));  // equation (7)
 8002098:	6018      	str	r0, [r3, #0]
    *pitch = -asinf(2*q.q2*q.q4 + 2*q.q1*q.q3);                                  // equatino (8)
 800209a:	4630      	mov	r0, r6
 800209c:	f7fe fe52 	bl	8000d44 <__aeabi_fmul>
 80020a0:	4659      	mov	r1, fp
 80020a2:	4606      	mov	r6, r0
 80020a4:	4628      	mov	r0, r5
 80020a6:	f7fe fe4d 	bl	8000d44 <__aeabi_fmul>
 80020aa:	4601      	mov	r1, r0
 80020ac:	4630      	mov	r0, r6
 80020ae:	f7fe fd41 	bl	8000b34 <__addsf3>
 80020b2:	f003 fc89 	bl	80059c8 <asinf>
 80020b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80020b8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80020bc:	6018      	str	r0, [r3, #0]
    *roll  = atan2f((2*q.q3*q.q4 - 2*q.q1*q.q2), (2*q.q1*q.q1 + 2*q.q4*q.q4 -1));
 80020be:	4621      	mov	r1, r4
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7fe fd37 	bl	8000b34 <__addsf3>
 80020c6:	4621      	mov	r1, r4
 80020c8:	f7fe fe3c 	bl	8000d44 <__aeabi_fmul>
 80020cc:	4641      	mov	r1, r8
 80020ce:	f7fe fd31 	bl	8000b34 <__addsf3>
 80020d2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80020d6:	f7fe fd2b 	bl	8000b30 <__aeabi_fsub>
 80020da:	4659      	mov	r1, fp
 80020dc:	4606      	mov	r6, r0
 80020de:	4658      	mov	r0, fp
 80020e0:	f7fe fd28 	bl	8000b34 <__addsf3>
 80020e4:	4621      	mov	r1, r4
 80020e6:	f7fe fe2d 	bl	8000d44 <__aeabi_fmul>
 80020ea:	4639      	mov	r1, r7
 80020ec:	4604      	mov	r4, r0
 80020ee:	4628      	mov	r0, r5
 80020f0:	f7fe fe28 	bl	8000d44 <__aeabi_fmul>
 80020f4:	4601      	mov	r1, r0
 80020f6:	4620      	mov	r0, r4
 80020f8:	f7fe fd1a 	bl	8000b30 <__aeabi_fsub>
 80020fc:	4631      	mov	r1, r6
 80020fe:	f003 fc83 	bl	8005a08 <atan2f>
 8002102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    *yaw *= (180.0f / PI);
 8002104:	490c      	ldr	r1, [pc, #48]	; (8002138 <eulerAngles+0x110>)
    *roll  = atan2f((2*q.q3*q.q4 - 2*q.q1*q.q2), (2*q.q1*q.q1 + 2*q.q4*q.q4 -1));
 8002106:	6018      	str	r0, [r3, #0]
    *yaw *= (180.0f / PI);
 8002108:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	f7fe fe1a 	bl	8000d44 <__aeabi_fmul>
 8002110:	9b10      	ldr	r3, [sp, #64]	; 0x40
    *pitch *= (180.0f / PI);
 8002112:	4909      	ldr	r1, [pc, #36]	; (8002138 <eulerAngles+0x110>)
    *yaw *= (180.0f / PI);
 8002114:	6018      	str	r0, [r3, #0]
    *pitch *= (180.0f / PI);
 8002116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	f7fe fe13 	bl	8000d44 <__aeabi_fmul>
 800211e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    *roll *= (180.0f / PI);
 8002120:	4905      	ldr	r1, [pc, #20]	; (8002138 <eulerAngles+0x110>)
    *pitch *= (180.0f / PI);
 8002122:	6018      	str	r0, [r3, #0]
    *roll *= (180.0f / PI);
 8002124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	f7fe fe0c 	bl	8000d44 <__aeabi_fmul>
 800212c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800212e:	6018      	str	r0, [r3, #0]

}
 8002130:	b005      	add	sp, #20
 8002132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002136:	bf00      	nop
 8002138:	42652ee0 	.word	0x42652ee0

0800213c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800213c:	b530      	push	{r4, r5, lr}
 800213e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002140:	2220      	movs	r2, #32
 8002142:	2100      	movs	r1, #0
 8002144:	a807      	add	r0, sp, #28
 8002146:	f004 f972 	bl	800642e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800214a:	2214      	movs	r2, #20
 800214c:	2100      	movs	r1, #0
 800214e:	a801      	add	r0, sp, #4
 8002150:	f004 f96d 	bl	800642e <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002154:	2501      	movs	r5, #1
 8002156:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002158:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800215a:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800215e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002162:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002164:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002166:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002168:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800216a:	f000 fed7 	bl	8002f1c <HAL_RCC_OscConfig>
 800216e:	b108      	cbz	r0, 8002174 <SystemClock_Config+0x38>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002172:	e7fe      	b.n	8002172 <SystemClock_Config+0x36>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002174:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002176:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800217a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800217e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002180:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002184:	4629      	mov	r1, r5
 8002186:	a801      	add	r0, sp, #4
 8002188:	f001 f89e 	bl	80032c8 <HAL_RCC_ClockConfig>
 800218c:	b108      	cbz	r0, 8002192 <SystemClock_Config+0x56>
 800218e:	b672      	cpsid	i
  while (1)
 8002190:	e7fe      	b.n	8002190 <SystemClock_Config+0x54>
}
 8002192:	b011      	add	sp, #68	; 0x44
 8002194:	bd30      	pop	{r4, r5, pc}
	...

08002198 <main>:
{
 8002198:	b508      	push	{r3, lr}
  HAL_Init();
 800219a:	f000 fa97 	bl	80026cc <HAL_Init>
  SystemClock_Config();
 800219e:	f7ff ffcd 	bl	800213c <SystemClock_Config>
  MX_GPIO_Init();
 80021a2:	f7ff fc87 	bl	8001ab4 <MX_GPIO_Init>
  MX_CAN_Init();
 80021a6:	f7ff fb67 	bl	8001878 <MX_CAN_Init>
  MX_SPI1_Init();
 80021aa:	f000 f871 	bl	8002290 <MX_SPI1_Init>
  MX_SPI2_Init();
 80021ae:	f000 f891 	bl	80022d4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80021b2:	f000 fa0f 	bl	80025d4 <MX_USART2_UART_Init>
  MPU9250_calibrate();
 80021b6:	f7ff f95d 	bl	8001474 <MPU9250_calibrate>
  HAL_Delay(2000);
 80021ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021be:	f000 faa9 	bl	8002714 <HAL_Delay>
  MPU9250_Init();
 80021c2:	f7ff f8c1 	bl	8001348 <MPU9250_Init>
  HAL_Delay(500);
 80021c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021ca:	f000 faa3 	bl	8002714 <HAL_Delay>
  TxHeaderRoll.ExtId = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	2111      	movs	r1, #17
  TxHeaderRoll.StdId = headerIdRoll;
 80021d2:	4a22      	ldr	r2, [pc, #136]	; (800225c <main+0xc4>)
  TxHeaderYaw.StdId = headerIdYaw;
 80021d4:	2013      	movs	r0, #19
  TxHeaderRoll.ExtId = 0;
 80021d6:	e9c2 1300 	strd	r1, r3, [r2]
  TxHeaderRoll.DLC = 8;
 80021da:	2108      	movs	r1, #8
 80021dc:	6111      	str	r1, [r2, #16]
  TxHeaderPitch.StdId = headerIdPitch;
 80021de:	2112      	movs	r1, #18
  TxHeaderRoll.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80021e0:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderRoll.TransmitGlobalTime = 0;
 80021e4:	7513      	strb	r3, [r2, #20]
  TxHeaderPitch.StdId = headerIdPitch;
 80021e6:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <main+0xc8>)
  TxHeaderPitch.ExtId = 0;
 80021e8:	e9c2 1300 	strd	r1, r3, [r2]
  TxHeaderPitch.DLC = 4;
 80021ec:	2104      	movs	r1, #4
  TxHeaderPitch.IDE = CAN_ID_STD;   // CAN_ID_EXT
 80021ee:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderPitch.DLC = 4;
 80021f2:	6111      	str	r1, [r2, #16]
  TxHeaderPitch.TransmitGlobalTime = 0;
 80021f4:	7513      	strb	r3, [r2, #20]
  TxHeaderYaw.StdId = headerIdYaw;
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <main+0xcc>)
  TxHeaderYaw.DLC = 4;
 80021f8:	6111      	str	r1, [r2, #16]
  TxHeaderAccel.StdId = headerIdAccel;
 80021fa:	2114      	movs	r1, #20
  TxHeaderYaw.ExtId = 0;
 80021fc:	e9c2 0300 	strd	r0, r3, [r2]
  TxHeaderYaw.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002200:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderYaw.TransmitGlobalTime = 0;
 8002204:	7513      	strb	r3, [r2, #20]
  TxHeaderAccel.StdId = headerIdAccel;
 8002206:	4a18      	ldr	r2, [pc, #96]	; (8002268 <main+0xd0>)
  TxHeaderGyro.StdId = headerIdGyro;
 8002208:	2015      	movs	r0, #21
  TxHeaderAccel.ExtId = 0;
 800220a:	e9c2 1300 	strd	r1, r3, [r2]
  TxHeaderAccel.DLC = 6;
 800220e:	2106      	movs	r1, #6
  TxHeaderAccel.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002210:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderAccel.DLC = 6;
 8002214:	6111      	str	r1, [r2, #16]
  TxHeaderAccel.TransmitGlobalTime = 0;
 8002216:	7513      	strb	r3, [r2, #20]
  TxHeaderGyro.StdId = headerIdGyro;
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <main+0xd4>)
  TxHeaderGyro.DLC = 6;
 800221a:	6111      	str	r1, [r2, #16]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800221c:	4914      	ldr	r1, [pc, #80]	; (8002270 <main+0xd8>)
  TxHeaderGyro.ExtId = 0;
 800221e:	e9c2 0300 	strd	r0, r3, [r2]
  TxHeaderGyro.IDE = CAN_ID_STD;   // CAN_ID_EXT
 8002222:	e9c2 3302 	strd	r3, r3, [r2, #8]
  TxHeaderGyro.TransmitGlobalTime = 0;
 8002226:	7513      	strb	r3, [r2, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002228:	610b      	str	r3, [r1, #16]
  sFilterConfig.FilterIdLow = 0;
 800222a:	e9c1 3300 	strd	r3, r3, [r1]
  sFilterConfig.FilterMaskIdLow = 0;
 800222e:	e9c1 3302 	strd	r3, r3, [r1, #8]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002232:	2301      	movs	r3, #1
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8002234:	480f      	ldr	r0, [pc, #60]	; (8002274 <main+0xdc>)
  sFilterConfig.FilterActivation = ENABLE;
 8002236:	e9c1 3307 	strd	r3, r3, [r1, #28]
  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800223a:	f000 faf8 	bl	800282e <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan);
 800223e:	480d      	ldr	r0, [pc, #52]	; (8002274 <main+0xdc>)
 8002240:	f000 fb64 	bl	800290c <HAL_CAN_Start>
  HAL_Delay(500);
 8002244:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002248:	f000 fa64 	bl	8002714 <HAL_Delay>
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800224c:	f001 fe5e 	bl	8003f0c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002250:	f7ff fc14 	bl	8001a7c <MX_FREERTOS_Init>
  osKernelStart();
 8002254:	f001 fe76 	bl	8003f44 <osKernelStart>
  while (1)
 8002258:	e7fe      	b.n	8002258 <main+0xc0>
 800225a:	bf00      	nop
 800225c:	2000033c 	.word	0x2000033c
 8002260:	20000324 	.word	0x20000324
 8002264:	20000354 	.word	0x20000354
 8002268:	200002f4 	.word	0x200002f4
 800226c:	2000030c 	.word	0x2000030c
 8002270:	20000370 	.word	0x20000370
 8002274:	2000024c 	.word	0x2000024c

08002278 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM4) {
 8002278:	6802      	ldr	r2, [r0, #0]
 800227a:	4b03      	ldr	r3, [pc, #12]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800227c:	429a      	cmp	r2, r3
 800227e:	d101      	bne.n	8002284 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002280:	f000 ba36 	b.w	80026f0 <HAL_IncTick>
}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40000800 	.word	0x40000800

0800228c <Error_Handler>:
 800228c:	b672      	cpsid	i
  while (1)
 800228e:	e7fe      	b.n	800228e <Error_Handler+0x2>

08002290 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002290:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002292:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8002296:	480d      	ldr	r0, [pc, #52]	; (80022cc <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800229a:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800229e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80022a2:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022a4:	2220      	movs	r2, #32
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ae:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80022b4:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022b6:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80022ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022bc:	f001 f969 	bl	8003592 <HAL_SPI_Init>
 80022c0:	b118      	cbz	r0, 80022ca <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80022c6:	f7ff bfe1 	b.w	800228c <Error_Handler>
}
 80022ca:	bd08      	pop	{r3, pc}
 80022cc:	20000398 	.word	0x20000398
 80022d0:	40013000 	.word	0x40013000

080022d4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022d4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022d6:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi2.Instance = SPI2;
 80022da:	480d      	ldr	r0, [pc, #52]	; (8002310 <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022dc:	4a0d      	ldr	r2, [pc, #52]	; (8002314 <MX_SPI2_Init+0x40>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80022de:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022e2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022e6:	2300      	movs	r3, #0
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80022e8:	2208      	movs	r2, #8
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80022ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022f2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022f6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022f8:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80022fa:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 80022fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002300:	f001 f947 	bl	8003592 <HAL_SPI_Init>
 8002304:	b118      	cbz	r0, 800230e <MX_SPI2_Init+0x3a>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800230a:	f7ff bfbf 	b.w	800228c <Error_Handler>
}
 800230e:	bd08      	pop	{r3, pc}
 8002310:	200003f0 	.word	0x200003f0
 8002314:	40003800 	.word	0x40003800

08002318 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	2210      	movs	r2, #16
{
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	eb0d 0002 	add.w	r0, sp, r2
 8002324:	2100      	movs	r1, #0
 8002326:	f004 f882 	bl	800642e <memset>
  if(spiHandle->Instance==SPI1)
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <HAL_SPI_MspInit+0xd4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d127      	bne.n	8002382 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <HAL_SPI_MspInit+0xd8>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	21a0      	movs	r1, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002336:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	482e      	ldr	r0, [pc, #184]	; (80023f4 <HAL_SPI_MspInit+0xdc>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800233a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800233e:	619a      	str	r2, [r3, #24]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002346:	9200      	str	r2, [sp, #0]
 8002348:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	f042 0204 	orr.w	r2, r2, #4
 8002350:	619a      	str	r2, [r3, #24]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002362:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002366:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f000 fcf0 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236c:	2040      	movs	r0, #64	; 0x40
 800236e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002372:	e9cd 0304 	strd	r0, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	481f      	ldr	r0, [pc, #124]	; (80023f4 <HAL_SPI_MspInit+0xdc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f000 fce7 	bl	8002d4c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800237e:	b008      	add	sp, #32
 8002380:	bd10      	pop	{r4, pc}
  else if(spiHandle->Instance==SPI2)
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_SPI_MspInit+0xe0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d1fa      	bne.n	800237e <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_SPI_MspInit+0xd8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 800238c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238e:	481b      	ldr	r0, [pc, #108]	; (80023fc <HAL_SPI_MspInit+0xe4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002394:	61da      	str	r2, [r3, #28]
 8002396:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2400      	movs	r4, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 800239a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800239e:	9202      	str	r2, [sp, #8]
 80023a0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a2:	699a      	ldr	r2, [r3, #24]
 80023a4:	f042 0208 	orr.w	r2, r2, #8
 80023a8:	619a      	str	r2, [r3, #24]
 80023aa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	9303      	str	r3, [sp, #12]
 80023b6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	f000 fcc3 	bl	8002d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	a904      	add	r1, sp, #16
 80023cc:	480b      	ldr	r0, [pc, #44]	; (80023fc <HAL_SPI_MspInit+0xe4>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ce:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d4:	f000 fcba 	bl	8002d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80023d8:	4622      	mov	r2, r4
 80023da:	2105      	movs	r1, #5
 80023dc:	2024      	movs	r0, #36	; 0x24
 80023de:	f000 fc2f 	bl	8002c40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80023e2:	2024      	movs	r0, #36	; 0x24
 80023e4:	f000 fc5e 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
}
 80023e8:	e7c9      	b.n	800237e <HAL_SPI_MspInit+0x66>
 80023ea:	bf00      	nop
 80023ec:	40013000 	.word	0x40013000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010800 	.word	0x40010800
 80023f8:	40003800 	.word	0x40003800
 80023fc:	40010c00 	.word	0x40010c00

08002400 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_MspInit+0x48>)
{
 8002402:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002404:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002406:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	619a      	str	r2, [r3, #24]
 800240e:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002410:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002414:	f002 0201 	and.w	r2, r2, #1
 8002418:	9200      	str	r2, [sp, #0]
 800241a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002422:	61da      	str	r2, [r3, #28]
 8002424:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002426:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8002428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002430:	f000 fc06 	bl	8002c40 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002434:	4a05      	ldr	r2, [pc, #20]	; (800244c <HAL_MspInit+0x4c>)
 8002436:	6853      	ldr	r3, [r2, #4]
 8002438:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800243c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	b003      	add	sp, #12
 8002444:	f85d fb04 	ldr.w	pc, [sp], #4
 8002448:	40021000 	.word	0x40021000
 800244c:	40010000 	.word	0x40010000

08002450 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_InitTick+0x88>)
{
 8002452:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002454:	69da      	ldr	r2, [r3, #28]
{
 8002456:	b088      	sub	sp, #32
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002458:	f042 0204 	orr.w	r2, r2, #4
 800245c:	61da      	str	r2, [r3, #28]
 800245e:	69db      	ldr	r3, [r3, #28]
{
 8002460:	4605      	mov	r5, r0
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002462:	f003 0304 	and.w	r3, r3, #4
 8002466:	9302      	str	r3, [sp, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002468:	a901      	add	r1, sp, #4
 800246a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 800246c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800246e:	f000 ffe7 	bl	8003440 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002472:	9b06      	ldr	r3, [sp, #24]
 8002474:	bb4b      	cbnz	r3, 80024ca <HAL_InitTick+0x7a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002476:	f000 ffc3 	bl	8003400 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800247a:	4e18      	ldr	r6, [pc, #96]	; (80024dc <HAL_InitTick+0x8c>)
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_InitTick+0x90>)
 800247e:	6033      	str	r3, [r6, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002480:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002484:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_InitTick+0x94>)
 8002488:	fbb0 f3f3 	udiv	r3, r0, r3
 800248c:	3b01      	subs	r3, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 800248e:	6073      	str	r3, [r6, #4]
  htim4.Init.ClockDivision = 0;
 8002490:	2300      	movs	r3, #0
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim4);
 8002492:	4630      	mov	r0, r6
  htim4.Init.ClockDivision = 0;
 8002494:	6133      	str	r3, [r6, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002496:	60b3      	str	r3, [r6, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002498:	61b3      	str	r3, [r6, #24]
  status = HAL_TIM_Base_Init(&htim4);
 800249a:	f001 fca1 	bl	8003de0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800249e:	4604      	mov	r4, r0
 80024a0:	b980      	cbnz	r0, 80024c4 <HAL_InitTick+0x74>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80024a2:	4630      	mov	r0, r6
 80024a4:	f001 fb94 	bl	8003bd0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80024a8:	4604      	mov	r4, r0
 80024aa:	b958      	cbnz	r0, 80024c4 <HAL_InitTick+0x74>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024ac:	201e      	movs	r0, #30
 80024ae:	f000 fbf9 	bl	8002ca4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b2:	2d0f      	cmp	r5, #15
 80024b4:	d80d      	bhi.n	80024d2 <HAL_InitTick+0x82>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80024b6:	4622      	mov	r2, r4
 80024b8:	4629      	mov	r1, r5
 80024ba:	201e      	movs	r0, #30
 80024bc:	f000 fbc0 	bl	8002c40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_InitTick+0x98>)
 80024c2:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80024c4:	4620      	mov	r0, r4
 80024c6:	b008      	add	sp, #32
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80024ca:	f000 ff99 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 80024ce:	0040      	lsls	r0, r0, #1
 80024d0:	e7d3      	b.n	800247a <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80024d2:	2401      	movs	r4, #1
 80024d4:	e7f6      	b.n	80024c4 <HAL_InitTick+0x74>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	20000448 	.word	0x20000448
 80024e0:	40000800 	.word	0x40000800
 80024e4:	000f4240 	.word	0x000f4240
 80024e8:	2000001c 	.word	0x2000001c

080024ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <NMI_Handler>

080024ee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <HardFault_Handler>

080024f0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler>

080024f2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <BusFault_Handler>

080024f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <UsageFault_Handler>

080024f6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f6:	4770      	bx	lr

080024f8 <USB_HP_CAN1_TX_IRQHandler>:
void USB_HP_CAN1_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024f8:	4801      	ldr	r0, [pc, #4]	; (8002500 <USB_HP_CAN1_TX_IRQHandler+0x8>)
 80024fa:	f000 ba90 	b.w	8002a1e <HAL_CAN_IRQHandler>
 80024fe:	bf00      	nop
 8002500:	2000024c 	.word	0x2000024c

08002504 <USB_LP_CAN1_RX0_IRQHandler>:
 8002504:	f7ff bff8 	b.w	80024f8 <USB_HP_CAN1_TX_IRQHandler>

08002508 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002508:	4801      	ldr	r0, [pc, #4]	; (8002510 <TIM4_IRQHandler+0x8>)
 800250a:	f001 bb8f 	b.w	8003c2c <HAL_TIM_IRQHandler>
 800250e:	bf00      	nop
 8002510:	20000448 	.word	0x20000448

08002514 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002514:	4801      	ldr	r0, [pc, #4]	; (800251c <SPI2_IRQHandler+0x8>)
 8002516:	f001 badb 	b.w	8003ad0 <HAL_SPI_IRQHandler>
 800251a:	bf00      	nop
 800251c:	200003f0 	.word	0x200003f0

08002520 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002520:	2001      	movs	r0, #1
 8002522:	4770      	bx	lr

08002524 <_kill>:

int _kill(int pid, int sig)
{
 8002524:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002526:	f003 fe51 	bl	80061cc <__errno>
 800252a:	2316      	movs	r3, #22
 800252c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800252e:	f04f 30ff 	mov.w	r0, #4294967295
 8002532:	bd08      	pop	{r3, pc}

08002534 <_exit>:

void _exit (int status)
{
 8002534:	b508      	push	{r3, lr}
	errno = EINVAL;
 8002536:	f003 fe49 	bl	80061cc <__errno>
 800253a:	2316      	movs	r3, #22
 800253c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800253e:	e7fe      	b.n	800253e <_exit+0xa>

08002540 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002540:	b570      	push	{r4, r5, r6, lr}
 8002542:	460d      	mov	r5, r1
 8002544:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002546:	460e      	mov	r6, r1
 8002548:	1b73      	subs	r3, r6, r5
 800254a:	429c      	cmp	r4, r3
 800254c:	dc01      	bgt.n	8002552 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800254e:	4620      	mov	r0, r4
 8002550:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002552:	f3af 8000 	nop.w
 8002556:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	e7f5      	b.n	8002548 <_read+0x8>

0800255c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	460d      	mov	r5, r1
 8002560:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002562:	460e      	mov	r6, r1
 8002564:	1b73      	subs	r3, r6, r5
 8002566:	429c      	cmp	r4, r3
 8002568:	dc01      	bgt.n	800256e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800256a:	4620      	mov	r0, r4
 800256c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800256e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002572:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	e7f5      	b.n	8002564 <_write+0x8>

08002578 <_close>:

int _close(int file)
{
	return -1;
}
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	4770      	bx	lr

0800257e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800257e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8002582:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8002584:	604b      	str	r3, [r1, #4]
}
 8002586:	4770      	bx	lr

08002588 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002588:	2001      	movs	r0, #1
 800258a:	4770      	bx	lr

0800258c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800258c:	2000      	movs	r0, #0
 800258e:	4770      	bx	lr

08002590 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002590:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <_sbrk+0x30>)
{
 8002592:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002594:	6811      	ldr	r1, [r2, #0]
{
 8002596:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002598:	b909      	cbnz	r1, 800259e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800259a:	490a      	ldr	r1, [pc, #40]	; (80025c4 <_sbrk+0x34>)
 800259c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259e:	6810      	ldr	r0, [r2, #0]
 80025a0:	4909      	ldr	r1, [pc, #36]	; (80025c8 <_sbrk+0x38>)
 80025a2:	4c0a      	ldr	r4, [pc, #40]	; (80025cc <_sbrk+0x3c>)
 80025a4:	4403      	add	r3, r0
 80025a6:	1b09      	subs	r1, r1, r4
 80025a8:	428b      	cmp	r3, r1
 80025aa:	d906      	bls.n	80025ba <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80025ac:	f003 fe0e 	bl	80061cc <__errno>
 80025b0:	230c      	movs	r3, #12
 80025b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80025b8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80025ba:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80025bc:	e7fc      	b.n	80025b8 <_sbrk+0x28>
 80025be:	bf00      	nop
 80025c0:	20000490 	.word	0x20000490
 80025c4:	20001ef0 	.word	0x20001ef0
 80025c8:	20005000 	.word	0x20005000
 80025cc:	00000400 	.word	0x00000400

080025d0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d0:	4770      	bx	lr
	...

080025d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025d4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80025d6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80025da:	480a      	ldr	r0, [pc, #40]	; (8002604 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <MX_USART2_UART_Init+0x34>)
 80025de:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025e2:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025e4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ee:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025f2:	f001 fc5d 	bl	8003eb0 <HAL_UART_Init>
 80025f6:	b118      	cbz	r0, 8002600 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80025fc:	f7ff be46 	b.w	800228c <Error_Handler>
}
 8002600:	bd08      	pop	{r3, pc}
 8002602:	bf00      	nop
 8002604:	20000494 	.word	0x20000494
 8002608:	40004400 	.word	0x40004400

0800260c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800260c:	b510      	push	{r4, lr}
 800260e:	4604      	mov	r4, r0
 8002610:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002612:	2210      	movs	r2, #16
 8002614:	2100      	movs	r1, #0
 8002616:	a802      	add	r0, sp, #8
 8002618:	f003 ff09 	bl	800642e <memset>
  if(uartHandle->Instance==USART2)
 800261c:	6822      	ldr	r2, [r4, #0]
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_UART_MspInit+0x6c>)
 8002620:	429a      	cmp	r2, r3
 8002622:	d126      	bne.n	8002672 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002624:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002628:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262a:	4814      	ldr	r0, [pc, #80]	; (800267c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800262c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002630:	61da      	str	r2, [r3, #28]
 8002632:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8002636:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800263a:	9200      	str	r2, [sp, #0]
 800263c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	699a      	ldr	r2, [r3, #24]
 8002640:	f042 0204 	orr.w	r2, r2, #4
 8002644:	619a      	str	r2, [r3, #24]
 8002646:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265c:	f000 fb76 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002660:	2108      	movs	r1, #8
 8002662:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002664:	4805      	ldr	r0, [pc, #20]	; (800267c <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002666:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	f000 fb6d 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002672:	b006      	add	sp, #24
 8002674:	bd10      	pop	{r4, pc}
 8002676:	bf00      	nop
 8002678:	40004400 	.word	0x40004400
 800267c:	40010800 	.word	0x40010800

08002680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002680:	480c      	ldr	r0, [pc, #48]	; (80026b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002682:	490d      	ldr	r1, [pc, #52]	; (80026b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002688:	e002      	b.n	8002690 <LoopCopyDataInit>

0800268a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800268a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800268c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800268e:	3304      	adds	r3, #4

08002690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002694:	d3f9      	bcc.n	800268a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002698:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800269a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800269c:	e001      	b.n	80026a2 <LoopFillZerobss>

0800269e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800269e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a0:	3204      	adds	r2, #4

080026a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026a4:	d3fb      	bcc.n	800269e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026a6:	f7ff ff93 	bl	80025d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026aa:	f003 fe8b 	bl	80063c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ae:	f7ff fd73 	bl	8002198 <main>
  bx lr
 80026b2:	4770      	bx	lr
  ldr r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026b8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80026bc:	080091ec 	.word	0x080091ec
  ldr r2, =_sbss
 80026c0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80026c4:	20001ef0 	.word	0x20001ef0

080026c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026c8:	e7fe      	b.n	80026c8 <ADC1_2_IRQHandler>
	...

080026cc <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_Init+0x20>)
{
 80026ce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d0:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026d4:	f043 0310 	orr.w	r3, r3, #16
 80026d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026da:	f000 fa9f 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026de:	200f      	movs	r0, #15
 80026e0:	f7ff feb6 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026e4:	f7ff fe8c 	bl	8002400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80026e8:	2000      	movs	r0, #0
 80026ea:	bd08      	pop	{r3, pc}
 80026ec:	40022000 	.word	0x40022000

080026f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80026f0:	4a03      	ldr	r2, [pc, #12]	; (8002700 <HAL_IncTick+0x10>)
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <HAL_IncTick+0x14>)
 80026f4:	6811      	ldr	r1, [r2, #0]
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	440b      	add	r3, r1
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	200004d8 	.word	0x200004d8
 8002704:	20000018 	.word	0x20000018

08002708 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002708:	4b01      	ldr	r3, [pc, #4]	; (8002710 <HAL_GetTick+0x8>)
 800270a:	6818      	ldr	r0, [r3, #0]
}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	200004d8 	.word	0x200004d8

08002714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002714:	b538      	push	{r3, r4, r5, lr}
 8002716:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002718:	f7ff fff6 	bl	8002708 <HAL_GetTick>
 800271c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800271e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002720:	bf1e      	ittt	ne
 8002722:	4b04      	ldrne	r3, [pc, #16]	; (8002734 <HAL_Delay+0x20>)
 8002724:	781b      	ldrbne	r3, [r3, #0]
 8002726:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002728:	f7ff ffee 	bl	8002708 <HAL_GetTick>
 800272c:	1b43      	subs	r3, r0, r5
 800272e:	42a3      	cmp	r3, r4
 8002730:	d3fa      	bcc.n	8002728 <HAL_Delay+0x14>
  {
  }
}
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	20000018 	.word	0x20000018

08002738 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002738:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800273a:	4604      	mov	r4, r0
 800273c:	2800      	cmp	r0, #0
 800273e:	d06e      	beq.n	800281e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002740:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002744:	b90b      	cbnz	r3, 800274a <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002746:	f7ff f8b3 	bl	80018b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	6813      	ldr	r3, [r2, #0]
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002754:	f7ff ffd8 	bl	8002708 <HAL_GetTick>
 8002758:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800275a:	6823      	ldr	r3, [r4, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	07d1      	lsls	r1, r2, #31
 8002760:	d551      	bpl.n	8002806 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	f022 0202 	bic.w	r2, r2, #2
 8002768:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800276a:	f7ff ffcd 	bl	8002708 <HAL_GetTick>
 800276e:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	0792      	lsls	r2, r2, #30
 8002776:	d454      	bmi.n	8002822 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002778:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800277a:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800277c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	bf0c      	ite	eq
 8002782:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002786:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800278a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800278c:	7e62      	ldrb	r2, [r4, #25]
 800278e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	bf0c      	ite	eq
 8002794:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002798:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800279c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800279e:	7ea2      	ldrb	r2, [r4, #26]
 80027a0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	bf0c      	ite	eq
 80027a6:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027aa:	f022 0220 	bicne.w	r2, r2, #32
 80027ae:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027b0:	7ee2      	ldrb	r2, [r4, #27]
 80027b2:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	bf0c      	ite	eq
 80027b8:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027bc:	f042 0210 	orrne.w	r2, r2, #16
 80027c0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027c2:	7f22      	ldrb	r2, [r4, #28]
 80027c4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	bf0c      	ite	eq
 80027ca:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027ce:	f022 0208 	bicne.w	r2, r2, #8
 80027d2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027d4:	7f62      	ldrb	r2, [r4, #29]
 80027d6:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	bf0c      	ite	eq
 80027dc:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027e0:	f022 0204 	bicne.w	r2, r2, #4
 80027e4:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027e6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	6921      	ldr	r1, [r4, #16]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	6961      	ldr	r1, [r4, #20]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	6861      	ldr	r1, [r4, #4]
 80027f6:	3901      	subs	r1, #1
 80027f8:	430a      	orrs	r2, r1
 80027fa:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027fc:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027fe:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002800:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8002804:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002806:	f7ff ff7f 	bl	8002708 <HAL_GetTick>
 800280a:	1b40      	subs	r0, r0, r5
 800280c:	280a      	cmp	r0, #10
 800280e:	d9a4      	bls.n	800275a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002812:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002816:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002818:	2305      	movs	r3, #5
 800281a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800281e:	2001      	movs	r0, #1
 8002820:	e7f0      	b.n	8002804 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002822:	f7ff ff71 	bl	8002708 <HAL_GetTick>
 8002826:	1b40      	subs	r0, r0, r5
 8002828:	280a      	cmp	r0, #10
 800282a:	d9a1      	bls.n	8002770 <HAL_CAN_Init+0x38>
 800282c:	e7f0      	b.n	8002810 <HAL_CAN_Init+0xd8>

0800282e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800282e:	b570      	push	{r4, r5, r6, lr}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002830:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002834:	3b01      	subs	r3, #1
 8002836:	2b01      	cmp	r3, #1
 8002838:	d862      	bhi.n	8002900 <HAL_CAN_ConfigFilter+0xd2>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800283a:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 800283c:	6803      	ldr	r3, [r0, #0]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800283e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800284a:	694a      	ldr	r2, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800284c:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002850:	f002 001f 	and.w	r0, r2, #31
 8002854:	fa04 f000 	lsl.w	r0, r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002858:	ea25 0500 	bic.w	r5, r5, r0
 800285c:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002860:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002862:	43c4      	mvns	r4, r0
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002864:	bb85      	cbnz	r5, 80028c8 <HAL_CAN_ConfigFilter+0x9a>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002866:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800286a:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800286c:	4025      	ands	r5, r4
 800286e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002872:	888d      	ldrh	r5, [r1, #4]
 8002874:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002878:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800287c:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002880:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002882:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002884:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002888:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800288c:	698a      	ldr	r2, [r1, #24]
 800288e:	bb6a      	cbnz	r2, 80028ec <HAL_CAN_ConfigFilter+0xbe>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002890:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002894:	4022      	ands	r2, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002896:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800289a:	690a      	ldr	r2, [r1, #16]
 800289c:	bb52      	cbnz	r2, 80028f4 <HAL_CAN_ConfigFilter+0xc6>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800289e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028a2:	4014      	ands	r4, r2
 80028a4:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028a8:	6a0a      	ldr	r2, [r1, #32]
 80028aa:	2a01      	cmp	r2, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028ac:	bf02      	ittt	eq
 80028ae:	f8d3 221c 	ldreq.w	r2, [r3, #540]	; 0x21c
 80028b2:	4310      	orreq	r0, r2
 80028b4:	f8c3 021c 	streq.w	r0, [r3, #540]	; 0x21c

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 80028b8:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80028c6:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028c8:	2d01      	cmp	r5, #1
 80028ca:	d1df      	bne.n	800288c <HAL_CAN_ConfigFilter+0x5e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028cc:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028d0:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028d2:	4305      	orrs	r5, r0
 80028d4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028d8:	888d      	ldrh	r5, [r1, #4]
 80028da:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028de:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028e2:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028e6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80028e8:	898d      	ldrh	r5, [r1, #12]
 80028ea:	e7cb      	b.n	8002884 <HAL_CAN_ConfigFilter+0x56>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028f0:	4302      	orrs	r2, r0
 80028f2:	e7d0      	b.n	8002896 <HAL_CAN_ConfigFilter+0x68>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028f8:	4302      	orrs	r2, r0
 80028fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028fe:	e7d3      	b.n	80028a8 <HAL_CAN_ConfigFilter+0x7a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002900:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002906:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002908:	2001      	movs	r0, #1
 800290a:	e7dc      	b.n	80028c6 <HAL_CAN_ConfigFilter+0x98>

0800290c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800290c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800290e:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8002912:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8002914:	2b01      	cmp	r3, #1
 8002916:	b2dd      	uxtb	r5, r3
 8002918:	d120      	bne.n	800295c <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800291a:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800291c:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 800291e:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002922:	6813      	ldr	r3, [r2, #0]
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800292a:	f7ff feed 	bl	8002708 <HAL_GetTick>
 800292e:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f013 0301 	ands.w	r3, r3, #1
 8002938:	d102      	bne.n	8002940 <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 800293a:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800293c:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 800293e:	e00b      	b.n	8002958 <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002940:	f7ff fee2 	bl	8002708 <HAL_GetTick>
 8002944:	1b80      	subs	r0, r0, r6
 8002946:	280a      	cmp	r0, #10
 8002948:	d9f2      	bls.n	8002930 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800294a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800294c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002950:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8002952:	2305      	movs	r3, #5
 8002954:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 8002958:	4628      	mov	r0, r5
 800295a:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800295c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800295e:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002964:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002966:	e7f7      	b.n	8002958 <HAL_CAN_Start+0x4c>

08002968 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002968:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800296a:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800296e:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002970:	3d01      	subs	r5, #1
 8002972:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002974:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8002976:	d841      	bhi.n	80029fc <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002978:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 800297c:	d03a      	beq.n	80029f4 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800297e:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002982:	2c03      	cmp	r4, #3
 8002984:	f04f 0501 	mov.w	r5, #1
 8002988:	d105      	bne.n	8002996 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800298a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800298c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002990:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002992:	2001      	movs	r0, #1
 8002994:	e028      	b.n	80029e8 <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002996:	40a5      	lsls	r5, r4
 8002998:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800299a:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 800299e:	f104 0318 	add.w	r3, r4, #24
 80029a2:	bb10      	cbnz	r0, 80029ea <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029a4:	6808      	ldr	r0, [r1, #0]
 80029a6:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029ae:	0120      	lsls	r0, r4, #4
 80029b0:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029b4:	4406      	add	r6, r0
      return HAL_OK;
 80029b6:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029b8:	690d      	ldr	r5, [r1, #16]
 80029ba:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029be:	7d09      	ldrb	r1, [r1, #20]
 80029c0:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029c2:	bf02      	ittt	eq
 80029c4:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 80029c8:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 80029cc:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029d0:	6851      	ldr	r1, [r2, #4]
 80029d2:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029dc:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80029e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ea:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 80029ec:	4338      	orrs	r0, r7
 80029ee:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 80029f2:	e7da      	b.n	80029aa <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029fa:	e7c9      	b.n	8002990 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80029fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a02:	e7c5      	b.n	8002990 <HAL_CAN_AddTxMessage+0x28>

08002a04 <HAL_CAN_TxMailbox0CompleteCallback>:
 8002a04:	4770      	bx	lr

08002a06 <HAL_CAN_TxMailbox1CompleteCallback>:
 8002a06:	4770      	bx	lr

08002a08 <HAL_CAN_TxMailbox2CompleteCallback>:
 8002a08:	4770      	bx	lr

08002a0a <HAL_CAN_TxMailbox0AbortCallback>:
 8002a0a:	4770      	bx	lr

08002a0c <HAL_CAN_TxMailbox1AbortCallback>:
 8002a0c:	4770      	bx	lr

08002a0e <HAL_CAN_TxMailbox2AbortCallback>:
 8002a0e:	4770      	bx	lr

08002a10 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8002a10:	4770      	bx	lr

08002a12 <HAL_CAN_RxFifo0FullCallback>:
 8002a12:	4770      	bx	lr

08002a14 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002a14:	4770      	bx	lr

08002a16 <HAL_CAN_RxFifo1FullCallback>:
 8002a16:	4770      	bx	lr

08002a18 <HAL_CAN_SleepCallback>:
 8002a18:	4770      	bx	lr

08002a1a <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002a1a:	4770      	bx	lr

08002a1c <HAL_CAN_ErrorCallback>:
 8002a1c:	4770      	bx	lr

08002a1e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a1e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a22:	6803      	ldr	r3, [r0, #0]
{
 8002a24:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a26:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a28:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a2c:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a30:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a32:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a36:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a3a:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002a3e:	d022      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x68>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a40:	f017 0401 	ands.w	r4, r7, #1
 8002a44:	d007      	beq.n	8002a56 <HAL_CAN_IRQHandler+0x38>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a46:	2201      	movs	r2, #1

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a48:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a4a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a4c:	f140 80a5 	bpl.w	8002b9a <HAL_CAN_IRQHandler+0x17c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a50:	f7ff ffd8 	bl	8002a04 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a54:	2400      	movs	r4, #0
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a56:	05fb      	lsls	r3, r7, #23
 8002a58:	d509      	bpl.n	8002a6e <HAL_CAN_IRQHandler+0x50>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5e:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a60:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a62:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a64:	f140 80a7 	bpl.w	8002bb6 <HAL_CAN_IRQHandler+0x198>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f7ff ffcc 	bl	8002a06 <HAL_CAN_TxMailbox1CompleteCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a6e:	03fb      	lsls	r3, r7, #15
 8002a70:	d509      	bpl.n	8002a86 <HAL_CAN_IRQHandler+0x68>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a76:	682b      	ldr	r3, [r5, #0]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a78:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a7a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a7c:	f140 80a9 	bpl.w	8002bd2 <HAL_CAN_IRQHandler+0x1b4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a80:	4628      	mov	r0, r5
 8002a82:	f7ff ffc1 	bl	8002a08 <HAL_CAN_TxMailbox2CompleteCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a86:	0733      	lsls	r3, r6, #28
 8002a88:	d507      	bpl.n	8002a9a <HAL_CAN_IRQHandler+0x7c>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a8a:	f01b 0f10 	tst.w	fp, #16
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a8e:	bf1f      	itttt	ne
 8002a90:	2210      	movne	r2, #16
 8002a92:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a94:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a98:	60da      	strne	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a9a:	0777      	lsls	r7, r6, #29
 8002a9c:	d508      	bpl.n	8002ab0 <HAL_CAN_IRQHandler+0x92>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a9e:	f01b 0f08 	tst.w	fp, #8
 8002aa2:	d005      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x92>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002aa4:	2208      	movs	r2, #8
 8002aa6:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002aa8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002aaa:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002aac:	f7ff ffb1 	bl	8002a12 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ab0:	07b0      	lsls	r0, r6, #30
 8002ab2:	d506      	bpl.n	8002ac2 <HAL_CAN_IRQHandler+0xa4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ab4:	682b      	ldr	r3, [r5, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	0799      	lsls	r1, r3, #30
 8002aba:	d002      	beq.n	8002ac2 <HAL_CAN_IRQHandler+0xa4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002abc:	4628      	mov	r0, r5
 8002abe:	f7ff ffa7 	bl	8002a10 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ac2:	0672      	lsls	r2, r6, #25
 8002ac4:	d507      	bpl.n	8002ad6 <HAL_CAN_IRQHandler+0xb8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ac6:	f01a 0f10 	tst.w	sl, #16
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002aca:	bf1f      	itttt	ne
 8002acc:	2210      	movne	r2, #16
 8002ace:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ad0:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ad4:	611a      	strne	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ad6:	06b3      	lsls	r3, r6, #26
 8002ad8:	d508      	bpl.n	8002aec <HAL_CAN_IRQHandler+0xce>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ada:	f01a 0f08 	tst.w	sl, #8
 8002ade:	d005      	beq.n	8002aec <HAL_CAN_IRQHandler+0xce>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ae4:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ae6:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ae8:	f7ff ff95 	bl	8002a16 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002aec:	06f7      	lsls	r7, r6, #27
 8002aee:	d506      	bpl.n	8002afe <HAL_CAN_IRQHandler+0xe0>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002af0:	682b      	ldr	r3, [r5, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	0798      	lsls	r0, r3, #30
 8002af6:	d002      	beq.n	8002afe <HAL_CAN_IRQHandler+0xe0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002af8:	4628      	mov	r0, r5
 8002afa:	f7ff ff8b 	bl	8002a14 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002afe:	03b1      	lsls	r1, r6, #14
 8002b00:	d508      	bpl.n	8002b14 <HAL_CAN_IRQHandler+0xf6>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b02:	f019 0f10 	tst.w	r9, #16
 8002b06:	d005      	beq.n	8002b14 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b08:	2210      	movs	r2, #16
 8002b0a:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b0c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b0e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8002b10:	f7ff ff82 	bl	8002a18 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b14:	03f2      	lsls	r2, r6, #15
 8002b16:	d508      	bpl.n	8002b2a <HAL_CAN_IRQHandler+0x10c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b18:	f019 0f08 	tst.w	r9, #8
 8002b1c:	d005      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x10c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b1e:	2208      	movs	r2, #8
 8002b20:	682b      	ldr	r3, [r5, #0]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b22:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b24:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b26:	f7ff ff78 	bl	8002a1a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b2a:	0433      	lsls	r3, r6, #16
 8002b2c:	d52c      	bpl.n	8002b88 <HAL_CAN_IRQHandler+0x16a>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b2e:	f019 0f04 	tst.w	r9, #4
 8002b32:	682a      	ldr	r2, [r5, #0]
 8002b34:	d026      	beq.n	8002b84 <HAL_CAN_IRQHandler+0x166>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b36:	05f7      	lsls	r7, r6, #23
 8002b38:	d504      	bpl.n	8002b44 <HAL_CAN_IRQHandler+0x126>
 8002b3a:	f018 0f01 	tst.w	r8, #1
          ((esrflags & CAN_ESR_EWGF) != 0U))
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b3e:	bf18      	it	ne
 8002b40:	f044 0401 	orrne.w	r4, r4, #1

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b44:	05b0      	lsls	r0, r6, #22
 8002b46:	d504      	bpl.n	8002b52 <HAL_CAN_IRQHandler+0x134>
 8002b48:	f018 0f02 	tst.w	r8, #2
          ((esrflags & CAN_ESR_EPVF) != 0U))
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b4c:	bf18      	it	ne
 8002b4e:	f044 0402 	orrne.w	r4, r4, #2

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b52:	0571      	lsls	r1, r6, #21
 8002b54:	d504      	bpl.n	8002b60 <HAL_CAN_IRQHandler+0x142>
 8002b56:	f018 0f04 	tst.w	r8, #4
          ((esrflags & CAN_ESR_BOFF) != 0U))
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b5a:	bf18      	it	ne
 8002b5c:	f044 0404 	orrne.w	r4, r4, #4

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b60:	0533      	lsls	r3, r6, #20
 8002b62:	d50f      	bpl.n	8002b84 <HAL_CAN_IRQHandler+0x166>
 8002b64:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8002b68:	d00c      	beq.n	8002b84 <HAL_CAN_IRQHandler+0x166>
          ((esrflags & CAN_ESR_LEC) != 0U))
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d04f      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x1f0>
 8002b6e:	d83e      	bhi.n	8002bee <HAL_CAN_IRQHandler+0x1d0>
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d046      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x1e4>
 8002b74:	2b30      	cmp	r3, #48	; 0x30
 8002b76:	d047      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x1ea>
 8002b78:	2b10      	cmp	r3, #16
 8002b7a:	d03f      	beq.n	8002bfc <HAL_CAN_IRQHandler+0x1de>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b7c:	6993      	ldr	r3, [r2, #24]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b82:	6193      	str	r3, [r2, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b84:	2304      	movs	r3, #4
 8002b86:	6053      	str	r3, [r2, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b88:	b12c      	cbz	r4, 8002b96 <HAL_CAN_IRQHandler+0x178>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b8c:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8002b8e:	431c      	orrs	r4, r3
 8002b90:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8002b92:	f7ff ff43 	bl	8002a1c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b9a:	077a      	lsls	r2, r7, #29
 8002b9c:	d405      	bmi.n	8002baa <HAL_CAN_IRQHandler+0x18c>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b9e:	f017 0408 	ands.w	r4, r7, #8
 8002ba2:	d105      	bne.n	8002bb0 <HAL_CAN_IRQHandler+0x192>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002ba4:	f7ff ff31 	bl	8002a0a <HAL_CAN_TxMailbox0AbortCallback>
 8002ba8:	e755      	b.n	8002a56 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002baa:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8002bae:	e752      	b.n	8002a56 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002bb0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002bb4:	e74f      	b.n	8002a56 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bb6:	0579      	lsls	r1, r7, #21
 8002bb8:	d502      	bpl.n	8002bc0 <HAL_CAN_IRQHandler+0x1a2>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bba:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8002bbe:	e756      	b.n	8002a6e <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bc0:	053a      	lsls	r2, r7, #20
 8002bc2:	d502      	bpl.n	8002bca <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bc4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002bc8:	e751      	b.n	8002a6e <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f7ff ff1e 	bl	8002a0c <HAL_CAN_TxMailbox1AbortCallback>
 8002bd0:	e74d      	b.n	8002a6e <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002bd2:	0379      	lsls	r1, r7, #13
 8002bd4:	d502      	bpl.n	8002bdc <HAL_CAN_IRQHandler+0x1be>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bd6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002bda:	e754      	b.n	8002a86 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bdc:	033a      	lsls	r2, r7, #12
 8002bde:	d502      	bpl.n	8002be6 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002be0:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8002be4:	e74f      	b.n	8002a86 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002be6:	4628      	mov	r0, r5
 8002be8:	f7ff ff11 	bl	8002a0e <HAL_CAN_TxMailbox2AbortCallback>
 8002bec:	e74b      	b.n	8002a86 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8002bee:	2b50      	cmp	r3, #80	; 0x50
 8002bf0:	d010      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x1f6>
 8002bf2:	2b60      	cmp	r3, #96	; 0x60
 8002bf4:	d1c2      	bne.n	8002b7c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bf6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8002bfa:	e7bf      	b.n	8002b7c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bfc:	f044 0408 	orr.w	r4, r4, #8
            break;
 8002c00:	e7bc      	b.n	8002b7c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c02:	f044 0410 	orr.w	r4, r4, #16
            break;
 8002c06:	e7b9      	b.n	8002b7c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c08:	f044 0420 	orr.w	r4, r4, #32
            break;
 8002c0c:	e7b6      	b.n	8002b7c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c0e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8002c12:	e7b3      	b.n	8002b7c <HAL_CAN_IRQHandler+0x15e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c14:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8002c18:	e7b0      	b.n	8002b7c <HAL_CAN_IRQHandler+0x15e>
	...

08002c1c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c1c:	4907      	ldr	r1, [pc, #28]	; (8002c3c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c1e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c20:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c2a:	0412      	lsls	r2, r2, #16
 8002c2c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002c38:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c42:	b530      	push	{r4, r5, lr}
 8002c44:	68dc      	ldr	r4, [r3, #12]
 8002c46:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	bf28      	it	cs
 8002c54:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c56:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c58:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5c:	bf98      	it	ls
 8002c5e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c64:	bf88      	it	hi
 8002c66:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	ea21 0303 	bic.w	r3, r1, r3
 8002c6c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c6e:	fa05 f404 	lsl.w	r4, r5, r4
 8002c72:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002c76:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c78:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	bfac      	ite	ge
 8002c7e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c82:	4a07      	ldrlt	r2, [pc, #28]	; (8002ca0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c84:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	bfab      	itete	ge
 8002c8c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c90:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c98:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c9a:	bd30      	pop	{r4, r5, pc}
 8002c9c:	e000ed00 	.word	0xe000ed00
 8002ca0:	e000ed14 	.word	0xe000ed14

08002ca4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	db08      	blt.n	8002cba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ca8:	2301      	movs	r3, #1
 8002caa:	0942      	lsrs	r2, r0, #5
 8002cac:	f000 001f 	and.w	r0, r0, #31
 8002cb0:	fa03 f000 	lsl.w	r0, r3, r0
 8002cb4:	4b01      	ldr	r3, [pc, #4]	; (8002cbc <HAL_NVIC_EnableIRQ+0x18>)
 8002cb6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002cba:	4770      	bx	lr
 8002cbc:	e000e100 	.word	0xe000e100

08002cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cc0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cc2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d003      	beq.n	8002cd2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cca:	2304      	movs	r3, #4
 8002ccc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cce:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002cd0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd2:	6803      	ldr	r3, [r0, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	f022 020e 	bic.w	r2, r2, #14
 8002cda:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002ce4:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <HAL_DMA_Abort_IT+0x84>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01c      	beq.n	8002d24 <HAL_DMA_Abort_IT+0x64>
 8002cea:	3214      	adds	r2, #20
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d01b      	beq.n	8002d28 <HAL_DMA_Abort_IT+0x68>
 8002cf0:	3214      	adds	r2, #20
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01a      	beq.n	8002d2c <HAL_DMA_Abort_IT+0x6c>
 8002cf6:	3214      	adds	r2, #20
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d01a      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x72>
 8002cfc:	3214      	adds	r2, #20
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01a      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x78>
 8002d02:	3214      	adds	r2, #20
 8002d04:	4293      	cmp	r3, r2
 8002d06:	bf0c      	ite	eq
 8002d08:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002d0c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002d10:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <HAL_DMA_Abort_IT+0x88>)
 8002d12:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d18:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002d1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d1c:	b17b      	cbz	r3, 8002d3e <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8002d1e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2000      	movs	r0, #0
 8002d22:	e7d5      	b.n	8002cd0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d24:	2301      	movs	r3, #1
 8002d26:	e7f3      	b.n	8002d10 <HAL_DMA_Abort_IT+0x50>
 8002d28:	2310      	movs	r3, #16
 8002d2a:	e7f1      	b.n	8002d10 <HAL_DMA_Abort_IT+0x50>
 8002d2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d30:	e7ee      	b.n	8002d10 <HAL_DMA_Abort_IT+0x50>
 8002d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d36:	e7eb      	b.n	8002d10 <HAL_DMA_Abort_IT+0x50>
 8002d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d3c:	e7e8      	b.n	8002d10 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	4618      	mov	r0, r3
 8002d40:	e7c6      	b.n	8002cd0 <HAL_DMA_Abort_IT+0x10>
 8002d42:	bf00      	nop
 8002d44:	40020008 	.word	0x40020008
 8002d48:	40020000 	.word	0x40020000

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d50:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002d52:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d54:	4f64      	ldr	r7, [pc, #400]	; (8002ee8 <HAL_GPIO_Init+0x19c>)
 8002d56:	4b65      	ldr	r3, [pc, #404]	; (8002eec <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8002d58:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002ef0 <HAL_GPIO_Init+0x1a4>
 8002d5c:	f8df e194 	ldr.w	lr, [pc, #404]	; 8002ef4 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d60:	680d      	ldr	r5, [r1, #0]
 8002d62:	fa35 f406 	lsrs.w	r4, r5, r6
 8002d66:	d102      	bne.n	8002d6e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8002d68:	b003      	add	sp, #12
 8002d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002d6e:	f04f 0801 	mov.w	r8, #1
 8002d72:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d76:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002d7a:	ea38 0505 	bics.w	r5, r8, r5
 8002d7e:	d17b      	bne.n	8002e78 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8002d80:	684d      	ldr	r5, [r1, #4]
 8002d82:	2d03      	cmp	r5, #3
 8002d84:	d807      	bhi.n	8002d96 <HAL_GPIO_Init+0x4a>
 8002d86:	3d01      	subs	r5, #1
 8002d88:	2d02      	cmp	r5, #2
 8002d8a:	f200 8088 	bhi.w	8002e9e <HAL_GPIO_Init+0x152>
 8002d8e:	e8df f005 	tbb	[pc, r5]
 8002d92:	9b96      	.short	0x9b96
 8002d94:	a1          	.byte	0xa1
 8002d95:	00          	.byte	0x00
 8002d96:	2d12      	cmp	r5, #18
 8002d98:	f000 8099 	beq.w	8002ece <HAL_GPIO_Init+0x182>
 8002d9c:	d86e      	bhi.n	8002e7c <HAL_GPIO_Init+0x130>
 8002d9e:	2d11      	cmp	r5, #17
 8002da0:	f000 808f 	beq.w	8002ec2 <HAL_GPIO_Init+0x176>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002da4:	2cff      	cmp	r4, #255	; 0xff
 8002da6:	bf98      	it	ls
 8002da8:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002daa:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dae:	bf88      	it	hi
 8002db0:	f100 0a04 	addhi.w	sl, r0, #4
 8002db4:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002db8:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dbc:	bf88      	it	hi
 8002dbe:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dc0:	fa09 fb05 	lsl.w	fp, r9, r5
 8002dc4:	ea28 080b 	bic.w	r8, r8, fp
 8002dc8:	fa02 f505 	lsl.w	r5, r2, r5
 8002dcc:	ea48 0505 	orr.w	r5, r8, r5
 8002dd0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002dd8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002ddc:	d04c      	beq.n	8002e78 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dde:	69bd      	ldr	r5, [r7, #24]
 8002de0:	f026 0803 	bic.w	r8, r6, #3
 8002de4:	f045 0501 	orr.w	r5, r5, #1
 8002de8:	61bd      	str	r5, [r7, #24]
 8002dea:	69bd      	ldr	r5, [r7, #24]
 8002dec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002df0:	f005 0501 	and.w	r5, r5, #1
 8002df4:	9501      	str	r5, [sp, #4]
 8002df6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dfa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dfe:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e00:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002e04:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e08:	fa09 f90b 	lsl.w	r9, r9, fp
 8002e0c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e10:	4d39      	ldr	r5, [pc, #228]	; (8002ef8 <HAL_GPIO_Init+0x1ac>)
 8002e12:	42a8      	cmp	r0, r5
 8002e14:	d062      	beq.n	8002edc <HAL_GPIO_Init+0x190>
 8002e16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e1a:	42a8      	cmp	r0, r5
 8002e1c:	d060      	beq.n	8002ee0 <HAL_GPIO_Init+0x194>
 8002e1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e22:	42a8      	cmp	r0, r5
 8002e24:	d05e      	beq.n	8002ee4 <HAL_GPIO_Init+0x198>
 8002e26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e2a:	42a8      	cmp	r0, r5
 8002e2c:	bf0c      	ite	eq
 8002e2e:	2503      	moveq	r5, #3
 8002e30:	2504      	movne	r5, #4
 8002e32:	fa05 f50b 	lsl.w	r5, r5, fp
 8002e36:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002e3a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002e3e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e40:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002e44:	bf14      	ite	ne
 8002e46:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e48:	43a5      	biceq	r5, r4
 8002e4a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002e4c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e4e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002e52:	bf14      	ite	ne
 8002e54:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e56:	43a5      	biceq	r5, r4
 8002e58:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e5a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e60:	bf14      	ite	ne
 8002e62:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e64:	43a5      	biceq	r5, r4
 8002e66:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e68:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e6a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e6e:	bf14      	ite	ne
 8002e70:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e72:	ea25 0404 	biceq.w	r4, r5, r4
 8002e76:	60dc      	str	r4, [r3, #12]
	position++;
 8002e78:	3601      	adds	r6, #1
 8002e7a:	e771      	b.n	8002d60 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002e7c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8002efc <HAL_GPIO_Init+0x1b0>
 8002e80:	454d      	cmp	r5, r9
 8002e82:	d00c      	beq.n	8002e9e <HAL_GPIO_Init+0x152>
 8002e84:	d817      	bhi.n	8002eb6 <HAL_GPIO_Init+0x16a>
 8002e86:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002e8a:	454d      	cmp	r5, r9
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_Init+0x152>
 8002e8e:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002e92:	454d      	cmp	r5, r9
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x152>
 8002e96:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002e9a:	454d      	cmp	r5, r9
 8002e9c:	d182      	bne.n	8002da4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e9e:	688a      	ldr	r2, [r1, #8]
 8002ea0:	b1d2      	cbz	r2, 8002ed8 <HAL_GPIO_Init+0x18c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ea2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002ea4:	bf08      	it	eq
 8002ea6:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002eaa:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002eae:	bf18      	it	ne
 8002eb0:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002eb4:	e776      	b.n	8002da4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002eb6:	4565      	cmp	r5, ip
 8002eb8:	d0f1      	beq.n	8002e9e <HAL_GPIO_Init+0x152>
 8002eba:	4575      	cmp	r5, lr
 8002ebc:	e7ee      	b.n	8002e9c <HAL_GPIO_Init+0x150>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ebe:	68ca      	ldr	r2, [r1, #12]
          break;
 8002ec0:	e770      	b.n	8002da4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ec2:	68ca      	ldr	r2, [r1, #12]
 8002ec4:	3204      	adds	r2, #4
          break;
 8002ec6:	e76d      	b.n	8002da4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ec8:	68ca      	ldr	r2, [r1, #12]
 8002eca:	3208      	adds	r2, #8
          break;
 8002ecc:	e76a      	b.n	8002da4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ece:	68ca      	ldr	r2, [r1, #12]
 8002ed0:	320c      	adds	r2, #12
          break;
 8002ed2:	e767      	b.n	8002da4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	e765      	b.n	8002da4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ed8:	2204      	movs	r2, #4
 8002eda:	e763      	b.n	8002da4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002edc:	2500      	movs	r5, #0
 8002ede:	e7a8      	b.n	8002e32 <HAL_GPIO_Init+0xe6>
 8002ee0:	2501      	movs	r5, #1
 8002ee2:	e7a6      	b.n	8002e32 <HAL_GPIO_Init+0xe6>
 8002ee4:	2502      	movs	r5, #2
 8002ee6:	e7a4      	b.n	8002e32 <HAL_GPIO_Init+0xe6>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40010400 	.word	0x40010400
 8002ef0:	10310000 	.word	0x10310000
 8002ef4:	10320000 	.word	0x10320000
 8002ef8:	40010800 	.word	0x40010800
 8002efc:	10220000 	.word	0x10220000

08002f00 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f00:	b10a      	cbz	r2, 8002f06 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f02:	6101      	str	r1, [r0, #16]
  }
}
 8002f04:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f06:	0409      	lsls	r1, r1, #16
 8002f08:	e7fb      	b.n	8002f02 <HAL_GPIO_WritePin+0x2>

08002f0a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002f0a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f0c:	ea01 0203 	and.w	r2, r1, r3
 8002f10:	ea21 0103 	bic.w	r1, r1, r3
 8002f14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002f18:	6101      	str	r1, [r0, #16]
}
 8002f1a:	4770      	bx	lr

08002f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f20:	4605      	mov	r5, r0
 8002f22:	b338      	cbz	r0, 8002f74 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f24:	6803      	ldr	r3, [r0, #0]
 8002f26:	07db      	lsls	r3, r3, #31
 8002f28:	d410      	bmi.n	8002f4c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	079f      	lsls	r7, r3, #30
 8002f2e:	d45e      	bmi.n	8002fee <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f30:	682b      	ldr	r3, [r5, #0]
 8002f32:	0719      	lsls	r1, r3, #28
 8002f34:	f100 8095 	bmi.w	8003062 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f38:	682b      	ldr	r3, [r5, #0]
 8002f3a:	075a      	lsls	r2, r3, #29
 8002f3c:	f100 80c1 	bmi.w	80030c2 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f40:	69e8      	ldr	r0, [r5, #28]
 8002f42:	2800      	cmp	r0, #0
 8002f44:	f040 812c 	bne.w	80031a0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e029      	b.n	8002fa0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4c:	4c90      	ldr	r4, [pc, #576]	; (8003190 <HAL_RCC_OscConfig+0x274>)
 8002f4e:	6863      	ldr	r3, [r4, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d007      	beq.n	8002f68 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f58:	6863      	ldr	r3, [r4, #4]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d10a      	bne.n	8002f78 <HAL_RCC_OscConfig+0x5c>
 8002f62:	6863      	ldr	r3, [r4, #4]
 8002f64:	03de      	lsls	r6, r3, #15
 8002f66:	d507      	bpl.n	8002f78 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	039c      	lsls	r4, r3, #14
 8002f6c:	d5dd      	bpl.n	8002f2a <HAL_RCC_OscConfig+0xe>
 8002f6e:	686b      	ldr	r3, [r5, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1da      	bne.n	8002f2a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002f74:	2001      	movs	r0, #1
 8002f76:	e013      	b.n	8002fa0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f78:	686b      	ldr	r3, [r5, #4]
 8002f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7e:	d112      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x8a>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f88:	f7ff fbbe 	bl	8002708 <HAL_GetTick>
 8002f8c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	0398      	lsls	r0, r3, #14
 8002f92:	d4ca      	bmi.n	8002f2a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f94:	f7ff fbb8 	bl	8002708 <HAL_GetTick>
 8002f98:	1b80      	subs	r0, r0, r6
 8002f9a:	2864      	cmp	r0, #100	; 0x64
 8002f9c:	d9f7      	bls.n	8002f8e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002f9e:	2003      	movs	r0, #3
}
 8002fa0:	b002      	add	sp, #8
 8002fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa6:	b99b      	cbnz	r3, 8002fd0 <HAL_RCC_OscConfig+0xb4>
 8002fa8:	6823      	ldr	r3, [r4, #0]
 8002faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fb8:	f7ff fba6 	bl	8002708 <HAL_GetTick>
 8002fbc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	0399      	lsls	r1, r3, #14
 8002fc2:	d5b2      	bpl.n	8002f2a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7ff fba0 	bl	8002708 <HAL_GetTick>
 8002fc8:	1b80      	subs	r0, r0, r6
 8002fca:	2864      	cmp	r0, #100	; 0x64
 8002fcc:	d9f7      	bls.n	8002fbe <HAL_RCC_OscConfig+0xa2>
 8002fce:	e7e6      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	d103      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xc4>
 8002fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fdc:	6023      	str	r3, [r4, #0]
 8002fde:	e7cf      	b.n	8002f80 <HAL_RCC_OscConfig+0x64>
 8002fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fec:	e7cb      	b.n	8002f86 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fee:	4c68      	ldr	r4, [pc, #416]	; (8003190 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	6863      	ldr	r3, [r4, #4]
 8002ff2:	f013 0f0c 	tst.w	r3, #12
 8002ff6:	d007      	beq.n	8003008 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ff8:	6863      	ldr	r3, [r4, #4]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d110      	bne.n	8003024 <HAL_RCC_OscConfig+0x108>
 8003002:	6863      	ldr	r3, [r4, #4]
 8003004:	03da      	lsls	r2, r3, #15
 8003006:	d40d      	bmi.n	8003024 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	079b      	lsls	r3, r3, #30
 800300c:	d502      	bpl.n	8003014 <HAL_RCC_OscConfig+0xf8>
 800300e:	692b      	ldr	r3, [r5, #16]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d1af      	bne.n	8002f74 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	696a      	ldr	r2, [r5, #20]
 8003018:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800301c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	e785      	b.n	8002f30 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003024:	692a      	ldr	r2, [r5, #16]
 8003026:	4b5b      	ldr	r3, [pc, #364]	; (8003194 <HAL_RCC_OscConfig+0x278>)
 8003028:	b16a      	cbz	r2, 8003046 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800302e:	f7ff fb6b 	bl	8002708 <HAL_GetTick>
 8003032:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	079f      	lsls	r7, r3, #30
 8003038:	d4ec      	bmi.n	8003014 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303a:	f7ff fb65 	bl	8002708 <HAL_GetTick>
 800303e:	1b80      	subs	r0, r0, r6
 8003040:	2802      	cmp	r0, #2
 8003042:	d9f7      	bls.n	8003034 <HAL_RCC_OscConfig+0x118>
 8003044:	e7ab      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003046:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003048:	f7ff fb5e 	bl	8002708 <HAL_GetTick>
 800304c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	0798      	lsls	r0, r3, #30
 8003052:	f57f af6d 	bpl.w	8002f30 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7ff fb57 	bl	8002708 <HAL_GetTick>
 800305a:	1b80      	subs	r0, r0, r6
 800305c:	2802      	cmp	r0, #2
 800305e:	d9f6      	bls.n	800304e <HAL_RCC_OscConfig+0x132>
 8003060:	e79d      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003062:	69aa      	ldr	r2, [r5, #24]
 8003064:	4e4a      	ldr	r6, [pc, #296]	; (8003190 <HAL_RCC_OscConfig+0x274>)
 8003066:	4b4b      	ldr	r3, [pc, #300]	; (8003194 <HAL_RCC_OscConfig+0x278>)
 8003068:	b1e2      	cbz	r2, 80030a4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800306a:	2201      	movs	r2, #1
 800306c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003070:	f7ff fb4a 	bl	8002708 <HAL_GetTick>
 8003074:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003076:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003078:	079b      	lsls	r3, r3, #30
 800307a:	d50d      	bpl.n	8003098 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800307c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003080:	4b45      	ldr	r3, [pc, #276]	; (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fbb3 f3f2 	udiv	r3, r3, r2
 8003088:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800308a:	bf00      	nop
  }
  while (Delay --);
 800308c:	9b01      	ldr	r3, [sp, #4]
 800308e:	1e5a      	subs	r2, r3, #1
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f9      	bne.n	800308a <HAL_RCC_OscConfig+0x16e>
 8003096:	e74f      	b.n	8002f38 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003098:	f7ff fb36 	bl	8002708 <HAL_GetTick>
 800309c:	1b00      	subs	r0, r0, r4
 800309e:	2802      	cmp	r0, #2
 80030a0:	d9e9      	bls.n	8003076 <HAL_RCC_OscConfig+0x15a>
 80030a2:	e77c      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80030a4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80030a8:	f7ff fb2e 	bl	8002708 <HAL_GetTick>
 80030ac:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80030b0:	079f      	lsls	r7, r3, #30
 80030b2:	f57f af41 	bpl.w	8002f38 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030b6:	f7ff fb27 	bl	8002708 <HAL_GetTick>
 80030ba:	1b00      	subs	r0, r0, r4
 80030bc:	2802      	cmp	r0, #2
 80030be:	d9f6      	bls.n	80030ae <HAL_RCC_OscConfig+0x192>
 80030c0:	e76d      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c2:	4c33      	ldr	r4, [pc, #204]	; (8003190 <HAL_RCC_OscConfig+0x274>)
 80030c4:	69e3      	ldr	r3, [r4, #28]
 80030c6:	00d8      	lsls	r0, r3, #3
 80030c8:	d424      	bmi.n	8003114 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80030ca:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80030cc:	69e3      	ldr	r3, [r4, #28]
 80030ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d2:	61e3      	str	r3, [r4, #28]
 80030d4:	69e3      	ldr	r3, [r4, #28]
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030de:	4e2f      	ldr	r6, [pc, #188]	; (800319c <HAL_RCC_OscConfig+0x280>)
 80030e0:	6833      	ldr	r3, [r6, #0]
 80030e2:	05d9      	lsls	r1, r3, #23
 80030e4:	d518      	bpl.n	8003118 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e6:	68eb      	ldr	r3, [r5, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d126      	bne.n	800313a <HAL_RCC_OscConfig+0x21e>
 80030ec:	6a23      	ldr	r3, [r4, #32]
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80030f4:	f7ff fb08 	bl	8002708 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80030fc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fe:	6a23      	ldr	r3, [r4, #32]
 8003100:	079b      	lsls	r3, r3, #30
 8003102:	d53f      	bpl.n	8003184 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003104:	2f00      	cmp	r7, #0
 8003106:	f43f af1b 	beq.w	8002f40 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800310a:	69e3      	ldr	r3, [r4, #28]
 800310c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003110:	61e3      	str	r3, [r4, #28]
 8003112:	e715      	b.n	8002f40 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003114:	2700      	movs	r7, #0
 8003116:	e7e2      	b.n	80030de <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003118:	6833      	ldr	r3, [r6, #0]
 800311a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003120:	f7ff faf2 	bl	8002708 <HAL_GetTick>
 8003124:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003126:	6833      	ldr	r3, [r6, #0]
 8003128:	05da      	lsls	r2, r3, #23
 800312a:	d4dc      	bmi.n	80030e6 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312c:	f7ff faec 	bl	8002708 <HAL_GetTick>
 8003130:	eba0 0008 	sub.w	r0, r0, r8
 8003134:	2864      	cmp	r0, #100	; 0x64
 8003136:	d9f6      	bls.n	8003126 <HAL_RCC_OscConfig+0x20a>
 8003138:	e731      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800313a:	b9ab      	cbnz	r3, 8003168 <HAL_RCC_OscConfig+0x24c>
 800313c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6223      	str	r3, [r4, #32]
 8003148:	6a23      	ldr	r3, [r4, #32]
 800314a:	f023 0304 	bic.w	r3, r3, #4
 800314e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003150:	f7ff fada 	bl	8002708 <HAL_GetTick>
 8003154:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	6a23      	ldr	r3, [r4, #32]
 8003158:	0798      	lsls	r0, r3, #30
 800315a:	d5d3      	bpl.n	8003104 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7ff fad4 	bl	8002708 <HAL_GetTick>
 8003160:	1b80      	subs	r0, r0, r6
 8003162:	4540      	cmp	r0, r8
 8003164:	d9f7      	bls.n	8003156 <HAL_RCC_OscConfig+0x23a>
 8003166:	e71a      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	2b05      	cmp	r3, #5
 800316a:	6a23      	ldr	r3, [r4, #32]
 800316c:	d103      	bne.n	8003176 <HAL_RCC_OscConfig+0x25a>
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	6223      	str	r3, [r4, #32]
 8003174:	e7ba      	b.n	80030ec <HAL_RCC_OscConfig+0x1d0>
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6223      	str	r3, [r4, #32]
 800317c:	6a23      	ldr	r3, [r4, #32]
 800317e:	f023 0304 	bic.w	r3, r3, #4
 8003182:	e7b6      	b.n	80030f2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7ff fac0 	bl	8002708 <HAL_GetTick>
 8003188:	1b80      	subs	r0, r0, r6
 800318a:	4540      	cmp	r0, r8
 800318c:	d9b7      	bls.n	80030fe <HAL_RCC_OscConfig+0x1e2>
 800318e:	e706      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
 8003190:	40021000 	.word	0x40021000
 8003194:	42420000 	.word	0x42420000
 8003198:	20000014 	.word	0x20000014
 800319c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031a0:	4c2a      	ldr	r4, [pc, #168]	; (800324c <HAL_RCC_OscConfig+0x330>)
 80031a2:	6863      	ldr	r3, [r4, #4]
 80031a4:	f003 030c 	and.w	r3, r3, #12
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d03e      	beq.n	800322a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ac:	2200      	movs	r2, #0
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_RCC_OscConfig+0x334>)
 80031b0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80031b2:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b4:	d12c      	bne.n	8003210 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80031b6:	f7ff faa7 	bl	8002708 <HAL_GetTick>
 80031ba:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	0199      	lsls	r1, r3, #6
 80031c0:	d420      	bmi.n	8003204 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031c2:	6a2b      	ldr	r3, [r5, #32]
 80031c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c8:	d105      	bne.n	80031d6 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031ca:	6862      	ldr	r2, [r4, #4]
 80031cc:	68a9      	ldr	r1, [r5, #8]
 80031ce:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80031d2:	430a      	orrs	r2, r1
 80031d4:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80031d8:	6862      	ldr	r2, [r4, #4]
 80031da:	430b      	orrs	r3, r1
 80031dc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80031e0:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80031e2:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80031e6:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCC_OscConfig+0x334>)
 80031e8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80031ea:	f7ff fa8d 	bl	8002708 <HAL_GetTick>
 80031ee:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	019a      	lsls	r2, r3, #6
 80031f4:	f53f aea8 	bmi.w	8002f48 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7ff fa86 	bl	8002708 <HAL_GetTick>
 80031fc:	1b40      	subs	r0, r0, r5
 80031fe:	2802      	cmp	r0, #2
 8003200:	d9f6      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2d4>
 8003202:	e6cc      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003204:	f7ff fa80 	bl	8002708 <HAL_GetTick>
 8003208:	1b80      	subs	r0, r0, r6
 800320a:	2802      	cmp	r0, #2
 800320c:	d9d6      	bls.n	80031bc <HAL_RCC_OscConfig+0x2a0>
 800320e:	e6c6      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003210:	f7ff fa7a 	bl	8002708 <HAL_GetTick>
 8003214:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	019b      	lsls	r3, r3, #6
 800321a:	f57f ae95 	bpl.w	8002f48 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321e:	f7ff fa73 	bl	8002708 <HAL_GetTick>
 8003222:	1b40      	subs	r0, r0, r5
 8003224:	2802      	cmp	r0, #2
 8003226:	d9f6      	bls.n	8003216 <HAL_RCC_OscConfig+0x2fa>
 8003228:	e6b9      	b.n	8002f9e <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800322a:	2801      	cmp	r0, #1
 800322c:	f43f aeb8 	beq.w	8002fa0 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8003230:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	6a2a      	ldr	r2, [r5, #32]
 8003234:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003238:	4291      	cmp	r1, r2
 800323a:	f47f ae9b 	bne.w	8002f74 <HAL_RCC_OscConfig+0x58>
 800323e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003240:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003244:	4293      	cmp	r3, r2
 8003246:	f43f ae7f 	beq.w	8002f48 <HAL_RCC_OscConfig+0x2c>
 800324a:	e693      	b.n	8002f74 <HAL_RCC_OscConfig+0x58>
 800324c:	40021000 	.word	0x40021000
 8003250:	42420000 	.word	0x42420000

08003254 <HAL_RCC_GetSysClockFreq>:
{
 8003254:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8003258:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800325a:	ac02      	add	r4, sp, #8
 800325c:	f103 0510 	add.w	r5, r3, #16
 8003260:	4622      	mov	r2, r4
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	6859      	ldr	r1, [r3, #4]
 8003266:	3308      	adds	r3, #8
 8003268:	c203      	stmia	r2!, {r0, r1}
 800326a:	42ab      	cmp	r3, r5
 800326c:	4614      	mov	r4, r2
 800326e:	d1f7      	bne.n	8003260 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003270:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8003274:	4911      	ldr	r1, [pc, #68]	; (80032bc <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003276:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800327a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800327c:	f003 020c 	and.w	r2, r3, #12
 8003280:	2a08      	cmp	r2, #8
 8003282:	d117      	bne.n	80032b4 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003284:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003288:	3218      	adds	r2, #24
 800328a:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800328c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800328e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003292:	d50c      	bpl.n	80032ae <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003294:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003298:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800329c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800329e:	3318      	adds	r3, #24
 80032a0:	446b      	add	r3, sp
 80032a2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032a6:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80032aa:	b007      	add	sp, #28
 80032ac:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x70>)
 80032b0:	4358      	muls	r0, r3
 80032b2:	e7fa      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80032b4:	4802      	ldr	r0, [pc, #8]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80032b6:	e7f8      	b.n	80032aa <HAL_RCC_GetSysClockFreq+0x56>
 80032b8:	08008dac 	.word	0x08008dac
 80032bc:	40021000 	.word	0x40021000
 80032c0:	007a1200 	.word	0x007a1200
 80032c4:	003d0900 	.word	0x003d0900

080032c8 <HAL_RCC_ClockConfig>:
{
 80032c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032cc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80032ce:	4604      	mov	r4, r0
 80032d0:	b910      	cbnz	r0, 80032d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80032d2:	2001      	movs	r0, #1
}
 80032d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d8:	4a44      	ldr	r2, [pc, #272]	; (80033ec <HAL_RCC_ClockConfig+0x124>)
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	428b      	cmp	r3, r1
 80032e2:	d328      	bcc.n	8003336 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	6821      	ldr	r1, [r4, #0]
 80032e6:	078e      	lsls	r6, r1, #30
 80032e8:	d430      	bmi.n	800334c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	07ca      	lsls	r2, r1, #31
 80032ec:	d443      	bmi.n	8003376 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ee:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <HAL_RCC_ClockConfig+0x124>)
 80032f0:	6813      	ldr	r3, [r2, #0]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	42ab      	cmp	r3, r5
 80032f8:	d865      	bhi.n	80033c6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fa:	6822      	ldr	r2, [r4, #0]
 80032fc:	4d3c      	ldr	r5, [pc, #240]	; (80033f0 <HAL_RCC_ClockConfig+0x128>)
 80032fe:	f012 0f04 	tst.w	r2, #4
 8003302:	d16c      	bne.n	80033de <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003304:	0713      	lsls	r3, r2, #28
 8003306:	d506      	bpl.n	8003316 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003308:	686b      	ldr	r3, [r5, #4]
 800330a:	6922      	ldr	r2, [r4, #16]
 800330c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003310:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003314:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003316:	f7ff ff9d 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 800331a:	686b      	ldr	r3, [r5, #4]
 800331c:	4a35      	ldr	r2, [pc, #212]	; (80033f4 <HAL_RCC_ClockConfig+0x12c>)
 800331e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003322:	5cd3      	ldrb	r3, [r2, r3]
 8003324:	40d8      	lsrs	r0, r3
 8003326:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_RCC_ClockConfig+0x130>)
 8003328:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800332a:	4b34      	ldr	r3, [pc, #208]	; (80033fc <HAL_RCC_ClockConfig+0x134>)
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	f7ff f88f 	bl	8002450 <HAL_InitTick>
  return HAL_OK;
 8003332:	2000      	movs	r0, #0
 8003334:	e7ce      	b.n	80032d4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	6813      	ldr	r3, [r2, #0]
 8003338:	f023 0307 	bic.w	r3, r3, #7
 800333c:	430b      	orrs	r3, r1
 800333e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003340:	6813      	ldr	r3, [r2, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	428b      	cmp	r3, r1
 8003348:	d1c3      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xa>
 800334a:	e7cb      	b.n	80032e4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_RCC_ClockConfig+0x128>)
 800334e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003352:	bf1e      	ittt	ne
 8003354:	685a      	ldrne	r2, [r3, #4]
 8003356:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800335a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800335e:	bf42      	ittt	mi
 8003360:	685a      	ldrmi	r2, [r3, #4]
 8003362:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8003366:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	68a0      	ldr	r0, [r4, #8]
 800336c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003370:	4302      	orrs	r2, r0
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	e7b9      	b.n	80032ea <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003376:	6862      	ldr	r2, [r4, #4]
 8003378:	4e1d      	ldr	r6, [pc, #116]	; (80033f0 <HAL_RCC_ClockConfig+0x128>)
 800337a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337e:	d11a      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003380:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003384:	d0a5      	beq.n	80032d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338c:	f023 0303 	bic.w	r3, r3, #3
 8003390:	4313      	orrs	r3, r2
 8003392:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003394:	f7ff f9b8 	bl	8002708 <HAL_GetTick>
 8003398:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339a:	6873      	ldr	r3, [r6, #4]
 800339c:	6862      	ldr	r2, [r4, #4]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033a6:	d0a2      	beq.n	80032ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a8:	f7ff f9ae 	bl	8002708 <HAL_GetTick>
 80033ac:	1bc0      	subs	r0, r0, r7
 80033ae:	4540      	cmp	r0, r8
 80033b0:	d9f3      	bls.n	800339a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80033b2:	2003      	movs	r0, #3
 80033b4:	e78e      	b.n	80032d4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b6:	2a02      	cmp	r2, #2
 80033b8:	d102      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80033be:	e7e1      	b.n	8003384 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	f013 0f02 	tst.w	r3, #2
 80033c4:	e7de      	b.n	8003384 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	6813      	ldr	r3, [r2, #0]
 80033c8:	f023 0307 	bic.w	r3, r3, #7
 80033cc:	432b      	orrs	r3, r5
 80033ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d0:	6813      	ldr	r3, [r2, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	42ab      	cmp	r3, r5
 80033d8:	f47f af7b 	bne.w	80032d2 <HAL_RCC_ClockConfig+0xa>
 80033dc:	e78d      	b.n	80032fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033de:	686b      	ldr	r3, [r5, #4]
 80033e0:	68e1      	ldr	r1, [r4, #12]
 80033e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033e6:	430b      	orrs	r3, r1
 80033e8:	606b      	str	r3, [r5, #4]
 80033ea:	e78b      	b.n	8003304 <HAL_RCC_ClockConfig+0x3c>
 80033ec:	40022000 	.word	0x40022000
 80033f0:	40021000 	.word	0x40021000
 80033f4:	08008d94 	.word	0x08008d94
 80033f8:	20000014 	.word	0x20000014
 80033fc:	2000001c 	.word	0x2000001c

08003400 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800340a:	5cd3      	ldrb	r3, [r2, r3]
 800340c:	4a03      	ldr	r2, [pc, #12]	; (800341c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800340e:	6810      	ldr	r0, [r2, #0]
}
 8003410:	40d8      	lsrs	r0, r3
 8003412:	4770      	bx	lr
 8003414:	40021000 	.word	0x40021000
 8003418:	08008da4 	.word	0x08008da4
 800341c:	20000014 	.word	0x20000014

08003420 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003422:	4a05      	ldr	r2, [pc, #20]	; (8003438 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800342a:	5cd3      	ldrb	r3, [r2, r3]
 800342c:	4a03      	ldr	r2, [pc, #12]	; (800343c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800342e:	6810      	ldr	r0, [r2, #0]
}
 8003430:	40d8      	lsrs	r0, r3
 8003432:	4770      	bx	lr
 8003434:	40021000 	.word	0x40021000
 8003438:	08008da4 	.word	0x08008da4
 800343c:	20000014 	.word	0x20000014

08003440 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003440:	230f      	movs	r3, #15
 8003442:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <HAL_RCC_GetClockConfig+0x34>)
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	f002 0203 	and.w	r2, r2, #3
 800344c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003454:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800345c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	08db      	lsrs	r3, r3, #3
 8003462:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003466:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <HAL_RCC_GetClockConfig+0x38>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	600b      	str	r3, [r1, #0]
}
 8003472:	4770      	bx	lr
 8003474:	40021000 	.word	0x40021000
 8003478:	40022000 	.word	0x40022000

0800347c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800347c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003480:	461c      	mov	r4, r3
 8003482:	4616      	mov	r6, r2
 8003484:	460f      	mov	r7, r1
 8003486:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003488:	f7ff f93e 	bl	8002708 <HAL_GetTick>
 800348c:	4434      	add	r4, r6
 800348e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8003490:	f7ff f93a 	bl	8002708 <HAL_GetTick>
 8003494:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800349e:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034a0:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80034a2:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034a4:	6893      	ldr	r3, [r2, #8]
 80034a6:	ea37 0303 	bics.w	r3, r7, r3
 80034aa:	d001      	beq.n	80034b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80034ac:	2000      	movs	r0, #0
 80034ae:	e02e      	b.n	800350e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80034b0:	1c73      	adds	r3, r6, #1
 80034b2:	d0f7      	beq.n	80034a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034b4:	f7ff f928 	bl	8002708 <HAL_GetTick>
 80034b8:	eba0 0008 	sub.w	r0, r0, r8
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d329      	bcc.n	8003514 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034c8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ca:	686a      	ldr	r2, [r5, #4]
 80034cc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80034d0:	d10a      	bne.n	80034e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80034d2:	68aa      	ldr	r2, [r5, #8]
 80034d4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80034d8:	d002      	beq.n	80034e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034da:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80034de:	d103      	bne.n	80034e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034e8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80034ea:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80034ee:	d107      	bne.n	8003500 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fe:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003500:	2301      	movs	r3, #1
 8003502:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003506:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003508:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 800350a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 800350e:	b002      	add	sp, #8
 8003510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8003514:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003516:	2b00      	cmp	r3, #0
      count--;
 8003518:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800351a:	bf08      	it	eq
 800351c:	2400      	moveq	r4, #0
      count--;
 800351e:	3b01      	subs	r3, #1
 8003520:	e7be      	b.n	80034a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8003522:	bf00      	nop
 8003524:	20000014 	.word	0x20000014

08003528 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800352c:	6842      	ldr	r2, [r0, #4]
{
 800352e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003530:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003534:	d116      	bne.n	8003564 <SPI_EndRxTransaction+0x3c>
 8003536:	6882      	ldr	r2, [r0, #8]
 8003538:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800353c:	d002      	beq.n	8003544 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800353e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003542:	d10f      	bne.n	8003564 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003544:	6825      	ldr	r5, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003546:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 800354a:	6828      	ldr	r0, [r5, #0]
 800354c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8003550:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003552:	d107      	bne.n	8003564 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	460a      	mov	r2, r1
 8003556:	2101      	movs	r1, #1
 8003558:	4620      	mov	r0, r4
 800355a:	f7ff ff8f 	bl	800347c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800355e:	b920      	cbnz	r0, 800356a <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003560:	2000      	movs	r0, #0
}
 8003562:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003564:	460a      	mov	r2, r1
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	e7f6      	b.n	8003558 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356a:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800356c:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356e:	f043 0320 	orr.w	r3, r3, #32
 8003572:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003574:	e7f5      	b.n	8003562 <SPI_EndRxTransaction+0x3a>

08003576 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003576:	b510      	push	{r4, lr}
 8003578:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800357a:	460a      	mov	r2, r1
 800357c:	2180      	movs	r1, #128	; 0x80
{
 800357e:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	f7ff ff7c 	bl	800347c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003584:	b120      	cbz	r0, 8003590 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8003586:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003588:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800358a:	f043 0320 	orr.w	r3, r3, #32
 800358e:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8003590:	bd10      	pop	{r4, pc}

08003592 <HAL_SPI_Init>:
{
 8003592:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003594:	4604      	mov	r4, r0
 8003596:	2800      	cmp	r0, #0
 8003598:	d051      	beq.n	800363e <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800359a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	d14a      	bne.n	8003636 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035a0:	6842      	ldr	r2, [r0, #4]
 80035a2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80035a6:	d000      	beq.n	80035aa <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035a8:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ae:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80035b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035b6:	b923      	cbnz	r3, 80035c2 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80035b8:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80035ba:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80035be:	f7fe feab 	bl	8002318 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80035c2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80035c4:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80035c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80035ca:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035cc:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80035ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035d4:	6863      	ldr	r3, [r4, #4]
 80035d6:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80035da:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80035de:	4303      	orrs	r3, r0
 80035e0:	68e0      	ldr	r0, [r4, #12]
 80035e2:	69a1      	ldr	r1, [r4, #24]
 80035e4:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80035e8:	4303      	orrs	r3, r0
 80035ea:	6920      	ldr	r0, [r4, #16]
 80035ec:	f000 0002 	and.w	r0, r0, #2
 80035f0:	4303      	orrs	r3, r0
 80035f2:	6960      	ldr	r0, [r4, #20]
 80035f4:	f000 0001 	and.w	r0, r0, #1
 80035f8:	4303      	orrs	r3, r0
 80035fa:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80035fe:	4303      	orrs	r3, r0
 8003600:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003602:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003604:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003608:	4303      	orrs	r3, r0
 800360a:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800360c:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003610:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003614:	4303      	orrs	r3, r0
 8003616:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003618:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 800361c:	4303      	orrs	r3, r0
 800361e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003620:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003622:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003624:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800362a:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800362c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800362e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003630:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003634:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003636:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003638:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800363c:	e7b5      	b.n	80035aa <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800363e:	2001      	movs	r0, #1
 8003640:	e7f8      	b.n	8003634 <HAL_SPI_Init+0xa2>

08003642 <HAL_SPI_Transmit>:
{
 8003642:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003646:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003648:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800364c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800364e:	2b01      	cmp	r3, #1
{
 8003650:	460d      	mov	r5, r1
 8003652:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8003654:	f000 80a0 	beq.w	8003798 <HAL_SPI_Transmit+0x156>
 8003658:	2301      	movs	r3, #1
 800365a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800365e:	f7ff f853 	bl	8002708 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003662:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8003666:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003668:	2b01      	cmp	r3, #1
 800366a:	b2d8      	uxtb	r0, r3
 800366c:	f040 8092 	bne.w	8003794 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8003670:	2d00      	cmp	r5, #0
 8003672:	d05d      	beq.n	8003730 <HAL_SPI_Transmit+0xee>
 8003674:	2f00      	cmp	r7, #0
 8003676:	d05b      	beq.n	8003730 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003678:	2303      	movs	r3, #3
 800367a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800367e:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003680:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003682:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003684:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 8003688:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800368c:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800368e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003690:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003692:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003694:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8003696:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8003698:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800369a:	d107      	bne.n	80036ac <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036aa:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ac:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036ae:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036b0:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80036b2:	bf5e      	ittt	pl
 80036b4:	681a      	ldrpl	r2, [r3, #0]
 80036b6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80036ba:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036bc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c0:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036c2:	d141      	bne.n	8003748 <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036c4:	b10a      	cbz	r2, 80036ca <HAL_SPI_Transmit+0x88>
 80036c6:	2f01      	cmp	r7, #1
 80036c8:	d107      	bne.n	80036da <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ca:	f835 2b02 	ldrh.w	r2, [r5], #2
 80036ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d0:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80036d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80036da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036dc:	b29b      	uxth	r3, r3
 80036de:	b9a3      	cbnz	r3, 800370a <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036e0:	4642      	mov	r2, r8
 80036e2:	4631      	mov	r1, r6
 80036e4:	4620      	mov	r0, r4
 80036e6:	f7ff ff46 	bl	8003576 <SPI_EndRxTxTransaction>
 80036ea:	2800      	cmp	r0, #0
 80036ec:	d14f      	bne.n	800378e <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ee:	68a3      	ldr	r3, [r4, #8]
 80036f0:	b933      	cbnz	r3, 8003700 <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	9201      	str	r2, [sp, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003700:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003702:	3800      	subs	r0, #0
 8003704:	bf18      	it	ne
 8003706:	2001      	movne	r0, #1
error:
 8003708:	e012      	b.n	8003730 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800370a:	6822      	ldr	r2, [r4, #0]
 800370c:	6893      	ldr	r3, [r2, #8]
 800370e:	0798      	lsls	r0, r3, #30
 8003710:	d505      	bpl.n	800371e <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003712:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003714:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003718:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800371a:	6323      	str	r3, [r4, #48]	; 0x30
 800371c:	e7d9      	b.n	80036d2 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800371e:	f7fe fff3 	bl	8002708 <HAL_GetTick>
 8003722:	eba0 0008 	sub.w	r0, r0, r8
 8003726:	42b0      	cmp	r0, r6
 8003728:	d30b      	bcc.n	8003742 <HAL_SPI_Transmit+0x100>
 800372a:	1c71      	adds	r1, r6, #1
 800372c:	d0d5      	beq.n	80036da <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 800372e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003730:	2301      	movs	r3, #1
 8003732:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003736:	2300      	movs	r3, #0
 8003738:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800373c:	b002      	add	sp, #8
 800373e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003742:	2e00      	cmp	r6, #0
 8003744:	d1c9      	bne.n	80036da <HAL_SPI_Transmit+0x98>
 8003746:	e7f2      	b.n	800372e <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003748:	b10a      	cbz	r2, 800374e <HAL_SPI_Transmit+0x10c>
 800374a:	2f01      	cmp	r7, #1
 800374c:	d108      	bne.n	8003760 <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800374e:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003750:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003752:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003754:	3301      	adds	r3, #1
 8003756:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003758:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800375a:	3b01      	subs	r3, #1
 800375c:	b29b      	uxth	r3, r3
 800375e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003760:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0bb      	beq.n	80036e0 <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	0792      	lsls	r2, r2, #30
 800376e:	d502      	bpl.n	8003776 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003770:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003772:	7812      	ldrb	r2, [r2, #0]
 8003774:	e7ec      	b.n	8003750 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003776:	f7fe ffc7 	bl	8002708 <HAL_GetTick>
 800377a:	eba0 0008 	sub.w	r0, r0, r8
 800377e:	42b0      	cmp	r0, r6
 8003780:	d302      	bcc.n	8003788 <HAL_SPI_Transmit+0x146>
 8003782:	1c73      	adds	r3, r6, #1
 8003784:	d0ec      	beq.n	8003760 <HAL_SPI_Transmit+0x11e>
 8003786:	e7d2      	b.n	800372e <HAL_SPI_Transmit+0xec>
 8003788:	2e00      	cmp	r6, #0
 800378a:	d1e9      	bne.n	8003760 <HAL_SPI_Transmit+0x11e>
 800378c:	e7cf      	b.n	800372e <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800378e:	2320      	movs	r3, #32
 8003790:	6563      	str	r3, [r4, #84]	; 0x54
 8003792:	e7ac      	b.n	80036ee <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8003794:	2002      	movs	r0, #2
 8003796:	e7cb      	b.n	8003730 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8003798:	2002      	movs	r0, #2
 800379a:	e7cf      	b.n	800373c <HAL_SPI_Transmit+0xfa>

0800379c <HAL_SPI_TransmitReceive>:
{
 800379c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037a0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80037a2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80037a6:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80037a8:	2b01      	cmp	r3, #1
{
 80037aa:	460d      	mov	r5, r1
 80037ac:	4691      	mov	r9, r2
 80037ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80037b0:	f000 80e6 	beq.w	8003980 <HAL_SPI_TransmitReceive+0x1e4>
 80037b4:	2301      	movs	r3, #1
 80037b6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80037ba:	f7fe ffa5 	bl	8002708 <HAL_GetTick>
  tmp_state           = hspi->State;
 80037be:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80037c2:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037c4:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80037c6:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80037c8:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037ca:	d00a      	beq.n	80037e2 <HAL_SPI_TransmitReceive+0x46>
 80037cc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80037d0:	f040 80d4 	bne.w	800397c <HAL_SPI_TransmitReceive+0x1e0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037d4:	68a3      	ldr	r3, [r4, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 80d0 	bne.w	800397c <HAL_SPI_TransmitReceive+0x1e0>
 80037dc:	2904      	cmp	r1, #4
 80037de:	f040 80cd 	bne.w	800397c <HAL_SPI_TransmitReceive+0x1e0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037e2:	2d00      	cmp	r5, #0
 80037e4:	d040      	beq.n	8003868 <HAL_SPI_TransmitReceive+0xcc>
 80037e6:	f1b9 0f00 	cmp.w	r9, #0
 80037ea:	d03d      	beq.n	8003868 <HAL_SPI_TransmitReceive+0xcc>
 80037ec:	2e00      	cmp	r6, #0
 80037ee:	d03b      	beq.n	8003868 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037f0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037f4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037f8:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037fa:	bf1c      	itt	ne
 80037fc:	2305      	movne	r3, #5
 80037fe:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003802:	2300      	movs	r3, #0
 8003804:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003806:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800380a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800380c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800380e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003810:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8003812:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003814:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8003816:	bf58      	it	pl
 8003818:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800381a:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800381c:	bf58      	it	pl
 800381e:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8003822:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8003824:	bf58      	it	pl
 8003826:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003828:	68e1      	ldr	r1, [r4, #12]
 800382a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800382e:	d152      	bne.n	80038d6 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003830:	b10a      	cbz	r2, 8003836 <HAL_SPI_TransmitReceive+0x9a>
 8003832:	2e01      	cmp	r6, #1
 8003834:	d107      	bne.n	8003846 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003836:	f835 2b02 	ldrh.w	r2, [r5], #2
 800383a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800383c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800383e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003840:	3b01      	subs	r3, #1
 8003842:	b29b      	uxth	r3, r3
 8003844:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003846:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003848:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800384a:	b29b      	uxth	r3, r3
 800384c:	b973      	cbnz	r3, 800386c <HAL_SPI_TransmitReceive+0xd0>
 800384e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003850:	b29b      	uxth	r3, r3
 8003852:	b95b      	cbnz	r3, 800386c <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003854:	4642      	mov	r2, r8
 8003856:	4639      	mov	r1, r7
 8003858:	4620      	mov	r0, r4
 800385a:	f7ff fe8c 	bl	8003576 <SPI_EndRxTxTransaction>
 800385e:	2800      	cmp	r0, #0
 8003860:	f000 8081 	beq.w	8003966 <HAL_SPI_TransmitReceive+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003864:	2320      	movs	r3, #32
 8003866:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003868:	2001      	movs	r0, #1
 800386a:	e02b      	b.n	80038c4 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800386c:	6821      	ldr	r1, [r4, #0]
 800386e:	688b      	ldr	r3, [r1, #8]
 8003870:	079e      	lsls	r6, r3, #30
 8003872:	d50d      	bpl.n	8003890 <HAL_SPI_TransmitReceive+0xf4>
 8003874:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	b153      	cbz	r3, 8003890 <HAL_SPI_TransmitReceive+0xf4>
 800387a:	b14d      	cbz	r5, 8003890 <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 800387c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800387e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003880:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003884:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003886:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003888:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800388a:	3b01      	subs	r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003890:	688a      	ldr	r2, [r1, #8]
 8003892:	f012 0201 	ands.w	r2, r2, #1
 8003896:	d00c      	beq.n	80038b2 <HAL_SPI_TransmitReceive+0x116>
 8003898:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800389a:	b29b      	uxth	r3, r3
 800389c:	b14b      	cbz	r3, 80038b2 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 800389e:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038a0:	68c9      	ldr	r1, [r1, #12]
 80038a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038a4:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038a8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80038aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80038b2:	f7fe ff29 	bl	8002708 <HAL_GetTick>
 80038b6:	eba0 0008 	sub.w	r0, r0, r8
 80038ba:	42b8      	cmp	r0, r7
 80038bc:	d3c4      	bcc.n	8003848 <HAL_SPI_TransmitReceive+0xac>
 80038be:	1c78      	adds	r0, r7, #1
 80038c0:	d0c2      	beq.n	8003848 <HAL_SPI_TransmitReceive+0xac>
        errorcode = HAL_TIMEOUT;
 80038c2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038ca:	2300      	movs	r3, #0
 80038cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80038d0:	b003      	add	sp, #12
 80038d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d6:	b10a      	cbz	r2, 80038dc <HAL_SPI_TransmitReceive+0x140>
 80038d8:	2e01      	cmp	r6, #1
 80038da:	d108      	bne.n	80038ee <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038dc:	782a      	ldrb	r2, [r5, #0]
 80038de:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038e2:	3301      	adds	r3, #1
 80038e4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80038e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80038ee:	2501      	movs	r5, #1
 80038f0:	e02d      	b.n	800394e <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	6893      	ldr	r3, [r2, #8]
 80038f6:	0799      	lsls	r1, r3, #30
 80038f8:	d50e      	bpl.n	8003918 <HAL_SPI_TransmitReceive+0x17c>
 80038fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	b15b      	cbz	r3, 8003918 <HAL_SPI_TransmitReceive+0x17c>
 8003900:	b155      	cbz	r5, 8003918 <HAL_SPI_TransmitReceive+0x17c>
        txallowed = 0U;
 8003902:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003904:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800390a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800390c:	3301      	adds	r3, #1
 800390e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003910:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003912:	3b01      	subs	r3, #1
 8003914:	b29b      	uxth	r3, r3
 8003916:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003918:	6822      	ldr	r2, [r4, #0]
 800391a:	6891      	ldr	r1, [r2, #8]
 800391c:	f011 0101 	ands.w	r1, r1, #1
 8003920:	d00d      	beq.n	800393e <HAL_SPI_TransmitReceive+0x1a2>
 8003922:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003924:	b29b      	uxth	r3, r3
 8003926:	b153      	cbz	r3, 800393e <HAL_SPI_TransmitReceive+0x1a2>
        txallowed = 1U;
 8003928:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800392a:	68d2      	ldr	r2, [r2, #12]
 800392c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800392e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003930:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003932:	3301      	adds	r3, #1
 8003934:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003936:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003938:	3b01      	subs	r3, #1
 800393a:	b29b      	uxth	r3, r3
 800393c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800393e:	f7fe fee3 	bl	8002708 <HAL_GetTick>
 8003942:	eba0 0008 	sub.w	r0, r0, r8
 8003946:	42b8      	cmp	r0, r7
 8003948:	d30a      	bcc.n	8003960 <HAL_SPI_TransmitReceive+0x1c4>
 800394a:	1c7b      	adds	r3, r7, #1
 800394c:	d1b9      	bne.n	80038c2 <HAL_SPI_TransmitReceive+0x126>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800394e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1cd      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x156>
 8003956:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1c9      	bne.n	80038f2 <HAL_SPI_TransmitReceive+0x156>
 800395e:	e779      	b.n	8003854 <HAL_SPI_TransmitReceive+0xb8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003960:	2f00      	cmp	r7, #0
 8003962:	d1f4      	bne.n	800394e <HAL_SPI_TransmitReceive+0x1b2>
 8003964:	e7ad      	b.n	80038c2 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003966:	68a3      	ldr	r3, [r4, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ab      	bne.n	80038c4 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	9001      	str	r0, [sp, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	9201      	str	r2, [sp, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	9b01      	ldr	r3, [sp, #4]
 800397a:	e7a3      	b.n	80038c4 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 800397c:	2002      	movs	r0, #2
 800397e:	e7a1      	b.n	80038c4 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8003980:	2002      	movs	r0, #2
 8003982:	e7a5      	b.n	80038d0 <HAL_SPI_TransmitReceive+0x134>

08003984 <HAL_SPI_Receive>:
{
 8003984:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003988:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800398a:	6843      	ldr	r3, [r0, #4]
{
 800398c:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800398e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8003992:	4689      	mov	r9, r1
 8003994:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003996:	d10c      	bne.n	80039b2 <HAL_SPI_Receive+0x2e>
 8003998:	6883      	ldr	r3, [r0, #8]
 800399a:	b953      	cbnz	r3, 80039b2 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800399c:	2304      	movs	r3, #4
 800399e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039a2:	4613      	mov	r3, r2
 80039a4:	9500      	str	r5, [sp, #0]
 80039a6:	460a      	mov	r2, r1
 80039a8:	f7ff fef8 	bl	800379c <HAL_SPI_TransmitReceive>
}
 80039ac:	b003      	add	sp, #12
 80039ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80039b2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	f000 8086 	beq.w	8003ac8 <HAL_SPI_Receive+0x144>
 80039bc:	2301      	movs	r3, #1
 80039be:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80039c2:	f7fe fea1 	bl	8002708 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80039c6:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80039ca:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	b2d8      	uxtb	r0, r3
 80039d0:	d178      	bne.n	8003ac4 <HAL_SPI_Receive+0x140>
  if ((pData == NULL) || (Size == 0U))
 80039d2:	f1b9 0f00 	cmp.w	r9, #0
 80039d6:	d05c      	beq.n	8003a92 <HAL_SPI_Receive+0x10e>
 80039d8:	2f00      	cmp	r7, #0
 80039da:	d05a      	beq.n	8003a92 <HAL_SPI_Receive+0x10e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039dc:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039de:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e0:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80039e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ea:	6566      	str	r6, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80039ec:	e9c4 6610 	strd	r6, r6, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80039f0:	87e7      	strh	r7, [r4, #62]	; 0x3e
    __HAL_SPI_DISABLE(hspi);
 80039f2:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80039f4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80039f8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80039fa:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80039fc:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80039fe:	86e6      	strh	r6, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a00:	d107      	bne.n	8003a12 <HAL_SPI_Receive+0x8e>
    __HAL_SPI_DISABLE(hspi);
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a10:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003a16:	bf5e      	ittt	pl
 8003a18:	681a      	ldrpl	r2, [r3, #0]
 8003a1a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003a1e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003a20:	68e3      	ldr	r3, [r4, #12]
 8003a22:	b1f3      	cbz	r3, 8003a62 <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 8003a24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	b1fb      	cbz	r3, 8003a6a <HAL_SPI_Receive+0xe6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	07d2      	lsls	r2, r2, #31
 8003a30:	d539      	bpl.n	8003aa6 <HAL_SPI_Receive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a36:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a3a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003a3c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003a44:	e7ee      	b.n	8003a24 <HAL_SPI_Receive+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a46:	6823      	ldr	r3, [r4, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	07d0      	lsls	r0, r2, #31
 8003a4c:	d518      	bpl.n	8003a80 <HAL_SPI_Receive+0xfc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a4e:	7b1b      	ldrb	r3, [r3, #12]
 8003a50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a52:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a56:	3301      	adds	r3, #1
 8003a58:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003a5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003a62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ed      	bne.n	8003a46 <HAL_SPI_Receive+0xc2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a6a:	4642      	mov	r2, r8
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f7ff fd5a 	bl	8003528 <SPI_EndRxTransaction>
 8003a74:	bb18      	cbnz	r0, 8003abe <HAL_SPI_Receive+0x13a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003a78:	3800      	subs	r0, #0
 8003a7a:	bf18      	it	ne
 8003a7c:	2001      	movne	r0, #1
error :
 8003a7e:	e008      	b.n	8003a92 <HAL_SPI_Receive+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a80:	f7fe fe42 	bl	8002708 <HAL_GetTick>
 8003a84:	eba0 0008 	sub.w	r0, r0, r8
 8003a88:	42a8      	cmp	r0, r5
 8003a8a:	d309      	bcc.n	8003aa0 <HAL_SPI_Receive+0x11c>
 8003a8c:	1c69      	adds	r1, r5, #1
 8003a8e:	d0e8      	beq.n	8003a62 <HAL_SPI_Receive+0xde>
          errorcode = HAL_TIMEOUT;
 8003a90:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8003a9e:	e785      	b.n	80039ac <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa0:	2d00      	cmp	r5, #0
 8003aa2:	d1de      	bne.n	8003a62 <HAL_SPI_Receive+0xde>
 8003aa4:	e7f4      	b.n	8003a90 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aa6:	f7fe fe2f 	bl	8002708 <HAL_GetTick>
 8003aaa:	eba0 0008 	sub.w	r0, r0, r8
 8003aae:	42a8      	cmp	r0, r5
 8003ab0:	d302      	bcc.n	8003ab8 <HAL_SPI_Receive+0x134>
 8003ab2:	1c6b      	adds	r3, r5, #1
 8003ab4:	d0b6      	beq.n	8003a24 <HAL_SPI_Receive+0xa0>
 8003ab6:	e7eb      	b.n	8003a90 <HAL_SPI_Receive+0x10c>
 8003ab8:	2d00      	cmp	r5, #0
 8003aba:	d1b3      	bne.n	8003a24 <HAL_SPI_Receive+0xa0>
 8003abc:	e7e8      	b.n	8003a90 <HAL_SPI_Receive+0x10c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003abe:	2320      	movs	r3, #32
 8003ac0:	6563      	str	r3, [r4, #84]	; 0x54
 8003ac2:	e7d8      	b.n	8003a76 <HAL_SPI_Receive+0xf2>
    errorcode = HAL_BUSY;
 8003ac4:	2002      	movs	r0, #2
 8003ac6:	e7e4      	b.n	8003a92 <HAL_SPI_Receive+0x10e>
  __HAL_LOCK(hspi);
 8003ac8:	2002      	movs	r0, #2
 8003aca:	e76f      	b.n	80039ac <HAL_SPI_Receive+0x28>

08003acc <HAL_SPI_ErrorCallback>:
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_SPI_IRQHandler>:
{
 8003ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003ad2:	6803      	ldr	r3, [r0, #0]
{
 8003ad4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8003ad6:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003ad8:	689a      	ldr	r2, [r3, #8]
{
 8003ada:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003adc:	0656      	lsls	r6, r2, #25
 8003ade:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8003ae2:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8003ae6:	d408      	bmi.n	8003afa <HAL_SPI_IRQHandler+0x2a>
 8003ae8:	07d6      	lsls	r6, r2, #31
 8003aea:	d506      	bpl.n	8003afa <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003aec:	064e      	lsls	r6, r1, #25
 8003aee:	d504      	bpl.n	8003afa <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8003af0:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8003af2:	b005      	add	sp, #20
 8003af4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8003af8:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003afa:	0796      	lsls	r6, r2, #30
 8003afc:	d504      	bpl.n	8003b08 <HAL_SPI_IRQHandler+0x38>
 8003afe:	0608      	lsls	r0, r1, #24
 8003b00:	d502      	bpl.n	8003b08 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8003b02:	4620      	mov	r0, r4
 8003b04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b06:	e7f4      	b.n	8003af2 <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003b08:	0956      	lsrs	r6, r2, #5
 8003b0a:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 8003b0e:	07d2      	lsls	r2, r2, #31
 8003b10:	d54c      	bpl.n	8003bac <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003b12:	068d      	lsls	r5, r1, #26
 8003b14:	d54a      	bpl.n	8003bac <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b16:	b177      	cbz	r7, 8003b36 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003b18:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	2a03      	cmp	r2, #3
 8003b20:	d03e      	beq.n	8003ba0 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003b22:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b24:	f042 0204 	orr.w	r2, r2, #4
 8003b28:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b2a:	9001      	str	r0, [sp, #4]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	9201      	str	r2, [sp, #4]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	9201      	str	r2, [sp, #4]
 8003b34:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003b36:	07f0      	lsls	r0, r6, #31
 8003b38:	d50c      	bpl.n	8003b54 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003b3a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003b42:	2200      	movs	r2, #0
 8003b44:	9203      	str	r2, [sp, #12]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	9203      	str	r2, [sp, #12]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b54:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003b56:	b34a      	cbz	r2, 8003bac <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b5e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8003b60:	2201      	movs	r2, #1
 8003b62:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b66:	078a      	lsls	r2, r1, #30
 8003b68:	d022      	beq.n	8003bb0 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b6a:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003b6c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b6e:	f022 0203 	bic.w	r2, r2, #3
 8003b72:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8003b74:	b140      	cbz	r0, 8003b88 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_SPI_IRQHandler+0xe8>)
 8003b78:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b7a:	f7ff f8a1 	bl	8002cc0 <HAL_DMA_Abort_IT>
 8003b7e:	b118      	cbz	r0, 8003b88 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b86:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003b88:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003b8a:	b178      	cbz	r0, 8003bac <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_SPI_IRQHandler+0xe8>)
 8003b8e:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b90:	f7ff f896 	bl	8002cc0 <HAL_DMA_Abort_IT>
 8003b94:	b150      	cbz	r0, 8003bac <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9c:	6563      	str	r3, [r4, #84]	; 0x54
 8003b9e:	e005      	b.n	8003bac <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ba0:	9002      	str	r0, [sp, #8]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	9202      	str	r2, [sp, #8]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	9302      	str	r3, [sp, #8]
 8003baa:	9b02      	ldr	r3, [sp, #8]
}
 8003bac:	b005      	add	sp, #20
 8003bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7ff ff8b 	bl	8003acc <HAL_SPI_ErrorCallback>
 8003bb6:	e7f9      	b.n	8003bac <HAL_SPI_IRQHandler+0xdc>
 8003bb8:	08003bbd 	.word	0x08003bbd

08003bbc <SPI_DMAAbortOnError>:
{
 8003bbc:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 8003bbe:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bc0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8003bc2:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003bc4:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8003bc6:	f7ff ff81 	bl	8003acc <HAL_SPI_ErrorCallback>
}
 8003bca:	bd08      	pop	{r3, pc}

08003bcc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bd0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d120      	bne.n	8003c1a <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bde:	6803      	ldr	r3, [r0, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	f042 0201 	orr.w	r2, r2, #1
 8003be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be8:	4a0d      	ldr	r2, [pc, #52]	; (8003c20 <HAL_TIM_Base_Start_IT+0x50>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00a      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x34>
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d007      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x34>
 8003bf4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d003      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0x34>
 8003bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0a:	2a06      	cmp	r2, #6
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c16:	2000      	movs	r0, #0
}
 8003c18:	4770      	bx	lr
    return HAL_ERROR;
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40012c00 	.word	0x40012c00

08003c24 <HAL_TIM_OC_DelayElapsedCallback>:
 8003c24:	4770      	bx	lr

08003c26 <HAL_TIM_IC_CaptureCallback>:
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003c28:	4770      	bx	lr

08003c2a <HAL_TIM_TriggerCallback>:
 8003c2a:	4770      	bx	lr

08003c2c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c2c:	6803      	ldr	r3, [r0, #0]
{
 8003c2e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c30:	691a      	ldr	r2, [r3, #16]
{
 8003c32:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c34:	0791      	lsls	r1, r2, #30
 8003c36:	d50e      	bpl.n	8003c56 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	0792      	lsls	r2, r2, #30
 8003c3c:	d50b      	bpl.n	8003c56 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c3e:	f06f 0202 	mvn.w	r2, #2
 8003c42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c44:	2201      	movs	r2, #1
 8003c46:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	079b      	lsls	r3, r3, #30
 8003c4c:	d077      	beq.n	8003d3e <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	f7ff ffea 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	2300      	movs	r3, #0
 8003c54:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	0750      	lsls	r0, r2, #29
 8003c5c:	d510      	bpl.n	8003c80 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	0751      	lsls	r1, r2, #29
 8003c62:	d50d      	bpl.n	8003c80 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c64:	f06f 0204 	mvn.w	r2, #4
 8003c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c6e:	699b      	ldr	r3, [r3, #24]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c70:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c72:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c76:	d068      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c78:	f7ff ffd5 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	0712      	lsls	r2, r2, #28
 8003c86:	d50f      	bpl.n	8003ca8 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	0710      	lsls	r0, r2, #28
 8003c8c:	d50c      	bpl.n	8003ca8 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c8e:	f06f 0208 	mvn.w	r2, #8
 8003c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c94:	2204      	movs	r2, #4
 8003c96:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c98:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c9a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c9c:	0799      	lsls	r1, r3, #30
 8003c9e:	d05a      	beq.n	8003d56 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca0:	f7ff ffc1 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	06d2      	lsls	r2, r2, #27
 8003cae:	d510      	bpl.n	8003cd2 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	06d0      	lsls	r0, r2, #27
 8003cb4:	d50d      	bpl.n	8003cd2 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cb6:	f06f 0210 	mvn.w	r2, #16
 8003cba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cc0:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cc4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003cc8:	d04b      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003cca:	f7ff ffac 	bl	8003c26 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	07d1      	lsls	r1, r2, #31
 8003cd8:	d508      	bpl.n	8003cec <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	07d2      	lsls	r2, r2, #31
 8003cde:	d505      	bpl.n	8003cec <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce0:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ce6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce8:	f7fe fac6 	bl	8002278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	0610      	lsls	r0, r2, #24
 8003cf2:	d508      	bpl.n	8003d06 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	0611      	lsls	r1, r2, #24
 8003cf8:	d505      	bpl.n	8003d06 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cfa:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d00:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003d02:	f000 f89a 	bl	8003e3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	0652      	lsls	r2, r2, #25
 8003d0c:	d508      	bpl.n	8003d20 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	0650      	lsls	r0, r2, #25
 8003d12:	d505      	bpl.n	8003d20 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d18:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003d1c:	f7ff ff85 	bl	8003c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	0691      	lsls	r1, r2, #26
 8003d26:	d522      	bpl.n	8003d6e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	0692      	lsls	r2, r2, #26
 8003d2c:	d51f      	bpl.n	8003d6e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d2e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d32:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d38:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003d3a:	f000 b87d 	b.w	8003e38 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3e:	f7ff ff71 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7ff ff70 	bl	8003c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8003d48:	e783      	b.n	8003c52 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d4a:	f7ff ff6b 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f7ff ff6a 	bl	8003c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8003d54:	e792      	b.n	8003c7c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d56:	f7ff ff65 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff ff64 	bl	8003c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8003d60:	e7a0      	b.n	8003ca4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	f7ff ff5f 	bl	8003c24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d66:	4620      	mov	r0, r4
 8003d68:	f7ff ff5e 	bl	8003c28 <HAL_TIM_PWM_PulseFinishedCallback>
 8003d6c:	e7af      	b.n	8003cce <HAL_TIM_IRQHandler+0xa2>
}
 8003d6e:	bd10      	pop	{r4, pc}

08003d70 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d70:	4a1a      	ldr	r2, [pc, #104]	; (8003ddc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8003d72:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d74:	4290      	cmp	r0, r2
 8003d76:	d00a      	beq.n	8003d8e <TIM_Base_SetConfig+0x1e>
 8003d78:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0x1e>
 8003d7e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003d82:	4290      	cmp	r0, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0x1e>
 8003d86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d8a:	4290      	cmp	r0, r2
 8003d8c:	d115      	bne.n	8003dba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003d8e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d94:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d96:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <TIM_Base_SetConfig+0x6c>)
 8003d98:	4290      	cmp	r0, r2
 8003d9a:	d00a      	beq.n	8003db2 <TIM_Base_SetConfig+0x42>
 8003d9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003da0:	d007      	beq.n	8003db2 <TIM_Base_SetConfig+0x42>
 8003da2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003da6:	4290      	cmp	r0, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_Base_SetConfig+0x42>
 8003daa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dae:	4290      	cmp	r0, r2
 8003db0:	d103      	bne.n	8003dba <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003db4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dba:	694a      	ldr	r2, [r1, #20]
 8003dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003dc2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc4:	688b      	ldr	r3, [r1, #8]
 8003dc6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc8:	680b      	ldr	r3, [r1, #0]
 8003dca:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dcc:	4b03      	ldr	r3, [pc, #12]	; (8003ddc <TIM_Base_SetConfig+0x6c>)
 8003dce:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dd0:	bf04      	itt	eq
 8003dd2:	690b      	ldreq	r3, [r1, #16]
 8003dd4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	6143      	str	r3, [r0, #20]
}
 8003dda:	4770      	bx	lr
 8003ddc:	40012c00 	.word	0x40012c00

08003de0 <HAL_TIM_Base_Init>:
{
 8003de0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003de2:	4604      	mov	r4, r0
 8003de4:	b330      	cbz	r0, 8003e34 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003de6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003dea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dee:	b91b      	cbnz	r3, 8003df8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003df0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003df4:	f7ff feea 	bl	8003bcc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfa:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	1d21      	adds	r1, r4, #4
 8003e02:	f7ff ffb5 	bl	8003d70 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e06:	2301      	movs	r3, #1
  return HAL_OK;
 8003e08:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e12:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003e2e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003e32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
 8003e36:	e7fc      	b.n	8003e32 <HAL_TIM_Base_Init+0x52>

08003e38 <HAL_TIMEx_CommutCallback>:
 8003e38:	4770      	bx	lr

08003e3a <HAL_TIMEx_BreakCallback>:
 8003e3a:	4770      	bx	lr

08003e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e40:	6803      	ldr	r3, [r0, #0]
 8003e42:	68c1      	ldr	r1, [r0, #12]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e4e:	6882      	ldr	r2, [r0, #8]
 8003e50:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003e52:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e54:	4302      	orrs	r2, r0
 8003e56:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003e58:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8003e5c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e60:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003e62:	430a      	orrs	r2, r1
 8003e64:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	69a1      	ldr	r1, [r4, #24]
 8003e6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e72:	4a0e      	ldr	r2, [pc, #56]	; (8003eac <UART_SetConfig+0x70>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d115      	bne.n	8003ea4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7ff fad2 	bl	8003420 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e7c:	2319      	movs	r3, #25
 8003e7e:	4343      	muls	r3, r0
 8003e80:	6862      	ldr	r2, [r4, #4]
 8003e82:	6820      	ldr	r0, [r4, #0]
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e8a:	2264      	movs	r2, #100	; 0x64
 8003e8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e90:	fb02 3311 	mls	r3, r2, r1, r3
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	3332      	adds	r3, #50	; 0x32
 8003e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e9c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003ea0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ea2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7ff faac 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8003ea8:	e7e8      	b.n	8003e7c <UART_SetConfig+0x40>
 8003eaa:	bf00      	nop
 8003eac:	40013800 	.word	0x40013800

08003eb0 <HAL_UART_Init>:
{
 8003eb0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	b340      	cbz	r0, 8003f08 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003eba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ebe:	b91b      	cbnz	r3, 8003ec8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003ec0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003ec4:	f7fe fba2 	bl	800260c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003ec8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003eca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003ecc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003ed0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003ed2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003ed4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003eda:	f7ff ffaf 	bl	8003e3c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ede:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ef0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003efa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efc:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003efe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f02:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003f06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003f08:	2001      	movs	r0, #1
 8003f0a:	e7fc      	b.n	8003f06 <HAL_UART_Init+0x56>

08003f0c <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f0c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f10:	b113      	cbz	r3, 8003f18 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8003f12:	f06f 0005 	mvn.w	r0, #5
 8003f16:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f18:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f8      	bne.n	8003f12 <osKernelInitialize+0x6>
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <osKernelInitialize+0x34>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	2802      	cmp	r0, #2
 8003f26:	d106      	bne.n	8003f36 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f28:	f3ef 8311 	mrs	r3, BASEPRI
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003f34:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d1fa      	bne.n	8003f30 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f3e:	4770      	bx	lr
 8003f40:	20000798 	.word	0x20000798

08003f44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f44:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f46:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f4a:	b113      	cbz	r3, 8003f52 <osKernelStart+0xe>
    stat = osErrorISR;
 8003f4c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8003f50:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f52:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 8003f56:	2c00      	cmp	r4, #0
 8003f58:	d1f8      	bne.n	8003f4c <osKernelStart+0x8>
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <osKernelStart+0x3c>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	2a02      	cmp	r2, #2
 8003f60:	d106      	bne.n	8003f70 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f62:	f3ef 8311 	mrs	r3, BASEPRI
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <osKernelStart+0x8>
      stat = osError;
 8003f6a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8003f6e:	e7ef      	b.n	8003f50 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 8003f70:	2a01      	cmp	r2, #1
 8003f72:	d1fa      	bne.n	8003f6a <osKernelStart+0x26>
      KernelState = osKernelRunning;
 8003f74:	2202      	movs	r2, #2
 8003f76:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003f78:	f000 fdac 	bl	8004ad4 <vTaskStartScheduler>
      stat = osOK;
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	e7e7      	b.n	8003f50 <osKernelStart+0xc>
 8003f80:	20000798 	.word	0x20000798

08003f84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f88:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	460b      	mov	r3, r1
  hTask = NULL;
 8003f8e:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f90:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003f94:	bb52      	cbnz	r2, 8003fec <osThreadNew+0x68>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f96:	f3ef 8210 	mrs	r2, PRIMASK
 8003f9a:	bb3a      	cbnz	r2, 8003fec <osThreadNew+0x68>
 8003f9c:	4a26      	ldr	r2, [pc, #152]	; (8004038 <osThreadNew+0xb4>)
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	2a02      	cmp	r2, #2
 8003fa2:	d102      	bne.n	8003faa <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fa4:	f3ef 8211 	mrs	r2, BASEPRI
 8003fa8:	bb02      	cbnz	r2, 8003fec <osThreadNew+0x68>
 8003faa:	b1f8      	cbz	r0, 8003fec <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8003fac:	2200      	movs	r2, #0
 8003fae:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8003fb2:	2c00      	cmp	r4, #0
 8003fb4:	d030      	beq.n	8004018 <osThreadNew+0x94>
      if (attr->name != NULL) {
 8003fb6:	6821      	ldr	r1, [r4, #0]
 8003fb8:	b909      	cbnz	r1, 8003fbe <osThreadNew+0x3a>
    name  = &empty;
 8003fba:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003fbe:	69a5      	ldr	r5, [r4, #24]
 8003fc0:	2d00      	cmp	r5, #0
 8003fc2:	bf08      	it	eq
 8003fc4:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fc6:	1e6a      	subs	r2, r5, #1
 8003fc8:	2a37      	cmp	r2, #55	; 0x37
 8003fca:	46ac      	mov	ip, r5
 8003fcc:	d82a      	bhi.n	8004024 <osThreadNew+0xa0>
 8003fce:	6862      	ldr	r2, [r4, #4]
 8003fd0:	07d2      	lsls	r2, r2, #31
 8003fd2:	d427      	bmi.n	8004024 <osThreadNew+0xa0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8003fd4:	6966      	ldr	r6, [r4, #20]
 8003fd6:	b166      	cbz	r6, 8003ff2 <osThreadNew+0x6e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fd8:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fda:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8003fde:	b157      	cbz	r7, 8003ff6 <osThreadNew+0x72>
 8003fe0:	f1be 0fbb 	cmp.w	lr, #187	; 0xbb
 8003fe4:	d902      	bls.n	8003fec <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fe6:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fe8:	b104      	cbz	r4, 8003fec <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003fea:	b9ee      	cbnz	r6, 8004028 <osThreadNew+0xa4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003fec:	9805      	ldr	r0, [sp, #20]
}
 8003fee:	b007      	add	sp, #28
 8003ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8003ff2:	2280      	movs	r2, #128	; 0x80
 8003ff4:	e7f1      	b.n	8003fda <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ff6:	f1be 0f00 	cmp.w	lr, #0
 8003ffa:	d1f7      	bne.n	8003fec <osThreadNew+0x68>
      if (mem == 0) {
 8003ffc:	6924      	ldr	r4, [r4, #16]
 8003ffe:	2c00      	cmp	r4, #0
 8004000:	d1f4      	bne.n	8003fec <osThreadNew+0x68>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004002:	ac05      	add	r4, sp, #20
 8004004:	e9cd c400 	strd	ip, r4, [sp]
 8004008:	b292      	uxth	r2, r2
 800400a:	f000 fd36 	bl	8004a7a <xTaskCreate>
 800400e:	2801      	cmp	r0, #1
          hTask = NULL;
 8004010:	bf1c      	itt	ne
 8004012:	2300      	movne	r3, #0
 8004014:	9305      	strne	r3, [sp, #20]
 8004016:	e7e9      	b.n	8003fec <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 8004018:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800401c:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 800401e:	f10d 0113 	add.w	r1, sp, #19
 8004022:	e7ee      	b.n	8004002 <osThreadNew+0x7e>
        return (NULL);
 8004024:	2000      	movs	r0, #0
 8004026:	e7e2      	b.n	8003fee <osThreadNew+0x6a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004028:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800402c:	9500      	str	r5, [sp, #0]
 800402e:	f000 fced 	bl	8004a0c <xTaskCreateStatic>
 8004032:	9005      	str	r0, [sp, #20]
 8004034:	e7da      	b.n	8003fec <osThreadNew+0x68>
 8004036:	bf00      	nop
 8004038:	20000798 	.word	0x20000798

0800403c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800403c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800403e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004042:	b113      	cbz	r3, 800404a <osDelay+0xe>
    stat = osErrorISR;
 8004044:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8004048:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404a:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f8      	bne.n	8004044 <osDelay+0x8>
 8004052:	4b07      	ldr	r3, [pc, #28]	; (8004070 <osDelay+0x34>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d103      	bne.n	8004062 <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800405a:	f3ef 8311 	mrs	r3, BASEPRI
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <osDelay+0x8>
    if (ticks != 0U) {
 8004062:	2800      	cmp	r0, #0
 8004064:	d0f0      	beq.n	8004048 <osDelay+0xc>
      vTaskDelay(ticks);
 8004066:	f000 fedf 	bl	8004e28 <vTaskDelay>
    stat = osOK;
 800406a:	2000      	movs	r0, #0
 800406c:	e7ec      	b.n	8004048 <osDelay+0xc>
 800406e:	bf00      	nop
 8004070:	20000798 	.word	0x20000798

08004074 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <vApplicationGetIdleTaskMemory+0x10>)
 8004076:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <vApplicationGetIdleTaskMemory+0x14>)
 800407a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	6013      	str	r3, [r2, #0]
}
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	200006dc 	.word	0x200006dc
 8004088:	200004dc 	.word	0x200004dc

0800408c <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <vApplicationGetTimerTaskMemory+0x10>)
 800408e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <vApplicationGetTimerTaskMemory+0x14>)
 8004092:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	4770      	bx	lr
 800409c:	20000b9c 	.word	0x20000b9c
 80040a0:	2000079c 	.word	0x2000079c

080040a4 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040a4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b0:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040b8:	4770      	bx	lr

080040ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80040be:	4770      	bx	lr

080040c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80040c0:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040c2:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80040c4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040c6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040cc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80040ce:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040d0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80040d2:	3301      	adds	r3, #1
 80040d4:	6003      	str	r3, [r0, #0]
}
 80040d6:	4770      	bx	lr

080040d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040d8:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040da:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040dc:	1c63      	adds	r3, r4, #1
 80040de:	d10a      	bne.n	80040f6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040e0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040e6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040e8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80040ea:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80040ec:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040ee:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80040f0:	3301      	adds	r3, #1
 80040f2:	6003      	str	r3, [r0, #0]
}
 80040f4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f6:	f100 0208 	add.w	r2, r0, #8
 80040fa:	4613      	mov	r3, r2
 80040fc:	6852      	ldr	r2, [r2, #4]
 80040fe:	6815      	ldr	r5, [r2, #0]
 8004100:	42a5      	cmp	r5, r4
 8004102:	d9fa      	bls.n	80040fa <vListInsert+0x22>
 8004104:	e7ed      	b.n	80040e2 <vListInsert+0xa>

08004106 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004106:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004108:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800410c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800410e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004114:	bf08      	it	eq
 8004116:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004118:	2200      	movs	r2, #0
 800411a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	3a01      	subs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004122:	6818      	ldr	r0, [r3, #0]
}
 8004124:	4770      	bx	lr

08004126 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004126:	b510      	push	{r4, lr}
 8004128:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800412a:	f001 fa33 	bl	8005594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800412e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004130:	f001 fa50 	bl	80055d4 <vPortExitCritical>

	return xReturn;
}
 8004134:	fab4 f084 	clz	r0, r4
 8004138:	0940      	lsrs	r0, r0, #5
 800413a:	bd10      	pop	{r4, pc}

0800413c <prvCopyDataToQueue>:
{
 800413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413e:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004140:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004142:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004144:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004146:	b952      	cbnz	r2, 800415e <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004148:	6807      	ldr	r7, [r0, #0]
 800414a:	bb47      	cbnz	r7, 800419e <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800414c:	6840      	ldr	r0, [r0, #4]
 800414e:	f000 ffa9 	bl	80050a4 <xTaskPriorityDisinherit>
 8004152:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 8004154:	6067      	str	r7, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004156:	3601      	adds	r6, #1
}
 8004158:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800415a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800415e:	b965      	cbnz	r5, 800417a <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004160:	6880      	ldr	r0, [r0, #8]
 8004162:	f002 f956 	bl	8006412 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004166:	68a3      	ldr	r3, [r4, #8]
 8004168:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800416a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800416c:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800416e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004170:	4293      	cmp	r3, r2
 8004172:	d3f0      	bcc.n	8004156 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004174:	6823      	ldr	r3, [r4, #0]
 8004176:	60a3      	str	r3, [r4, #8]
 8004178:	e7ed      	b.n	8004156 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417a:	68c0      	ldr	r0, [r0, #12]
 800417c:	f002 f949 	bl	8006412 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004180:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004182:	68e3      	ldr	r3, [r4, #12]
 8004184:	4251      	negs	r1, r2
 8004186:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004188:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800418a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800418c:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800418e:	bf3e      	ittt	cc
 8004190:	6863      	ldrcc	r3, [r4, #4]
 8004192:	185b      	addcc	r3, r3, r1
 8004194:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004196:	2d02      	cmp	r5, #2
 8004198:	d101      	bne.n	800419e <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800419a:	b116      	cbz	r6, 80041a2 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800419c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800419e:	2500      	movs	r5, #0
 80041a0:	e7d9      	b.n	8004156 <prvCopyDataToQueue+0x1a>
 80041a2:	4635      	mov	r5, r6
 80041a4:	e7d7      	b.n	8004156 <prvCopyDataToQueue+0x1a>

080041a6 <prvCopyDataFromQueue>:
{
 80041a6:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80041aa:	4608      	mov	r0, r1
 80041ac:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80041ae:	b162      	cbz	r2, 80041ca <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041b0:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041b2:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041b4:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80041b6:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80041b8:	bf28      	it	cs
 80041ba:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80041bc:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80041be:	bf28      	it	cs
 80041c0:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041c2:	68d9      	ldr	r1, [r3, #12]
}
 80041c4:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80041c6:	f002 b924 	b.w	8006412 <memcpy>
}
 80041ca:	bc10      	pop	{r4}
 80041cc:	4770      	bx	lr

080041ce <prvUnlockQueue>:
{
 80041ce:	b570      	push	{r4, r5, r6, lr}
 80041d0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80041d2:	f001 f9df 	bl	8005594 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80041d6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041da:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80041de:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041e0:	2d00      	cmp	r5, #0
 80041e2:	dc14      	bgt.n	800420e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80041e4:	23ff      	movs	r3, #255	; 0xff
 80041e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80041ea:	f001 f9f3 	bl	80055d4 <vPortExitCritical>
	taskENTER_CRITICAL();
 80041ee:	f001 f9d1 	bl	8005594 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80041f2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f6:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80041fa:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	dc12      	bgt.n	8004226 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8004200:	23ff      	movs	r3, #255	; 0xff
 8004202:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8004206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800420a:	f001 b9e3 	b.w	80055d4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800420e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0e7      	beq.n	80041e4 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004214:	4630      	mov	r0, r6
 8004216:	f000 fea7 	bl	8004f68 <xTaskRemoveFromEventList>
 800421a:	b108      	cbz	r0, 8004220 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800421c:	f000 ff2c 	bl	8005078 <vTaskMissedYield>
			--cTxLock;
 8004220:	3d01      	subs	r5, #1
 8004222:	b26d      	sxtb	r5, r5
 8004224:	e7dc      	b.n	80041e0 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004226:	6923      	ldr	r3, [r4, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0e9      	beq.n	8004200 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800422c:	4630      	mov	r0, r6
 800422e:	f000 fe9b 	bl	8004f68 <xTaskRemoveFromEventList>
 8004232:	b108      	cbz	r0, 8004238 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004234:	f000 ff20 	bl	8005078 <vTaskMissedYield>
				--cRxLock;
 8004238:	3d01      	subs	r5, #1
 800423a:	b26d      	sxtb	r5, r5
 800423c:	e7de      	b.n	80041fc <prvUnlockQueue+0x2e>

0800423e <xQueueGenericReset>:
{
 800423e:	b538      	push	{r3, r4, r5, lr}
 8004240:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004242:	4604      	mov	r4, r0
 8004244:	b940      	cbnz	r0, 8004258 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424a:	f383 8811 	msr	BASEPRI, r3
 800424e:	f3bf 8f6f 	isb	sy
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	e7fe      	b.n	8004256 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004258:	f001 f99c 	bl	8005594 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800425c:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8004260:	434b      	muls	r3, r1
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004266:	1a5b      	subs	r3, r3, r1
 8004268:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800426a:	6060      	str	r0, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800426c:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800426e:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004270:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004272:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004274:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8004276:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800427a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800427e:	b9a5      	cbnz	r5, 80042aa <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004280:	6923      	ldr	r3, [r4, #16]
 8004282:	b173      	cbz	r3, 80042a2 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004284:	f104 0010 	add.w	r0, r4, #16
 8004288:	f000 fe6e 	bl	8004f68 <xTaskRemoveFromEventList>
 800428c:	b148      	cbz	r0, 80042a2 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800428e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004296:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80042a2:	f001 f997 	bl	80055d4 <vPortExitCritical>
}
 80042a6:	2001      	movs	r0, #1
 80042a8:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042aa:	f104 0010 	add.w	r0, r4, #16
 80042ae:	f7ff fef9 	bl	80040a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042b6:	f7ff fef5 	bl	80040a4 <vListInitialise>
 80042ba:	e7f2      	b.n	80042a2 <xQueueGenericReset+0x64>

080042bc <xQueueGenericCreateStatic>:
	{
 80042bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042be:	460d      	mov	r5, r1
 80042c0:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042c2:	b940      	cbnz	r0, 80042d6 <xQueueGenericCreateStatic+0x1a>
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	e7fe      	b.n	80042d4 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80042d6:	b943      	cbnz	r3, 80042ea <xQueueGenericCreateStatic+0x2e>
 80042d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	e7fe      	b.n	80042e8 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042ea:	b14a      	cbz	r2, 8004300 <xQueueGenericCreateStatic+0x44>
 80042ec:	b991      	cbnz	r1, 8004314 <xQueueGenericCreateStatic+0x58>
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	e7fe      	b.n	80042fe <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004300:	b141      	cbz	r1, 8004314 <xQueueGenericCreateStatic+0x58>
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	e7fe      	b.n	8004312 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004314:	2350      	movs	r3, #80	; 0x50
 8004316:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004318:	9b01      	ldr	r3, [sp, #4]
 800431a:	2b50      	cmp	r3, #80	; 0x50
 800431c:	d008      	beq.n	8004330 <xQueueGenericCreateStatic+0x74>
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	e7fe      	b.n	800432e <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004330:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004332:	2d00      	cmp	r5, #0
 8004334:	bf08      	it	eq
 8004336:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8004338:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800433c:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004340:	4620      	mov	r0, r4
 8004342:	6022      	str	r2, [r4, #0]
 8004344:	f7ff ff7b 	bl	800423e <xQueueGenericReset>
	}
 8004348:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800434a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800434e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8004352:	b003      	add	sp, #12
 8004354:	bd30      	pop	{r4, r5, pc}

08004356 <xQueueGenericSend>:
{
 8004356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800435a:	b085      	sub	sp, #20
 800435c:	4688      	mov	r8, r1
 800435e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004360:	4604      	mov	r4, r0
{
 8004362:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004364:	b940      	cbnz	r0, 8004378 <xQueueGenericSend+0x22>
 8004366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436a:	f383 8811 	msr	BASEPRI, r3
 800436e:	f3bf 8f6f 	isb	sy
 8004372:	f3bf 8f4f 	dsb	sy
 8004376:	e7fe      	b.n	8004376 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004378:	b951      	cbnz	r1, 8004390 <xQueueGenericSend+0x3a>
 800437a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800437c:	b143      	cbz	r3, 8004390 <xQueueGenericSend+0x3a>
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	f383 8811 	msr	BASEPRI, r3
 8004386:	f3bf 8f6f 	isb	sy
 800438a:	f3bf 8f4f 	dsb	sy
 800438e:	e7fe      	b.n	800438e <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004390:	2f02      	cmp	r7, #2
 8004392:	d10b      	bne.n	80043ac <xQueueGenericSend+0x56>
 8004394:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004396:	2b01      	cmp	r3, #1
 8004398:	d008      	beq.n	80043ac <xQueueGenericSend+0x56>
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	e7fe      	b.n	80043aa <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ac:	f000 fe6a 	bl	8005084 <xTaskGetSchedulerState>
 80043b0:	4606      	mov	r6, r0
 80043b2:	b950      	cbnz	r0, 80043ca <xQueueGenericSend+0x74>
 80043b4:	9b01      	ldr	r3, [sp, #4]
 80043b6:	b14b      	cbz	r3, 80043cc <xQueueGenericSend+0x76>
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	e7fe      	b.n	80043c8 <xQueueGenericSend+0x72>
 80043ca:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80043cc:	f04f 0900 	mov.w	r9, #0
 80043d0:	e037      	b.n	8004442 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 80043d2:	9d01      	ldr	r5, [sp, #4]
 80043d4:	b91d      	cbnz	r5, 80043de <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 80043d6:	f001 f8fd 	bl	80055d4 <vPortExitCritical>
			return errQUEUE_FULL;
 80043da:	2000      	movs	r0, #0
 80043dc:	e052      	b.n	8004484 <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 80043de:	b916      	cbnz	r6, 80043e6 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043e0:	a802      	add	r0, sp, #8
 80043e2:	f000 fe01 	bl	8004fe8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80043e6:	f001 f8f5 	bl	80055d4 <vPortExitCritical>
		vTaskSuspendAll();
 80043ea:	f000 fbc3 	bl	8004b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ee:	f001 f8d1 	bl	8005594 <vPortEnterCritical>
 80043f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80043f6:	2bff      	cmp	r3, #255	; 0xff
 80043f8:	bf08      	it	eq
 80043fa:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80043fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004402:	2bff      	cmp	r3, #255	; 0xff
 8004404:	bf08      	it	eq
 8004406:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800440a:	f001 f8e3 	bl	80055d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800440e:	a901      	add	r1, sp, #4
 8004410:	a802      	add	r0, sp, #8
 8004412:	f000 fdf5 	bl	8005000 <xTaskCheckForTimeOut>
 8004416:	2800      	cmp	r0, #0
 8004418:	d14a      	bne.n	80044b0 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800441a:	f001 f8bb 	bl	8005594 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800441e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004422:	429a      	cmp	r2, r3
 8004424:	d131      	bne.n	800448a <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004426:	f001 f8d5 	bl	80055d4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800442a:	9901      	ldr	r1, [sp, #4]
 800442c:	f104 0010 	add.w	r0, r4, #16
 8004430:	f000 fd60 	bl	8004ef4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004434:	4620      	mov	r0, r4
 8004436:	f7ff feca 	bl	80041ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800443a:	f000 fc39 	bl	8004cb0 <xTaskResumeAll>
 800443e:	b360      	cbz	r0, 800449a <xQueueGenericSend+0x144>
 8004440:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004442:	f001 f8a7 	bl	8005594 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004446:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800444a:	429a      	cmp	r2, r3
 800444c:	d301      	bcc.n	8004452 <xQueueGenericSend+0xfc>
 800444e:	2f02      	cmp	r7, #2
 8004450:	d1bf      	bne.n	80043d2 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004452:	463a      	mov	r2, r7
 8004454:	4641      	mov	r1, r8
 8004456:	4620      	mov	r0, r4
 8004458:	f7ff fe70 	bl	800413c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800445c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800445e:	b11b      	cbz	r3, 8004468 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004460:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004464:	f000 fd80 	bl	8004f68 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004468:	b148      	cbz	r0, 800447e <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800446a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800446e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004472:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800447e:	f001 f8a9 	bl	80055d4 <vPortExitCritical>
				return pdPASS;
 8004482:	2001      	movs	r0, #1
}
 8004484:	b005      	add	sp, #20
 8004486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800448a:	f001 f8a3 	bl	80055d4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800448e:	4620      	mov	r0, r4
 8004490:	f7ff fe9d 	bl	80041ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004494:	f000 fc0c 	bl	8004cb0 <xTaskResumeAll>
 8004498:	e7d2      	b.n	8004440 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800449a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	e7c7      	b.n	8004440 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80044b0:	4620      	mov	r0, r4
 80044b2:	f7ff fe8c 	bl	80041ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044b6:	f000 fbfb 	bl	8004cb0 <xTaskResumeAll>
 80044ba:	e78e      	b.n	80043da <xQueueGenericSend+0x84>

080044bc <xQueueGenericSendFromISR>:
{
 80044bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c0:	4689      	mov	r9, r1
 80044c2:	4690      	mov	r8, r2
 80044c4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80044c6:	4604      	mov	r4, r0
 80044c8:	b940      	cbnz	r0, 80044dc <xQueueGenericSendFromISR+0x20>
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	e7fe      	b.n	80044da <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044dc:	b951      	cbnz	r1, 80044f4 <xQueueGenericSendFromISR+0x38>
 80044de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044e0:	b143      	cbz	r3, 80044f4 <xQueueGenericSendFromISR+0x38>
 80044e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	e7fe      	b.n	80044f2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044f4:	2f02      	cmp	r7, #2
 80044f6:	d10b      	bne.n	8004510 <xQueueGenericSendFromISR+0x54>
 80044f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d008      	beq.n	8004510 <xQueueGenericSendFromISR+0x54>
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	e7fe      	b.n	800450e <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004510:	f001 f91c 	bl	800574c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004514:	f3ef 8611 	mrs	r6, BASEPRI
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004528:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800452a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800452c:	429a      	cmp	r2, r3
 800452e:	d301      	bcc.n	8004534 <xQueueGenericSendFromISR+0x78>
 8004530:	2f02      	cmp	r7, #2
 8004532:	d122      	bne.n	800457a <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004534:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004538:	463a      	mov	r2, r7
 800453a:	4649      	mov	r1, r9
 800453c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800453e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004540:	f7ff fdfc 	bl	800413c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004544:	1c6b      	adds	r3, r5, #1
 8004546:	d113      	bne.n	8004570 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800454a:	b90b      	cbnz	r3, 8004550 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 800454c:	2001      	movs	r0, #1
 800454e:	e00b      	b.n	8004568 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004550:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004554:	f000 fd08 	bl	8004f68 <xTaskRemoveFromEventList>
 8004558:	2800      	cmp	r0, #0
 800455a:	d0f7      	beq.n	800454c <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 800455c:	f1b8 0f00 	cmp.w	r8, #0
 8004560:	d0f4      	beq.n	800454c <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004562:	2001      	movs	r0, #1
 8004564:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004568:	f386 8811 	msr	BASEPRI, r6
}
 800456c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004570:	3501      	adds	r5, #1
 8004572:	b26d      	sxtb	r5, r5
 8004574:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004578:	e7e8      	b.n	800454c <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 800457a:	2000      	movs	r0, #0
 800457c:	e7f4      	b.n	8004568 <xQueueGenericSendFromISR+0xac>

0800457e <xQueueReceive>:
{
 800457e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004582:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8004584:	4604      	mov	r4, r0
{
 8004586:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004588:	b940      	cbnz	r0, 800459c <xQueueReceive+0x1e>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	e7fe      	b.n	800459a <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800459c:	b951      	cbnz	r1, 80045b4 <xQueueReceive+0x36>
 800459e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045a0:	b143      	cbz	r3, 80045b4 <xQueueReceive+0x36>
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	e7fe      	b.n	80045b2 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045b4:	f000 fd66 	bl	8005084 <xTaskGetSchedulerState>
 80045b8:	4606      	mov	r6, r0
 80045ba:	b950      	cbnz	r0, 80045d2 <xQueueReceive+0x54>
 80045bc:	9b01      	ldr	r3, [sp, #4]
 80045be:	b14b      	cbz	r3, 80045d4 <xQueueReceive+0x56>
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	e7fe      	b.n	80045d0 <xQueueReceive+0x52>
 80045d2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80045d4:	f04f 0800 	mov.w	r8, #0
 80045d8:	e03d      	b.n	8004656 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80045da:	9d01      	ldr	r5, [sp, #4]
 80045dc:	b91d      	cbnz	r5, 80045e6 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 80045de:	f000 fff9 	bl	80055d4 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80045e2:	2000      	movs	r0, #0
 80045e4:	e056      	b.n	8004694 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 80045e6:	b916      	cbnz	r6, 80045ee <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045e8:	a802      	add	r0, sp, #8
 80045ea:	f000 fcfd 	bl	8004fe8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80045ee:	f000 fff1 	bl	80055d4 <vPortExitCritical>
		vTaskSuspendAll();
 80045f2:	f000 fabf 	bl	8004b74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045f6:	f000 ffcd 	bl	8005594 <vPortEnterCritical>
 80045fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80045fe:	2bff      	cmp	r3, #255	; 0xff
 8004600:	bf08      	it	eq
 8004602:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004606:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800460a:	2bff      	cmp	r3, #255	; 0xff
 800460c:	bf08      	it	eq
 800460e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8004612:	f000 ffdf 	bl	80055d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004616:	a901      	add	r1, sp, #4
 8004618:	a802      	add	r0, sp, #8
 800461a:	f000 fcf1 	bl	8005000 <xTaskCheckForTimeOut>
 800461e:	2800      	cmp	r0, #0
 8004620:	d141      	bne.n	80046a6 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004622:	4620      	mov	r0, r4
 8004624:	f7ff fd7f 	bl	8004126 <prvIsQueueEmpty>
 8004628:	b3b8      	cbz	r0, 800469a <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800462a:	9901      	ldr	r1, [sp, #4]
 800462c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004630:	f000 fc60 	bl	8004ef4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004634:	4620      	mov	r0, r4
 8004636:	f7ff fdca 	bl	80041ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800463a:	f000 fb39 	bl	8004cb0 <xTaskResumeAll>
 800463e:	b948      	cbnz	r0, 8004654 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8004640:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004648:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004656:	f000 ff9d 	bl	8005594 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800465a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800465c:	2d00      	cmp	r5, #0
 800465e:	d0bc      	beq.n	80045da <xQueueReceive+0x5c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004660:	4639      	mov	r1, r7
 8004662:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004664:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004666:	f7ff fd9e 	bl	80041a6 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800466a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800466c:	6923      	ldr	r3, [r4, #16]
 800466e:	b173      	cbz	r3, 800468e <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004670:	f104 0010 	add.w	r0, r4, #16
 8004674:	f000 fc78 	bl	8004f68 <xTaskRemoveFromEventList>
 8004678:	b148      	cbz	r0, 800468e <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800467a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800468e:	f000 ffa1 	bl	80055d4 <vPortExitCritical>
				return pdPASS;
 8004692:	2001      	movs	r0, #1
}
 8004694:	b004      	add	sp, #16
 8004696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800469a:	4620      	mov	r0, r4
 800469c:	f7ff fd97 	bl	80041ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046a0:	f000 fb06 	bl	8004cb0 <xTaskResumeAll>
 80046a4:	e7d6      	b.n	8004654 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80046a6:	4620      	mov	r0, r4
 80046a8:	f7ff fd91 	bl	80041ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ac:	f000 fb00 	bl	8004cb0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff fd38 	bl	8004126 <prvIsQueueEmpty>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d0cc      	beq.n	8004654 <xQueueReceive+0xd6>
 80046ba:	e792      	b.n	80045e2 <xQueueReceive+0x64>

080046bc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046bc:	2300      	movs	r3, #0
	{
 80046be:	b510      	push	{r4, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80046c0:	4a06      	ldr	r2, [pc, #24]	; (80046dc <vQueueAddToRegistry+0x20>)
 80046c2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80046c6:	b92c      	cbnz	r4, 80046d4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80046cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80046d0:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80046d2:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046d4:	3301      	adds	r3, #1
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d1f3      	bne.n	80046c2 <vQueueAddToRegistry+0x6>
 80046da:	e7fa      	b.n	80046d2 <vQueueAddToRegistry+0x16>
 80046dc:	20000c58 	.word	0x20000c58

080046e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	4604      	mov	r4, r0
 80046e4:	460d      	mov	r5, r1
 80046e6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046e8:	f000 ff54 	bl	8005594 <vPortEnterCritical>
 80046ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80046f0:	2bff      	cmp	r3, #255	; 0xff
 80046f2:	bf04      	itt	eq
 80046f4:	2300      	moveq	r3, #0
 80046f6:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80046fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80046fe:	2bff      	cmp	r3, #255	; 0xff
 8004700:	bf04      	itt	eq
 8004702:	2300      	moveq	r3, #0
 8004704:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8004708:	f000 ff64 	bl	80055d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800470c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800470e:	b92b      	cbnz	r3, 800471c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004710:	4632      	mov	r2, r6
 8004712:	4629      	mov	r1, r5
 8004714:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004718:	f000 fc06 	bl	8004f28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800471c:	4620      	mov	r0, r4
	}
 800471e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8004722:	f7ff bd54 	b.w	80041ce <prvUnlockQueue>
	...

08004728 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800472e:	f000 ff31 	bl	8005594 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004732:	4b30      	ldr	r3, [pc, #192]	; (80047f4 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8004734:	4e30      	ldr	r6, [pc, #192]	; (80047f8 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	4f30      	ldr	r7, [pc, #192]	; (80047fc <prvAddNewTaskToReadyList+0xd4>)
 800473a:	3201      	adds	r2, #1
 800473c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800473e:	6835      	ldr	r5, [r6, #0]
 8004740:	2d00      	cmp	r5, #0
 8004742:	d14b      	bne.n	80047dc <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004744:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d11f      	bne.n	800478c <prvAddNewTaskToReadyList+0x64>
 800474c:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800474e:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004750:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004752:	f7ff fca7 	bl	80040a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004756:	2d38      	cmp	r5, #56	; 0x38
 8004758:	f108 0814 	add.w	r8, r8, #20
 800475c:	d1f7      	bne.n	800474e <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800475e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004800 <prvAddNewTaskToReadyList+0xd8>
	vListInitialise( &xDelayedTaskList2 );
 8004762:	4d28      	ldr	r5, [pc, #160]	; (8004804 <prvAddNewTaskToReadyList+0xdc>)
	vListInitialise( &xDelayedTaskList1 );
 8004764:	4640      	mov	r0, r8
 8004766:	f7ff fc9d 	bl	80040a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800476a:	4628      	mov	r0, r5
 800476c:	f7ff fc9a 	bl	80040a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004770:	4825      	ldr	r0, [pc, #148]	; (8004808 <prvAddNewTaskToReadyList+0xe0>)
 8004772:	f7ff fc97 	bl	80040a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004776:	4825      	ldr	r0, [pc, #148]	; (800480c <prvAddNewTaskToReadyList+0xe4>)
 8004778:	f7ff fc94 	bl	80040a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800477c:	4824      	ldr	r0, [pc, #144]	; (8004810 <prvAddNewTaskToReadyList+0xe8>)
 800477e:	f7ff fc91 	bl	80040a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004782:	4b24      	ldr	r3, [pc, #144]	; (8004814 <prvAddNewTaskToReadyList+0xec>)
 8004784:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004788:	4b23      	ldr	r3, [pc, #140]	; (8004818 <prvAddNewTaskToReadyList+0xf0>)
 800478a:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800478c:	2014      	movs	r0, #20
		uxTaskNumber++;
 800478e:	4a23      	ldr	r2, [pc, #140]	; (800481c <prvAddNewTaskToReadyList+0xf4>)
 8004790:	6813      	ldr	r3, [r2, #0]
 8004792:	3301      	adds	r3, #1
 8004794:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004796:	4a22      	ldr	r2, [pc, #136]	; (8004820 <prvAddNewTaskToReadyList+0xf8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004798:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800479a:	6811      	ldr	r1, [r2, #0]
 800479c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800479e:	428b      	cmp	r3, r1
 80047a0:	fb00 7003 	mla	r0, r0, r3, r7
 80047a4:	f104 0104 	add.w	r1, r4, #4
 80047a8:	bf88      	it	hi
 80047aa:	6013      	strhi	r3, [r2, #0]
 80047ac:	f7ff fc88 	bl	80040c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80047b0:	f000 ff10 	bl	80055d4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80047b4:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <prvAddNewTaskToReadyList+0xfc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	b173      	cbz	r3, 80047d8 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047ba:	6833      	ldr	r3, [r6, #0]
 80047bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d209      	bcs.n	80047d8 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 80047c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80047c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	f3bf 8f6f 	isb	sy
}
 80047d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <prvAddNewTaskToReadyList+0xfc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1d3      	bne.n	800478c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047e4:	6833      	ldr	r3, [r6, #0]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80047ea:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80047ec:	bf98      	it	ls
 80047ee:	6034      	strls	r4, [r6, #0]
 80047f0:	e7cc      	b.n	800478c <prvAddNewTaskToReadyList+0x64>
 80047f2:	bf00      	nop
 80047f4:	20001104 	.word	0x20001104
 80047f8:	20000c98 	.word	0x20000c98
 80047fc:	20000ca4 	.word	0x20000ca4
 8004800:	2000111c 	.word	0x2000111c
 8004804:	20001130 	.word	0x20001130
 8004808:	2000114c 	.word	0x2000114c
 800480c:	20001178 	.word	0x20001178
 8004810:	20001164 	.word	0x20001164
 8004814:	20000c9c 	.word	0x20000c9c
 8004818:	20000ca0 	.word	0x20000ca0
 800481c:	20001114 	.word	0x20001114
 8004820:	20001118 	.word	0x20001118
 8004824:	20001160 	.word	0x20001160

08004828 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	4606      	mov	r6, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800482c:	4b14      	ldr	r3, [pc, #80]	; (8004880 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800482e:	4d15      	ldr	r5, [pc, #84]	; (8004884 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8004830:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004832:	6828      	ldr	r0, [r5, #0]
{
 8004834:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004836:	3004      	adds	r0, #4
 8004838:	f7ff fc65 	bl	8004106 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800483c:	1c73      	adds	r3, r6, #1
 800483e:	d107      	bne.n	8004850 <prvAddCurrentTaskToDelayedList+0x28>
 8004840:	b137      	cbz	r7, 8004850 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004842:	6829      	ldr	r1, [r5, #0]
 8004844:	4810      	ldr	r0, [pc, #64]	; (8004888 <prvAddCurrentTaskToDelayedList+0x60>)
 8004846:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004848:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800484c:	f7ff bc38 	b.w	80040c0 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	19a4      	adds	r4, r4, r6
 8004854:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004856:	d307      	bcc.n	8004868 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <prvAddCurrentTaskToDelayedList+0x64>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	6829      	ldr	r1, [r5, #0]
}
 800485e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004862:	3104      	adds	r1, #4
 8004864:	f7ff bc38 	b.w	80040d8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <prvAddCurrentTaskToDelayedList+0x68>)
 800486a:	6818      	ldr	r0, [r3, #0]
 800486c:	6829      	ldr	r1, [r5, #0]
 800486e:	3104      	adds	r1, #4
 8004870:	f7ff fc32 	bl	80040d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800487a:	bf88      	it	hi
 800487c:	601c      	strhi	r4, [r3, #0]
}
 800487e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004880:	2000118c 	.word	0x2000118c
 8004884:	20000c98 	.word	0x20000c98
 8004888:	20001164 	.word	0x20001164
 800488c:	20000ca0 	.word	0x20000ca0
 8004890:	20000c9c 	.word	0x20000c9c
 8004894:	20001144 	.word	0x20001144

08004898 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004898:	4a06      	ldr	r2, [pc, #24]	; (80048b4 <prvResetNextTaskUnblockTime+0x1c>)
 800489a:	6813      	ldr	r3, [r2, #0]
 800489c:	6819      	ldr	r1, [r3, #0]
 800489e:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <prvResetNextTaskUnblockTime+0x20>)
 80048a0:	b919      	cbnz	r1, 80048aa <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80048a2:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048a6:	601a      	str	r2, [r3, #0]
}
 80048a8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048ae:	68d2      	ldr	r2, [r2, #12]
 80048b0:	6852      	ldr	r2, [r2, #4]
 80048b2:	e7f8      	b.n	80048a6 <prvResetNextTaskUnblockTime+0xe>
 80048b4:	20000c9c 	.word	0x20000c9c
 80048b8:	20001144 	.word	0x20001144

080048bc <prvDeleteTCB>:
	{
 80048bc:	b510      	push	{r4, lr}
 80048be:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80048c0:	3054      	adds	r0, #84	; 0x54
 80048c2:	f002 fabf 	bl	8006e44 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048c6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 80048ca:	b93b      	cbnz	r3, 80048dc <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 80048cc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80048ce:	f001 f81f 	bl	8005910 <vPortFree>
				vPortFree( pxTCB );
 80048d2:	4620      	mov	r0, r4
	}
 80048d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80048d8:	f001 b81a 	b.w	8005910 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d0f8      	beq.n	80048d2 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d008      	beq.n	80048f6 <prvDeleteTCB+0x3a>
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	e7fe      	b.n	80048f4 <prvDeleteTCB+0x38>
	}
 80048f6:	bd10      	pop	{r4, pc}

080048f8 <prvIdleTask>:
{
 80048f8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80048fa:	4c13      	ldr	r4, [pc, #76]	; (8004948 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80048fc:	4f13      	ldr	r7, [pc, #76]	; (800494c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80048fe:	4d14      	ldr	r5, [pc, #80]	; (8004950 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	b973      	cbnz	r3, 8004922 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <prvIdleTask+0x5c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d9f8      	bls.n	80048fe <prvIdleTask+0x6>
				taskYIELD();
 800490c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004914:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	e7ed      	b.n	80048fe <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8004922:	f000 fe37 	bl	8005594 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800492a:	1d30      	adds	r0, r6, #4
 800492c:	f7ff fbeb 	bl	8004106 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	3b01      	subs	r3, #1
 8004934:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	3b01      	subs	r3, #1
 800493a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800493c:	f000 fe4a 	bl	80055d4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004940:	4630      	mov	r0, r6
 8004942:	f7ff ffbb 	bl	80048bc <prvDeleteTCB>
 8004946:	e7db      	b.n	8004900 <prvIdleTask+0x8>
 8004948:	20001108 	.word	0x20001108
 800494c:	20001178 	.word	0x20001178
 8004950:	20001104 	.word	0x20001104
 8004954:	20000ca4 	.word	0x20000ca4

08004958 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	460d      	mov	r5, r1
 800495e:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004962:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8004966:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8004968:	4606      	mov	r6, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800496a:	21a5      	movs	r1, #165	; 0xa5
 800496c:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800496e:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004970:	f001 fd5d 	bl	800642e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004974:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004976:	f1a9 0904 	sub.w	r9, r9, #4
 800497a:	4491      	add	r9, r2
 800497c:	1e6b      	subs	r3, r5, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800497e:	f029 0907 	bic.w	r9, r9, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004982:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8004986:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004988:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800498c:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004990:	b109      	cbz	r1, 8004996 <prvInitialiseNewTask.constprop.0+0x3e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004992:	42ab      	cmp	r3, r5
 8004994:	d1f8      	bne.n	8004988 <prvInitialiseNewTask.constprop.0+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004996:	9d08      	ldr	r5, [sp, #32]
 8004998:	f04f 0a00 	mov.w	sl, #0
 800499c:	2d37      	cmp	r5, #55	; 0x37
 800499e:	bf28      	it	cs
 80049a0:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049a2:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80049a4:	e9c4 5a13 	strd	r5, sl, [r4, #76]	; 0x4c
	pxNewTCB->uxPriority = uxPriority;
 80049a8:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049aa:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049ae:	f7ff fb84 	bl	80040ba <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b2:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049b6:	f104 0018 	add.w	r0, r4, #24
 80049ba:	f7ff fb7e 	bl	80040ba <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049be:	2260      	movs	r2, #96	; 0x60
 80049c0:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 80049c2:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049c6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049ca:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049cc:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049d0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80049d4:	f001 fd2b 	bl	800642e <memset>
 80049d8:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <prvInitialiseNewTask.constprop.0+0xa8>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049da:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <prvInitialiseNewTask.constprop.0+0xac>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049e0:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049e2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80049e4:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <prvInitialiseNewTask.constprop.0+0xb0>)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049e6:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049e8:	6623      	str	r3, [r4, #96]	; 0x60
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049ea:	f000 fdad 	bl	8005548 <pxPortInitialiseStack>
 80049ee:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80049f0:	f1b8 0f00 	cmp.w	r8, #0
 80049f4:	d001      	beq.n	80049fa <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049f6:	f8c8 4000 	str.w	r4, [r8]
}
 80049fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fe:	bf00      	nop
 8004a00:	08008e28 	.word	0x08008e28
 8004a04:	08008e48 	.word	0x08008e48
 8004a08:	08008e08 	.word	0x08008e08

08004a0c <xTaskCreateStatic>:
	{
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004a14:	b945      	cbnz	r5, 8004a28 <xTaskCreateStatic+0x1c>
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	e7fe      	b.n	8004a26 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8004a28:	b944      	cbnz	r4, 8004a3c <xTaskCreateStatic+0x30>
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	e7fe      	b.n	8004a3a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a3c:	26bc      	movs	r6, #188	; 0xbc
 8004a3e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a40:	9e05      	ldr	r6, [sp, #20]
 8004a42:	2ebc      	cmp	r6, #188	; 0xbc
 8004a44:	d008      	beq.n	8004a58 <xTaskCreateStatic+0x4c>
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	e7fe      	b.n	8004a56 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a58:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a5a:	2502      	movs	r5, #2
 8004a5c:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a60:	ad04      	add	r5, sp, #16
 8004a62:	9501      	str	r5, [sp, #4]
 8004a64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8004a66:	9402      	str	r4, [sp, #8]
 8004a68:	9500      	str	r5, [sp, #0]
 8004a6a:	f7ff ff75 	bl	8004958 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7ff fe5a 	bl	8004728 <prvAddNewTaskToReadyList>
	}
 8004a74:	9804      	ldr	r0, [sp, #16]
 8004a76:	b006      	add	sp, #24
 8004a78:	bd70      	pop	{r4, r5, r6, pc}

08004a7a <xTaskCreate>:
	{
 8004a7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a7e:	4607      	mov	r7, r0
 8004a80:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a82:	0090      	lsls	r0, r2, #2
	{
 8004a84:	4688      	mov	r8, r1
 8004a86:	4616      	mov	r6, r2
 8004a88:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8a:	f000 feb1 	bl	80057f0 <pvPortMalloc>
			if( pxStack != NULL )
 8004a8e:	4605      	mov	r5, r0
 8004a90:	b1e8      	cbz	r0, 8004ace <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004a92:	20bc      	movs	r0, #188	; 0xbc
 8004a94:	f000 feac 	bl	80057f0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004a98:	4604      	mov	r4, r0
 8004a9a:	b1a8      	cbz	r0, 8004ac8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8004aa4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004aaa:	4632      	mov	r2, r6
 8004aac:	4641      	mov	r1, r8
 8004aae:	9002      	str	r0, [sp, #8]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	464b      	mov	r3, r9
 8004ab6:	f7ff ff4f 	bl	8004958 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7ff fe34 	bl	8004728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ac0:	2001      	movs	r0, #1
	}
 8004ac2:	b005      	add	sp, #20
 8004ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004ac8:	4628      	mov	r0, r5
 8004aca:	f000 ff21 	bl	8005910 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ace:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8004ad2:	e7f6      	b.n	8004ac2 <xTaskCreate+0x48>

08004ad4 <vTaskStartScheduler>:
{
 8004ad4:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ad6:	2400      	movs	r4, #0
{
 8004ad8:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ada:	aa07      	add	r2, sp, #28
 8004adc:	a906      	add	r1, sp, #24
 8004ade:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ae0:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ae4:	f7ff fac6 	bl	8004074 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ae8:	9b05      	ldr	r3, [sp, #20]
 8004aea:	9a07      	ldr	r2, [sp, #28]
 8004aec:	9302      	str	r3, [sp, #8]
 8004aee:	9b06      	ldr	r3, [sp, #24]
 8004af0:	4919      	ldr	r1, [pc, #100]	; (8004b58 <vTaskStartScheduler+0x84>)
 8004af2:	e9cd 4300 	strd	r4, r3, [sp]
 8004af6:	4819      	ldr	r0, [pc, #100]	; (8004b5c <vTaskStartScheduler+0x88>)
 8004af8:	4623      	mov	r3, r4
 8004afa:	f7ff ff87 	bl	8004a0c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004afe:	b340      	cbz	r0, 8004b52 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8004b00:	f000 fb64 	bl	80051cc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004b04:	2801      	cmp	r0, #1
 8004b06:	d119      	bne.n	8004b3c <vTaskStartScheduler+0x68>
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b18:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <vTaskStartScheduler+0x8c>)
 8004b1a:	4a12      	ldr	r2, [pc, #72]	; (8004b64 <vTaskStartScheduler+0x90>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3354      	adds	r3, #84	; 0x54
 8004b20:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b22:	f04f 32ff 	mov.w	r2, #4294967295
 8004b26:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <vTaskStartScheduler+0x94>)
 8004b28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <vTaskStartScheduler+0x98>)
 8004b2c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004b2e:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <vTaskStartScheduler+0x9c>)
 8004b30:	601c      	str	r4, [r3, #0]
}
 8004b32:	b008      	add	sp, #32
 8004b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004b38:	f000 bdac 	b.w	8005694 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	d108      	bne.n	8004b52 <vTaskStartScheduler+0x7e>
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	e7fe      	b.n	8004b50 <vTaskStartScheduler+0x7c>
}
 8004b52:	b008      	add	sp, #32
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	08008dbd 	.word	0x08008dbd
 8004b5c:	080048f9 	.word	0x080048f9
 8004b60:	20000c98 	.word	0x20000c98
 8004b64:	20000024 	.word	0x20000024
 8004b68:	20001144 	.word	0x20001144
 8004b6c:	20001160 	.word	0x20001160
 8004b70:	2000118c 	.word	0x2000118c

08004b74 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004b74:	4a02      	ldr	r2, [pc, #8]	; (8004b80 <vTaskSuspendAll+0xc>)
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20001110 	.word	0x20001110

08004b84 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004b84:	4b01      	ldr	r3, [pc, #4]	; (8004b8c <xTaskGetTickCount+0x8>)
 8004b86:	6818      	ldr	r0, [r3, #0]
}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	2000118c 	.word	0x2000118c

08004b90 <xTaskIncrementTick>:
{
 8004b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b94:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <xTaskIncrementTick+0xf4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d16d      	bne.n	8004c78 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b9c:	4b3a      	ldr	r3, [pc, #232]	; (8004c88 <xTaskIncrementTick+0xf8>)
 8004b9e:	681d      	ldr	r5, [r3, #0]
 8004ba0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8004ba2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ba4:	b9bd      	cbnz	r5, 8004bd6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004ba6:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <xTaskIncrementTick+0xfc>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	6812      	ldr	r2, [r2, #0]
 8004bac:	b142      	cbz	r2, 8004bc0 <xTaskIncrementTick+0x30>
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	e7fe      	b.n	8004bbe <xTaskIncrementTick+0x2e>
 8004bc0:	4a33      	ldr	r2, [pc, #204]	; (8004c90 <xTaskIncrementTick+0x100>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	6810      	ldr	r0, [r2, #0]
 8004bc6:	6018      	str	r0, [r3, #0]
 8004bc8:	6011      	str	r1, [r2, #0]
 8004bca:	4a32      	ldr	r2, [pc, #200]	; (8004c94 <xTaskIncrementTick+0x104>)
 8004bcc:	6813      	ldr	r3, [r2, #0]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	6013      	str	r3, [r2, #0]
 8004bd2:	f7ff fe61 	bl	8004898 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bd6:	4e30      	ldr	r6, [pc, #192]	; (8004c98 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 8004bd8:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bda:	6833      	ldr	r3, [r6, #0]
 8004bdc:	4f2f      	ldr	r7, [pc, #188]	; (8004c9c <xTaskIncrementTick+0x10c>)
 8004bde:	42ab      	cmp	r3, r5
 8004be0:	d910      	bls.n	8004c04 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004be2:	2214      	movs	r2, #20
 8004be4:	4b2e      	ldr	r3, [pc, #184]	; (8004ca0 <xTaskIncrementTick+0x110>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	4353      	muls	r3, r2
 8004bec:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	bf28      	it	cs
 8004bf2:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <xTaskIncrementTick+0x114>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8004bf8:	2b00      	cmp	r3, #0
}
 8004bfa:	bf0c      	ite	eq
 8004bfc:	4620      	moveq	r0, r4
 8004bfe:	2001      	movne	r0, #1
 8004c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c04:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004c8c <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8004c08:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8004ca8 <xTaskIncrementTick+0x118>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c0c:	f8d9 3000 	ldr.w	r3, [r9]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	b91b      	cbnz	r3, 8004c1c <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c14:	f04f 33ff 	mov.w	r3, #4294967295
 8004c18:	6033      	str	r3, [r6, #0]
					break;
 8004c1a:	e7e2      	b.n	8004be2 <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c1c:	f8d9 3000 	ldr.w	r3, [r9]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c26:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8004c2a:	4295      	cmp	r5, r2
 8004c2c:	d201      	bcs.n	8004c32 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8004c2e:	6032      	str	r2, [r6, #0]
						break;
 8004c30:	e7d7      	b.n	8004be2 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c32:	f10b 0804 	add.w	r8, fp, #4
 8004c36:	4640      	mov	r0, r8
 8004c38:	f7ff fa65 	bl	8004106 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c3c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8004c40:	b11a      	cbz	r2, 8004c4a <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c42:	f10b 0018 	add.w	r0, fp, #24
 8004c46:	f7ff fa5e 	bl	8004106 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c4a:	2314      	movs	r3, #20
 8004c4c:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8004c50:	f8da 2000 	ldr.w	r2, [sl]
 8004c54:	4641      	mov	r1, r8
 8004c56:	4290      	cmp	r0, r2
 8004c58:	bf88      	it	hi
 8004c5a:	f8ca 0000 	strhi.w	r0, [sl]
 8004c5e:	fb03 7000 	mla	r0, r3, r0, r7
 8004c62:	f7ff fa2d 	bl	80040c0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c66:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <xTaskIncrementTick+0x110>)
 8004c68:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8004c6c:	6819      	ldr	r1, [r3, #0]
 8004c6e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004c70:	429a      	cmp	r2, r3
 8004c72:	bf28      	it	cs
 8004c74:	2401      	movcs	r4, #1
 8004c76:	e7c9      	b.n	8004c0c <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8004c78:	4a0c      	ldr	r2, [pc, #48]	; (8004cac <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8004c7a:	2400      	movs	r4, #0
		++uxPendedTicks;
 8004c7c:	6813      	ldr	r3, [r2, #0]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e7b7      	b.n	8004bf4 <xTaskIncrementTick+0x64>
 8004c84:	20001110 	.word	0x20001110
 8004c88:	2000118c 	.word	0x2000118c
 8004c8c:	20000c9c 	.word	0x20000c9c
 8004c90:	20000ca0 	.word	0x20000ca0
 8004c94:	20001148 	.word	0x20001148
 8004c98:	20001144 	.word	0x20001144
 8004c9c:	20000ca4 	.word	0x20000ca4
 8004ca0:	20000c98 	.word	0x20000c98
 8004ca4:	20001190 	.word	0x20001190
 8004ca8:	20001118 	.word	0x20001118
 8004cac:	2000110c 	.word	0x2000110c

08004cb0 <xTaskResumeAll>:
{
 8004cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8004cb4:	4c30      	ldr	r4, [pc, #192]	; (8004d78 <xTaskResumeAll+0xc8>)
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	b943      	cbnz	r3, 8004ccc <xTaskResumeAll+0x1c>
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	e7fe      	b.n	8004cca <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8004ccc:	f000 fc62 	bl	8005594 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cd6:	6824      	ldr	r4, [r4, #0]
 8004cd8:	b12c      	cbz	r4, 8004ce6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8004cda:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004cdc:	f000 fc7a 	bl	80055d4 <vPortExitCritical>
}
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ce6:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <xTaskResumeAll+0xcc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f5      	beq.n	8004cda <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cee:	4d24      	ldr	r5, [pc, #144]	; (8004d80 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8004cf0:	4e24      	ldr	r6, [pc, #144]	; (8004d84 <xTaskResumeAll+0xd4>)
 8004cf2:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8004d88 <xTaskResumeAll+0xd8>
 8004cf6:	e01d      	b.n	8004d34 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004cf8:	68eb      	ldr	r3, [r5, #12]
 8004cfa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cfc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cfe:	f104 0018 	add.w	r0, r4, #24
 8004d02:	f7ff fa00 	bl	8004106 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d06:	4638      	mov	r0, r7
 8004d08:	f7ff f9fd 	bl	8004106 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d0c:	2014      	movs	r0, #20
 8004d0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d10:	6832      	ldr	r2, [r6, #0]
 8004d12:	fb00 8003 	mla	r0, r0, r3, r8
 8004d16:	4293      	cmp	r3, r2
 8004d18:	4639      	mov	r1, r7
 8004d1a:	bf88      	it	hi
 8004d1c:	6033      	strhi	r3, [r6, #0]
 8004d1e:	f7ff f9cf 	bl	80040c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d22:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <xTaskResumeAll+0xdc>)
 8004d24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d302      	bcc.n	8004d34 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8004d2e:	2201      	movs	r2, #1
 8004d30:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <xTaskResumeAll+0xe0>)
 8004d32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1de      	bne.n	8004cf8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8004d3a:	b10c      	cbz	r4, 8004d40 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8004d3c:	f7ff fdac 	bl	8004898 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d40:	4d14      	ldr	r5, [pc, #80]	; (8004d94 <xTaskResumeAll+0xe4>)
 8004d42:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d44:	b144      	cbz	r4, 8004d58 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 8004d46:	2701      	movs	r7, #1
 8004d48:	4e11      	ldr	r6, [pc, #68]	; (8004d90 <xTaskResumeAll+0xe0>)
							if( xTaskIncrementTick() != pdFALSE )
 8004d4a:	f7ff ff21 	bl	8004b90 <xTaskIncrementTick>
 8004d4e:	b100      	cbz	r0, 8004d52 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8004d50:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d52:	3c01      	subs	r4, #1
 8004d54:	d1f9      	bne.n	8004d4a <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 8004d56:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004d58:	4b0d      	ldr	r3, [pc, #52]	; (8004d90 <xTaskResumeAll+0xe0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0bc      	beq.n	8004cda <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004d60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d68:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004d74:	2401      	movs	r4, #1
 8004d76:	e7b1      	b.n	8004cdc <xTaskResumeAll+0x2c>
 8004d78:	20001110 	.word	0x20001110
 8004d7c:	20001104 	.word	0x20001104
 8004d80:	2000114c 	.word	0x2000114c
 8004d84:	20001118 	.word	0x20001118
 8004d88:	20000ca4 	.word	0x20000ca4
 8004d8c:	20000c98 	.word	0x20000c98
 8004d90:	20001190 	.word	0x20001190
 8004d94:	2000110c 	.word	0x2000110c

08004d98 <vTaskDelayUntil>:
	{
 8004d98:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 8004d9a:	b940      	cbnz	r0, 8004dae <vTaskDelayUntil+0x16>
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	e7fe      	b.n	8004dac <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004dae:	b941      	cbnz	r1, 8004dc2 <vTaskDelayUntil+0x2a>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	e7fe      	b.n	8004dc0 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8004dc2:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <vTaskDelayUntil+0x88>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	b143      	cbz	r3, 8004dda <vTaskDelayUntil+0x42>
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	e7fe      	b.n	8004dd8 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8004dda:	f7ff fecb 	bl	8004b74 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8004dde:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <vTaskDelayUntil+0x8c>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004de0:	6804      	ldr	r4, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8004de2:	681a      	ldr	r2, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004de4:	1863      	adds	r3, r4, r1
 8004de6:	bf2c      	ite	cs
 8004de8:	2101      	movcs	r1, #1
 8004dea:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8004dec:	4294      	cmp	r4, r2
			*pxPreviousWakeTime = xTimeToWake;
 8004dee:	6003      	str	r3, [r0, #0]
			if( xConstTickCount < *pxPreviousWakeTime )
 8004df0:	d90e      	bls.n	8004e10 <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004df2:	b971      	cbnz	r1, 8004e12 <vTaskDelayUntil+0x7a>
		xAlreadyYielded = xTaskResumeAll();
 8004df4:	f7ff ff5c 	bl	8004cb0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004df8:	b948      	cbnz	r0, 8004e0e <vTaskDelayUntil+0x76>
			portYIELD_WITHIN_API();
 8004dfa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy
	}
 8004e0e:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004e10:	b909      	cbnz	r1, 8004e16 <vTaskDelayUntil+0x7e>
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d2ee      	bcs.n	8004df4 <vTaskDelayUntil+0x5c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004e16:	2100      	movs	r1, #0
 8004e18:	1a98      	subs	r0, r3, r2
 8004e1a:	f7ff fd05 	bl	8004828 <prvAddCurrentTaskToDelayedList>
 8004e1e:	e7e9      	b.n	8004df4 <vTaskDelayUntil+0x5c>
 8004e20:	20001110 	.word	0x20001110
 8004e24:	2000118c 	.word	0x2000118c

08004e28 <vTaskDelay>:
	{
 8004e28:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e2a:	b950      	cbnz	r0, 8004e42 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8004e2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
	}
 8004e40:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <vTaskDelay+0x44>)
 8004e44:	6819      	ldr	r1, [r3, #0]
 8004e46:	b141      	cbz	r1, 8004e5a <vTaskDelay+0x32>
 8004e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	e7fe      	b.n	8004e58 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004e5a:	f7ff fe8b 	bl	8004b74 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e5e:	f7ff fce3 	bl	8004828 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004e62:	f7ff ff25 	bl	8004cb0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004e66:	2800      	cmp	r0, #0
 8004e68:	d0e0      	beq.n	8004e2c <vTaskDelay+0x4>
 8004e6a:	e7e9      	b.n	8004e40 <vTaskDelay+0x18>
 8004e6c:	20001110 	.word	0x20001110

08004e70 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e70:	4b1a      	ldr	r3, [pc, #104]	; (8004edc <vTaskSwitchContext+0x6c>)
{
 8004e72:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <vTaskSwitchContext+0x70>)
 8004e78:	b112      	cbz	r2, 8004e80 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	601a      	str	r2, [r3, #0]
}
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e80:	2614      	movs	r6, #20
 8004e82:	4d18      	ldr	r5, [pc, #96]	; (8004ee4 <vTaskSwitchContext+0x74>)
		xYieldPending = pdFALSE;
 8004e84:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004e86:	682a      	ldr	r2, [r5, #0]
 8004e88:	4917      	ldr	r1, [pc, #92]	; (8004ee8 <vTaskSwitchContext+0x78>)
 8004e8a:	fb06 f302 	mul.w	r3, r6, r2
 8004e8e:	58cc      	ldr	r4, [r1, r3]
 8004e90:	18c8      	adds	r0, r1, r3
 8004e92:	b1b4      	cbz	r4, 8004ec2 <vTaskSwitchContext+0x52>
 8004e94:	6844      	ldr	r4, [r0, #4]
 8004e96:	3308      	adds	r3, #8
 8004e98:	6864      	ldr	r4, [r4, #4]
 8004e9a:	440b      	add	r3, r1
 8004e9c:	429c      	cmp	r4, r3
 8004e9e:	bf08      	it	eq
 8004ea0:	6863      	ldreq	r3, [r4, #4]
 8004ea2:	6044      	str	r4, [r0, #4]
 8004ea4:	bf08      	it	eq
 8004ea6:	6043      	streq	r3, [r0, #4]
 8004ea8:	2314      	movs	r3, #20
 8004eaa:	fb03 1102 	mla	r1, r3, r2, r1
 8004eae:	684b      	ldr	r3, [r1, #4]
 8004eb0:	68d9      	ldr	r1, [r3, #12]
 8004eb2:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <vTaskSwitchContext+0x7c>)
 8004eb4:	6019      	str	r1, [r3, #0]
 8004eb6:	602a      	str	r2, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a0d      	ldr	r2, [pc, #52]	; (8004ef0 <vTaskSwitchContext+0x80>)
 8004ebc:	3354      	adds	r3, #84	; 0x54
 8004ebe:	6013      	str	r3, [r2, #0]
}
 8004ec0:	e7dd      	b.n	8004e7e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ec2:	b942      	cbnz	r2, 8004ed6 <vTaskSwitchContext+0x66>
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	e7fe      	b.n	8004ed4 <vTaskSwitchContext+0x64>
 8004ed6:	3a01      	subs	r2, #1
 8004ed8:	e7d7      	b.n	8004e8a <vTaskSwitchContext+0x1a>
 8004eda:	bf00      	nop
 8004edc:	20001110 	.word	0x20001110
 8004ee0:	20001190 	.word	0x20001190
 8004ee4:	20001118 	.word	0x20001118
 8004ee8:	20000ca4 	.word	0x20000ca4
 8004eec:	20000c98 	.word	0x20000c98
 8004ef0:	20000024 	.word	0x20000024

08004ef4 <vTaskPlaceOnEventList>:
{
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004ef8:	b940      	cbnz	r0, 8004f0c <vTaskPlaceOnEventList+0x18>
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	e7fe      	b.n	8004f0a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <vTaskPlaceOnEventList+0x30>)
 8004f0e:	6819      	ldr	r1, [r3, #0]
 8004f10:	3118      	adds	r1, #24
 8004f12:	f7ff f8e1 	bl	80040d8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f16:	4620      	mov	r0, r4
}
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	f7ff bc83 	b.w	8004828 <prvAddCurrentTaskToDelayedList>
 8004f22:	bf00      	nop
 8004f24:	20000c98 	.word	0x20000c98

08004f28 <vTaskPlaceOnEventListRestricted>:
	{
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	460d      	mov	r5, r1
 8004f2c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8004f2e:	b940      	cbnz	r0, 8004f42 <vTaskPlaceOnEventListRestricted+0x1a>
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	e7fe      	b.n	8004f40 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <vTaskPlaceOnEventListRestricted+0x3c>)
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	3118      	adds	r1, #24
 8004f48:	f7ff f8ba 	bl	80040c0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8004f4c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f4e:	4621      	mov	r1, r4
 8004f50:	bf08      	it	eq
 8004f52:	4628      	moveq	r0, r5
	}
 8004f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f58:	bf18      	it	ne
 8004f5a:	f04f 30ff 	movne.w	r0, #4294967295
 8004f5e:	f7ff bc63 	b.w	8004828 <prvAddCurrentTaskToDelayedList>
 8004f62:	bf00      	nop
 8004f64:	20000c98 	.word	0x20000c98

08004f68 <xTaskRemoveFromEventList>:
{
 8004f68:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004f6a:	68c3      	ldr	r3, [r0, #12]
 8004f6c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004f6e:	b944      	cbnz	r4, 8004f82 <xTaskRemoveFromEventList+0x1a>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	e7fe      	b.n	8004f80 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f82:	f104 0518 	add.w	r5, r4, #24
 8004f86:	4628      	mov	r0, r5
 8004f88:	f7ff f8bd 	bl	8004106 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <xTaskRemoveFromEventList+0x68>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	b9db      	cbnz	r3, 8004fca <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f92:	1d25      	adds	r5, r4, #4
 8004f94:	4628      	mov	r0, r5
 8004f96:	f7ff f8b6 	bl	8004106 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f9a:	4a0e      	ldr	r2, [pc, #56]	; (8004fd4 <xTaskRemoveFromEventList+0x6c>)
 8004f9c:	2014      	movs	r0, #20
 8004f9e:	6811      	ldr	r1, [r2, #0]
 8004fa0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fa2:	428b      	cmp	r3, r1
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	bf88      	it	hi
 8004fa8:	6013      	strhi	r3, [r2, #0]
 8004faa:	4a0b      	ldr	r2, [pc, #44]	; (8004fd8 <xTaskRemoveFromEventList+0x70>)
 8004fac:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fb0:	f7ff f886 	bl	80040c0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <xTaskRemoveFromEventList+0x74>)
 8004fb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004fbe:	bf85      	ittet	hi
 8004fc0:	2001      	movhi	r0, #1
 8004fc2:	4b07      	ldrhi	r3, [pc, #28]	; (8004fe0 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8004fc4:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8004fc6:	6018      	strhi	r0, [r3, #0]
}
 8004fc8:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fca:	4629      	mov	r1, r5
 8004fcc:	4805      	ldr	r0, [pc, #20]	; (8004fe4 <xTaskRemoveFromEventList+0x7c>)
 8004fce:	e7ef      	b.n	8004fb0 <xTaskRemoveFromEventList+0x48>
 8004fd0:	20001110 	.word	0x20001110
 8004fd4:	20001118 	.word	0x20001118
 8004fd8:	20000ca4 	.word	0x20000ca4
 8004fdc:	20000c98 	.word	0x20000c98
 8004fe0:	20001190 	.word	0x20001190
 8004fe4:	2000114c 	.word	0x2000114c

08004fe8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <vTaskInternalSetTimeOutState+0x10>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fee:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <vTaskInternalSetTimeOutState+0x14>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6043      	str	r3, [r0, #4]
}
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20001148 	.word	0x20001148
 8004ffc:	2000118c 	.word	0x2000118c

08005000 <xTaskCheckForTimeOut>:
{
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8005004:	4605      	mov	r5, r0
 8005006:	b940      	cbnz	r0, 800501a <xTaskCheckForTimeOut+0x1a>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	e7fe      	b.n	8005018 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800501a:	b941      	cbnz	r1, 800502e <xTaskCheckForTimeOut+0x2e>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	e7fe      	b.n	800502c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800502e:	f000 fab1 	bl	8005594 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <xTaskCheckForTimeOut+0x70>)
 8005034:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	d010      	beq.n	800505e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800503c:	480d      	ldr	r0, [pc, #52]	; (8005074 <xTaskCheckForTimeOut+0x74>)
 800503e:	682e      	ldr	r6, [r5, #0]
 8005040:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005042:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005044:	4286      	cmp	r6, r0
 8005046:	d001      	beq.n	800504c <xTaskCheckForTimeOut+0x4c>
 8005048:	428a      	cmp	r2, r1
 800504a:	d90f      	bls.n	800506c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800504c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800504e:	4283      	cmp	r3, r0
 8005050:	d90a      	bls.n	8005068 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8005052:	1a5b      	subs	r3, r3, r1
 8005054:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005056:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8005058:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800505a:	f7ff ffc5 	bl	8004fe8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800505e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005060:	f000 fab8 	bl	80055d4 <vPortExitCritical>
}
 8005064:	4620      	mov	r0, r4
 8005066:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800506c:	2401      	movs	r4, #1
 800506e:	e7f7      	b.n	8005060 <xTaskCheckForTimeOut+0x60>
 8005070:	2000118c 	.word	0x2000118c
 8005074:	20001148 	.word	0x20001148

08005078 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005078:	2201      	movs	r2, #1
 800507a:	4b01      	ldr	r3, [pc, #4]	; (8005080 <vTaskMissedYield+0x8>)
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	4770      	bx	lr
 8005080:	20001190 	.word	0x20001190

08005084 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <xTaskGetSchedulerState+0x18>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	b133      	cbz	r3, 8005098 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <xTaskGetSchedulerState+0x1c>)
 800508c:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800508e:	2b00      	cmp	r3, #0
 8005090:	bf0c      	ite	eq
 8005092:	2002      	moveq	r0, #2
 8005094:	2000      	movne	r0, #0
 8005096:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005098:	2001      	movs	r0, #1
	}
 800509a:	4770      	bx	lr
 800509c:	20001160 	.word	0x20001160
 80050a0:	20001110 	.word	0x20001110

080050a4 <xTaskPriorityDisinherit>:
	{
 80050a4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80050a6:	b908      	cbnz	r0, 80050ac <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 80050a8:	2000      	movs	r0, #0
	}
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <xTaskPriorityDisinherit+0x78>)
 80050ae:	681c      	ldr	r4, [r3, #0]
 80050b0:	4284      	cmp	r4, r0
 80050b2:	d008      	beq.n	80050c6 <xTaskPriorityDisinherit+0x22>
 80050b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	e7fe      	b.n	80050c4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80050c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80050c8:	b943      	cbnz	r3, 80050dc <xTaskPriorityDisinherit+0x38>
 80050ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	e7fe      	b.n	80050da <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80050de:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80050e0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050e2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80050e4:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050e6:	d0df      	beq.n	80050a8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1dd      	bne.n	80050a8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ec:	1d25      	adds	r5, r4, #4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f7ff f809 	bl	8004106 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050f4:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050f6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050fc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80050fe:	4a08      	ldr	r2, [pc, #32]	; (8005120 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005100:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8005102:	6811      	ldr	r1, [r2, #0]
 8005104:	428b      	cmp	r3, r1
 8005106:	bf88      	it	hi
 8005108:	6013      	strhi	r3, [r2, #0]
 800510a:	4a06      	ldr	r2, [pc, #24]	; (8005124 <xTaskPriorityDisinherit+0x80>)
 800510c:	4629      	mov	r1, r5
 800510e:	fb00 2003 	mla	r0, r0, r3, r2
 8005112:	f7fe ffd5 	bl	80040c0 <vListInsertEnd>
					xReturn = pdTRUE;
 8005116:	2001      	movs	r0, #1
		return xReturn;
 8005118:	e7c7      	b.n	80050aa <xTaskPriorityDisinherit+0x6>
 800511a:	bf00      	nop
 800511c:	20000c98 	.word	0x20000c98
 8005120:	20001118 	.word	0x20001118
 8005124:	20000ca4 	.word	0x20000ca4

08005128 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800512a:	4c11      	ldr	r4, [pc, #68]	; (8005170 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800512c:	f000 fa32 	bl	8005594 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8005130:	6825      	ldr	r5, [r4, #0]
 8005132:	b9bd      	cbnz	r5, 8005164 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005134:	4f0f      	ldr	r7, [pc, #60]	; (8005174 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8005136:	4e10      	ldr	r6, [pc, #64]	; (8005178 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8005138:	4638      	mov	r0, r7
 800513a:	f7fe ffb3 	bl	80040a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800513e:	4630      	mov	r0, r6
 8005140:	f7fe ffb0 	bl	80040a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005144:	4b0d      	ldr	r3, [pc, #52]	; (800517c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005146:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8005148:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800514a:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800514c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800514e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005150:	4a0c      	ldr	r2, [pc, #48]	; (8005184 <prvCheckForValidListAndQueue+0x5c>)
 8005152:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <prvCheckForValidListAndQueue+0x60>)
 8005154:	9500      	str	r5, [sp, #0]
 8005156:	f7ff f8b1 	bl	80042bc <xQueueGenericCreateStatic>
 800515a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800515c:	b110      	cbz	r0, 8005164 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800515e:	490b      	ldr	r1, [pc, #44]	; (800518c <prvCheckForValidListAndQueue+0x64>)
 8005160:	f7ff faac 	bl	80046bc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8005164:	b003      	add	sp, #12
 8005166:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800516a:	f000 ba33 	b.w	80055d4 <vPortExitCritical>
 800516e:	bf00      	nop
 8005170:	200012b8 	.word	0x200012b8
 8005174:	2000123c 	.word	0x2000123c
 8005178:	20001250 	.word	0x20001250
 800517c:	20001194 	.word	0x20001194
 8005180:	20001198 	.word	0x20001198
 8005184:	2000119c 	.word	0x2000119c
 8005188:	20001268 	.word	0x20001268
 800518c:	08008dc2 	.word	0x08008dc2

08005190 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8005190:	4291      	cmp	r1, r2
{
 8005192:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005194:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005196:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8005198:	d80a      	bhi.n	80051b0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800519a:	1ad2      	subs	r2, r2, r3
 800519c:	6983      	ldr	r3, [r0, #24]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d20d      	bcs.n	80051be <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <prvInsertTimerInActiveList+0x34>)
 80051a4:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	f7fe ff96 	bl	80040d8 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80051ac:	2000      	movs	r0, #0
}
 80051ae:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d201      	bcs.n	80051b8 <prvInsertTimerInActiveList+0x28>
 80051b4:	4299      	cmp	r1, r3
 80051b6:	d202      	bcs.n	80051be <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051b8:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <prvInsertTimerInActiveList+0x38>)
 80051ba:	1d01      	adds	r1, r0, #4
 80051bc:	e7f3      	b.n	80051a6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80051be:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80051c0:	e7f5      	b.n	80051ae <prvInsertTimerInActiveList+0x1e>
 80051c2:	bf00      	nop
 80051c4:	20001198 	.word	0x20001198
 80051c8:	20001194 	.word	0x20001194

080051cc <xTimerCreateTimerTask>:
{
 80051cc:	b510      	push	{r4, lr}
 80051ce:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80051d0:	f7ff ffaa 	bl	8005128 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80051d4:	4b12      	ldr	r3, [pc, #72]	; (8005220 <xTimerCreateTimerTask+0x54>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	b1b3      	cbz	r3, 8005208 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051da:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051dc:	aa07      	add	r2, sp, #28
 80051de:	a906      	add	r1, sp, #24
 80051e0:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051e2:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051e6:	f7fe ff51 	bl	800408c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051ea:	9b05      	ldr	r3, [sp, #20]
 80051ec:	9a07      	ldr	r2, [sp, #28]
 80051ee:	9302      	str	r3, [sp, #8]
 80051f0:	9b06      	ldr	r3, [sp, #24]
 80051f2:	490c      	ldr	r1, [pc, #48]	; (8005224 <xTimerCreateTimerTask+0x58>)
 80051f4:	9301      	str	r3, [sp, #4]
 80051f6:	2302      	movs	r3, #2
 80051f8:	480b      	ldr	r0, [pc, #44]	; (8005228 <xTimerCreateTimerTask+0x5c>)
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	4623      	mov	r3, r4
 80051fe:	f7ff fc05 	bl	8004a0c <xTaskCreateStatic>
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <xTimerCreateTimerTask+0x60>)
 8005204:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005206:	b940      	cbnz	r0, 800521a <xTimerCreateTimerTask+0x4e>
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005218:	e7fe      	b.n	8005218 <xTimerCreateTimerTask+0x4c>
}
 800521a:	2001      	movs	r0, #1
 800521c:	b008      	add	sp, #32
 800521e:	bd10      	pop	{r4, pc}
 8005220:	200012b8 	.word	0x200012b8
 8005224:	08008dc7 	.word	0x08008dc7
 8005228:	08005331 	.word	0x08005331
 800522c:	200012bc 	.word	0x200012bc

08005230 <xTimerGenericCommand>:
{
 8005230:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005232:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8005234:	4604      	mov	r4, r0
{
 8005236:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8005238:	b940      	cbnz	r0, 800524c <xTimerGenericCommand+0x1c>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	e7fe      	b.n	800524a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800524c:	4d0d      	ldr	r5, [pc, #52]	; (8005284 <xTimerGenericCommand+0x54>)
 800524e:	6828      	ldr	r0, [r5, #0]
 8005250:	b180      	cbz	r0, 8005274 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005252:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005254:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005258:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800525a:	dc0d      	bgt.n	8005278 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800525c:	f7ff ff12 	bl	8005084 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005260:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005262:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005264:	bf18      	it	ne
 8005266:	461a      	movne	r2, r3
 8005268:	4669      	mov	r1, sp
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800526a:	bf08      	it	eq
 800526c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800526e:	6828      	ldr	r0, [r5, #0]
 8005270:	f7ff f871 	bl	8004356 <xQueueGenericSend>
}
 8005274:	b004      	add	sp, #16
 8005276:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005278:	2300      	movs	r3, #0
 800527a:	4669      	mov	r1, sp
 800527c:	f7ff f91e 	bl	80044bc <xQueueGenericSendFromISR>
 8005280:	e7f8      	b.n	8005274 <xTimerGenericCommand+0x44>
 8005282:	bf00      	nop
 8005284:	200012b8 	.word	0x200012b8

08005288 <prvSampleTimeNow>:
{
 8005288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800528e:	f7ff fc79 	bl	8004b84 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005292:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8005324 <prvSampleTimeNow+0x9c>
	xTimeNow = xTaskGetTickCount();
 8005296:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8005298:	f8d8 3000 	ldr.w	r3, [r8]
 800529c:	4283      	cmp	r3, r0
 800529e:	d93e      	bls.n	800531e <prvSampleTimeNow+0x96>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a0:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052a4:	4f20      	ldr	r7, [pc, #128]	; (8005328 <prvSampleTimeNow+0xa0>)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	b95a      	cbnz	r2, 80052c4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80052ac:	4a1f      	ldr	r2, [pc, #124]	; (800532c <prvSampleTimeNow+0xa4>)
 80052ae:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052b0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80052b2:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 80052b4:	6039      	str	r1, [r7, #0]
}
 80052b6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 80052b8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80052ba:	f8c8 5000 	str.w	r5, [r8]
}
 80052be:	b003      	add	sp, #12
 80052c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052c4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052c6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80052c8:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052cc:	f104 0b04 	add.w	fp, r4, #4
 80052d0:	4658      	mov	r0, fp
 80052d2:	f7fe ff18 	bl	8004106 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052d8:	4620      	mov	r0, r4
 80052da:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052dc:	69e3      	ldr	r3, [r4, #28]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d1e1      	bne.n	80052a6 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052e2:	69a3      	ldr	r3, [r4, #24]
 80052e4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80052e6:	459a      	cmp	sl, r3
 80052e8:	d206      	bcs.n	80052f8 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052ea:	4659      	mov	r1, fp
 80052ec:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052ee:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052f0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052f2:	f7fe fef1 	bl	80040d8 <vListInsert>
 80052f6:	e7d6      	b.n	80052a6 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052f8:	2300      	movs	r3, #0
 80052fa:	4652      	mov	r2, sl
 80052fc:	4619      	mov	r1, r3
 80052fe:	4620      	mov	r0, r4
 8005300:	f8cd 9000 	str.w	r9, [sp]
 8005304:	f7ff ff94 	bl	8005230 <xTimerGenericCommand>
				configASSERT( xResult );
 8005308:	2800      	cmp	r0, #0
 800530a:	d1cc      	bne.n	80052a6 <prvSampleTimeNow+0x1e>
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	e7fe      	b.n	800531c <prvSampleTimeNow+0x94>
		*pxTimerListsWereSwitched = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	e7c9      	b.n	80052b6 <prvSampleTimeNow+0x2e>
 8005322:	bf00      	nop
 8005324:	20001264 	.word	0x20001264
 8005328:	20001194 	.word	0x20001194
 800532c:	20001198 	.word	0x20001198

08005330 <prvTimerTask>:
{
 8005330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005334:	4e69      	ldr	r6, [pc, #420]	; (80054dc <prvTimerTask+0x1ac>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005336:	4f6a      	ldr	r7, [pc, #424]	; (80054e0 <prvTimerTask+0x1b0>)
{
 8005338:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800533a:	6833      	ldr	r3, [r6, #0]
 800533c:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800533e:	2d00      	cmp	r5, #0
 8005340:	d033      	beq.n	80053aa <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8005348:	f7ff fc14 	bl	8004b74 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800534c:	a804      	add	r0, sp, #16
 800534e:	f7ff ff9b 	bl	8005288 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8005352:	9c04      	ldr	r4, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005354:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8005356:	2c00      	cmp	r4, #0
 8005358:	d175      	bne.n	8005446 <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800535a:	2d00      	cmp	r5, #0
 800535c:	d058      	beq.n	8005410 <prvTimerTask+0xe0>
 800535e:	4540      	cmp	r0, r8
 8005360:	d35c      	bcc.n	800541c <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8005362:	f7ff fca5 	bl	8004cb0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005366:	6833      	ldr	r3, [r6, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800536c:	1d28      	adds	r0, r5, #4
 800536e:	f7fe feca 	bl	8004106 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005372:	69eb      	ldr	r3, [r5, #28]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d11a      	bne.n	80053ae <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005378:	69a9      	ldr	r1, [r5, #24]
 800537a:	4643      	mov	r3, r8
 800537c:	464a      	mov	r2, r9
 800537e:	4628      	mov	r0, r5
 8005380:	4441      	add	r1, r8
 8005382:	f7ff ff05 	bl	8005190 <prvInsertTimerInActiveList>
 8005386:	b190      	cbz	r0, 80053ae <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005388:	4623      	mov	r3, r4
 800538a:	4642      	mov	r2, r8
 800538c:	4621      	mov	r1, r4
 800538e:	4628      	mov	r0, r5
 8005390:	9400      	str	r4, [sp, #0]
 8005392:	f7ff ff4d 	bl	8005230 <xTimerGenericCommand>
			configASSERT( xResult );
 8005396:	b950      	cbnz	r0, 80053ae <prvTimerTask+0x7e>
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	e7fe      	b.n	80053a8 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 80053aa:	46a8      	mov	r8, r5
 80053ac:	e7cc      	b.n	8005348 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053ae:	4628      	mov	r0, r5
 80053b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053b2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80053b4:	2500      	movs	r5, #0
 80053b6:	2200      	movs	r2, #0
 80053b8:	6838      	ldr	r0, [r7, #0]
 80053ba:	a904      	add	r1, sp, #16
 80053bc:	f7ff f8df 	bl	800457e <xQueueReceive>
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d0ba      	beq.n	800533a <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053c4:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053c6:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	db3f      	blt.n	800544c <prvTimerTask+0x11c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053cc:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053ce:	6963      	ldr	r3, [r4, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d142      	bne.n	800545a <prvTimerTask+0x12a>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053d4:	a803      	add	r0, sp, #12
 80053d6:	f7ff ff57 	bl	8005288 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80053da:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053dc:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80053de:	2b09      	cmp	r3, #9
 80053e0:	d8e9      	bhi.n	80053b6 <prvTimerTask+0x86>
 80053e2:	a101      	add	r1, pc, #4	; (adr r1, 80053e8 <prvTimerTask+0xb8>)
 80053e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053e8:	08005463 	.word	0x08005463
 80053ec:	08005463 	.word	0x08005463
 80053f0:	08005463 	.word	0x08005463
 80053f4:	080053b7 	.word	0x080053b7
 80053f8:	080054a7 	.word	0x080054a7
 80053fc:	080054cb 	.word	0x080054cb
 8005400:	08005463 	.word	0x08005463
 8005404:	08005463 	.word	0x08005463
 8005408:	080053b7 	.word	0x080053b7
 800540c:	080054a7 	.word	0x080054a7
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005410:	4b34      	ldr	r3, [pc, #208]	; (80054e4 <prvTimerTask+0x1b4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681c      	ldr	r4, [r3, #0]
 8005416:	fab4 f484 	clz	r4, r4
 800541a:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800541c:	4622      	mov	r2, r4
 800541e:	6838      	ldr	r0, [r7, #0]
 8005420:	eba8 0109 	sub.w	r1, r8, r9
 8005424:	f7ff f95c 	bl	80046e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005428:	f7ff fc42 	bl	8004cb0 <xTaskResumeAll>
 800542c:	2800      	cmp	r0, #0
 800542e:	d1c1      	bne.n	80053b4 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8005430:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005438:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	e7b6      	b.n	80053b4 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8005446:	f7ff fc33 	bl	8004cb0 <xTaskResumeAll>
 800544a:	e7b3      	b.n	80053b4 <prvTimerTask+0x84>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800544c:	9b05      	ldr	r3, [sp, #20]
 800544e:	9907      	ldr	r1, [sp, #28]
 8005450:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005452:	9b04      	ldr	r3, [sp, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	dbae      	blt.n	80053b6 <prvTimerTask+0x86>
 8005458:	e7b8      	b.n	80053cc <prvTimerTask+0x9c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800545a:	1d20      	adds	r0, r4, #4
 800545c:	f7fe fe53 	bl	8004106 <uxListRemove>
 8005460:	e7b8      	b.n	80053d4 <prvTimerTask+0xa4>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005462:	69a1      	ldr	r1, [r4, #24]
 8005464:	9b05      	ldr	r3, [sp, #20]
 8005466:	4620      	mov	r0, r4
 8005468:	4419      	add	r1, r3
 800546a:	f7ff fe91 	bl	8005190 <prvInsertTimerInActiveList>
 800546e:	2800      	cmp	r0, #0
 8005470:	d0a1      	beq.n	80053b6 <prvTimerTask+0x86>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005474:	4620      	mov	r0, r4
 8005476:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005478:	69e3      	ldr	r3, [r4, #28]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d19b      	bne.n	80053b6 <prvTimerTask+0x86>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800547e:	2300      	movs	r3, #0
 8005480:	69a2      	ldr	r2, [r4, #24]
 8005482:	9905      	ldr	r1, [sp, #20]
 8005484:	4620      	mov	r0, r4
 8005486:	440a      	add	r2, r1
 8005488:	9500      	str	r5, [sp, #0]
 800548a:	4619      	mov	r1, r3
 800548c:	f7ff fed0 	bl	8005230 <xTimerGenericCommand>
							configASSERT( xResult );
 8005490:	2800      	cmp	r0, #0
 8005492:	d190      	bne.n	80053b6 <prvTimerTask+0x86>
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	e7fe      	b.n	80054a4 <prvTimerTask+0x174>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054a6:	9905      	ldr	r1, [sp, #20]
 80054a8:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054aa:	b941      	cbnz	r1, 80054be <prvTimerTask+0x18e>
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	e7fe      	b.n	80054bc <prvTimerTask+0x18c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054be:	4603      	mov	r3, r0
 80054c0:	4401      	add	r1, r0
 80054c2:	4620      	mov	r0, r4
 80054c4:	f7ff fe64 	bl	8005190 <prvInsertTimerInActiveList>
					break;
 80054c8:	e775      	b.n	80053b6 <prvTimerTask+0x86>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80054ca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f47f af71 	bne.w	80053b6 <prvTimerTask+0x86>
							vPortFree( pxTimer );
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 fa1b 	bl	8005910 <vPortFree>
 80054da:	e76c      	b.n	80053b6 <prvTimerTask+0x86>
 80054dc:	20001194 	.word	0x20001194
 80054e0:	200012b8 	.word	0x200012b8
 80054e4:	20001198 	.word	0x20001198

080054e8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80054e8:	4806      	ldr	r0, [pc, #24]	; (8005504 <prvPortStartFirstTask+0x1c>)
 80054ea:	6800      	ldr	r0, [r0, #0]
 80054ec:	6800      	ldr	r0, [r0, #0]
 80054ee:	f380 8808 	msr	MSP, r0
 80054f2:	b662      	cpsie	i
 80054f4:	b661      	cpsie	f
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	df00      	svc	0
 8005500:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005502:	0000      	.short	0x0000
 8005504:	e000ed08 	.word	0xe000ed08

08005508 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8005508:	2300      	movs	r3, #0
{
 800550a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800550c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <prvTaskExitError+0x3c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	d008      	beq.n	8005528 <prvTaskExitError+0x20>
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	e7fe      	b.n	8005526 <prvTaskExitError+0x1e>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8005538:	9b01      	ldr	r3, [sp, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0fc      	beq.n	8005538 <prvTaskExitError+0x30>
}
 800553e:	b002      	add	sp, #8
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000020 	.word	0x20000020

08005548 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800554c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005552:	f021 0101 	bic.w	r1, r1, #1
 8005556:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800555a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800555e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8005562:	3840      	subs	r0, #64	; 0x40
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	08005509 	.word	0x08005509
 800556c:	00000000 	.word	0x00000000

08005570 <SVC_Handler>:
	__asm volatile (
 8005570:	4b07      	ldr	r3, [pc, #28]	; (8005590 <pxCurrentTCBConst2>)
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	6808      	ldr	r0, [r1, #0]
 8005576:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800557a:	f380 8809 	msr	PSP, r0
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f04f 0000 	mov.w	r0, #0
 8005586:	f380 8811 	msr	BASEPRI, r0
 800558a:	f04e 0e0d 	orr.w	lr, lr, #13
 800558e:	4770      	bx	lr

08005590 <pxCurrentTCBConst2>:
 8005590:	20000c98 	.word	0x20000c98

08005594 <vPortEnterCritical>:
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055a4:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <vPortEnterCritical+0x3c>)
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80055ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80055ae:	d10e      	bne.n	80055ce <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80055b4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	b143      	cbz	r3, 80055ce <vPortEnterCritical+0x3a>
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	e7fe      	b.n	80055cc <vPortEnterCritical+0x38>
	}
}
 80055ce:	4770      	bx	lr
 80055d0:	20000020 	.word	0x20000020

080055d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80055d4:	4a08      	ldr	r2, [pc, #32]	; (80055f8 <vPortExitCritical+0x24>)
 80055d6:	6813      	ldr	r3, [r2, #0]
 80055d8:	b943      	cbnz	r3, 80055ec <vPortExitCritical+0x18>
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	e7fe      	b.n	80055ea <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80055ec:	3b01      	subs	r3, #1
 80055ee:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055f0:	b90b      	cbnz	r3, 80055f6 <vPortExitCritical+0x22>
	__asm volatile
 80055f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80055f6:	4770      	bx	lr
 80055f8:	20000020 	.word	0x20000020
 80055fc:	00000000 	.word	0x00000000

08005600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005600:	f3ef 8009 	mrs	r0, PSP
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <pxCurrentTCBConst>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005610:	6010      	str	r0, [r2, #0]
 8005612:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005616:	f04f 0050 	mov.w	r0, #80	; 0x50
 800561a:	f380 8811 	msr	BASEPRI, r0
 800561e:	f7ff fc27 	bl	8004e70 <vTaskSwitchContext>
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8811 	msr	BASEPRI, r0
 800562a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800562e:	6819      	ldr	r1, [r3, #0]
 8005630:	6808      	ldr	r0, [r1, #0]
 8005632:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005636:	f380 8809 	msr	PSP, r0
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	4770      	bx	lr

08005640 <pxCurrentTCBConst>:
 8005640:	20000c98 	.word	0x20000c98

08005644 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005644:	b508      	push	{r3, lr}
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005656:	f7ff fa9b 	bl	8004b90 <xTaskIncrementTick>
 800565a:	b128      	cbz	r0, 8005668 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800565c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005664:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005668:	2300      	movs	r3, #0
 800566a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800566e:	bd08      	pop	{r3, pc}

08005670 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005670:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005674:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005676:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800567a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800567c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800567e:	4b04      	ldr	r3, [pc, #16]	; (8005690 <vPortSetupTimerInterrupt+0x20>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	fbb3 f3f1 	udiv	r3, r3, r1
 8005686:	3b01      	subs	r3, #1
 8005688:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800568a:	2307      	movs	r3, #7
 800568c:	6113      	str	r3, [r2, #16]
}
 800568e:	4770      	bx	lr
 8005690:	20000014 	.word	0x20000014

08005694 <xPortStartScheduler>:
{
 8005694:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005698:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056a0:	22ff      	movs	r2, #255	; 0xff
 80056a2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056a4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056a6:	4a26      	ldr	r2, [pc, #152]	; (8005740 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80056b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056b6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056b8:	2307      	movs	r3, #7
 80056ba:	4a22      	ldr	r2, [pc, #136]	; (8005744 <xPortStartScheduler+0xb0>)
 80056bc:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056be:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80056c2:	1e5c      	subs	r4, r3, #1
 80056c4:	0600      	lsls	r0, r0, #24
 80056c6:	d40c      	bmi.n	80056e2 <xPortStartScheduler+0x4e>
 80056c8:	b111      	cbz	r1, 80056d0 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	d011      	beq.n	80056f4 <xPortStartScheduler+0x60>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	e7fe      	b.n	80056e0 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80056e6:	2101      	movs	r1, #1
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f88d 3003 	strb.w	r3, [sp, #3]
 80056f0:	4623      	mov	r3, r4
 80056f2:	e7e4      	b.n	80056be <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056f8:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80056fa:	9b01      	ldr	r3, [sp, #4]
 80056fc:	4a0f      	ldr	r2, [pc, #60]	; (800573c <xPortStartScheduler+0xa8>)
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005702:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8005706:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005708:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800570c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005710:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005714:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8005718:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800571c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8005720:	f7ff ffa6 	bl	8005670 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005724:	4b08      	ldr	r3, [pc, #32]	; (8005748 <xPortStartScheduler+0xb4>)
 8005726:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8005728:	f7ff fede 	bl	80054e8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800572c:	f7ff fba0 	bl	8004e70 <vTaskSwitchContext>
}
 8005730:	4620      	mov	r0, r4
	prvTaskExitError();
 8005732:	f7ff fee9 	bl	8005508 <prvTaskExitError>
}
 8005736:	b002      	add	sp, #8
 8005738:	bd10      	pop	{r4, pc}
 800573a:	bf00      	nop
 800573c:	e000e400 	.word	0xe000e400
 8005740:	200012c0 	.word	0x200012c0
 8005744:	200012c4 	.word	0x200012c4
 8005748:	20000020 	.word	0x20000020

0800574c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800574c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d90e      	bls.n	8005772 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005754:	4a11      	ldr	r2, [pc, #68]	; (800579c <vPortValidateInterruptPriority+0x50>)
 8005756:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005758:	4a11      	ldr	r2, [pc, #68]	; (80057a0 <vPortValidateInterruptPriority+0x54>)
 800575a:	7812      	ldrb	r2, [r2, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d908      	bls.n	8005772 <vPortValidateInterruptPriority+0x26>
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	e7fe      	b.n	8005770 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005772:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005776:	4a0b      	ldr	r2, [pc, #44]	; (80057a4 <vPortValidateInterruptPriority+0x58>)
 8005778:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005782:	4293      	cmp	r3, r2
 8005784:	d908      	bls.n	8005798 <vPortValidateInterruptPriority+0x4c>
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	e7fe      	b.n	8005796 <vPortValidateInterruptPriority+0x4a>
	}
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	e000e3f0 	.word	0xe000e3f0
 80057a0:	200012c0 	.word	0x200012c0
 80057a4:	200012c4 	.word	0x200012c4

080057a8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057a8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057aa:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <prvInsertBlockIntoFreeList+0x40>)
 80057ac:	461a      	mov	r2, r3
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4283      	cmp	r3, r0
 80057b2:	d3fb      	bcc.n	80057ac <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057b4:	6854      	ldr	r4, [r2, #4]
 80057b6:	1911      	adds	r1, r2, r4
 80057b8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057ba:	bf01      	itttt	eq
 80057bc:	6841      	ldreq	r1, [r0, #4]
 80057be:	4610      	moveq	r0, r2
 80057c0:	1909      	addeq	r1, r1, r4
 80057c2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057c4:	6844      	ldr	r4, [r0, #4]
 80057c6:	1901      	adds	r1, r0, r4
 80057c8:	428b      	cmp	r3, r1
 80057ca:	d107      	bne.n	80057dc <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057cc:	4907      	ldr	r1, [pc, #28]	; (80057ec <prvInsertBlockIntoFreeList+0x44>)
 80057ce:	6809      	ldr	r1, [r1, #0]
 80057d0:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057d2:	bf1f      	itttt	ne
 80057d4:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057d6:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057d8:	1909      	addne	r1, r1, r4
 80057da:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057dc:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057de:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057e0:	bf18      	it	ne
 80057e2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057e4:	bd10      	pop	{r4, pc}
 80057e6:	bf00      	nop
 80057e8:	20001ed8 	.word	0x20001ed8
 80057ec:	200012c8 	.word	0x200012c8

080057f0 <pvPortMalloc>:
{
 80057f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80057f6:	f7ff f9bd 	bl	8004b74 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80057fa:	483f      	ldr	r0, [pc, #252]	; (80058f8 <pvPortMalloc+0x108>)
 80057fc:	4d3f      	ldr	r5, [pc, #252]	; (80058fc <pvPortMalloc+0x10c>)
 80057fe:	6803      	ldr	r3, [r0, #0]
 8005800:	bb0b      	cbnz	r3, 8005846 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8005802:	493f      	ldr	r1, [pc, #252]	; (8005900 <pvPortMalloc+0x110>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005804:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005806:	bf1d      	ittte	ne
 8005808:	1dcb      	addne	r3, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800580a:	f023 0307 	bicne.w	r3, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800580e:	f501 6240 	addne.w	r2, r1, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005812:	f44f 6240 	moveq.w	r2, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005816:	bf1c      	itt	ne
 8005818:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800581a:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800581c:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800581e:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005820:	4e38      	ldr	r6, [pc, #224]	; (8005904 <pvPortMalloc+0x114>)
	uxAddress -= xHeapStructSize;
 8005822:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005824:	f022 0207 	bic.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 8005828:	6073      	str	r3, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800582a:	6031      	str	r1, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800582c:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005830:	1a53      	subs	r3, r2, r1
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005832:	e9c1 2300 	strd	r2, r3, [r1]
	pxEnd = ( void * ) uxAddress;
 8005836:	6002      	str	r2, [r0, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005838:	4a33      	ldr	r2, [pc, #204]	; (8005908 <pvPortMalloc+0x118>)
 800583a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800583c:	4a33      	ldr	r2, [pc, #204]	; (800590c <pvPortMalloc+0x11c>)
 800583e:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005844:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005846:	682f      	ldr	r7, [r5, #0]
 8005848:	4227      	tst	r7, r4
 800584a:	d150      	bne.n	80058ee <pvPortMalloc+0xfe>
			if( xWantedSize > 0 )
 800584c:	2c00      	cmp	r4, #0
 800584e:	d041      	beq.n	80058d4 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8005850:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005854:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005856:	bf1c      	itt	ne
 8005858:	f023 0307 	bicne.w	r3, r3, #7
 800585c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800585e:	2b00      	cmp	r3, #0
 8005860:	d045      	beq.n	80058ee <pvPortMalloc+0xfe>
 8005862:	4c2a      	ldr	r4, [pc, #168]	; (800590c <pvPortMalloc+0x11c>)
 8005864:	6826      	ldr	r6, [r4, #0]
 8005866:	429e      	cmp	r6, r3
 8005868:	d341      	bcc.n	80058ee <pvPortMalloc+0xfe>
				pxBlock = xStart.pxNextFreeBlock;
 800586a:	4a26      	ldr	r2, [pc, #152]	; (8005904 <pvPortMalloc+0x114>)
 800586c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800586e:	6869      	ldr	r1, [r5, #4]
 8005870:	4299      	cmp	r1, r3
 8005872:	d204      	bcs.n	800587e <pvPortMalloc+0x8e>
 8005874:	f8d5 c000 	ldr.w	ip, [r5]
 8005878:	f1bc 0f00 	cmp.w	ip, #0
 800587c:	d115      	bne.n	80058aa <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800587e:	6800      	ldr	r0, [r0, #0]
 8005880:	42a8      	cmp	r0, r5
 8005882:	d034      	beq.n	80058ee <pvPortMalloc+0xfe>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005884:	6828      	ldr	r0, [r5, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005886:	1ac9      	subs	r1, r1, r3
 8005888:	2910      	cmp	r1, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800588a:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800588e:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005890:	d912      	bls.n	80058b8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005892:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005894:	0742      	lsls	r2, r0, #29
 8005896:	d00b      	beq.n	80058b0 <pvPortMalloc+0xc0>
 8005898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589c:	f383 8811 	msr	BASEPRI, r3
 80058a0:	f3bf 8f6f 	isb	sy
 80058a4:	f3bf 8f4f 	dsb	sy
 80058a8:	e7fe      	b.n	80058a8 <pvPortMalloc+0xb8>
 80058aa:	462a      	mov	r2, r5
 80058ac:	4665      	mov	r5, ip
 80058ae:	e7de      	b.n	800586e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058b0:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058b2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058b4:	f7ff ff78 	bl	80057a8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058b8:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058ba:	4913      	ldr	r1, [pc, #76]	; (8005908 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058bc:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058be:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80058c0:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058c2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058c4:	6026      	str	r6, [r4, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058c6:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058c8:	bf38      	it	cc
 80058ca:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058cc:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058d0:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058d2:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80058d4:	f7ff f9ec 	bl	8004cb0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80058d8:	0763      	lsls	r3, r4, #29
 80058da:	d00a      	beq.n	80058f2 <pvPortMalloc+0x102>
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	e7fe      	b.n	80058ec <pvPortMalloc+0xfc>
void *pvReturn = NULL;
 80058ee:	2400      	movs	r4, #0
 80058f0:	e7f0      	b.n	80058d4 <pvPortMalloc+0xe4>
}
 80058f2:	4620      	mov	r0, r4
 80058f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f8:	200012c8 	.word	0x200012c8
 80058fc:	20001ecc 	.word	0x20001ecc
 8005900:	200012cc 	.word	0x200012cc
 8005904:	20001ed8 	.word	0x20001ed8
 8005908:	20001ed4 	.word	0x20001ed4
 800590c:	20001ed0 	.word	0x20001ed0

08005910 <vPortFree>:
{
 8005910:	b510      	push	{r4, lr}
	if( pv != NULL )
 8005912:	4604      	mov	r4, r0
 8005914:	b370      	cbz	r0, 8005974 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <vPortFree+0x68>)
 8005918:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	4213      	tst	r3, r2
 8005920:	d108      	bne.n	8005934 <vPortFree+0x24>
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	e7fe      	b.n	8005932 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005934:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005938:	b141      	cbz	r1, 800594c <vPortFree+0x3c>
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	e7fe      	b.n	800594a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800594c:	ea23 0302 	bic.w	r3, r3, r2
 8005950:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005954:	f7ff f90e 	bl	8004b74 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005958:	4a08      	ldr	r2, [pc, #32]	; (800597c <vPortFree+0x6c>)
 800595a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800595e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005960:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005964:	440b      	add	r3, r1
 8005966:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005968:	f7ff ff1e 	bl	80057a8 <prvInsertBlockIntoFreeList>
}
 800596c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8005970:	f7ff b99e 	b.w	8004cb0 <xTaskResumeAll>
}
 8005974:	bd10      	pop	{r4, pc}
 8005976:	bf00      	nop
 8005978:	20001ecc 	.word	0x20001ecc
 800597c:	20001ed0 	.word	0x20001ed0

08005980 <sqrt>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	4606      	mov	r6, r0
 8005984:	460f      	mov	r7, r1
 8005986:	f000 f841 	bl	8005a0c <__ieee754_sqrt>
 800598a:	4632      	mov	r2, r6
 800598c:	4604      	mov	r4, r0
 800598e:	460d      	mov	r5, r1
 8005990:	463b      	mov	r3, r7
 8005992:	4630      	mov	r0, r6
 8005994:	4639      	mov	r1, r7
 8005996:	f7fb f839 	bl	8000a0c <__aeabi_dcmpun>
 800599a:	b990      	cbnz	r0, 80059c2 <sqrt+0x42>
 800599c:	2200      	movs	r2, #0
 800599e:	2300      	movs	r3, #0
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fb f80a 	bl	80009bc <__aeabi_dcmplt>
 80059a8:	b158      	cbz	r0, 80059c2 <sqrt+0x42>
 80059aa:	f000 fc0f 	bl	80061cc <__errno>
 80059ae:	2321      	movs	r3, #33	; 0x21
 80059b0:	2200      	movs	r2, #0
 80059b2:	6003      	str	r3, [r0, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	4610      	mov	r0, r2
 80059b8:	4619      	mov	r1, r3
 80059ba:	f7fa feb7 	bl	800072c <__aeabi_ddiv>
 80059be:	4604      	mov	r4, r0
 80059c0:	460d      	mov	r5, r1
 80059c2:	4620      	mov	r0, r4
 80059c4:	4629      	mov	r1, r5
 80059c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080059c8 <asinf>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	4604      	mov	r4, r0
 80059cc:	f000 f8ce 	bl	8005b6c <__ieee754_asinf>
 80059d0:	4621      	mov	r1, r4
 80059d2:	4605      	mov	r5, r0
 80059d4:	4620      	mov	r0, r4
 80059d6:	f7fb fb7b 	bl	80010d0 <__aeabi_fcmpun>
 80059da:	b980      	cbnz	r0, 80059fe <asinf+0x36>
 80059dc:	4620      	mov	r0, r4
 80059de:	f000 fbed 	bl	80061bc <fabsf>
 80059e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80059e6:	f7fb fb69 	bl	80010bc <__aeabi_fcmpgt>
 80059ea:	b140      	cbz	r0, 80059fe <asinf+0x36>
 80059ec:	f000 fbee 	bl	80061cc <__errno>
 80059f0:	2321      	movs	r3, #33	; 0x21
 80059f2:	6003      	str	r3, [r0, #0]
 80059f4:	4803      	ldr	r0, [pc, #12]	; (8005a04 <asinf+0x3c>)
 80059f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059fa:	f000 bbe3 	b.w	80061c4 <nanf>
 80059fe:	4628      	mov	r0, r5
 8005a00:	bd38      	pop	{r3, r4, r5, pc}
 8005a02:	bf00      	nop
 8005a04:	080090c7 	.word	0x080090c7

08005a08 <atan2f>:
 8005a08:	f000 b9f4 	b.w	8005df4 <__ieee754_atan2f>

08005a0c <__ieee754_sqrt>:
 8005a0c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005b68 <__ieee754_sqrt+0x15c>
 8005a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a14:	ea3c 0c01 	bics.w	ip, ip, r1
 8005a18:	4606      	mov	r6, r0
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	460a      	mov	r2, r1
 8005a20:	4607      	mov	r7, r0
 8005a22:	4603      	mov	r3, r0
 8005a24:	d10f      	bne.n	8005a46 <__ieee754_sqrt+0x3a>
 8005a26:	4602      	mov	r2, r0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	f7fa fd55 	bl	80004d8 <__aeabi_dmul>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4630      	mov	r0, r6
 8005a34:	4629      	mov	r1, r5
 8005a36:	f7fa fb99 	bl	800016c <__adddf3>
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	460d      	mov	r5, r1
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4629      	mov	r1, r5
 8005a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a46:	2900      	cmp	r1, #0
 8005a48:	dc0e      	bgt.n	8005a68 <__ieee754_sqrt+0x5c>
 8005a4a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005a4e:	ea5c 0707 	orrs.w	r7, ip, r7
 8005a52:	d0f4      	beq.n	8005a3e <__ieee754_sqrt+0x32>
 8005a54:	b141      	cbz	r1, 8005a68 <__ieee754_sqrt+0x5c>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	f7fa fb85 	bl	8000168 <__aeabi_dsub>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	f7fa fe63 	bl	800072c <__aeabi_ddiv>
 8005a66:	e7e8      	b.n	8005a3a <__ieee754_sqrt+0x2e>
 8005a68:	1521      	asrs	r1, r4, #20
 8005a6a:	d075      	beq.n	8005b58 <__ieee754_sqrt+0x14c>
 8005a6c:	07cc      	lsls	r4, r1, #31
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005a76:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8005a7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a7e:	bf5e      	ittt	pl
 8005a80:	0fd9      	lsrpl	r1, r3, #31
 8005a82:	005b      	lslpl	r3, r3, #1
 8005a84:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8005a88:	0fd9      	lsrs	r1, r3, #31
 8005a8a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005a8e:	2516      	movs	r5, #22
 8005a90:	4620      	mov	r0, r4
 8005a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a96:	107f      	asrs	r7, r7, #1
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	1846      	adds	r6, r0, r1
 8005a9c:	4296      	cmp	r6, r2
 8005a9e:	bfde      	ittt	le
 8005aa0:	1b92      	suble	r2, r2, r6
 8005aa2:	1870      	addle	r0, r6, r1
 8005aa4:	1864      	addle	r4, r4, r1
 8005aa6:	0052      	lsls	r2, r2, #1
 8005aa8:	3d01      	subs	r5, #1
 8005aaa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005aae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005ab2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ab6:	d1f0      	bne.n	8005a9a <__ieee754_sqrt+0x8e>
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f04f 0e20 	mov.w	lr, #32
 8005abe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005ac2:	4282      	cmp	r2, r0
 8005ac4:	eb06 0c05 	add.w	ip, r6, r5
 8005ac8:	dc02      	bgt.n	8005ad0 <__ieee754_sqrt+0xc4>
 8005aca:	d113      	bne.n	8005af4 <__ieee754_sqrt+0xe8>
 8005acc:	459c      	cmp	ip, r3
 8005ace:	d811      	bhi.n	8005af4 <__ieee754_sqrt+0xe8>
 8005ad0:	f1bc 0f00 	cmp.w	ip, #0
 8005ad4:	eb0c 0506 	add.w	r5, ip, r6
 8005ad8:	da43      	bge.n	8005b62 <__ieee754_sqrt+0x156>
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	db41      	blt.n	8005b62 <__ieee754_sqrt+0x156>
 8005ade:	f100 0801 	add.w	r8, r0, #1
 8005ae2:	1a12      	subs	r2, r2, r0
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	459c      	cmp	ip, r3
 8005ae8:	bf88      	it	hi
 8005aea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005aee:	eba3 030c 	sub.w	r3, r3, ip
 8005af2:	4431      	add	r1, r6
 8005af4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005af8:	f1be 0e01 	subs.w	lr, lr, #1
 8005afc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8005b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005b04:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005b08:	d1db      	bne.n	8005ac2 <__ieee754_sqrt+0xb6>
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	d006      	beq.n	8005b1c <__ieee754_sqrt+0x110>
 8005b0e:	1c48      	adds	r0, r1, #1
 8005b10:	bf0b      	itete	eq
 8005b12:	4671      	moveq	r1, lr
 8005b14:	3101      	addne	r1, #1
 8005b16:	3401      	addeq	r4, #1
 8005b18:	f021 0101 	bicne.w	r1, r1, #1
 8005b1c:	1063      	asrs	r3, r4, #1
 8005b1e:	0849      	lsrs	r1, r1, #1
 8005b20:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005b24:	07e2      	lsls	r2, r4, #31
 8005b26:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005b2a:	bf48      	it	mi
 8005b2c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005b30:	460e      	mov	r6, r1
 8005b32:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005b36:	e782      	b.n	8005a3e <__ieee754_sqrt+0x32>
 8005b38:	0ada      	lsrs	r2, r3, #11
 8005b3a:	3815      	subs	r0, #21
 8005b3c:	055b      	lsls	r3, r3, #21
 8005b3e:	2a00      	cmp	r2, #0
 8005b40:	d0fa      	beq.n	8005b38 <__ieee754_sqrt+0x12c>
 8005b42:	02d5      	lsls	r5, r2, #11
 8005b44:	d50a      	bpl.n	8005b5c <__ieee754_sqrt+0x150>
 8005b46:	f1c1 0420 	rsb	r4, r1, #32
 8005b4a:	fa23 f404 	lsr.w	r4, r3, r4
 8005b4e:	1e4d      	subs	r5, r1, #1
 8005b50:	408b      	lsls	r3, r1
 8005b52:	4322      	orrs	r2, r4
 8005b54:	1b41      	subs	r1, r0, r5
 8005b56:	e789      	b.n	8005a6c <__ieee754_sqrt+0x60>
 8005b58:	4608      	mov	r0, r1
 8005b5a:	e7f0      	b.n	8005b3e <__ieee754_sqrt+0x132>
 8005b5c:	0052      	lsls	r2, r2, #1
 8005b5e:	3101      	adds	r1, #1
 8005b60:	e7ef      	b.n	8005b42 <__ieee754_sqrt+0x136>
 8005b62:	4680      	mov	r8, r0
 8005b64:	e7bd      	b.n	8005ae2 <__ieee754_sqrt+0xd6>
 8005b66:	bf00      	nop
 8005b68:	7ff00000 	.word	0x7ff00000

08005b6c <__ieee754_asinf>:
 8005b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b70:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 8005b74:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8005b78:	4604      	mov	r4, r0
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	d10c      	bne.n	8005b98 <__ieee754_asinf+0x2c>
 8005b7e:	498d      	ldr	r1, [pc, #564]	; (8005db4 <__ieee754_asinf+0x248>)
 8005b80:	f7fb f8e0 	bl	8000d44 <__aeabi_fmul>
 8005b84:	498c      	ldr	r1, [pc, #560]	; (8005db8 <__ieee754_asinf+0x24c>)
 8005b86:	4605      	mov	r5, r0
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f7fb f8db 	bl	8000d44 <__aeabi_fmul>
 8005b8e:	4601      	mov	r1, r0
 8005b90:	4628      	mov	r0, r5
 8005b92:	f7fa ffcf 	bl	8000b34 <__addsf3>
 8005b96:	e006      	b.n	8005ba6 <__ieee754_asinf+0x3a>
 8005b98:	dd07      	ble.n	8005baa <__ieee754_asinf+0x3e>
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	f7fa ffc8 	bl	8000b30 <__aeabi_fsub>
 8005ba0:	4601      	mov	r1, r0
 8005ba2:	f7fb f983 	bl	8000eac <__aeabi_fdiv>
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	e00e      	b.n	8005bc8 <__ieee754_asinf+0x5c>
 8005baa:	f1b8 5f7c 	cmp.w	r8, #1056964608	; 0x3f000000
 8005bae:	da58      	bge.n	8005c62 <__ieee754_asinf+0xf6>
 8005bb0:	f1b8 5f48 	cmp.w	r8, #838860800	; 0x32000000
 8005bb4:	da0b      	bge.n	8005bce <__ieee754_asinf+0x62>
 8005bb6:	4981      	ldr	r1, [pc, #516]	; (8005dbc <__ieee754_asinf+0x250>)
 8005bb8:	f7fa ffbc 	bl	8000b34 <__addsf3>
 8005bbc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005bc0:	f7fb fa7c 	bl	80010bc <__aeabi_fcmpgt>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d04c      	beq.n	8005c62 <__ieee754_asinf+0xf6>
 8005bc8:	4620      	mov	r0, r4
 8005bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bce:	4601      	mov	r1, r0
 8005bd0:	f7fb f8b8 	bl	8000d44 <__aeabi_fmul>
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	497a      	ldr	r1, [pc, #488]	; (8005dc0 <__ieee754_asinf+0x254>)
 8005bd8:	f7fb f8b4 	bl	8000d44 <__aeabi_fmul>
 8005bdc:	4979      	ldr	r1, [pc, #484]	; (8005dc4 <__ieee754_asinf+0x258>)
 8005bde:	f7fa ffa9 	bl	8000b34 <__addsf3>
 8005be2:	4629      	mov	r1, r5
 8005be4:	f7fb f8ae 	bl	8000d44 <__aeabi_fmul>
 8005be8:	4977      	ldr	r1, [pc, #476]	; (8005dc8 <__ieee754_asinf+0x25c>)
 8005bea:	f7fa ffa1 	bl	8000b30 <__aeabi_fsub>
 8005bee:	4629      	mov	r1, r5
 8005bf0:	f7fb f8a8 	bl	8000d44 <__aeabi_fmul>
 8005bf4:	4975      	ldr	r1, [pc, #468]	; (8005dcc <__ieee754_asinf+0x260>)
 8005bf6:	f7fa ff9d 	bl	8000b34 <__addsf3>
 8005bfa:	4629      	mov	r1, r5
 8005bfc:	f7fb f8a2 	bl	8000d44 <__aeabi_fmul>
 8005c00:	4973      	ldr	r1, [pc, #460]	; (8005dd0 <__ieee754_asinf+0x264>)
 8005c02:	f7fa ff95 	bl	8000b30 <__aeabi_fsub>
 8005c06:	4629      	mov	r1, r5
 8005c08:	f7fb f89c 	bl	8000d44 <__aeabi_fmul>
 8005c0c:	4971      	ldr	r1, [pc, #452]	; (8005dd4 <__ieee754_asinf+0x268>)
 8005c0e:	f7fa ff91 	bl	8000b34 <__addsf3>
 8005c12:	4629      	mov	r1, r5
 8005c14:	f7fb f896 	bl	8000d44 <__aeabi_fmul>
 8005c18:	496f      	ldr	r1, [pc, #444]	; (8005dd8 <__ieee754_asinf+0x26c>)
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f7fb f891 	bl	8000d44 <__aeabi_fmul>
 8005c22:	496e      	ldr	r1, [pc, #440]	; (8005ddc <__ieee754_asinf+0x270>)
 8005c24:	f7fa ff84 	bl	8000b30 <__aeabi_fsub>
 8005c28:	4629      	mov	r1, r5
 8005c2a:	f7fb f88b 	bl	8000d44 <__aeabi_fmul>
 8005c2e:	496c      	ldr	r1, [pc, #432]	; (8005de0 <__ieee754_asinf+0x274>)
 8005c30:	f7fa ff80 	bl	8000b34 <__addsf3>
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fb f885 	bl	8000d44 <__aeabi_fmul>
 8005c3a:	496a      	ldr	r1, [pc, #424]	; (8005de4 <__ieee754_asinf+0x278>)
 8005c3c:	f7fa ff78 	bl	8000b30 <__aeabi_fsub>
 8005c40:	4629      	mov	r1, r5
 8005c42:	f7fb f87f 	bl	8000d44 <__aeabi_fmul>
 8005c46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005c4a:	f7fa ff73 	bl	8000b34 <__addsf3>
 8005c4e:	4601      	mov	r1, r0
 8005c50:	4630      	mov	r0, r6
 8005c52:	f7fb f92b 	bl	8000eac <__aeabi_fdiv>
 8005c56:	4621      	mov	r1, r4
 8005c58:	f7fb f874 	bl	8000d44 <__aeabi_fmul>
 8005c5c:	4601      	mov	r1, r0
 8005c5e:	4620      	mov	r0, r4
 8005c60:	e797      	b.n	8005b92 <__ieee754_asinf+0x26>
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 faaa 	bl	80061bc <fabsf>
 8005c68:	4601      	mov	r1, r0
 8005c6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005c6e:	f7fa ff5f 	bl	8000b30 <__aeabi_fsub>
 8005c72:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8005c76:	f7fb f865 	bl	8000d44 <__aeabi_fmul>
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	4950      	ldr	r1, [pc, #320]	; (8005dc0 <__ieee754_asinf+0x254>)
 8005c7e:	f7fb f861 	bl	8000d44 <__aeabi_fmul>
 8005c82:	4950      	ldr	r1, [pc, #320]	; (8005dc4 <__ieee754_asinf+0x258>)
 8005c84:	f7fa ff56 	bl	8000b34 <__addsf3>
 8005c88:	4631      	mov	r1, r6
 8005c8a:	f7fb f85b 	bl	8000d44 <__aeabi_fmul>
 8005c8e:	494e      	ldr	r1, [pc, #312]	; (8005dc8 <__ieee754_asinf+0x25c>)
 8005c90:	f7fa ff4e 	bl	8000b30 <__aeabi_fsub>
 8005c94:	4631      	mov	r1, r6
 8005c96:	f7fb f855 	bl	8000d44 <__aeabi_fmul>
 8005c9a:	494c      	ldr	r1, [pc, #304]	; (8005dcc <__ieee754_asinf+0x260>)
 8005c9c:	f7fa ff4a 	bl	8000b34 <__addsf3>
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	f7fb f84f 	bl	8000d44 <__aeabi_fmul>
 8005ca6:	494a      	ldr	r1, [pc, #296]	; (8005dd0 <__ieee754_asinf+0x264>)
 8005ca8:	f7fa ff42 	bl	8000b30 <__aeabi_fsub>
 8005cac:	4631      	mov	r1, r6
 8005cae:	f7fb f849 	bl	8000d44 <__aeabi_fmul>
 8005cb2:	4948      	ldr	r1, [pc, #288]	; (8005dd4 <__ieee754_asinf+0x268>)
 8005cb4:	f7fa ff3e 	bl	8000b34 <__addsf3>
 8005cb8:	4631      	mov	r1, r6
 8005cba:	f7fb f843 	bl	8000d44 <__aeabi_fmul>
 8005cbe:	4946      	ldr	r1, [pc, #280]	; (8005dd8 <__ieee754_asinf+0x26c>)
 8005cc0:	4681      	mov	r9, r0
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7fb f83e 	bl	8000d44 <__aeabi_fmul>
 8005cc8:	4944      	ldr	r1, [pc, #272]	; (8005ddc <__ieee754_asinf+0x270>)
 8005cca:	f7fa ff31 	bl	8000b30 <__aeabi_fsub>
 8005cce:	4631      	mov	r1, r6
 8005cd0:	f7fb f838 	bl	8000d44 <__aeabi_fmul>
 8005cd4:	4942      	ldr	r1, [pc, #264]	; (8005de0 <__ieee754_asinf+0x274>)
 8005cd6:	f7fa ff2d 	bl	8000b34 <__addsf3>
 8005cda:	4631      	mov	r1, r6
 8005cdc:	f7fb f832 	bl	8000d44 <__aeabi_fmul>
 8005ce0:	4940      	ldr	r1, [pc, #256]	; (8005de4 <__ieee754_asinf+0x278>)
 8005ce2:	f7fa ff25 	bl	8000b30 <__aeabi_fsub>
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	f7fb f82c 	bl	8000d44 <__aeabi_fmul>
 8005cec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005cf0:	f7fa ff20 	bl	8000b34 <__addsf3>
 8005cf4:	4682      	mov	sl, r0
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	f000 f902 	bl	8005f00 <__ieee754_sqrtf>
 8005cfc:	4b3a      	ldr	r3, [pc, #232]	; (8005de8 <__ieee754_asinf+0x27c>)
 8005cfe:	4607      	mov	r7, r0
 8005d00:	4598      	cmp	r8, r3
 8005d02:	dd1a      	ble.n	8005d3a <__ieee754_asinf+0x1ce>
 8005d04:	4651      	mov	r1, sl
 8005d06:	4648      	mov	r0, r9
 8005d08:	f7fb f8d0 	bl	8000eac <__aeabi_fdiv>
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	f7fb f819 	bl	8000d44 <__aeabi_fmul>
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa ff0e 	bl	8000b34 <__addsf3>
 8005d18:	4601      	mov	r1, r0
 8005d1a:	f7fa ff0b 	bl	8000b34 <__addsf3>
 8005d1e:	4933      	ldr	r1, [pc, #204]	; (8005dec <__ieee754_asinf+0x280>)
 8005d20:	f7fa ff08 	bl	8000b34 <__addsf3>
 8005d24:	4601      	mov	r1, r0
 8005d26:	4823      	ldr	r0, [pc, #140]	; (8005db4 <__ieee754_asinf+0x248>)
 8005d28:	f7fa ff02 	bl	8000b30 <__aeabi_fsub>
 8005d2c:	2d00      	cmp	r5, #0
 8005d2e:	4604      	mov	r4, r0
 8005d30:	f73f af4a 	bgt.w	8005bc8 <__ieee754_asinf+0x5c>
 8005d34:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005d38:	e735      	b.n	8005ba6 <__ieee754_asinf+0x3a>
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8005d40:	f7fa fef8 	bl	8000b34 <__addsf3>
 8005d44:	4651      	mov	r1, sl
 8005d46:	4604      	mov	r4, r0
 8005d48:	4648      	mov	r0, r9
 8005d4a:	f7fb f8af 	bl	8000eac <__aeabi_fdiv>
 8005d4e:	4601      	mov	r1, r0
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7fa fff7 	bl	8000d44 <__aeabi_fmul>
 8005d56:	f028 080f 	bic.w	r8, r8, #15
 8005d5a:	4681      	mov	r9, r0
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	4640      	mov	r0, r8
 8005d60:	f7fa fff0 	bl	8000d44 <__aeabi_fmul>
 8005d64:	4601      	mov	r1, r0
 8005d66:	4630      	mov	r0, r6
 8005d68:	f7fa fee2 	bl	8000b30 <__aeabi_fsub>
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4638      	mov	r0, r7
 8005d72:	f7fa fedf 	bl	8000b34 <__addsf3>
 8005d76:	4601      	mov	r1, r0
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f7fb f897 	bl	8000eac <__aeabi_fdiv>
 8005d7e:	4601      	mov	r1, r0
 8005d80:	f7fa fed8 	bl	8000b34 <__addsf3>
 8005d84:	4601      	mov	r1, r0
 8005d86:	480c      	ldr	r0, [pc, #48]	; (8005db8 <__ieee754_asinf+0x24c>)
 8005d88:	f7fa fed2 	bl	8000b30 <__aeabi_fsub>
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	4648      	mov	r0, r9
 8005d90:	f7fa fece 	bl	8000b30 <__aeabi_fsub>
 8005d94:	4641      	mov	r1, r8
 8005d96:	4604      	mov	r4, r0
 8005d98:	4640      	mov	r0, r8
 8005d9a:	f7fa fecb 	bl	8000b34 <__addsf3>
 8005d9e:	4601      	mov	r1, r0
 8005da0:	4813      	ldr	r0, [pc, #76]	; (8005df0 <__ieee754_asinf+0x284>)
 8005da2:	f7fa fec5 	bl	8000b30 <__aeabi_fsub>
 8005da6:	4601      	mov	r1, r0
 8005da8:	4620      	mov	r0, r4
 8005daa:	f7fa fec1 	bl	8000b30 <__aeabi_fsub>
 8005dae:	4601      	mov	r1, r0
 8005db0:	480f      	ldr	r0, [pc, #60]	; (8005df0 <__ieee754_asinf+0x284>)
 8005db2:	e7b9      	b.n	8005d28 <__ieee754_asinf+0x1bc>
 8005db4:	3fc90fdb 	.word	0x3fc90fdb
 8005db8:	b33bbd2e 	.word	0xb33bbd2e
 8005dbc:	7149f2ca 	.word	0x7149f2ca
 8005dc0:	3811ef08 	.word	0x3811ef08
 8005dc4:	3a4f7f04 	.word	0x3a4f7f04
 8005dc8:	3d241146 	.word	0x3d241146
 8005dcc:	3e4e0aa8 	.word	0x3e4e0aa8
 8005dd0:	3ea6b090 	.word	0x3ea6b090
 8005dd4:	3e2aaaab 	.word	0x3e2aaaab
 8005dd8:	3d9dc62e 	.word	0x3d9dc62e
 8005ddc:	3f303361 	.word	0x3f303361
 8005de0:	4001572d 	.word	0x4001572d
 8005de4:	4019d139 	.word	0x4019d139
 8005de8:	3f799999 	.word	0x3f799999
 8005dec:	333bbd2e 	.word	0x333bbd2e
 8005df0:	3f490fdb 	.word	0x3f490fdb

08005df4 <__ieee754_atan2f>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005dfa:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005dfe:	4603      	mov	r3, r0
 8005e00:	dc05      	bgt.n	8005e0e <__ieee754_atan2f+0x1a>
 8005e02:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005e06:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005e0a:	4607      	mov	r7, r0
 8005e0c:	dd04      	ble.n	8005e18 <__ieee754_atan2f+0x24>
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fa fe90 	bl	8000b34 <__addsf3>
 8005e14:	4603      	mov	r3, r0
 8005e16:	e011      	b.n	8005e3c <__ieee754_atan2f+0x48>
 8005e18:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8005e1c:	d103      	bne.n	8005e26 <__ieee754_atan2f+0x32>
 8005e1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e22:	f000 b8bf 	b.w	8005fa4 <atanf>
 8005e26:	178c      	asrs	r4, r1, #30
 8005e28:	f004 0402 	and.w	r4, r4, #2
 8005e2c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005e30:	b932      	cbnz	r2, 8005e40 <__ieee754_atan2f+0x4c>
 8005e32:	2c02      	cmp	r4, #2
 8005e34:	d04c      	beq.n	8005ed0 <__ieee754_atan2f+0xdc>
 8005e36:	2c03      	cmp	r4, #3
 8005e38:	d100      	bne.n	8005e3c <__ieee754_atan2f+0x48>
 8005e3a:	4b29      	ldr	r3, [pc, #164]	; (8005ee0 <__ieee754_atan2f+0xec>)
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e40:	b91e      	cbnz	r6, 8005e4a <__ieee754_atan2f+0x56>
 8005e42:	2f00      	cmp	r7, #0
 8005e44:	da4a      	bge.n	8005edc <__ieee754_atan2f+0xe8>
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <__ieee754_atan2f+0xf0>)
 8005e48:	e7f8      	b.n	8005e3c <__ieee754_atan2f+0x48>
 8005e4a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005e4e:	d10e      	bne.n	8005e6e <__ieee754_atan2f+0x7a>
 8005e50:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005e54:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e58:	d105      	bne.n	8005e66 <__ieee754_atan2f+0x72>
 8005e5a:	2c02      	cmp	r4, #2
 8005e5c:	d83a      	bhi.n	8005ed4 <__ieee754_atan2f+0xe0>
 8005e5e:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <__ieee754_atan2f+0xf4>)
 8005e60:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005e64:	e7ea      	b.n	8005e3c <__ieee754_atan2f+0x48>
 8005e66:	2c02      	cmp	r4, #2
 8005e68:	d836      	bhi.n	8005ed8 <__ieee754_atan2f+0xe4>
 8005e6a:	4b20      	ldr	r3, [pc, #128]	; (8005eec <__ieee754_atan2f+0xf8>)
 8005e6c:	e7f8      	b.n	8005e60 <__ieee754_atan2f+0x6c>
 8005e6e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005e72:	d0e6      	beq.n	8005e42 <__ieee754_atan2f+0x4e>
 8005e74:	1b92      	subs	r2, r2, r6
 8005e76:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8005e7a:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8005e7e:	da17      	bge.n	8005eb0 <__ieee754_atan2f+0xbc>
 8005e80:	2900      	cmp	r1, #0
 8005e82:	da01      	bge.n	8005e88 <__ieee754_atan2f+0x94>
 8005e84:	303c      	adds	r0, #60	; 0x3c
 8005e86:	db15      	blt.n	8005eb4 <__ieee754_atan2f+0xc0>
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fb f80f 	bl	8000eac <__aeabi_fdiv>
 8005e8e:	f000 f995 	bl	80061bc <fabsf>
 8005e92:	f000 f887 	bl	8005fa4 <atanf>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2c01      	cmp	r4, #1
 8005e9a:	d00d      	beq.n	8005eb8 <__ieee754_atan2f+0xc4>
 8005e9c:	2c02      	cmp	r4, #2
 8005e9e:	d00e      	beq.n	8005ebe <__ieee754_atan2f+0xca>
 8005ea0:	2c00      	cmp	r4, #0
 8005ea2:	d0cb      	beq.n	8005e3c <__ieee754_atan2f+0x48>
 8005ea4:	4912      	ldr	r1, [pc, #72]	; (8005ef0 <__ieee754_atan2f+0xfc>)
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fe44 	bl	8000b34 <__addsf3>
 8005eac:	4911      	ldr	r1, [pc, #68]	; (8005ef4 <__ieee754_atan2f+0x100>)
 8005eae:	e00c      	b.n	8005eca <__ieee754_atan2f+0xd6>
 8005eb0:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <__ieee754_atan2f+0x104>)
 8005eb2:	e7f1      	b.n	8005e98 <__ieee754_atan2f+0xa4>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e7ef      	b.n	8005e98 <__ieee754_atan2f+0xa4>
 8005eb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ebc:	e7be      	b.n	8005e3c <__ieee754_atan2f+0x48>
 8005ebe:	490c      	ldr	r1, [pc, #48]	; (8005ef0 <__ieee754_atan2f+0xfc>)
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fa fe37 	bl	8000b34 <__addsf3>
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	480a      	ldr	r0, [pc, #40]	; (8005ef4 <__ieee754_atan2f+0x100>)
 8005eca:	f7fa fe31 	bl	8000b30 <__aeabi_fsub>
 8005ece:	e7a1      	b.n	8005e14 <__ieee754_atan2f+0x20>
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <__ieee754_atan2f+0x100>)
 8005ed2:	e7b3      	b.n	8005e3c <__ieee754_atan2f+0x48>
 8005ed4:	4b09      	ldr	r3, [pc, #36]	; (8005efc <__ieee754_atan2f+0x108>)
 8005ed6:	e7b1      	b.n	8005e3c <__ieee754_atan2f+0x48>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e7af      	b.n	8005e3c <__ieee754_atan2f+0x48>
 8005edc:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <__ieee754_atan2f+0x104>)
 8005ede:	e7ad      	b.n	8005e3c <__ieee754_atan2f+0x48>
 8005ee0:	c0490fdb 	.word	0xc0490fdb
 8005ee4:	bfc90fdb 	.word	0xbfc90fdb
 8005ee8:	08008dd0 	.word	0x08008dd0
 8005eec:	08008ddc 	.word	0x08008ddc
 8005ef0:	33bbbd2e 	.word	0x33bbbd2e
 8005ef4:	40490fdb 	.word	0x40490fdb
 8005ef8:	3fc90fdb 	.word	0x3fc90fdb
 8005efc:	3f490fdb 	.word	0x3f490fdb

08005f00 <__ieee754_sqrtf>:
 8005f00:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005f04:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005f08:	b570      	push	{r4, r5, r6, lr}
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	d309      	bcc.n	8005f24 <__ieee754_sqrtf+0x24>
 8005f10:	4601      	mov	r1, r0
 8005f12:	f7fa ff17 	bl	8000d44 <__aeabi_fmul>
 8005f16:	4601      	mov	r1, r0
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f7fa fe0b 	bl	8000b34 <__addsf3>
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4620      	mov	r0, r4
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	2a00      	cmp	r2, #0
 8005f26:	d0fb      	beq.n	8005f20 <__ieee754_sqrtf+0x20>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	da06      	bge.n	8005f3a <__ieee754_sqrtf+0x3a>
 8005f2c:	4601      	mov	r1, r0
 8005f2e:	f7fa fdff 	bl	8000b30 <__aeabi_fsub>
 8005f32:	4601      	mov	r1, r0
 8005f34:	f7fa ffba 	bl	8000eac <__aeabi_fdiv>
 8005f38:	e7f1      	b.n	8005f1e <__ieee754_sqrtf+0x1e>
 8005f3a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8005f3e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8005f42:	d029      	beq.n	8005f98 <__ieee754_sqrtf+0x98>
 8005f44:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8005f48:	07cb      	lsls	r3, r1, #31
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8005f52:	f04f 0419 	mov.w	r4, #25
 8005f56:	461e      	mov	r6, r3
 8005f58:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8005f5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005f60:	bf58      	it	pl
 8005f62:	0052      	lslpl	r2, r2, #1
 8005f64:	1040      	asrs	r0, r0, #1
 8005f66:	0052      	lsls	r2, r2, #1
 8005f68:	1875      	adds	r5, r6, r1
 8005f6a:	4295      	cmp	r5, r2
 8005f6c:	bfde      	ittt	le
 8005f6e:	186e      	addle	r6, r5, r1
 8005f70:	1b52      	suble	r2, r2, r5
 8005f72:	185b      	addle	r3, r3, r1
 8005f74:	3c01      	subs	r4, #1
 8005f76:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005f7a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005f7e:	d1f3      	bne.n	8005f68 <__ieee754_sqrtf+0x68>
 8005f80:	b112      	cbz	r2, 8005f88 <__ieee754_sqrtf+0x88>
 8005f82:	3301      	adds	r3, #1
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	105c      	asrs	r4, r3, #1
 8005f8a:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8005f8e:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8005f92:	e7c5      	b.n	8005f20 <__ieee754_sqrtf+0x20>
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	3201      	adds	r2, #1
 8005f98:	0218      	lsls	r0, r3, #8
 8005f9a:	d5fb      	bpl.n	8005f94 <__ieee754_sqrtf+0x94>
 8005f9c:	3a01      	subs	r2, #1
 8005f9e:	1a89      	subs	r1, r1, r2
 8005fa0:	e7d0      	b.n	8005f44 <__ieee754_sqrtf+0x44>
	...

08005fa4 <atanf>:
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005fac:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8005fb0:	4604      	mov	r4, r0
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	db0e      	blt.n	8005fd4 <atanf+0x30>
 8005fb6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005fba:	dd04      	ble.n	8005fc6 <atanf+0x22>
 8005fbc:	4601      	mov	r1, r0
 8005fbe:	f7fa fdb9 	bl	8000b34 <__addsf3>
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	e003      	b.n	8005fce <atanf+0x2a>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	f300 80ce 	bgt.w	8006168 <atanf+0x1c4>
 8005fcc:	4c67      	ldr	r4, [pc, #412]	; (800616c <atanf+0x1c8>)
 8005fce:	4620      	mov	r0, r4
 8005fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fd4:	4b66      	ldr	r3, [pc, #408]	; (8006170 <atanf+0x1cc>)
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	dc0e      	bgt.n	8005ff8 <atanf+0x54>
 8005fda:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8005fde:	da08      	bge.n	8005ff2 <atanf+0x4e>
 8005fe0:	4964      	ldr	r1, [pc, #400]	; (8006174 <atanf+0x1d0>)
 8005fe2:	f7fa fda7 	bl	8000b34 <__addsf3>
 8005fe6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005fea:	f7fb f867 	bl	80010bc <__aeabi_fcmpgt>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d1ed      	bne.n	8005fce <atanf+0x2a>
 8005ff2:	f04f 36ff 	mov.w	r6, #4294967295
 8005ff6:	e01c      	b.n	8006032 <atanf+0x8e>
 8005ff8:	f000 f8e0 	bl	80061bc <fabsf>
 8005ffc:	4b5e      	ldr	r3, [pc, #376]	; (8006178 <atanf+0x1d4>)
 8005ffe:	4604      	mov	r4, r0
 8006000:	429d      	cmp	r5, r3
 8006002:	dc7c      	bgt.n	80060fe <atanf+0x15a>
 8006004:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8006008:	429d      	cmp	r5, r3
 800600a:	dc67      	bgt.n	80060dc <atanf+0x138>
 800600c:	4601      	mov	r1, r0
 800600e:	f7fa fd91 	bl	8000b34 <__addsf3>
 8006012:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006016:	f7fa fd8b 	bl	8000b30 <__aeabi_fsub>
 800601a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800601e:	4605      	mov	r5, r0
 8006020:	4620      	mov	r0, r4
 8006022:	f7fa fd87 	bl	8000b34 <__addsf3>
 8006026:	4601      	mov	r1, r0
 8006028:	4628      	mov	r0, r5
 800602a:	f7fa ff3f 	bl	8000eac <__aeabi_fdiv>
 800602e:	2600      	movs	r6, #0
 8006030:	4604      	mov	r4, r0
 8006032:	4621      	mov	r1, r4
 8006034:	4620      	mov	r0, r4
 8006036:	f7fa fe85 	bl	8000d44 <__aeabi_fmul>
 800603a:	4601      	mov	r1, r0
 800603c:	4607      	mov	r7, r0
 800603e:	f7fa fe81 	bl	8000d44 <__aeabi_fmul>
 8006042:	4605      	mov	r5, r0
 8006044:	494d      	ldr	r1, [pc, #308]	; (800617c <atanf+0x1d8>)
 8006046:	f7fa fe7d 	bl	8000d44 <__aeabi_fmul>
 800604a:	494d      	ldr	r1, [pc, #308]	; (8006180 <atanf+0x1dc>)
 800604c:	f7fa fd72 	bl	8000b34 <__addsf3>
 8006050:	4629      	mov	r1, r5
 8006052:	f7fa fe77 	bl	8000d44 <__aeabi_fmul>
 8006056:	494b      	ldr	r1, [pc, #300]	; (8006184 <atanf+0x1e0>)
 8006058:	f7fa fd6c 	bl	8000b34 <__addsf3>
 800605c:	4629      	mov	r1, r5
 800605e:	f7fa fe71 	bl	8000d44 <__aeabi_fmul>
 8006062:	4949      	ldr	r1, [pc, #292]	; (8006188 <atanf+0x1e4>)
 8006064:	f7fa fd66 	bl	8000b34 <__addsf3>
 8006068:	4629      	mov	r1, r5
 800606a:	f7fa fe6b 	bl	8000d44 <__aeabi_fmul>
 800606e:	4947      	ldr	r1, [pc, #284]	; (800618c <atanf+0x1e8>)
 8006070:	f7fa fd60 	bl	8000b34 <__addsf3>
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa fe65 	bl	8000d44 <__aeabi_fmul>
 800607a:	4945      	ldr	r1, [pc, #276]	; (8006190 <atanf+0x1ec>)
 800607c:	f7fa fd5a 	bl	8000b34 <__addsf3>
 8006080:	4639      	mov	r1, r7
 8006082:	f7fa fe5f 	bl	8000d44 <__aeabi_fmul>
 8006086:	4943      	ldr	r1, [pc, #268]	; (8006194 <atanf+0x1f0>)
 8006088:	4607      	mov	r7, r0
 800608a:	4628      	mov	r0, r5
 800608c:	f7fa fe5a 	bl	8000d44 <__aeabi_fmul>
 8006090:	4941      	ldr	r1, [pc, #260]	; (8006198 <atanf+0x1f4>)
 8006092:	f7fa fd4d 	bl	8000b30 <__aeabi_fsub>
 8006096:	4629      	mov	r1, r5
 8006098:	f7fa fe54 	bl	8000d44 <__aeabi_fmul>
 800609c:	493f      	ldr	r1, [pc, #252]	; (800619c <atanf+0x1f8>)
 800609e:	f7fa fd47 	bl	8000b30 <__aeabi_fsub>
 80060a2:	4629      	mov	r1, r5
 80060a4:	f7fa fe4e 	bl	8000d44 <__aeabi_fmul>
 80060a8:	493d      	ldr	r1, [pc, #244]	; (80061a0 <atanf+0x1fc>)
 80060aa:	f7fa fd41 	bl	8000b30 <__aeabi_fsub>
 80060ae:	4629      	mov	r1, r5
 80060b0:	f7fa fe48 	bl	8000d44 <__aeabi_fmul>
 80060b4:	493b      	ldr	r1, [pc, #236]	; (80061a4 <atanf+0x200>)
 80060b6:	f7fa fd3b 	bl	8000b30 <__aeabi_fsub>
 80060ba:	4629      	mov	r1, r5
 80060bc:	f7fa fe42 	bl	8000d44 <__aeabi_fmul>
 80060c0:	4601      	mov	r1, r0
 80060c2:	4638      	mov	r0, r7
 80060c4:	f7fa fd36 	bl	8000b34 <__addsf3>
 80060c8:	4621      	mov	r1, r4
 80060ca:	f7fa fe3b 	bl	8000d44 <__aeabi_fmul>
 80060ce:	1c73      	adds	r3, r6, #1
 80060d0:	4601      	mov	r1, r0
 80060d2:	d133      	bne.n	800613c <atanf+0x198>
 80060d4:	4620      	mov	r0, r4
 80060d6:	f7fa fd2b 	bl	8000b30 <__aeabi_fsub>
 80060da:	e772      	b.n	8005fc2 <atanf+0x1e>
 80060dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80060e0:	f7fa fd26 	bl	8000b30 <__aeabi_fsub>
 80060e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80060e8:	4605      	mov	r5, r0
 80060ea:	4620      	mov	r0, r4
 80060ec:	f7fa fd22 	bl	8000b34 <__addsf3>
 80060f0:	4601      	mov	r1, r0
 80060f2:	4628      	mov	r0, r5
 80060f4:	f7fa feda 	bl	8000eac <__aeabi_fdiv>
 80060f8:	2601      	movs	r6, #1
 80060fa:	4604      	mov	r4, r0
 80060fc:	e799      	b.n	8006032 <atanf+0x8e>
 80060fe:	4b2a      	ldr	r3, [pc, #168]	; (80061a8 <atanf+0x204>)
 8006100:	429d      	cmp	r5, r3
 8006102:	dc14      	bgt.n	800612e <atanf+0x18a>
 8006104:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8006108:	f7fa fd12 	bl	8000b30 <__aeabi_fsub>
 800610c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8006110:	4605      	mov	r5, r0
 8006112:	4620      	mov	r0, r4
 8006114:	f7fa fe16 	bl	8000d44 <__aeabi_fmul>
 8006118:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800611c:	f7fa fd0a 	bl	8000b34 <__addsf3>
 8006120:	4601      	mov	r1, r0
 8006122:	4628      	mov	r0, r5
 8006124:	f7fa fec2 	bl	8000eac <__aeabi_fdiv>
 8006128:	2602      	movs	r6, #2
 800612a:	4604      	mov	r4, r0
 800612c:	e781      	b.n	8006032 <atanf+0x8e>
 800612e:	4601      	mov	r1, r0
 8006130:	481e      	ldr	r0, [pc, #120]	; (80061ac <atanf+0x208>)
 8006132:	f7fa febb 	bl	8000eac <__aeabi_fdiv>
 8006136:	2603      	movs	r6, #3
 8006138:	4604      	mov	r4, r0
 800613a:	e77a      	b.n	8006032 <atanf+0x8e>
 800613c:	4b1c      	ldr	r3, [pc, #112]	; (80061b0 <atanf+0x20c>)
 800613e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8006142:	f7fa fcf5 	bl	8000b30 <__aeabi_fsub>
 8006146:	4621      	mov	r1, r4
 8006148:	f7fa fcf2 	bl	8000b30 <__aeabi_fsub>
 800614c:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <atanf+0x210>)
 800614e:	4601      	mov	r1, r0
 8006150:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006154:	f7fa fcec 	bl	8000b30 <__aeabi_fsub>
 8006158:	f1b8 0f00 	cmp.w	r8, #0
 800615c:	4604      	mov	r4, r0
 800615e:	f6bf af36 	bge.w	8005fce <atanf+0x2a>
 8006162:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006166:	e72c      	b.n	8005fc2 <atanf+0x1e>
 8006168:	4c13      	ldr	r4, [pc, #76]	; (80061b8 <atanf+0x214>)
 800616a:	e730      	b.n	8005fce <atanf+0x2a>
 800616c:	bfc90fdb 	.word	0xbfc90fdb
 8006170:	3edfffff 	.word	0x3edfffff
 8006174:	7149f2ca 	.word	0x7149f2ca
 8006178:	3f97ffff 	.word	0x3f97ffff
 800617c:	3c8569d7 	.word	0x3c8569d7
 8006180:	3d4bda59 	.word	0x3d4bda59
 8006184:	3d886b35 	.word	0x3d886b35
 8006188:	3dba2e6e 	.word	0x3dba2e6e
 800618c:	3e124925 	.word	0x3e124925
 8006190:	3eaaaaab 	.word	0x3eaaaaab
 8006194:	bd15a221 	.word	0xbd15a221
 8006198:	3d6ef16b 	.word	0x3d6ef16b
 800619c:	3d9d8795 	.word	0x3d9d8795
 80061a0:	3de38e38 	.word	0x3de38e38
 80061a4:	3e4ccccd 	.word	0x3e4ccccd
 80061a8:	401bffff 	.word	0x401bffff
 80061ac:	bf800000 	.word	0xbf800000
 80061b0:	08008df8 	.word	0x08008df8
 80061b4:	08008de8 	.word	0x08008de8
 80061b8:	3fc90fdb 	.word	0x3fc90fdb

080061bc <fabsf>:
 80061bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80061c0:	4770      	bx	lr
	...

080061c4 <nanf>:
 80061c4:	4800      	ldr	r0, [pc, #0]	; (80061c8 <nanf+0x4>)
 80061c6:	4770      	bx	lr
 80061c8:	7fc00000 	.word	0x7fc00000

080061cc <__errno>:
 80061cc:	4b01      	ldr	r3, [pc, #4]	; (80061d4 <__errno+0x8>)
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000024 	.word	0x20000024

080061d8 <std>:
 80061d8:	2300      	movs	r3, #0
 80061da:	b510      	push	{r4, lr}
 80061dc:	4604      	mov	r4, r0
 80061de:	e9c0 3300 	strd	r3, r3, [r0]
 80061e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061e6:	6083      	str	r3, [r0, #8]
 80061e8:	8181      	strh	r1, [r0, #12]
 80061ea:	6643      	str	r3, [r0, #100]	; 0x64
 80061ec:	81c2      	strh	r2, [r0, #14]
 80061ee:	6183      	str	r3, [r0, #24]
 80061f0:	4619      	mov	r1, r3
 80061f2:	2208      	movs	r2, #8
 80061f4:	305c      	adds	r0, #92	; 0x5c
 80061f6:	f000 f91a 	bl	800642e <memset>
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <std+0x38>)
 80061fc:	6224      	str	r4, [r4, #32]
 80061fe:	6263      	str	r3, [r4, #36]	; 0x24
 8006200:	4b04      	ldr	r3, [pc, #16]	; (8006214 <std+0x3c>)
 8006202:	62a3      	str	r3, [r4, #40]	; 0x28
 8006204:	4b04      	ldr	r3, [pc, #16]	; (8006218 <std+0x40>)
 8006206:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <std+0x44>)
 800620a:	6323      	str	r3, [r4, #48]	; 0x30
 800620c:	bd10      	pop	{r4, pc}
 800620e:	bf00      	nop
 8006210:	08006f1d 	.word	0x08006f1d
 8006214:	08006f3f 	.word	0x08006f3f
 8006218:	08006f77 	.word	0x08006f77
 800621c:	08006f9b 	.word	0x08006f9b

08006220 <_cleanup_r>:
 8006220:	4901      	ldr	r1, [pc, #4]	; (8006228 <_cleanup_r+0x8>)
 8006222:	f000 b8af 	b.w	8006384 <_fwalk_reent>
 8006226:	bf00      	nop
 8006228:	08007de1 	.word	0x08007de1

0800622c <__sfmoreglue>:
 800622c:	2268      	movs	r2, #104	; 0x68
 800622e:	b570      	push	{r4, r5, r6, lr}
 8006230:	1e4d      	subs	r5, r1, #1
 8006232:	4355      	muls	r5, r2
 8006234:	460e      	mov	r6, r1
 8006236:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800623a:	f000 f921 	bl	8006480 <_malloc_r>
 800623e:	4604      	mov	r4, r0
 8006240:	b140      	cbz	r0, 8006254 <__sfmoreglue+0x28>
 8006242:	2100      	movs	r1, #0
 8006244:	e9c0 1600 	strd	r1, r6, [r0]
 8006248:	300c      	adds	r0, #12
 800624a:	60a0      	str	r0, [r4, #8]
 800624c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006250:	f000 f8ed 	bl	800642e <memset>
 8006254:	4620      	mov	r0, r4
 8006256:	bd70      	pop	{r4, r5, r6, pc}

08006258 <__sfp_lock_acquire>:
 8006258:	4801      	ldr	r0, [pc, #4]	; (8006260 <__sfp_lock_acquire+0x8>)
 800625a:	f000 b8d8 	b.w	800640e <__retarget_lock_acquire_recursive>
 800625e:	bf00      	nop
 8006260:	20001ee1 	.word	0x20001ee1

08006264 <__sfp_lock_release>:
 8006264:	4801      	ldr	r0, [pc, #4]	; (800626c <__sfp_lock_release+0x8>)
 8006266:	f000 b8d3 	b.w	8006410 <__retarget_lock_release_recursive>
 800626a:	bf00      	nop
 800626c:	20001ee1 	.word	0x20001ee1

08006270 <__sinit_lock_acquire>:
 8006270:	4801      	ldr	r0, [pc, #4]	; (8006278 <__sinit_lock_acquire+0x8>)
 8006272:	f000 b8cc 	b.w	800640e <__retarget_lock_acquire_recursive>
 8006276:	bf00      	nop
 8006278:	20001ee2 	.word	0x20001ee2

0800627c <__sinit_lock_release>:
 800627c:	4801      	ldr	r0, [pc, #4]	; (8006284 <__sinit_lock_release+0x8>)
 800627e:	f000 b8c7 	b.w	8006410 <__retarget_lock_release_recursive>
 8006282:	bf00      	nop
 8006284:	20001ee2 	.word	0x20001ee2

08006288 <__sinit>:
 8006288:	b510      	push	{r4, lr}
 800628a:	4604      	mov	r4, r0
 800628c:	f7ff fff0 	bl	8006270 <__sinit_lock_acquire>
 8006290:	69a3      	ldr	r3, [r4, #24]
 8006292:	b11b      	cbz	r3, 800629c <__sinit+0x14>
 8006294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006298:	f7ff bff0 	b.w	800627c <__sinit_lock_release>
 800629c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80062a0:	6523      	str	r3, [r4, #80]	; 0x50
 80062a2:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <__sinit+0x68>)
 80062a4:	4a13      	ldr	r2, [pc, #76]	; (80062f4 <__sinit+0x6c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80062aa:	42a3      	cmp	r3, r4
 80062ac:	bf08      	it	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	4620      	mov	r0, r4
 80062b2:	bf08      	it	eq
 80062b4:	61a3      	streq	r3, [r4, #24]
 80062b6:	f000 f81f 	bl	80062f8 <__sfp>
 80062ba:	6060      	str	r0, [r4, #4]
 80062bc:	4620      	mov	r0, r4
 80062be:	f000 f81b 	bl	80062f8 <__sfp>
 80062c2:	60a0      	str	r0, [r4, #8]
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 f817 	bl	80062f8 <__sfp>
 80062ca:	2200      	movs	r2, #0
 80062cc:	2104      	movs	r1, #4
 80062ce:	60e0      	str	r0, [r4, #12]
 80062d0:	6860      	ldr	r0, [r4, #4]
 80062d2:	f7ff ff81 	bl	80061d8 <std>
 80062d6:	2201      	movs	r2, #1
 80062d8:	2109      	movs	r1, #9
 80062da:	68a0      	ldr	r0, [r4, #8]
 80062dc:	f7ff ff7c 	bl	80061d8 <std>
 80062e0:	2202      	movs	r2, #2
 80062e2:	2112      	movs	r1, #18
 80062e4:	68e0      	ldr	r0, [r4, #12]
 80062e6:	f7ff ff77 	bl	80061d8 <std>
 80062ea:	2301      	movs	r3, #1
 80062ec:	61a3      	str	r3, [r4, #24]
 80062ee:	e7d1      	b.n	8006294 <__sinit+0xc>
 80062f0:	08008e68 	.word	0x08008e68
 80062f4:	08006221 	.word	0x08006221

080062f8 <__sfp>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	4607      	mov	r7, r0
 80062fc:	f7ff ffac 	bl	8006258 <__sfp_lock_acquire>
 8006300:	4b1e      	ldr	r3, [pc, #120]	; (800637c <__sfp+0x84>)
 8006302:	681e      	ldr	r6, [r3, #0]
 8006304:	69b3      	ldr	r3, [r6, #24]
 8006306:	b913      	cbnz	r3, 800630e <__sfp+0x16>
 8006308:	4630      	mov	r0, r6
 800630a:	f7ff ffbd 	bl	8006288 <__sinit>
 800630e:	3648      	adds	r6, #72	; 0x48
 8006310:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006314:	3b01      	subs	r3, #1
 8006316:	d503      	bpl.n	8006320 <__sfp+0x28>
 8006318:	6833      	ldr	r3, [r6, #0]
 800631a:	b30b      	cbz	r3, 8006360 <__sfp+0x68>
 800631c:	6836      	ldr	r6, [r6, #0]
 800631e:	e7f7      	b.n	8006310 <__sfp+0x18>
 8006320:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006324:	b9d5      	cbnz	r5, 800635c <__sfp+0x64>
 8006326:	4b16      	ldr	r3, [pc, #88]	; (8006380 <__sfp+0x88>)
 8006328:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800632c:	60e3      	str	r3, [r4, #12]
 800632e:	6665      	str	r5, [r4, #100]	; 0x64
 8006330:	f000 f86c 	bl	800640c <__retarget_lock_init_recursive>
 8006334:	f7ff ff96 	bl	8006264 <__sfp_lock_release>
 8006338:	2208      	movs	r2, #8
 800633a:	4629      	mov	r1, r5
 800633c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006340:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006344:	6025      	str	r5, [r4, #0]
 8006346:	61a5      	str	r5, [r4, #24]
 8006348:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800634c:	f000 f86f 	bl	800642e <memset>
 8006350:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006354:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006358:	4620      	mov	r0, r4
 800635a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800635c:	3468      	adds	r4, #104	; 0x68
 800635e:	e7d9      	b.n	8006314 <__sfp+0x1c>
 8006360:	2104      	movs	r1, #4
 8006362:	4638      	mov	r0, r7
 8006364:	f7ff ff62 	bl	800622c <__sfmoreglue>
 8006368:	4604      	mov	r4, r0
 800636a:	6030      	str	r0, [r6, #0]
 800636c:	2800      	cmp	r0, #0
 800636e:	d1d5      	bne.n	800631c <__sfp+0x24>
 8006370:	f7ff ff78 	bl	8006264 <__sfp_lock_release>
 8006374:	230c      	movs	r3, #12
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	e7ee      	b.n	8006358 <__sfp+0x60>
 800637a:	bf00      	nop
 800637c:	08008e68 	.word	0x08008e68
 8006380:	ffff0001 	.word	0xffff0001

08006384 <_fwalk_reent>:
 8006384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006388:	4606      	mov	r6, r0
 800638a:	4688      	mov	r8, r1
 800638c:	2700      	movs	r7, #0
 800638e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006392:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006396:	f1b9 0901 	subs.w	r9, r9, #1
 800639a:	d505      	bpl.n	80063a8 <_fwalk_reent+0x24>
 800639c:	6824      	ldr	r4, [r4, #0]
 800639e:	2c00      	cmp	r4, #0
 80063a0:	d1f7      	bne.n	8006392 <_fwalk_reent+0xe>
 80063a2:	4638      	mov	r0, r7
 80063a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a8:	89ab      	ldrh	r3, [r5, #12]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d907      	bls.n	80063be <_fwalk_reent+0x3a>
 80063ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063b2:	3301      	adds	r3, #1
 80063b4:	d003      	beq.n	80063be <_fwalk_reent+0x3a>
 80063b6:	4629      	mov	r1, r5
 80063b8:	4630      	mov	r0, r6
 80063ba:	47c0      	blx	r8
 80063bc:	4307      	orrs	r7, r0
 80063be:	3568      	adds	r5, #104	; 0x68
 80063c0:	e7e9      	b.n	8006396 <_fwalk_reent+0x12>
	...

080063c4 <__libc_init_array>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	2600      	movs	r6, #0
 80063c8:	4d0c      	ldr	r5, [pc, #48]	; (80063fc <__libc_init_array+0x38>)
 80063ca:	4c0d      	ldr	r4, [pc, #52]	; (8006400 <__libc_init_array+0x3c>)
 80063cc:	1b64      	subs	r4, r4, r5
 80063ce:	10a4      	asrs	r4, r4, #2
 80063d0:	42a6      	cmp	r6, r4
 80063d2:	d109      	bne.n	80063e8 <__libc_init_array+0x24>
 80063d4:	f002 fca2 	bl	8008d1c <_init>
 80063d8:	2600      	movs	r6, #0
 80063da:	4d0a      	ldr	r5, [pc, #40]	; (8006404 <__libc_init_array+0x40>)
 80063dc:	4c0a      	ldr	r4, [pc, #40]	; (8006408 <__libc_init_array+0x44>)
 80063de:	1b64      	subs	r4, r4, r5
 80063e0:	10a4      	asrs	r4, r4, #2
 80063e2:	42a6      	cmp	r6, r4
 80063e4:	d105      	bne.n	80063f2 <__libc_init_array+0x2e>
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ec:	4798      	blx	r3
 80063ee:	3601      	adds	r6, #1
 80063f0:	e7ee      	b.n	80063d0 <__libc_init_array+0xc>
 80063f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f6:	4798      	blx	r3
 80063f8:	3601      	adds	r6, #1
 80063fa:	e7f2      	b.n	80063e2 <__libc_init_array+0x1e>
 80063fc:	080091e4 	.word	0x080091e4
 8006400:	080091e4 	.word	0x080091e4
 8006404:	080091e4 	.word	0x080091e4
 8006408:	080091e8 	.word	0x080091e8

0800640c <__retarget_lock_init_recursive>:
 800640c:	4770      	bx	lr

0800640e <__retarget_lock_acquire_recursive>:
 800640e:	4770      	bx	lr

08006410 <__retarget_lock_release_recursive>:
 8006410:	4770      	bx	lr

08006412 <memcpy>:
 8006412:	440a      	add	r2, r1
 8006414:	4291      	cmp	r1, r2
 8006416:	f100 33ff 	add.w	r3, r0, #4294967295
 800641a:	d100      	bne.n	800641e <memcpy+0xc>
 800641c:	4770      	bx	lr
 800641e:	b510      	push	{r4, lr}
 8006420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006424:	4291      	cmp	r1, r2
 8006426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800642a:	d1f9      	bne.n	8006420 <memcpy+0xe>
 800642c:	bd10      	pop	{r4, pc}

0800642e <memset>:
 800642e:	4603      	mov	r3, r0
 8006430:	4402      	add	r2, r0
 8006432:	4293      	cmp	r3, r2
 8006434:	d100      	bne.n	8006438 <memset+0xa>
 8006436:	4770      	bx	lr
 8006438:	f803 1b01 	strb.w	r1, [r3], #1
 800643c:	e7f9      	b.n	8006432 <memset+0x4>
	...

08006440 <sbrk_aligned>:
 8006440:	b570      	push	{r4, r5, r6, lr}
 8006442:	4e0e      	ldr	r6, [pc, #56]	; (800647c <sbrk_aligned+0x3c>)
 8006444:	460c      	mov	r4, r1
 8006446:	6831      	ldr	r1, [r6, #0]
 8006448:	4605      	mov	r5, r0
 800644a:	b911      	cbnz	r1, 8006452 <sbrk_aligned+0x12>
 800644c:	f000 fd56 	bl	8006efc <_sbrk_r>
 8006450:	6030      	str	r0, [r6, #0]
 8006452:	4621      	mov	r1, r4
 8006454:	4628      	mov	r0, r5
 8006456:	f000 fd51 	bl	8006efc <_sbrk_r>
 800645a:	1c43      	adds	r3, r0, #1
 800645c:	d00a      	beq.n	8006474 <sbrk_aligned+0x34>
 800645e:	1cc4      	adds	r4, r0, #3
 8006460:	f024 0403 	bic.w	r4, r4, #3
 8006464:	42a0      	cmp	r0, r4
 8006466:	d007      	beq.n	8006478 <sbrk_aligned+0x38>
 8006468:	1a21      	subs	r1, r4, r0
 800646a:	4628      	mov	r0, r5
 800646c:	f000 fd46 	bl	8006efc <_sbrk_r>
 8006470:	3001      	adds	r0, #1
 8006472:	d101      	bne.n	8006478 <sbrk_aligned+0x38>
 8006474:	f04f 34ff 	mov.w	r4, #4294967295
 8006478:	4620      	mov	r0, r4
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	20001ee8 	.word	0x20001ee8

08006480 <_malloc_r>:
 8006480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006484:	1ccd      	adds	r5, r1, #3
 8006486:	f025 0503 	bic.w	r5, r5, #3
 800648a:	3508      	adds	r5, #8
 800648c:	2d0c      	cmp	r5, #12
 800648e:	bf38      	it	cc
 8006490:	250c      	movcc	r5, #12
 8006492:	2d00      	cmp	r5, #0
 8006494:	4607      	mov	r7, r0
 8006496:	db01      	blt.n	800649c <_malloc_r+0x1c>
 8006498:	42a9      	cmp	r1, r5
 800649a:	d905      	bls.n	80064a8 <_malloc_r+0x28>
 800649c:	230c      	movs	r3, #12
 800649e:	2600      	movs	r6, #0
 80064a0:	603b      	str	r3, [r7, #0]
 80064a2:	4630      	mov	r0, r6
 80064a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a8:	4e2e      	ldr	r6, [pc, #184]	; (8006564 <_malloc_r+0xe4>)
 80064aa:	f001 fd01 	bl	8007eb0 <__malloc_lock>
 80064ae:	6833      	ldr	r3, [r6, #0]
 80064b0:	461c      	mov	r4, r3
 80064b2:	bb34      	cbnz	r4, 8006502 <_malloc_r+0x82>
 80064b4:	4629      	mov	r1, r5
 80064b6:	4638      	mov	r0, r7
 80064b8:	f7ff ffc2 	bl	8006440 <sbrk_aligned>
 80064bc:	1c43      	adds	r3, r0, #1
 80064be:	4604      	mov	r4, r0
 80064c0:	d14d      	bne.n	800655e <_malloc_r+0xde>
 80064c2:	6834      	ldr	r4, [r6, #0]
 80064c4:	4626      	mov	r6, r4
 80064c6:	2e00      	cmp	r6, #0
 80064c8:	d140      	bne.n	800654c <_malloc_r+0xcc>
 80064ca:	6823      	ldr	r3, [r4, #0]
 80064cc:	4631      	mov	r1, r6
 80064ce:	4638      	mov	r0, r7
 80064d0:	eb04 0803 	add.w	r8, r4, r3
 80064d4:	f000 fd12 	bl	8006efc <_sbrk_r>
 80064d8:	4580      	cmp	r8, r0
 80064da:	d13a      	bne.n	8006552 <_malloc_r+0xd2>
 80064dc:	6821      	ldr	r1, [r4, #0]
 80064de:	3503      	adds	r5, #3
 80064e0:	1a6d      	subs	r5, r5, r1
 80064e2:	f025 0503 	bic.w	r5, r5, #3
 80064e6:	3508      	adds	r5, #8
 80064e8:	2d0c      	cmp	r5, #12
 80064ea:	bf38      	it	cc
 80064ec:	250c      	movcc	r5, #12
 80064ee:	4638      	mov	r0, r7
 80064f0:	4629      	mov	r1, r5
 80064f2:	f7ff ffa5 	bl	8006440 <sbrk_aligned>
 80064f6:	3001      	adds	r0, #1
 80064f8:	d02b      	beq.n	8006552 <_malloc_r+0xd2>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	442b      	add	r3, r5
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	e00e      	b.n	8006520 <_malloc_r+0xa0>
 8006502:	6822      	ldr	r2, [r4, #0]
 8006504:	1b52      	subs	r2, r2, r5
 8006506:	d41e      	bmi.n	8006546 <_malloc_r+0xc6>
 8006508:	2a0b      	cmp	r2, #11
 800650a:	d916      	bls.n	800653a <_malloc_r+0xba>
 800650c:	1961      	adds	r1, r4, r5
 800650e:	42a3      	cmp	r3, r4
 8006510:	6025      	str	r5, [r4, #0]
 8006512:	bf18      	it	ne
 8006514:	6059      	strne	r1, [r3, #4]
 8006516:	6863      	ldr	r3, [r4, #4]
 8006518:	bf08      	it	eq
 800651a:	6031      	streq	r1, [r6, #0]
 800651c:	5162      	str	r2, [r4, r5]
 800651e:	604b      	str	r3, [r1, #4]
 8006520:	4638      	mov	r0, r7
 8006522:	f104 060b 	add.w	r6, r4, #11
 8006526:	f001 fcc9 	bl	8007ebc <__malloc_unlock>
 800652a:	f026 0607 	bic.w	r6, r6, #7
 800652e:	1d23      	adds	r3, r4, #4
 8006530:	1af2      	subs	r2, r6, r3
 8006532:	d0b6      	beq.n	80064a2 <_malloc_r+0x22>
 8006534:	1b9b      	subs	r3, r3, r6
 8006536:	50a3      	str	r3, [r4, r2]
 8006538:	e7b3      	b.n	80064a2 <_malloc_r+0x22>
 800653a:	6862      	ldr	r2, [r4, #4]
 800653c:	42a3      	cmp	r3, r4
 800653e:	bf0c      	ite	eq
 8006540:	6032      	streq	r2, [r6, #0]
 8006542:	605a      	strne	r2, [r3, #4]
 8006544:	e7ec      	b.n	8006520 <_malloc_r+0xa0>
 8006546:	4623      	mov	r3, r4
 8006548:	6864      	ldr	r4, [r4, #4]
 800654a:	e7b2      	b.n	80064b2 <_malloc_r+0x32>
 800654c:	4634      	mov	r4, r6
 800654e:	6876      	ldr	r6, [r6, #4]
 8006550:	e7b9      	b.n	80064c6 <_malloc_r+0x46>
 8006552:	230c      	movs	r3, #12
 8006554:	4638      	mov	r0, r7
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	f001 fcb0 	bl	8007ebc <__malloc_unlock>
 800655c:	e7a1      	b.n	80064a2 <_malloc_r+0x22>
 800655e:	6025      	str	r5, [r4, #0]
 8006560:	e7de      	b.n	8006520 <_malloc_r+0xa0>
 8006562:	bf00      	nop
 8006564:	20001ee4 	.word	0x20001ee4

08006568 <__cvt>:
 8006568:	2b00      	cmp	r3, #0
 800656a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800656e:	461f      	mov	r7, r3
 8006570:	bfbb      	ittet	lt
 8006572:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006576:	461f      	movlt	r7, r3
 8006578:	2300      	movge	r3, #0
 800657a:	232d      	movlt	r3, #45	; 0x2d
 800657c:	b088      	sub	sp, #32
 800657e:	4614      	mov	r4, r2
 8006580:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006582:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006584:	7013      	strb	r3, [r2, #0]
 8006586:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006588:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800658c:	f023 0820 	bic.w	r8, r3, #32
 8006590:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006594:	d005      	beq.n	80065a2 <__cvt+0x3a>
 8006596:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800659a:	d100      	bne.n	800659e <__cvt+0x36>
 800659c:	3501      	adds	r5, #1
 800659e:	2302      	movs	r3, #2
 80065a0:	e000      	b.n	80065a4 <__cvt+0x3c>
 80065a2:	2303      	movs	r3, #3
 80065a4:	aa07      	add	r2, sp, #28
 80065a6:	9204      	str	r2, [sp, #16]
 80065a8:	aa06      	add	r2, sp, #24
 80065aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80065ae:	e9cd 3500 	strd	r3, r5, [sp]
 80065b2:	4622      	mov	r2, r4
 80065b4:	463b      	mov	r3, r7
 80065b6:	f000 fda3 	bl	8007100 <_dtoa_r>
 80065ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065be:	4606      	mov	r6, r0
 80065c0:	d102      	bne.n	80065c8 <__cvt+0x60>
 80065c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065c4:	07db      	lsls	r3, r3, #31
 80065c6:	d522      	bpl.n	800660e <__cvt+0xa6>
 80065c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065cc:	eb06 0905 	add.w	r9, r6, r5
 80065d0:	d110      	bne.n	80065f4 <__cvt+0x8c>
 80065d2:	7833      	ldrb	r3, [r6, #0]
 80065d4:	2b30      	cmp	r3, #48	; 0x30
 80065d6:	d10a      	bne.n	80065ee <__cvt+0x86>
 80065d8:	2200      	movs	r2, #0
 80065da:	2300      	movs	r3, #0
 80065dc:	4620      	mov	r0, r4
 80065de:	4639      	mov	r1, r7
 80065e0:	f7fa f9e2 	bl	80009a8 <__aeabi_dcmpeq>
 80065e4:	b918      	cbnz	r0, 80065ee <__cvt+0x86>
 80065e6:	f1c5 0501 	rsb	r5, r5, #1
 80065ea:	f8ca 5000 	str.w	r5, [sl]
 80065ee:	f8da 3000 	ldr.w	r3, [sl]
 80065f2:	4499      	add	r9, r3
 80065f4:	2200      	movs	r2, #0
 80065f6:	2300      	movs	r3, #0
 80065f8:	4620      	mov	r0, r4
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa f9d4 	bl	80009a8 <__aeabi_dcmpeq>
 8006600:	b108      	cbz	r0, 8006606 <__cvt+0x9e>
 8006602:	f8cd 901c 	str.w	r9, [sp, #28]
 8006606:	2230      	movs	r2, #48	; 0x30
 8006608:	9b07      	ldr	r3, [sp, #28]
 800660a:	454b      	cmp	r3, r9
 800660c:	d307      	bcc.n	800661e <__cvt+0xb6>
 800660e:	4630      	mov	r0, r6
 8006610:	9b07      	ldr	r3, [sp, #28]
 8006612:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006614:	1b9b      	subs	r3, r3, r6
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	b008      	add	sp, #32
 800661a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661e:	1c59      	adds	r1, r3, #1
 8006620:	9107      	str	r1, [sp, #28]
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	e7f0      	b.n	8006608 <__cvt+0xa0>

08006626 <__exponent>:
 8006626:	4603      	mov	r3, r0
 8006628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800662a:	2900      	cmp	r1, #0
 800662c:	f803 2b02 	strb.w	r2, [r3], #2
 8006630:	bfb6      	itet	lt
 8006632:	222d      	movlt	r2, #45	; 0x2d
 8006634:	222b      	movge	r2, #43	; 0x2b
 8006636:	4249      	neglt	r1, r1
 8006638:	2909      	cmp	r1, #9
 800663a:	7042      	strb	r2, [r0, #1]
 800663c:	dd2b      	ble.n	8006696 <__exponent+0x70>
 800663e:	f10d 0407 	add.w	r4, sp, #7
 8006642:	46a4      	mov	ip, r4
 8006644:	270a      	movs	r7, #10
 8006646:	fb91 f6f7 	sdiv	r6, r1, r7
 800664a:	460a      	mov	r2, r1
 800664c:	46a6      	mov	lr, r4
 800664e:	fb07 1516 	mls	r5, r7, r6, r1
 8006652:	2a63      	cmp	r2, #99	; 0x63
 8006654:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006658:	4631      	mov	r1, r6
 800665a:	f104 34ff 	add.w	r4, r4, #4294967295
 800665e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006662:	dcf0      	bgt.n	8006646 <__exponent+0x20>
 8006664:	3130      	adds	r1, #48	; 0x30
 8006666:	f1ae 0502 	sub.w	r5, lr, #2
 800666a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800666e:	4629      	mov	r1, r5
 8006670:	1c44      	adds	r4, r0, #1
 8006672:	4561      	cmp	r1, ip
 8006674:	d30a      	bcc.n	800668c <__exponent+0x66>
 8006676:	f10d 0209 	add.w	r2, sp, #9
 800667a:	eba2 020e 	sub.w	r2, r2, lr
 800667e:	4565      	cmp	r5, ip
 8006680:	bf88      	it	hi
 8006682:	2200      	movhi	r2, #0
 8006684:	4413      	add	r3, r2
 8006686:	1a18      	subs	r0, r3, r0
 8006688:	b003      	add	sp, #12
 800668a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006690:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006694:	e7ed      	b.n	8006672 <__exponent+0x4c>
 8006696:	2330      	movs	r3, #48	; 0x30
 8006698:	3130      	adds	r1, #48	; 0x30
 800669a:	7083      	strb	r3, [r0, #2]
 800669c:	70c1      	strb	r1, [r0, #3]
 800669e:	1d03      	adds	r3, r0, #4
 80066a0:	e7f1      	b.n	8006686 <__exponent+0x60>
	...

080066a4 <_printf_float>:
 80066a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a8:	b091      	sub	sp, #68	; 0x44
 80066aa:	460c      	mov	r4, r1
 80066ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80066b0:	4616      	mov	r6, r2
 80066b2:	461f      	mov	r7, r3
 80066b4:	4605      	mov	r5, r0
 80066b6:	f001 fbcf 	bl	8007e58 <_localeconv_r>
 80066ba:	6803      	ldr	r3, [r0, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	9309      	str	r3, [sp, #36]	; 0x24
 80066c0:	f7f9 fd46 	bl	8000150 <strlen>
 80066c4:	2300      	movs	r3, #0
 80066c6:	930e      	str	r3, [sp, #56]	; 0x38
 80066c8:	f8d8 3000 	ldr.w	r3, [r8]
 80066cc:	900a      	str	r0, [sp, #40]	; 0x28
 80066ce:	3307      	adds	r3, #7
 80066d0:	f023 0307 	bic.w	r3, r3, #7
 80066d4:	f103 0208 	add.w	r2, r3, #8
 80066d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80066dc:	f8d4 b000 	ldr.w	fp, [r4]
 80066e0:	f8c8 2000 	str.w	r2, [r8]
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066ec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80066f0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80066f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80066f6:	f04f 32ff 	mov.w	r2, #4294967295
 80066fa:	4640      	mov	r0, r8
 80066fc:	4b9c      	ldr	r3, [pc, #624]	; (8006970 <_printf_float+0x2cc>)
 80066fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006700:	f7fa f984 	bl	8000a0c <__aeabi_dcmpun>
 8006704:	bb70      	cbnz	r0, 8006764 <_printf_float+0xc0>
 8006706:	f04f 32ff 	mov.w	r2, #4294967295
 800670a:	4640      	mov	r0, r8
 800670c:	4b98      	ldr	r3, [pc, #608]	; (8006970 <_printf_float+0x2cc>)
 800670e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006710:	f7fa f95e 	bl	80009d0 <__aeabi_dcmple>
 8006714:	bb30      	cbnz	r0, 8006764 <_printf_float+0xc0>
 8006716:	2200      	movs	r2, #0
 8006718:	2300      	movs	r3, #0
 800671a:	4640      	mov	r0, r8
 800671c:	4651      	mov	r1, sl
 800671e:	f7fa f94d 	bl	80009bc <__aeabi_dcmplt>
 8006722:	b110      	cbz	r0, 800672a <_printf_float+0x86>
 8006724:	232d      	movs	r3, #45	; 0x2d
 8006726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800672a:	4b92      	ldr	r3, [pc, #584]	; (8006974 <_printf_float+0x2d0>)
 800672c:	4892      	ldr	r0, [pc, #584]	; (8006978 <_printf_float+0x2d4>)
 800672e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006732:	bf94      	ite	ls
 8006734:	4698      	movls	r8, r3
 8006736:	4680      	movhi	r8, r0
 8006738:	2303      	movs	r3, #3
 800673a:	f04f 0a00 	mov.w	sl, #0
 800673e:	6123      	str	r3, [r4, #16]
 8006740:	f02b 0304 	bic.w	r3, fp, #4
 8006744:	6023      	str	r3, [r4, #0]
 8006746:	4633      	mov	r3, r6
 8006748:	4621      	mov	r1, r4
 800674a:	4628      	mov	r0, r5
 800674c:	9700      	str	r7, [sp, #0]
 800674e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006750:	f000 f9d4 	bl	8006afc <_printf_common>
 8006754:	3001      	adds	r0, #1
 8006756:	f040 8090 	bne.w	800687a <_printf_float+0x1d6>
 800675a:	f04f 30ff 	mov.w	r0, #4294967295
 800675e:	b011      	add	sp, #68	; 0x44
 8006760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006764:	4642      	mov	r2, r8
 8006766:	4653      	mov	r3, sl
 8006768:	4640      	mov	r0, r8
 800676a:	4651      	mov	r1, sl
 800676c:	f7fa f94e 	bl	8000a0c <__aeabi_dcmpun>
 8006770:	b148      	cbz	r0, 8006786 <_printf_float+0xe2>
 8006772:	f1ba 0f00 	cmp.w	sl, #0
 8006776:	bfb8      	it	lt
 8006778:	232d      	movlt	r3, #45	; 0x2d
 800677a:	4880      	ldr	r0, [pc, #512]	; (800697c <_printf_float+0x2d8>)
 800677c:	bfb8      	it	lt
 800677e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006782:	4b7f      	ldr	r3, [pc, #508]	; (8006980 <_printf_float+0x2dc>)
 8006784:	e7d3      	b.n	800672e <_printf_float+0x8a>
 8006786:	6863      	ldr	r3, [r4, #4]
 8006788:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	d142      	bne.n	8006816 <_printf_float+0x172>
 8006790:	2306      	movs	r3, #6
 8006792:	6063      	str	r3, [r4, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	9206      	str	r2, [sp, #24]
 8006798:	aa0e      	add	r2, sp, #56	; 0x38
 800679a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800679e:	aa0d      	add	r2, sp, #52	; 0x34
 80067a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80067a4:	9203      	str	r2, [sp, #12]
 80067a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80067aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	6863      	ldr	r3, [r4, #4]
 80067b2:	4642      	mov	r2, r8
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	4628      	mov	r0, r5
 80067b8:	4653      	mov	r3, sl
 80067ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80067bc:	f7ff fed4 	bl	8006568 <__cvt>
 80067c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067c2:	4680      	mov	r8, r0
 80067c4:	2947      	cmp	r1, #71	; 0x47
 80067c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80067c8:	d108      	bne.n	80067dc <_printf_float+0x138>
 80067ca:	1cc8      	adds	r0, r1, #3
 80067cc:	db02      	blt.n	80067d4 <_printf_float+0x130>
 80067ce:	6863      	ldr	r3, [r4, #4]
 80067d0:	4299      	cmp	r1, r3
 80067d2:	dd40      	ble.n	8006856 <_printf_float+0x1b2>
 80067d4:	f1a9 0902 	sub.w	r9, r9, #2
 80067d8:	fa5f f989 	uxtb.w	r9, r9
 80067dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067e0:	d81f      	bhi.n	8006822 <_printf_float+0x17e>
 80067e2:	464a      	mov	r2, r9
 80067e4:	3901      	subs	r1, #1
 80067e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067ea:	910d      	str	r1, [sp, #52]	; 0x34
 80067ec:	f7ff ff1b 	bl	8006626 <__exponent>
 80067f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067f2:	4682      	mov	sl, r0
 80067f4:	1813      	adds	r3, r2, r0
 80067f6:	2a01      	cmp	r2, #1
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	dc02      	bgt.n	8006802 <_printf_float+0x15e>
 80067fc:	6822      	ldr	r2, [r4, #0]
 80067fe:	07d2      	lsls	r2, r2, #31
 8006800:	d501      	bpl.n	8006806 <_printf_float+0x162>
 8006802:	3301      	adds	r3, #1
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800680a:	2b00      	cmp	r3, #0
 800680c:	d09b      	beq.n	8006746 <_printf_float+0xa2>
 800680e:	232d      	movs	r3, #45	; 0x2d
 8006810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006814:	e797      	b.n	8006746 <_printf_float+0xa2>
 8006816:	2947      	cmp	r1, #71	; 0x47
 8006818:	d1bc      	bne.n	8006794 <_printf_float+0xf0>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1ba      	bne.n	8006794 <_printf_float+0xf0>
 800681e:	2301      	movs	r3, #1
 8006820:	e7b7      	b.n	8006792 <_printf_float+0xee>
 8006822:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006826:	d118      	bne.n	800685a <_printf_float+0x1b6>
 8006828:	2900      	cmp	r1, #0
 800682a:	6863      	ldr	r3, [r4, #4]
 800682c:	dd0b      	ble.n	8006846 <_printf_float+0x1a2>
 800682e:	6121      	str	r1, [r4, #16]
 8006830:	b913      	cbnz	r3, 8006838 <_printf_float+0x194>
 8006832:	6822      	ldr	r2, [r4, #0]
 8006834:	07d0      	lsls	r0, r2, #31
 8006836:	d502      	bpl.n	800683e <_printf_float+0x19a>
 8006838:	3301      	adds	r3, #1
 800683a:	440b      	add	r3, r1
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	f04f 0a00 	mov.w	sl, #0
 8006842:	65a1      	str	r1, [r4, #88]	; 0x58
 8006844:	e7df      	b.n	8006806 <_printf_float+0x162>
 8006846:	b913      	cbnz	r3, 800684e <_printf_float+0x1aa>
 8006848:	6822      	ldr	r2, [r4, #0]
 800684a:	07d2      	lsls	r2, r2, #31
 800684c:	d501      	bpl.n	8006852 <_printf_float+0x1ae>
 800684e:	3302      	adds	r3, #2
 8006850:	e7f4      	b.n	800683c <_printf_float+0x198>
 8006852:	2301      	movs	r3, #1
 8006854:	e7f2      	b.n	800683c <_printf_float+0x198>
 8006856:	f04f 0967 	mov.w	r9, #103	; 0x67
 800685a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800685c:	4299      	cmp	r1, r3
 800685e:	db05      	blt.n	800686c <_printf_float+0x1c8>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	6121      	str	r1, [r4, #16]
 8006864:	07d8      	lsls	r0, r3, #31
 8006866:	d5ea      	bpl.n	800683e <_printf_float+0x19a>
 8006868:	1c4b      	adds	r3, r1, #1
 800686a:	e7e7      	b.n	800683c <_printf_float+0x198>
 800686c:	2900      	cmp	r1, #0
 800686e:	bfcc      	ite	gt
 8006870:	2201      	movgt	r2, #1
 8006872:	f1c1 0202 	rsble	r2, r1, #2
 8006876:	4413      	add	r3, r2
 8006878:	e7e0      	b.n	800683c <_printf_float+0x198>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	055a      	lsls	r2, r3, #21
 800687e:	d407      	bmi.n	8006890 <_printf_float+0x1ec>
 8006880:	6923      	ldr	r3, [r4, #16]
 8006882:	4642      	mov	r2, r8
 8006884:	4631      	mov	r1, r6
 8006886:	4628      	mov	r0, r5
 8006888:	47b8      	blx	r7
 800688a:	3001      	adds	r0, #1
 800688c:	d12b      	bne.n	80068e6 <_printf_float+0x242>
 800688e:	e764      	b.n	800675a <_printf_float+0xb6>
 8006890:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006894:	f240 80dd 	bls.w	8006a52 <_printf_float+0x3ae>
 8006898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800689c:	2200      	movs	r2, #0
 800689e:	2300      	movs	r3, #0
 80068a0:	f7fa f882 	bl	80009a8 <__aeabi_dcmpeq>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d033      	beq.n	8006910 <_printf_float+0x26c>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	4a35      	ldr	r2, [pc, #212]	; (8006984 <_printf_float+0x2e0>)
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f af51 	beq.w	800675a <_printf_float+0xb6>
 80068b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068bc:	429a      	cmp	r2, r3
 80068be:	db02      	blt.n	80068c6 <_printf_float+0x222>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	07d8      	lsls	r0, r3, #31
 80068c4:	d50f      	bpl.n	80068e6 <_printf_float+0x242>
 80068c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068ca:	4631      	mov	r1, r6
 80068cc:	4628      	mov	r0, r5
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	f43f af42 	beq.w	800675a <_printf_float+0xb6>
 80068d6:	f04f 0800 	mov.w	r8, #0
 80068da:	f104 091a 	add.w	r9, r4, #26
 80068de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068e0:	3b01      	subs	r3, #1
 80068e2:	4543      	cmp	r3, r8
 80068e4:	dc09      	bgt.n	80068fa <_printf_float+0x256>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	079b      	lsls	r3, r3, #30
 80068ea:	f100 8102 	bmi.w	8006af2 <_printf_float+0x44e>
 80068ee:	68e0      	ldr	r0, [r4, #12]
 80068f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068f2:	4298      	cmp	r0, r3
 80068f4:	bfb8      	it	lt
 80068f6:	4618      	movlt	r0, r3
 80068f8:	e731      	b.n	800675e <_printf_float+0xba>
 80068fa:	2301      	movs	r3, #1
 80068fc:	464a      	mov	r2, r9
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	f43f af28 	beq.w	800675a <_printf_float+0xb6>
 800690a:	f108 0801 	add.w	r8, r8, #1
 800690e:	e7e6      	b.n	80068de <_printf_float+0x23a>
 8006910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006912:	2b00      	cmp	r3, #0
 8006914:	dc38      	bgt.n	8006988 <_printf_float+0x2e4>
 8006916:	2301      	movs	r3, #1
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	4a19      	ldr	r2, [pc, #100]	; (8006984 <_printf_float+0x2e0>)
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	f43f af1a 	beq.w	800675a <_printf_float+0xb6>
 8006926:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800692a:	4313      	orrs	r3, r2
 800692c:	d102      	bne.n	8006934 <_printf_float+0x290>
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	07d9      	lsls	r1, r3, #31
 8006932:	d5d8      	bpl.n	80068e6 <_printf_float+0x242>
 8006934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006938:	4631      	mov	r1, r6
 800693a:	4628      	mov	r0, r5
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	f43f af0b 	beq.w	800675a <_printf_float+0xb6>
 8006944:	f04f 0900 	mov.w	r9, #0
 8006948:	f104 0a1a 	add.w	sl, r4, #26
 800694c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694e:	425b      	negs	r3, r3
 8006950:	454b      	cmp	r3, r9
 8006952:	dc01      	bgt.n	8006958 <_printf_float+0x2b4>
 8006954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006956:	e794      	b.n	8006882 <_printf_float+0x1de>
 8006958:	2301      	movs	r3, #1
 800695a:	4652      	mov	r2, sl
 800695c:	4631      	mov	r1, r6
 800695e:	4628      	mov	r0, r5
 8006960:	47b8      	blx	r7
 8006962:	3001      	adds	r0, #1
 8006964:	f43f aef9 	beq.w	800675a <_printf_float+0xb6>
 8006968:	f109 0901 	add.w	r9, r9, #1
 800696c:	e7ee      	b.n	800694c <_printf_float+0x2a8>
 800696e:	bf00      	nop
 8006970:	7fefffff 	.word	0x7fefffff
 8006974:	08008e6c 	.word	0x08008e6c
 8006978:	08008e70 	.word	0x08008e70
 800697c:	08008e78 	.word	0x08008e78
 8006980:	08008e74 	.word	0x08008e74
 8006984:	08008e7c 	.word	0x08008e7c
 8006988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800698a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800698c:	429a      	cmp	r2, r3
 800698e:	bfa8      	it	ge
 8006990:	461a      	movge	r2, r3
 8006992:	2a00      	cmp	r2, #0
 8006994:	4691      	mov	r9, r2
 8006996:	dc37      	bgt.n	8006a08 <_printf_float+0x364>
 8006998:	f04f 0b00 	mov.w	fp, #0
 800699c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069a0:	f104 021a 	add.w	r2, r4, #26
 80069a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80069a8:	ebaa 0309 	sub.w	r3, sl, r9
 80069ac:	455b      	cmp	r3, fp
 80069ae:	dc33      	bgt.n	8006a18 <_printf_float+0x374>
 80069b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069b4:	429a      	cmp	r2, r3
 80069b6:	db3b      	blt.n	8006a30 <_printf_float+0x38c>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	07da      	lsls	r2, r3, #31
 80069bc:	d438      	bmi.n	8006a30 <_printf_float+0x38c>
 80069be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80069c2:	eba3 020a 	sub.w	r2, r3, sl
 80069c6:	eba3 0901 	sub.w	r9, r3, r1
 80069ca:	4591      	cmp	r9, r2
 80069cc:	bfa8      	it	ge
 80069ce:	4691      	movge	r9, r2
 80069d0:	f1b9 0f00 	cmp.w	r9, #0
 80069d4:	dc34      	bgt.n	8006a40 <_printf_float+0x39c>
 80069d6:	f04f 0800 	mov.w	r8, #0
 80069da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069de:	f104 0a1a 	add.w	sl, r4, #26
 80069e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	eba3 0309 	sub.w	r3, r3, r9
 80069ec:	4543      	cmp	r3, r8
 80069ee:	f77f af7a 	ble.w	80068e6 <_printf_float+0x242>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4652      	mov	r2, sl
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	f43f aeac 	beq.w	800675a <_printf_float+0xb6>
 8006a02:	f108 0801 	add.w	r8, r8, #1
 8006a06:	e7ec      	b.n	80069e2 <_printf_float+0x33e>
 8006a08:	4613      	mov	r3, r2
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	4628      	mov	r0, r5
 8006a10:	47b8      	blx	r7
 8006a12:	3001      	adds	r0, #1
 8006a14:	d1c0      	bne.n	8006998 <_printf_float+0x2f4>
 8006a16:	e6a0      	b.n	800675a <_printf_float+0xb6>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4631      	mov	r1, r6
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006a20:	47b8      	blx	r7
 8006a22:	3001      	adds	r0, #1
 8006a24:	f43f ae99 	beq.w	800675a <_printf_float+0xb6>
 8006a28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a2a:	f10b 0b01 	add.w	fp, fp, #1
 8006a2e:	e7b9      	b.n	80069a4 <_printf_float+0x300>
 8006a30:	4631      	mov	r1, r6
 8006a32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d1bf      	bne.n	80069be <_printf_float+0x31a>
 8006a3e:	e68c      	b.n	800675a <_printf_float+0xb6>
 8006a40:	464b      	mov	r3, r9
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	eb08 020a 	add.w	r2, r8, sl
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d1c2      	bne.n	80069d6 <_printf_float+0x332>
 8006a50:	e683      	b.n	800675a <_printf_float+0xb6>
 8006a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a54:	2a01      	cmp	r2, #1
 8006a56:	dc01      	bgt.n	8006a5c <_printf_float+0x3b8>
 8006a58:	07db      	lsls	r3, r3, #31
 8006a5a:	d537      	bpl.n	8006acc <_printf_float+0x428>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	4642      	mov	r2, r8
 8006a60:	4631      	mov	r1, r6
 8006a62:	4628      	mov	r0, r5
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	f43f ae77 	beq.w	800675a <_printf_float+0xb6>
 8006a6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f ae6f 	beq.w	800675a <_printf_float+0xb6>
 8006a7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a80:	2200      	movs	r2, #0
 8006a82:	2300      	movs	r3, #0
 8006a84:	f7f9 ff90 	bl	80009a8 <__aeabi_dcmpeq>
 8006a88:	b9d8      	cbnz	r0, 8006ac2 <_printf_float+0x41e>
 8006a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a8c:	f108 0201 	add.w	r2, r8, #1
 8006a90:	3b01      	subs	r3, #1
 8006a92:	4631      	mov	r1, r6
 8006a94:	4628      	mov	r0, r5
 8006a96:	47b8      	blx	r7
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d10e      	bne.n	8006aba <_printf_float+0x416>
 8006a9c:	e65d      	b.n	800675a <_printf_float+0xb6>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	464a      	mov	r2, r9
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	f43f ae56 	beq.w	800675a <_printf_float+0xb6>
 8006aae:	f108 0801 	add.w	r8, r8, #1
 8006ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	4543      	cmp	r3, r8
 8006ab8:	dcf1      	bgt.n	8006a9e <_printf_float+0x3fa>
 8006aba:	4653      	mov	r3, sl
 8006abc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ac0:	e6e0      	b.n	8006884 <_printf_float+0x1e0>
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	f104 091a 	add.w	r9, r4, #26
 8006aca:	e7f2      	b.n	8006ab2 <_printf_float+0x40e>
 8006acc:	2301      	movs	r3, #1
 8006ace:	4642      	mov	r2, r8
 8006ad0:	e7df      	b.n	8006a92 <_printf_float+0x3ee>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	464a      	mov	r2, r9
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	47b8      	blx	r7
 8006adc:	3001      	adds	r0, #1
 8006ade:	f43f ae3c 	beq.w	800675a <_printf_float+0xb6>
 8006ae2:	f108 0801 	add.w	r8, r8, #1
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006aea:	1a5b      	subs	r3, r3, r1
 8006aec:	4543      	cmp	r3, r8
 8006aee:	dcf0      	bgt.n	8006ad2 <_printf_float+0x42e>
 8006af0:	e6fd      	b.n	80068ee <_printf_float+0x24a>
 8006af2:	f04f 0800 	mov.w	r8, #0
 8006af6:	f104 0919 	add.w	r9, r4, #25
 8006afa:	e7f4      	b.n	8006ae6 <_printf_float+0x442>

08006afc <_printf_common>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	4616      	mov	r6, r2
 8006b02:	4699      	mov	r9, r3
 8006b04:	688a      	ldr	r2, [r1, #8]
 8006b06:	690b      	ldr	r3, [r1, #16]
 8006b08:	4607      	mov	r7, r0
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	bfb8      	it	lt
 8006b0e:	4613      	movlt	r3, r2
 8006b10:	6033      	str	r3, [r6, #0]
 8006b12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b16:	460c      	mov	r4, r1
 8006b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b1c:	b10a      	cbz	r2, 8006b22 <_printf_common+0x26>
 8006b1e:	3301      	adds	r3, #1
 8006b20:	6033      	str	r3, [r6, #0]
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	0699      	lsls	r1, r3, #26
 8006b26:	bf42      	ittt	mi
 8006b28:	6833      	ldrmi	r3, [r6, #0]
 8006b2a:	3302      	addmi	r3, #2
 8006b2c:	6033      	strmi	r3, [r6, #0]
 8006b2e:	6825      	ldr	r5, [r4, #0]
 8006b30:	f015 0506 	ands.w	r5, r5, #6
 8006b34:	d106      	bne.n	8006b44 <_printf_common+0x48>
 8006b36:	f104 0a19 	add.w	sl, r4, #25
 8006b3a:	68e3      	ldr	r3, [r4, #12]
 8006b3c:	6832      	ldr	r2, [r6, #0]
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	42ab      	cmp	r3, r5
 8006b42:	dc28      	bgt.n	8006b96 <_printf_common+0x9a>
 8006b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b48:	1e13      	subs	r3, r2, #0
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	bf18      	it	ne
 8006b4e:	2301      	movne	r3, #1
 8006b50:	0692      	lsls	r2, r2, #26
 8006b52:	d42d      	bmi.n	8006bb0 <_printf_common+0xb4>
 8006b54:	4649      	mov	r1, r9
 8006b56:	4638      	mov	r0, r7
 8006b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d020      	beq.n	8006ba4 <_printf_common+0xa8>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	68e5      	ldr	r5, [r4, #12]
 8006b66:	f003 0306 	and.w	r3, r3, #6
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	bf18      	it	ne
 8006b6e:	2500      	movne	r5, #0
 8006b70:	6832      	ldr	r2, [r6, #0]
 8006b72:	f04f 0600 	mov.w	r6, #0
 8006b76:	68a3      	ldr	r3, [r4, #8]
 8006b78:	bf08      	it	eq
 8006b7a:	1aad      	subeq	r5, r5, r2
 8006b7c:	6922      	ldr	r2, [r4, #16]
 8006b7e:	bf08      	it	eq
 8006b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b84:	4293      	cmp	r3, r2
 8006b86:	bfc4      	itt	gt
 8006b88:	1a9b      	subgt	r3, r3, r2
 8006b8a:	18ed      	addgt	r5, r5, r3
 8006b8c:	341a      	adds	r4, #26
 8006b8e:	42b5      	cmp	r5, r6
 8006b90:	d11a      	bne.n	8006bc8 <_printf_common+0xcc>
 8006b92:	2000      	movs	r0, #0
 8006b94:	e008      	b.n	8006ba8 <_printf_common+0xac>
 8006b96:	2301      	movs	r3, #1
 8006b98:	4652      	mov	r2, sl
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	47c0      	blx	r8
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d103      	bne.n	8006bac <_printf_common+0xb0>
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bac:	3501      	adds	r5, #1
 8006bae:	e7c4      	b.n	8006b3a <_printf_common+0x3e>
 8006bb0:	2030      	movs	r0, #48	; 0x30
 8006bb2:	18e1      	adds	r1, r4, r3
 8006bb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bbe:	4422      	add	r2, r4
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bc6:	e7c5      	b.n	8006b54 <_printf_common+0x58>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	4622      	mov	r2, r4
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4638      	mov	r0, r7
 8006bd0:	47c0      	blx	r8
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	d0e6      	beq.n	8006ba4 <_printf_common+0xa8>
 8006bd6:	3601      	adds	r6, #1
 8006bd8:	e7d9      	b.n	8006b8e <_printf_common+0x92>
	...

08006bdc <_printf_i>:
 8006bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	7e0f      	ldrb	r7, [r1, #24]
 8006be2:	4691      	mov	r9, r2
 8006be4:	2f78      	cmp	r7, #120	; 0x78
 8006be6:	4680      	mov	r8, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	469a      	mov	sl, r3
 8006bec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bf2:	d807      	bhi.n	8006c04 <_printf_i+0x28>
 8006bf4:	2f62      	cmp	r7, #98	; 0x62
 8006bf6:	d80a      	bhi.n	8006c0e <_printf_i+0x32>
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	f000 80d9 	beq.w	8006db0 <_printf_i+0x1d4>
 8006bfe:	2f58      	cmp	r7, #88	; 0x58
 8006c00:	f000 80a4 	beq.w	8006d4c <_printf_i+0x170>
 8006c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c0c:	e03a      	b.n	8006c84 <_printf_i+0xa8>
 8006c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c12:	2b15      	cmp	r3, #21
 8006c14:	d8f6      	bhi.n	8006c04 <_printf_i+0x28>
 8006c16:	a101      	add	r1, pc, #4	; (adr r1, 8006c1c <_printf_i+0x40>)
 8006c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c1c:	08006c75 	.word	0x08006c75
 8006c20:	08006c89 	.word	0x08006c89
 8006c24:	08006c05 	.word	0x08006c05
 8006c28:	08006c05 	.word	0x08006c05
 8006c2c:	08006c05 	.word	0x08006c05
 8006c30:	08006c05 	.word	0x08006c05
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006c05 	.word	0x08006c05
 8006c3c:	08006c05 	.word	0x08006c05
 8006c40:	08006c05 	.word	0x08006c05
 8006c44:	08006c05 	.word	0x08006c05
 8006c48:	08006d97 	.word	0x08006d97
 8006c4c:	08006cb9 	.word	0x08006cb9
 8006c50:	08006d79 	.word	0x08006d79
 8006c54:	08006c05 	.word	0x08006c05
 8006c58:	08006c05 	.word	0x08006c05
 8006c5c:	08006db9 	.word	0x08006db9
 8006c60:	08006c05 	.word	0x08006c05
 8006c64:	08006cb9 	.word	0x08006cb9
 8006c68:	08006c05 	.word	0x08006c05
 8006c6c:	08006c05 	.word	0x08006c05
 8006c70:	08006d81 	.word	0x08006d81
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	1d1a      	adds	r2, r3, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	602a      	str	r2, [r5, #0]
 8006c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0a4      	b.n	8006dd2 <_printf_i+0x1f6>
 8006c88:	6820      	ldr	r0, [r4, #0]
 8006c8a:	6829      	ldr	r1, [r5, #0]
 8006c8c:	0606      	lsls	r6, r0, #24
 8006c8e:	f101 0304 	add.w	r3, r1, #4
 8006c92:	d50a      	bpl.n	8006caa <_printf_i+0xce>
 8006c94:	680e      	ldr	r6, [r1, #0]
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	2e00      	cmp	r6, #0
 8006c9a:	da03      	bge.n	8006ca4 <_printf_i+0xc8>
 8006c9c:	232d      	movs	r3, #45	; 0x2d
 8006c9e:	4276      	negs	r6, r6
 8006ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ca4:	230a      	movs	r3, #10
 8006ca6:	485e      	ldr	r0, [pc, #376]	; (8006e20 <_printf_i+0x244>)
 8006ca8:	e019      	b.n	8006cde <_printf_i+0x102>
 8006caa:	680e      	ldr	r6, [r1, #0]
 8006cac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cb0:	602b      	str	r3, [r5, #0]
 8006cb2:	bf18      	it	ne
 8006cb4:	b236      	sxthne	r6, r6
 8006cb6:	e7ef      	b.n	8006c98 <_printf_i+0xbc>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	6820      	ldr	r0, [r4, #0]
 8006cbc:	1d19      	adds	r1, r3, #4
 8006cbe:	6029      	str	r1, [r5, #0]
 8006cc0:	0601      	lsls	r1, r0, #24
 8006cc2:	d501      	bpl.n	8006cc8 <_printf_i+0xec>
 8006cc4:	681e      	ldr	r6, [r3, #0]
 8006cc6:	e002      	b.n	8006cce <_printf_i+0xf2>
 8006cc8:	0646      	lsls	r6, r0, #25
 8006cca:	d5fb      	bpl.n	8006cc4 <_printf_i+0xe8>
 8006ccc:	881e      	ldrh	r6, [r3, #0]
 8006cce:	2f6f      	cmp	r7, #111	; 0x6f
 8006cd0:	bf0c      	ite	eq
 8006cd2:	2308      	moveq	r3, #8
 8006cd4:	230a      	movne	r3, #10
 8006cd6:	4852      	ldr	r0, [pc, #328]	; (8006e20 <_printf_i+0x244>)
 8006cd8:	2100      	movs	r1, #0
 8006cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cde:	6865      	ldr	r5, [r4, #4]
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	bfa8      	it	ge
 8006ce4:	6821      	ldrge	r1, [r4, #0]
 8006ce6:	60a5      	str	r5, [r4, #8]
 8006ce8:	bfa4      	itt	ge
 8006cea:	f021 0104 	bicge.w	r1, r1, #4
 8006cee:	6021      	strge	r1, [r4, #0]
 8006cf0:	b90e      	cbnz	r6, 8006cf6 <_printf_i+0x11a>
 8006cf2:	2d00      	cmp	r5, #0
 8006cf4:	d04d      	beq.n	8006d92 <_printf_i+0x1b6>
 8006cf6:	4615      	mov	r5, r2
 8006cf8:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cfc:	fb03 6711 	mls	r7, r3, r1, r6
 8006d00:	5dc7      	ldrb	r7, [r0, r7]
 8006d02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d06:	4637      	mov	r7, r6
 8006d08:	42bb      	cmp	r3, r7
 8006d0a:	460e      	mov	r6, r1
 8006d0c:	d9f4      	bls.n	8006cf8 <_printf_i+0x11c>
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d10b      	bne.n	8006d2a <_printf_i+0x14e>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	07de      	lsls	r6, r3, #31
 8006d16:	d508      	bpl.n	8006d2a <_printf_i+0x14e>
 8006d18:	6923      	ldr	r3, [r4, #16]
 8006d1a:	6861      	ldr	r1, [r4, #4]
 8006d1c:	4299      	cmp	r1, r3
 8006d1e:	bfde      	ittt	le
 8006d20:	2330      	movle	r3, #48	; 0x30
 8006d22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d2a:	1b52      	subs	r2, r2, r5
 8006d2c:	6122      	str	r2, [r4, #16]
 8006d2e:	464b      	mov	r3, r9
 8006d30:	4621      	mov	r1, r4
 8006d32:	4640      	mov	r0, r8
 8006d34:	f8cd a000 	str.w	sl, [sp]
 8006d38:	aa03      	add	r2, sp, #12
 8006d3a:	f7ff fedf 	bl	8006afc <_printf_common>
 8006d3e:	3001      	adds	r0, #1
 8006d40:	d14c      	bne.n	8006ddc <_printf_i+0x200>
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	b004      	add	sp, #16
 8006d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4c:	4834      	ldr	r0, [pc, #208]	; (8006e20 <_printf_i+0x244>)
 8006d4e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d52:	6829      	ldr	r1, [r5, #0]
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d5a:	6029      	str	r1, [r5, #0]
 8006d5c:	061d      	lsls	r5, r3, #24
 8006d5e:	d514      	bpl.n	8006d8a <_printf_i+0x1ae>
 8006d60:	07df      	lsls	r7, r3, #31
 8006d62:	bf44      	itt	mi
 8006d64:	f043 0320 	orrmi.w	r3, r3, #32
 8006d68:	6023      	strmi	r3, [r4, #0]
 8006d6a:	b91e      	cbnz	r6, 8006d74 <_printf_i+0x198>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	f023 0320 	bic.w	r3, r3, #32
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	2310      	movs	r3, #16
 8006d76:	e7af      	b.n	8006cd8 <_printf_i+0xfc>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	f043 0320 	orr.w	r3, r3, #32
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	2378      	movs	r3, #120	; 0x78
 8006d82:	4828      	ldr	r0, [pc, #160]	; (8006e24 <_printf_i+0x248>)
 8006d84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d88:	e7e3      	b.n	8006d52 <_printf_i+0x176>
 8006d8a:	0659      	lsls	r1, r3, #25
 8006d8c:	bf48      	it	mi
 8006d8e:	b2b6      	uxthmi	r6, r6
 8006d90:	e7e6      	b.n	8006d60 <_printf_i+0x184>
 8006d92:	4615      	mov	r5, r2
 8006d94:	e7bb      	b.n	8006d0e <_printf_i+0x132>
 8006d96:	682b      	ldr	r3, [r5, #0]
 8006d98:	6826      	ldr	r6, [r4, #0]
 8006d9a:	1d18      	adds	r0, r3, #4
 8006d9c:	6961      	ldr	r1, [r4, #20]
 8006d9e:	6028      	str	r0, [r5, #0]
 8006da0:	0635      	lsls	r5, r6, #24
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	d501      	bpl.n	8006daa <_printf_i+0x1ce>
 8006da6:	6019      	str	r1, [r3, #0]
 8006da8:	e002      	b.n	8006db0 <_printf_i+0x1d4>
 8006daa:	0670      	lsls	r0, r6, #25
 8006dac:	d5fb      	bpl.n	8006da6 <_printf_i+0x1ca>
 8006dae:	8019      	strh	r1, [r3, #0]
 8006db0:	2300      	movs	r3, #0
 8006db2:	4615      	mov	r5, r2
 8006db4:	6123      	str	r3, [r4, #16]
 8006db6:	e7ba      	b.n	8006d2e <_printf_i+0x152>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	2100      	movs	r1, #0
 8006dbc:	1d1a      	adds	r2, r3, #4
 8006dbe:	602a      	str	r2, [r5, #0]
 8006dc0:	681d      	ldr	r5, [r3, #0]
 8006dc2:	6862      	ldr	r2, [r4, #4]
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f001 f865 	bl	8007e94 <memchr>
 8006dca:	b108      	cbz	r0, 8006dd0 <_printf_i+0x1f4>
 8006dcc:	1b40      	subs	r0, r0, r5
 8006dce:	6060      	str	r0, [r4, #4]
 8006dd0:	6863      	ldr	r3, [r4, #4]
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dda:	e7a8      	b.n	8006d2e <_printf_i+0x152>
 8006ddc:	462a      	mov	r2, r5
 8006dde:	4649      	mov	r1, r9
 8006de0:	4640      	mov	r0, r8
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	47d0      	blx	sl
 8006de6:	3001      	adds	r0, #1
 8006de8:	d0ab      	beq.n	8006d42 <_printf_i+0x166>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	079b      	lsls	r3, r3, #30
 8006dee:	d413      	bmi.n	8006e18 <_printf_i+0x23c>
 8006df0:	68e0      	ldr	r0, [r4, #12]
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	4298      	cmp	r0, r3
 8006df6:	bfb8      	it	lt
 8006df8:	4618      	movlt	r0, r3
 8006dfa:	e7a4      	b.n	8006d46 <_printf_i+0x16a>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	4632      	mov	r2, r6
 8006e00:	4649      	mov	r1, r9
 8006e02:	4640      	mov	r0, r8
 8006e04:	47d0      	blx	sl
 8006e06:	3001      	adds	r0, #1
 8006e08:	d09b      	beq.n	8006d42 <_printf_i+0x166>
 8006e0a:	3501      	adds	r5, #1
 8006e0c:	68e3      	ldr	r3, [r4, #12]
 8006e0e:	9903      	ldr	r1, [sp, #12]
 8006e10:	1a5b      	subs	r3, r3, r1
 8006e12:	42ab      	cmp	r3, r5
 8006e14:	dcf2      	bgt.n	8006dfc <_printf_i+0x220>
 8006e16:	e7eb      	b.n	8006df0 <_printf_i+0x214>
 8006e18:	2500      	movs	r5, #0
 8006e1a:	f104 0619 	add.w	r6, r4, #25
 8006e1e:	e7f5      	b.n	8006e0c <_printf_i+0x230>
 8006e20:	08008e7e 	.word	0x08008e7e
 8006e24:	08008e8f 	.word	0x08008e8f

08006e28 <cleanup_glue>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	6809      	ldr	r1, [r1, #0]
 8006e2e:	4605      	mov	r5, r0
 8006e30:	b109      	cbz	r1, 8006e36 <cleanup_glue+0xe>
 8006e32:	f7ff fff9 	bl	8006e28 <cleanup_glue>
 8006e36:	4621      	mov	r1, r4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3e:	f001 bbd9 	b.w	80085f4 <_free_r>
	...

08006e44 <_reclaim_reent>:
 8006e44:	4b2c      	ldr	r3, [pc, #176]	; (8006ef8 <_reclaim_reent+0xb4>)
 8006e46:	b570      	push	{r4, r5, r6, lr}
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4283      	cmp	r3, r0
 8006e4e:	d051      	beq.n	8006ef4 <_reclaim_reent+0xb0>
 8006e50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006e52:	b143      	cbz	r3, 8006e66 <_reclaim_reent+0x22>
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d14a      	bne.n	8006ef0 <_reclaim_reent+0xac>
 8006e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e5c:	6819      	ldr	r1, [r3, #0]
 8006e5e:	b111      	cbz	r1, 8006e66 <_reclaim_reent+0x22>
 8006e60:	4620      	mov	r0, r4
 8006e62:	f001 fbc7 	bl	80085f4 <_free_r>
 8006e66:	6961      	ldr	r1, [r4, #20]
 8006e68:	b111      	cbz	r1, 8006e70 <_reclaim_reent+0x2c>
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f001 fbc2 	bl	80085f4 <_free_r>
 8006e70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006e72:	b111      	cbz	r1, 8006e7a <_reclaim_reent+0x36>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f001 fbbd 	bl	80085f4 <_free_r>
 8006e7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e7c:	b111      	cbz	r1, 8006e84 <_reclaim_reent+0x40>
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f001 fbb8 	bl	80085f4 <_free_r>
 8006e84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006e86:	b111      	cbz	r1, 8006e8e <_reclaim_reent+0x4a>
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f001 fbb3 	bl	80085f4 <_free_r>
 8006e8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006e90:	b111      	cbz	r1, 8006e98 <_reclaim_reent+0x54>
 8006e92:	4620      	mov	r0, r4
 8006e94:	f001 fbae 	bl	80085f4 <_free_r>
 8006e98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006e9a:	b111      	cbz	r1, 8006ea2 <_reclaim_reent+0x5e>
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f001 fba9 	bl	80085f4 <_free_r>
 8006ea2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006ea4:	b111      	cbz	r1, 8006eac <_reclaim_reent+0x68>
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f001 fba4 	bl	80085f4 <_free_r>
 8006eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eae:	b111      	cbz	r1, 8006eb6 <_reclaim_reent+0x72>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f001 fb9f 	bl	80085f4 <_free_r>
 8006eb6:	69a3      	ldr	r3, [r4, #24]
 8006eb8:	b1e3      	cbz	r3, 8006ef4 <_reclaim_reent+0xb0>
 8006eba:	4620      	mov	r0, r4
 8006ebc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ebe:	4798      	blx	r3
 8006ec0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006ec2:	b1b9      	cbz	r1, 8006ef4 <_reclaim_reent+0xb0>
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006eca:	f7ff bfad 	b.w	8006e28 <cleanup_glue>
 8006ece:	5949      	ldr	r1, [r1, r5]
 8006ed0:	b941      	cbnz	r1, 8006ee4 <_reclaim_reent+0xa0>
 8006ed2:	3504      	adds	r5, #4
 8006ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ed6:	2d80      	cmp	r5, #128	; 0x80
 8006ed8:	68d9      	ldr	r1, [r3, #12]
 8006eda:	d1f8      	bne.n	8006ece <_reclaim_reent+0x8a>
 8006edc:	4620      	mov	r0, r4
 8006ede:	f001 fb89 	bl	80085f4 <_free_r>
 8006ee2:	e7ba      	b.n	8006e5a <_reclaim_reent+0x16>
 8006ee4:	680e      	ldr	r6, [r1, #0]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f001 fb84 	bl	80085f4 <_free_r>
 8006eec:	4631      	mov	r1, r6
 8006eee:	e7ef      	b.n	8006ed0 <_reclaim_reent+0x8c>
 8006ef0:	2500      	movs	r5, #0
 8006ef2:	e7ef      	b.n	8006ed4 <_reclaim_reent+0x90>
 8006ef4:	bd70      	pop	{r4, r5, r6, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000024 	.word	0x20000024

08006efc <_sbrk_r>:
 8006efc:	b538      	push	{r3, r4, r5, lr}
 8006efe:	2300      	movs	r3, #0
 8006f00:	4d05      	ldr	r5, [pc, #20]	; (8006f18 <_sbrk_r+0x1c>)
 8006f02:	4604      	mov	r4, r0
 8006f04:	4608      	mov	r0, r1
 8006f06:	602b      	str	r3, [r5, #0]
 8006f08:	f7fb fb42 	bl	8002590 <_sbrk>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_sbrk_r+0x1a>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_sbrk_r+0x1a>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20001eec 	.word	0x20001eec

08006f1c <__sread>:
 8006f1c:	b510      	push	{r4, lr}
 8006f1e:	460c      	mov	r4, r1
 8006f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f24:	f001 fbae 	bl	8008684 <_read_r>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	bfab      	itete	ge
 8006f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f30:	181b      	addge	r3, r3, r0
 8006f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f36:	bfac      	ite	ge
 8006f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f3a:	81a3      	strhlt	r3, [r4, #12]
 8006f3c:	bd10      	pop	{r4, pc}

08006f3e <__swrite>:
 8006f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f42:	461f      	mov	r7, r3
 8006f44:	898b      	ldrh	r3, [r1, #12]
 8006f46:	4605      	mov	r5, r0
 8006f48:	05db      	lsls	r3, r3, #23
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4616      	mov	r6, r2
 8006f4e:	d505      	bpl.n	8006f5c <__swrite+0x1e>
 8006f50:	2302      	movs	r3, #2
 8006f52:	2200      	movs	r2, #0
 8006f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f58:	f000 ff82 	bl	8007e60 <_lseek_r>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	4632      	mov	r2, r6
 8006f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	4628      	mov	r0, r5
 8006f68:	463b      	mov	r3, r7
 8006f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	f000 b817 	b.w	8006fa4 <_write_r>

08006f76 <__sseek>:
 8006f76:	b510      	push	{r4, lr}
 8006f78:	460c      	mov	r4, r1
 8006f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7e:	f000 ff6f 	bl	8007e60 <_lseek_r>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	bf15      	itete	ne
 8006f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f92:	81a3      	strheq	r3, [r4, #12]
 8006f94:	bf18      	it	ne
 8006f96:	81a3      	strhne	r3, [r4, #12]
 8006f98:	bd10      	pop	{r4, pc}

08006f9a <__sclose>:
 8006f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9e:	f000 b813 	b.w	8006fc8 <_close_r>
	...

08006fa4 <_write_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	4611      	mov	r1, r2
 8006fac:	2200      	movs	r2, #0
 8006fae:	4d05      	ldr	r5, [pc, #20]	; (8006fc4 <_write_r+0x20>)
 8006fb0:	602a      	str	r2, [r5, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f7fb fad2 	bl	800255c <_write>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_write_r+0x1e>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_write_r+0x1e>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20001eec 	.word	0x20001eec

08006fc8 <_close_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	2300      	movs	r3, #0
 8006fcc:	4d05      	ldr	r5, [pc, #20]	; (8006fe4 <_close_r+0x1c>)
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	f7fb fad0 	bl	8002578 <_close>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_close_r+0x1a>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_close_r+0x1a>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	20001eec 	.word	0x20001eec

08006fe8 <quorem>:
 8006fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	6903      	ldr	r3, [r0, #16]
 8006fee:	690c      	ldr	r4, [r1, #16]
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	42a3      	cmp	r3, r4
 8006ff4:	f2c0 8082 	blt.w	80070fc <quorem+0x114>
 8006ff8:	3c01      	subs	r4, #1
 8006ffa:	f100 0514 	add.w	r5, r0, #20
 8006ffe:	f101 0814 	add.w	r8, r1, #20
 8007002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800700c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007010:	3301      	adds	r3, #1
 8007012:	429a      	cmp	r2, r3
 8007014:	fbb2 f6f3 	udiv	r6, r2, r3
 8007018:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800701c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007020:	d331      	bcc.n	8007086 <quorem+0x9e>
 8007022:	f04f 0e00 	mov.w	lr, #0
 8007026:	4640      	mov	r0, r8
 8007028:	46ac      	mov	ip, r5
 800702a:	46f2      	mov	sl, lr
 800702c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007030:	b293      	uxth	r3, r2
 8007032:	fb06 e303 	mla	r3, r6, r3, lr
 8007036:	0c12      	lsrs	r2, r2, #16
 8007038:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800703c:	b29b      	uxth	r3, r3
 800703e:	fb06 e202 	mla	r2, r6, r2, lr
 8007042:	ebaa 0303 	sub.w	r3, sl, r3
 8007046:	f8dc a000 	ldr.w	sl, [ip]
 800704a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800704e:	fa1f fa8a 	uxth.w	sl, sl
 8007052:	4453      	add	r3, sl
 8007054:	f8dc a000 	ldr.w	sl, [ip]
 8007058:	b292      	uxth	r2, r2
 800705a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800705e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007062:	b29b      	uxth	r3, r3
 8007064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007068:	4581      	cmp	r9, r0
 800706a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800706e:	f84c 3b04 	str.w	r3, [ip], #4
 8007072:	d2db      	bcs.n	800702c <quorem+0x44>
 8007074:	f855 300b 	ldr.w	r3, [r5, fp]
 8007078:	b92b      	cbnz	r3, 8007086 <quorem+0x9e>
 800707a:	9b01      	ldr	r3, [sp, #4]
 800707c:	3b04      	subs	r3, #4
 800707e:	429d      	cmp	r5, r3
 8007080:	461a      	mov	r2, r3
 8007082:	d32f      	bcc.n	80070e4 <quorem+0xfc>
 8007084:	613c      	str	r4, [r7, #16]
 8007086:	4638      	mov	r0, r7
 8007088:	f001 f99c 	bl	80083c4 <__mcmp>
 800708c:	2800      	cmp	r0, #0
 800708e:	db25      	blt.n	80070dc <quorem+0xf4>
 8007090:	4628      	mov	r0, r5
 8007092:	f04f 0c00 	mov.w	ip, #0
 8007096:	3601      	adds	r6, #1
 8007098:	f858 1b04 	ldr.w	r1, [r8], #4
 800709c:	f8d0 e000 	ldr.w	lr, [r0]
 80070a0:	b28b      	uxth	r3, r1
 80070a2:	ebac 0303 	sub.w	r3, ip, r3
 80070a6:	fa1f f28e 	uxth.w	r2, lr
 80070aa:	4413      	add	r3, r2
 80070ac:	0c0a      	lsrs	r2, r1, #16
 80070ae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070bc:	45c1      	cmp	r9, r8
 80070be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070c2:	f840 3b04 	str.w	r3, [r0], #4
 80070c6:	d2e7      	bcs.n	8007098 <quorem+0xb0>
 80070c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070d0:	b922      	cbnz	r2, 80070dc <quorem+0xf4>
 80070d2:	3b04      	subs	r3, #4
 80070d4:	429d      	cmp	r5, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	d30a      	bcc.n	80070f0 <quorem+0x108>
 80070da:	613c      	str	r4, [r7, #16]
 80070dc:	4630      	mov	r0, r6
 80070de:	b003      	add	sp, #12
 80070e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	3b04      	subs	r3, #4
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	d1cb      	bne.n	8007084 <quorem+0x9c>
 80070ec:	3c01      	subs	r4, #1
 80070ee:	e7c6      	b.n	800707e <quorem+0x96>
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	3b04      	subs	r3, #4
 80070f4:	2a00      	cmp	r2, #0
 80070f6:	d1f0      	bne.n	80070da <quorem+0xf2>
 80070f8:	3c01      	subs	r4, #1
 80070fa:	e7eb      	b.n	80070d4 <quorem+0xec>
 80070fc:	2000      	movs	r0, #0
 80070fe:	e7ee      	b.n	80070de <quorem+0xf6>

08007100 <_dtoa_r>:
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	4616      	mov	r6, r2
 8007106:	461f      	mov	r7, r3
 8007108:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800710a:	b099      	sub	sp, #100	; 0x64
 800710c:	4605      	mov	r5, r0
 800710e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007112:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007116:	b974      	cbnz	r4, 8007136 <_dtoa_r+0x36>
 8007118:	2010      	movs	r0, #16
 800711a:	f000 feb3 	bl	8007e84 <malloc>
 800711e:	4602      	mov	r2, r0
 8007120:	6268      	str	r0, [r5, #36]	; 0x24
 8007122:	b920      	cbnz	r0, 800712e <_dtoa_r+0x2e>
 8007124:	21ea      	movs	r1, #234	; 0xea
 8007126:	4ba8      	ldr	r3, [pc, #672]	; (80073c8 <_dtoa_r+0x2c8>)
 8007128:	48a8      	ldr	r0, [pc, #672]	; (80073cc <_dtoa_r+0x2cc>)
 800712a:	f001 fabd 	bl	80086a8 <__assert_func>
 800712e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007132:	6004      	str	r4, [r0, #0]
 8007134:	60c4      	str	r4, [r0, #12]
 8007136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007138:	6819      	ldr	r1, [r3, #0]
 800713a:	b151      	cbz	r1, 8007152 <_dtoa_r+0x52>
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	2301      	movs	r3, #1
 8007140:	4093      	lsls	r3, r2
 8007142:	604a      	str	r2, [r1, #4]
 8007144:	608b      	str	r3, [r1, #8]
 8007146:	4628      	mov	r0, r5
 8007148:	f000 fefe 	bl	8007f48 <_Bfree>
 800714c:	2200      	movs	r2, #0
 800714e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	1e3b      	subs	r3, r7, #0
 8007154:	bfaf      	iteee	ge
 8007156:	2300      	movge	r3, #0
 8007158:	2201      	movlt	r2, #1
 800715a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800715e:	9305      	strlt	r3, [sp, #20]
 8007160:	bfa8      	it	ge
 8007162:	f8c8 3000 	strge.w	r3, [r8]
 8007166:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800716a:	4b99      	ldr	r3, [pc, #612]	; (80073d0 <_dtoa_r+0x2d0>)
 800716c:	bfb8      	it	lt
 800716e:	f8c8 2000 	strlt.w	r2, [r8]
 8007172:	ea33 0309 	bics.w	r3, r3, r9
 8007176:	d119      	bne.n	80071ac <_dtoa_r+0xac>
 8007178:	f242 730f 	movw	r3, #9999	; 0x270f
 800717c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007184:	4333      	orrs	r3, r6
 8007186:	f000 857f 	beq.w	8007c88 <_dtoa_r+0xb88>
 800718a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800718c:	b953      	cbnz	r3, 80071a4 <_dtoa_r+0xa4>
 800718e:	4b91      	ldr	r3, [pc, #580]	; (80073d4 <_dtoa_r+0x2d4>)
 8007190:	e022      	b.n	80071d8 <_dtoa_r+0xd8>
 8007192:	4b91      	ldr	r3, [pc, #580]	; (80073d8 <_dtoa_r+0x2d8>)
 8007194:	9303      	str	r3, [sp, #12]
 8007196:	3308      	adds	r3, #8
 8007198:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	9803      	ldr	r0, [sp, #12]
 800719e:	b019      	add	sp, #100	; 0x64
 80071a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a4:	4b8b      	ldr	r3, [pc, #556]	; (80073d4 <_dtoa_r+0x2d4>)
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	3303      	adds	r3, #3
 80071aa:	e7f5      	b.n	8007198 <_dtoa_r+0x98>
 80071ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80071b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80071b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	f7f9 fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80071c0:	4680      	mov	r8, r0
 80071c2:	b158      	cbz	r0, 80071dc <_dtoa_r+0xdc>
 80071c4:	2301      	movs	r3, #1
 80071c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071c8:	6013      	str	r3, [r2, #0]
 80071ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 8558 	beq.w	8007c82 <_dtoa_r+0xb82>
 80071d2:	4882      	ldr	r0, [pc, #520]	; (80073dc <_dtoa_r+0x2dc>)
 80071d4:	6018      	str	r0, [r3, #0]
 80071d6:	1e43      	subs	r3, r0, #1
 80071d8:	9303      	str	r3, [sp, #12]
 80071da:	e7df      	b.n	800719c <_dtoa_r+0x9c>
 80071dc:	ab16      	add	r3, sp, #88	; 0x58
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	ab17      	add	r3, sp, #92	; 0x5c
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	4628      	mov	r0, r5
 80071e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071ea:	f001 f993 	bl	8008514 <__d2b>
 80071ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80071f2:	4683      	mov	fp, r0
 80071f4:	2c00      	cmp	r4, #0
 80071f6:	d07f      	beq.n	80072f8 <_dtoa_r+0x1f8>
 80071f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007206:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800720a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800720e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007212:	2200      	movs	r2, #0
 8007214:	4b72      	ldr	r3, [pc, #456]	; (80073e0 <_dtoa_r+0x2e0>)
 8007216:	f7f8 ffa7 	bl	8000168 <__aeabi_dsub>
 800721a:	a365      	add	r3, pc, #404	; (adr r3, 80073b0 <_dtoa_r+0x2b0>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f9 f95a 	bl	80004d8 <__aeabi_dmul>
 8007224:	a364      	add	r3, pc, #400	; (adr r3, 80073b8 <_dtoa_r+0x2b8>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f8 ff9f 	bl	800016c <__adddf3>
 800722e:	4606      	mov	r6, r0
 8007230:	4620      	mov	r0, r4
 8007232:	460f      	mov	r7, r1
 8007234:	f7f9 f8e6 	bl	8000404 <__aeabi_i2d>
 8007238:	a361      	add	r3, pc, #388	; (adr r3, 80073c0 <_dtoa_r+0x2c0>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f94b 	bl	80004d8 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4630      	mov	r0, r6
 8007248:	4639      	mov	r1, r7
 800724a:	f7f8 ff8f 	bl	800016c <__adddf3>
 800724e:	4606      	mov	r6, r0
 8007250:	460f      	mov	r7, r1
 8007252:	f7f9 fbf1 	bl	8000a38 <__aeabi_d2iz>
 8007256:	2200      	movs	r2, #0
 8007258:	4682      	mov	sl, r0
 800725a:	2300      	movs	r3, #0
 800725c:	4630      	mov	r0, r6
 800725e:	4639      	mov	r1, r7
 8007260:	f7f9 fbac 	bl	80009bc <__aeabi_dcmplt>
 8007264:	b148      	cbz	r0, 800727a <_dtoa_r+0x17a>
 8007266:	4650      	mov	r0, sl
 8007268:	f7f9 f8cc 	bl	8000404 <__aeabi_i2d>
 800726c:	4632      	mov	r2, r6
 800726e:	463b      	mov	r3, r7
 8007270:	f7f9 fb9a 	bl	80009a8 <__aeabi_dcmpeq>
 8007274:	b908      	cbnz	r0, 800727a <_dtoa_r+0x17a>
 8007276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800727a:	f1ba 0f16 	cmp.w	sl, #22
 800727e:	d858      	bhi.n	8007332 <_dtoa_r+0x232>
 8007280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007284:	4b57      	ldr	r3, [pc, #348]	; (80073e4 <_dtoa_r+0x2e4>)
 8007286:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f9 fb95 	bl	80009bc <__aeabi_dcmplt>
 8007292:	2800      	cmp	r0, #0
 8007294:	d04f      	beq.n	8007336 <_dtoa_r+0x236>
 8007296:	2300      	movs	r3, #0
 8007298:	f10a 3aff 	add.w	sl, sl, #4294967295
 800729c:	930f      	str	r3, [sp, #60]	; 0x3c
 800729e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80072a0:	1b1c      	subs	r4, r3, r4
 80072a2:	1e63      	subs	r3, r4, #1
 80072a4:	9309      	str	r3, [sp, #36]	; 0x24
 80072a6:	bf49      	itett	mi
 80072a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80072ac:	2300      	movpl	r3, #0
 80072ae:	9306      	strmi	r3, [sp, #24]
 80072b0:	2300      	movmi	r3, #0
 80072b2:	bf54      	ite	pl
 80072b4:	9306      	strpl	r3, [sp, #24]
 80072b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80072b8:	f1ba 0f00 	cmp.w	sl, #0
 80072bc:	db3d      	blt.n	800733a <_dtoa_r+0x23a>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80072c4:	4453      	add	r3, sl
 80072c6:	9309      	str	r3, [sp, #36]	; 0x24
 80072c8:	2300      	movs	r3, #0
 80072ca:	930a      	str	r3, [sp, #40]	; 0x28
 80072cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ce:	2b09      	cmp	r3, #9
 80072d0:	f200 808c 	bhi.w	80073ec <_dtoa_r+0x2ec>
 80072d4:	2b05      	cmp	r3, #5
 80072d6:	bfc4      	itt	gt
 80072d8:	3b04      	subgt	r3, #4
 80072da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80072dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072de:	bfc8      	it	gt
 80072e0:	2400      	movgt	r4, #0
 80072e2:	f1a3 0302 	sub.w	r3, r3, #2
 80072e6:	bfd8      	it	le
 80072e8:	2401      	movle	r4, #1
 80072ea:	2b03      	cmp	r3, #3
 80072ec:	f200 808a 	bhi.w	8007404 <_dtoa_r+0x304>
 80072f0:	e8df f003 	tbb	[pc, r3]
 80072f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80072f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80072fc:	441c      	add	r4, r3
 80072fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007302:	2b20      	cmp	r3, #32
 8007304:	bfc3      	ittte	gt
 8007306:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800730a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800730e:	fa09 f303 	lslgt.w	r3, r9, r3
 8007312:	f1c3 0320 	rsble	r3, r3, #32
 8007316:	bfc6      	itte	gt
 8007318:	fa26 f000 	lsrgt.w	r0, r6, r0
 800731c:	4318      	orrgt	r0, r3
 800731e:	fa06 f003 	lslle.w	r0, r6, r3
 8007322:	f7f9 f85f 	bl	80003e4 <__aeabi_ui2d>
 8007326:	2301      	movs	r3, #1
 8007328:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800732c:	3c01      	subs	r4, #1
 800732e:	9313      	str	r3, [sp, #76]	; 0x4c
 8007330:	e76f      	b.n	8007212 <_dtoa_r+0x112>
 8007332:	2301      	movs	r3, #1
 8007334:	e7b2      	b.n	800729c <_dtoa_r+0x19c>
 8007336:	900f      	str	r0, [sp, #60]	; 0x3c
 8007338:	e7b1      	b.n	800729e <_dtoa_r+0x19e>
 800733a:	9b06      	ldr	r3, [sp, #24]
 800733c:	eba3 030a 	sub.w	r3, r3, sl
 8007340:	9306      	str	r3, [sp, #24]
 8007342:	f1ca 0300 	rsb	r3, sl, #0
 8007346:	930a      	str	r3, [sp, #40]	; 0x28
 8007348:	2300      	movs	r3, #0
 800734a:	930e      	str	r3, [sp, #56]	; 0x38
 800734c:	e7be      	b.n	80072cc <_dtoa_r+0x1cc>
 800734e:	2300      	movs	r3, #0
 8007350:	930b      	str	r3, [sp, #44]	; 0x2c
 8007352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007354:	2b00      	cmp	r3, #0
 8007356:	dc58      	bgt.n	800740a <_dtoa_r+0x30a>
 8007358:	f04f 0901 	mov.w	r9, #1
 800735c:	464b      	mov	r3, r9
 800735e:	f8cd 9020 	str.w	r9, [sp, #32]
 8007362:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007366:	2200      	movs	r2, #0
 8007368:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800736a:	6042      	str	r2, [r0, #4]
 800736c:	2204      	movs	r2, #4
 800736e:	f102 0614 	add.w	r6, r2, #20
 8007372:	429e      	cmp	r6, r3
 8007374:	6841      	ldr	r1, [r0, #4]
 8007376:	d94e      	bls.n	8007416 <_dtoa_r+0x316>
 8007378:	4628      	mov	r0, r5
 800737a:	f000 fda5 	bl	8007ec8 <_Balloc>
 800737e:	9003      	str	r0, [sp, #12]
 8007380:	2800      	cmp	r0, #0
 8007382:	d14c      	bne.n	800741e <_dtoa_r+0x31e>
 8007384:	4602      	mov	r2, r0
 8007386:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800738a:	4b17      	ldr	r3, [pc, #92]	; (80073e8 <_dtoa_r+0x2e8>)
 800738c:	e6cc      	b.n	8007128 <_dtoa_r+0x28>
 800738e:	2301      	movs	r3, #1
 8007390:	e7de      	b.n	8007350 <_dtoa_r+0x250>
 8007392:	2300      	movs	r3, #0
 8007394:	930b      	str	r3, [sp, #44]	; 0x2c
 8007396:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007398:	eb0a 0903 	add.w	r9, sl, r3
 800739c:	f109 0301 	add.w	r3, r9, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	9308      	str	r3, [sp, #32]
 80073a4:	bfb8      	it	lt
 80073a6:	2301      	movlt	r3, #1
 80073a8:	e7dd      	b.n	8007366 <_dtoa_r+0x266>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e7f2      	b.n	8007394 <_dtoa_r+0x294>
 80073ae:	bf00      	nop
 80073b0:	636f4361 	.word	0x636f4361
 80073b4:	3fd287a7 	.word	0x3fd287a7
 80073b8:	8b60c8b3 	.word	0x8b60c8b3
 80073bc:	3fc68a28 	.word	0x3fc68a28
 80073c0:	509f79fb 	.word	0x509f79fb
 80073c4:	3fd34413 	.word	0x3fd34413
 80073c8:	08008ead 	.word	0x08008ead
 80073cc:	08008ec4 	.word	0x08008ec4
 80073d0:	7ff00000 	.word	0x7ff00000
 80073d4:	08008ea9 	.word	0x08008ea9
 80073d8:	08008ea0 	.word	0x08008ea0
 80073dc:	08008e7d 	.word	0x08008e7d
 80073e0:	3ff80000 	.word	0x3ff80000
 80073e4:	08008fb8 	.word	0x08008fb8
 80073e8:	08008f1f 	.word	0x08008f1f
 80073ec:	2401      	movs	r4, #1
 80073ee:	2300      	movs	r3, #0
 80073f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80073f2:	9322      	str	r3, [sp, #136]	; 0x88
 80073f4:	f04f 39ff 	mov.w	r9, #4294967295
 80073f8:	2200      	movs	r2, #0
 80073fa:	2312      	movs	r3, #18
 80073fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8007400:	9223      	str	r2, [sp, #140]	; 0x8c
 8007402:	e7b0      	b.n	8007366 <_dtoa_r+0x266>
 8007404:	2301      	movs	r3, #1
 8007406:	930b      	str	r3, [sp, #44]	; 0x2c
 8007408:	e7f4      	b.n	80073f4 <_dtoa_r+0x2f4>
 800740a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800740e:	464b      	mov	r3, r9
 8007410:	f8cd 9020 	str.w	r9, [sp, #32]
 8007414:	e7a7      	b.n	8007366 <_dtoa_r+0x266>
 8007416:	3101      	adds	r1, #1
 8007418:	6041      	str	r1, [r0, #4]
 800741a:	0052      	lsls	r2, r2, #1
 800741c:	e7a7      	b.n	800736e <_dtoa_r+0x26e>
 800741e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007420:	9a03      	ldr	r2, [sp, #12]
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	9b08      	ldr	r3, [sp, #32]
 8007426:	2b0e      	cmp	r3, #14
 8007428:	f200 80a8 	bhi.w	800757c <_dtoa_r+0x47c>
 800742c:	2c00      	cmp	r4, #0
 800742e:	f000 80a5 	beq.w	800757c <_dtoa_r+0x47c>
 8007432:	f1ba 0f00 	cmp.w	sl, #0
 8007436:	dd34      	ble.n	80074a2 <_dtoa_r+0x3a2>
 8007438:	4a9a      	ldr	r2, [pc, #616]	; (80076a4 <_dtoa_r+0x5a4>)
 800743a:	f00a 030f 	and.w	r3, sl, #15
 800743e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007442:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007446:	e9d3 3400 	ldrd	r3, r4, [r3]
 800744a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800744e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007452:	d016      	beq.n	8007482 <_dtoa_r+0x382>
 8007454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007458:	4b93      	ldr	r3, [pc, #588]	; (80076a8 <_dtoa_r+0x5a8>)
 800745a:	2703      	movs	r7, #3
 800745c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007460:	f7f9 f964 	bl	800072c <__aeabi_ddiv>
 8007464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007468:	f004 040f 	and.w	r4, r4, #15
 800746c:	4e8e      	ldr	r6, [pc, #568]	; (80076a8 <_dtoa_r+0x5a8>)
 800746e:	b954      	cbnz	r4, 8007486 <_dtoa_r+0x386>
 8007470:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007478:	f7f9 f958 	bl	800072c <__aeabi_ddiv>
 800747c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007480:	e029      	b.n	80074d6 <_dtoa_r+0x3d6>
 8007482:	2702      	movs	r7, #2
 8007484:	e7f2      	b.n	800746c <_dtoa_r+0x36c>
 8007486:	07e1      	lsls	r1, r4, #31
 8007488:	d508      	bpl.n	800749c <_dtoa_r+0x39c>
 800748a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800748e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007492:	f7f9 f821 	bl	80004d8 <__aeabi_dmul>
 8007496:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800749a:	3701      	adds	r7, #1
 800749c:	1064      	asrs	r4, r4, #1
 800749e:	3608      	adds	r6, #8
 80074a0:	e7e5      	b.n	800746e <_dtoa_r+0x36e>
 80074a2:	f000 80a5 	beq.w	80075f0 <_dtoa_r+0x4f0>
 80074a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074aa:	f1ca 0400 	rsb	r4, sl, #0
 80074ae:	4b7d      	ldr	r3, [pc, #500]	; (80076a4 <_dtoa_r+0x5a4>)
 80074b0:	f004 020f 	and.w	r2, r4, #15
 80074b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	f7f9 f80c 	bl	80004d8 <__aeabi_dmul>
 80074c0:	2702      	movs	r7, #2
 80074c2:	2300      	movs	r3, #0
 80074c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074c8:	4e77      	ldr	r6, [pc, #476]	; (80076a8 <_dtoa_r+0x5a8>)
 80074ca:	1124      	asrs	r4, r4, #4
 80074cc:	2c00      	cmp	r4, #0
 80074ce:	f040 8084 	bne.w	80075da <_dtoa_r+0x4da>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1d2      	bne.n	800747c <_dtoa_r+0x37c>
 80074d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 808b 	beq.w	80075f4 <_dtoa_r+0x4f4>
 80074de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80074e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80074e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80074ea:	2200      	movs	r2, #0
 80074ec:	4b6f      	ldr	r3, [pc, #444]	; (80076ac <_dtoa_r+0x5ac>)
 80074ee:	f7f9 fa65 	bl	80009bc <__aeabi_dcmplt>
 80074f2:	2800      	cmp	r0, #0
 80074f4:	d07e      	beq.n	80075f4 <_dtoa_r+0x4f4>
 80074f6:	9b08      	ldr	r3, [sp, #32]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d07b      	beq.n	80075f4 <_dtoa_r+0x4f4>
 80074fc:	f1b9 0f00 	cmp.w	r9, #0
 8007500:	dd38      	ble.n	8007574 <_dtoa_r+0x474>
 8007502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007506:	2200      	movs	r2, #0
 8007508:	4b69      	ldr	r3, [pc, #420]	; (80076b0 <_dtoa_r+0x5b0>)
 800750a:	f7f8 ffe5 	bl	80004d8 <__aeabi_dmul>
 800750e:	464c      	mov	r4, r9
 8007510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007514:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007518:	3701      	adds	r7, #1
 800751a:	4638      	mov	r0, r7
 800751c:	f7f8 ff72 	bl	8000404 <__aeabi_i2d>
 8007520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007524:	f7f8 ffd8 	bl	80004d8 <__aeabi_dmul>
 8007528:	2200      	movs	r2, #0
 800752a:	4b62      	ldr	r3, [pc, #392]	; (80076b4 <_dtoa_r+0x5b4>)
 800752c:	f7f8 fe1e 	bl	800016c <__adddf3>
 8007530:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007534:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007538:	9611      	str	r6, [sp, #68]	; 0x44
 800753a:	2c00      	cmp	r4, #0
 800753c:	d15d      	bne.n	80075fa <_dtoa_r+0x4fa>
 800753e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007542:	2200      	movs	r2, #0
 8007544:	4b5c      	ldr	r3, [pc, #368]	; (80076b8 <_dtoa_r+0x5b8>)
 8007546:	f7f8 fe0f 	bl	8000168 <__aeabi_dsub>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007552:	4633      	mov	r3, r6
 8007554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007556:	f7f9 fa4f 	bl	80009f8 <__aeabi_dcmpgt>
 800755a:	2800      	cmp	r0, #0
 800755c:	f040 829c 	bne.w	8007a98 <_dtoa_r+0x998>
 8007560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007566:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800756a:	f7f9 fa27 	bl	80009bc <__aeabi_dcmplt>
 800756e:	2800      	cmp	r0, #0
 8007570:	f040 8290 	bne.w	8007a94 <_dtoa_r+0x994>
 8007574:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007578:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800757c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800757e:	2b00      	cmp	r3, #0
 8007580:	f2c0 8152 	blt.w	8007828 <_dtoa_r+0x728>
 8007584:	f1ba 0f0e 	cmp.w	sl, #14
 8007588:	f300 814e 	bgt.w	8007828 <_dtoa_r+0x728>
 800758c:	4b45      	ldr	r3, [pc, #276]	; (80076a4 <_dtoa_r+0x5a4>)
 800758e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007596:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800759a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800759c:	2b00      	cmp	r3, #0
 800759e:	f280 80db 	bge.w	8007758 <_dtoa_r+0x658>
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f300 80d7 	bgt.w	8007758 <_dtoa_r+0x658>
 80075aa:	f040 8272 	bne.w	8007a92 <_dtoa_r+0x992>
 80075ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075b2:	2200      	movs	r2, #0
 80075b4:	4b40      	ldr	r3, [pc, #256]	; (80076b8 <_dtoa_r+0x5b8>)
 80075b6:	f7f8 ff8f 	bl	80004d8 <__aeabi_dmul>
 80075ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075be:	f7f9 fa11 	bl	80009e4 <__aeabi_dcmpge>
 80075c2:	9c08      	ldr	r4, [sp, #32]
 80075c4:	4626      	mov	r6, r4
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f040 8248 	bne.w	8007a5c <_dtoa_r+0x95c>
 80075cc:	2331      	movs	r3, #49	; 0x31
 80075ce:	9f03      	ldr	r7, [sp, #12]
 80075d0:	f10a 0a01 	add.w	sl, sl, #1
 80075d4:	f807 3b01 	strb.w	r3, [r7], #1
 80075d8:	e244      	b.n	8007a64 <_dtoa_r+0x964>
 80075da:	07e2      	lsls	r2, r4, #31
 80075dc:	d505      	bpl.n	80075ea <_dtoa_r+0x4ea>
 80075de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075e2:	f7f8 ff79 	bl	80004d8 <__aeabi_dmul>
 80075e6:	2301      	movs	r3, #1
 80075e8:	3701      	adds	r7, #1
 80075ea:	1064      	asrs	r4, r4, #1
 80075ec:	3608      	adds	r6, #8
 80075ee:	e76d      	b.n	80074cc <_dtoa_r+0x3cc>
 80075f0:	2702      	movs	r7, #2
 80075f2:	e770      	b.n	80074d6 <_dtoa_r+0x3d6>
 80075f4:	46d0      	mov	r8, sl
 80075f6:	9c08      	ldr	r4, [sp, #32]
 80075f8:	e78f      	b.n	800751a <_dtoa_r+0x41a>
 80075fa:	9903      	ldr	r1, [sp, #12]
 80075fc:	4b29      	ldr	r3, [pc, #164]	; (80076a4 <_dtoa_r+0x5a4>)
 80075fe:	4421      	add	r1, r4
 8007600:	9112      	str	r1, [sp, #72]	; 0x48
 8007602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007608:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800760c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007610:	2900      	cmp	r1, #0
 8007612:	d055      	beq.n	80076c0 <_dtoa_r+0x5c0>
 8007614:	2000      	movs	r0, #0
 8007616:	4929      	ldr	r1, [pc, #164]	; (80076bc <_dtoa_r+0x5bc>)
 8007618:	f7f9 f888 	bl	800072c <__aeabi_ddiv>
 800761c:	463b      	mov	r3, r7
 800761e:	4632      	mov	r2, r6
 8007620:	f7f8 fda2 	bl	8000168 <__aeabi_dsub>
 8007624:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007628:	9f03      	ldr	r7, [sp, #12]
 800762a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800762e:	f7f9 fa03 	bl	8000a38 <__aeabi_d2iz>
 8007632:	4604      	mov	r4, r0
 8007634:	f7f8 fee6 	bl	8000404 <__aeabi_i2d>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007640:	f7f8 fd92 	bl	8000168 <__aeabi_dsub>
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	3430      	adds	r4, #48	; 0x30
 800764a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800764e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007652:	f807 4b01 	strb.w	r4, [r7], #1
 8007656:	f7f9 f9b1 	bl	80009bc <__aeabi_dcmplt>
 800765a:	2800      	cmp	r0, #0
 800765c:	d174      	bne.n	8007748 <_dtoa_r+0x648>
 800765e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007662:	2000      	movs	r0, #0
 8007664:	4911      	ldr	r1, [pc, #68]	; (80076ac <_dtoa_r+0x5ac>)
 8007666:	f7f8 fd7f 	bl	8000168 <__aeabi_dsub>
 800766a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800766e:	f7f9 f9a5 	bl	80009bc <__aeabi_dcmplt>
 8007672:	2800      	cmp	r0, #0
 8007674:	f040 80b7 	bne.w	80077e6 <_dtoa_r+0x6e6>
 8007678:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800767a:	429f      	cmp	r7, r3
 800767c:	f43f af7a 	beq.w	8007574 <_dtoa_r+0x474>
 8007680:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007684:	2200      	movs	r2, #0
 8007686:	4b0a      	ldr	r3, [pc, #40]	; (80076b0 <_dtoa_r+0x5b0>)
 8007688:	f7f8 ff26 	bl	80004d8 <__aeabi_dmul>
 800768c:	2200      	movs	r2, #0
 800768e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007696:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <_dtoa_r+0x5b0>)
 8007698:	f7f8 ff1e 	bl	80004d8 <__aeabi_dmul>
 800769c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076a0:	e7c3      	b.n	800762a <_dtoa_r+0x52a>
 80076a2:	bf00      	nop
 80076a4:	08008fb8 	.word	0x08008fb8
 80076a8:	08008f90 	.word	0x08008f90
 80076ac:	3ff00000 	.word	0x3ff00000
 80076b0:	40240000 	.word	0x40240000
 80076b4:	401c0000 	.word	0x401c0000
 80076b8:	40140000 	.word	0x40140000
 80076bc:	3fe00000 	.word	0x3fe00000
 80076c0:	4630      	mov	r0, r6
 80076c2:	4639      	mov	r1, r7
 80076c4:	f7f8 ff08 	bl	80004d8 <__aeabi_dmul>
 80076c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80076ce:	9c03      	ldr	r4, [sp, #12]
 80076d0:	9314      	str	r3, [sp, #80]	; 0x50
 80076d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076d6:	f7f9 f9af 	bl	8000a38 <__aeabi_d2iz>
 80076da:	9015      	str	r0, [sp, #84]	; 0x54
 80076dc:	f7f8 fe92 	bl	8000404 <__aeabi_i2d>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076e8:	f7f8 fd3e 	bl	8000168 <__aeabi_dsub>
 80076ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076ee:	4606      	mov	r6, r0
 80076f0:	3330      	adds	r3, #48	; 0x30
 80076f2:	f804 3b01 	strb.w	r3, [r4], #1
 80076f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076f8:	460f      	mov	r7, r1
 80076fa:	429c      	cmp	r4, r3
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	d124      	bne.n	800774c <_dtoa_r+0x64c>
 8007702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007706:	4bb0      	ldr	r3, [pc, #704]	; (80079c8 <_dtoa_r+0x8c8>)
 8007708:	f7f8 fd30 	bl	800016c <__adddf3>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4630      	mov	r0, r6
 8007712:	4639      	mov	r1, r7
 8007714:	f7f9 f970 	bl	80009f8 <__aeabi_dcmpgt>
 8007718:	2800      	cmp	r0, #0
 800771a:	d163      	bne.n	80077e4 <_dtoa_r+0x6e4>
 800771c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007720:	2000      	movs	r0, #0
 8007722:	49a9      	ldr	r1, [pc, #676]	; (80079c8 <_dtoa_r+0x8c8>)
 8007724:	f7f8 fd20 	bl	8000168 <__aeabi_dsub>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4630      	mov	r0, r6
 800772e:	4639      	mov	r1, r7
 8007730:	f7f9 f944 	bl	80009bc <__aeabi_dcmplt>
 8007734:	2800      	cmp	r0, #0
 8007736:	f43f af1d 	beq.w	8007574 <_dtoa_r+0x474>
 800773a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800773c:	1e7b      	subs	r3, r7, #1
 800773e:	9314      	str	r3, [sp, #80]	; 0x50
 8007740:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007744:	2b30      	cmp	r3, #48	; 0x30
 8007746:	d0f8      	beq.n	800773a <_dtoa_r+0x63a>
 8007748:	46c2      	mov	sl, r8
 800774a:	e03b      	b.n	80077c4 <_dtoa_r+0x6c4>
 800774c:	4b9f      	ldr	r3, [pc, #636]	; (80079cc <_dtoa_r+0x8cc>)
 800774e:	f7f8 fec3 	bl	80004d8 <__aeabi_dmul>
 8007752:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007756:	e7bc      	b.n	80076d2 <_dtoa_r+0x5d2>
 8007758:	9f03      	ldr	r7, [sp, #12]
 800775a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800775e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007762:	4640      	mov	r0, r8
 8007764:	4649      	mov	r1, r9
 8007766:	f7f8 ffe1 	bl	800072c <__aeabi_ddiv>
 800776a:	f7f9 f965 	bl	8000a38 <__aeabi_d2iz>
 800776e:	4604      	mov	r4, r0
 8007770:	f7f8 fe48 	bl	8000404 <__aeabi_i2d>
 8007774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007778:	f7f8 feae 	bl	80004d8 <__aeabi_dmul>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4640      	mov	r0, r8
 8007782:	4649      	mov	r1, r9
 8007784:	f7f8 fcf0 	bl	8000168 <__aeabi_dsub>
 8007788:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800778c:	f807 6b01 	strb.w	r6, [r7], #1
 8007790:	9e03      	ldr	r6, [sp, #12]
 8007792:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007796:	1bbe      	subs	r6, r7, r6
 8007798:	45b4      	cmp	ip, r6
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	d136      	bne.n	800780e <_dtoa_r+0x70e>
 80077a0:	f7f8 fce4 	bl	800016c <__adddf3>
 80077a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077a8:	4680      	mov	r8, r0
 80077aa:	4689      	mov	r9, r1
 80077ac:	f7f9 f924 	bl	80009f8 <__aeabi_dcmpgt>
 80077b0:	bb58      	cbnz	r0, 800780a <_dtoa_r+0x70a>
 80077b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077b6:	4640      	mov	r0, r8
 80077b8:	4649      	mov	r1, r9
 80077ba:	f7f9 f8f5 	bl	80009a8 <__aeabi_dcmpeq>
 80077be:	b108      	cbz	r0, 80077c4 <_dtoa_r+0x6c4>
 80077c0:	07e1      	lsls	r1, r4, #31
 80077c2:	d422      	bmi.n	800780a <_dtoa_r+0x70a>
 80077c4:	4628      	mov	r0, r5
 80077c6:	4659      	mov	r1, fp
 80077c8:	f000 fbbe 	bl	8007f48 <_Bfree>
 80077cc:	2300      	movs	r3, #0
 80077ce:	703b      	strb	r3, [r7, #0]
 80077d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80077d2:	f10a 0001 	add.w	r0, sl, #1
 80077d6:	6018      	str	r0, [r3, #0]
 80077d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f43f acde 	beq.w	800719c <_dtoa_r+0x9c>
 80077e0:	601f      	str	r7, [r3, #0]
 80077e2:	e4db      	b.n	800719c <_dtoa_r+0x9c>
 80077e4:	4627      	mov	r7, r4
 80077e6:	463b      	mov	r3, r7
 80077e8:	461f      	mov	r7, r3
 80077ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077ee:	2a39      	cmp	r2, #57	; 0x39
 80077f0:	d107      	bne.n	8007802 <_dtoa_r+0x702>
 80077f2:	9a03      	ldr	r2, [sp, #12]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d1f7      	bne.n	80077e8 <_dtoa_r+0x6e8>
 80077f8:	2230      	movs	r2, #48	; 0x30
 80077fa:	9903      	ldr	r1, [sp, #12]
 80077fc:	f108 0801 	add.w	r8, r8, #1
 8007800:	700a      	strb	r2, [r1, #0]
 8007802:	781a      	ldrb	r2, [r3, #0]
 8007804:	3201      	adds	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	e79e      	b.n	8007748 <_dtoa_r+0x648>
 800780a:	46d0      	mov	r8, sl
 800780c:	e7eb      	b.n	80077e6 <_dtoa_r+0x6e6>
 800780e:	2200      	movs	r2, #0
 8007810:	4b6e      	ldr	r3, [pc, #440]	; (80079cc <_dtoa_r+0x8cc>)
 8007812:	f7f8 fe61 	bl	80004d8 <__aeabi_dmul>
 8007816:	2200      	movs	r2, #0
 8007818:	2300      	movs	r3, #0
 800781a:	4680      	mov	r8, r0
 800781c:	4689      	mov	r9, r1
 800781e:	f7f9 f8c3 	bl	80009a8 <__aeabi_dcmpeq>
 8007822:	2800      	cmp	r0, #0
 8007824:	d09b      	beq.n	800775e <_dtoa_r+0x65e>
 8007826:	e7cd      	b.n	80077c4 <_dtoa_r+0x6c4>
 8007828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800782a:	2a00      	cmp	r2, #0
 800782c:	f000 80d0 	beq.w	80079d0 <_dtoa_r+0x8d0>
 8007830:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007832:	2a01      	cmp	r2, #1
 8007834:	f300 80ae 	bgt.w	8007994 <_dtoa_r+0x894>
 8007838:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800783a:	2a00      	cmp	r2, #0
 800783c:	f000 80a6 	beq.w	800798c <_dtoa_r+0x88c>
 8007840:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007846:	9f06      	ldr	r7, [sp, #24]
 8007848:	9a06      	ldr	r2, [sp, #24]
 800784a:	2101      	movs	r1, #1
 800784c:	441a      	add	r2, r3
 800784e:	9206      	str	r2, [sp, #24]
 8007850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007852:	4628      	mov	r0, r5
 8007854:	441a      	add	r2, r3
 8007856:	9209      	str	r2, [sp, #36]	; 0x24
 8007858:	f000 fc2c 	bl	80080b4 <__i2b>
 800785c:	4606      	mov	r6, r0
 800785e:	2f00      	cmp	r7, #0
 8007860:	dd0c      	ble.n	800787c <_dtoa_r+0x77c>
 8007862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	dd09      	ble.n	800787c <_dtoa_r+0x77c>
 8007868:	42bb      	cmp	r3, r7
 800786a:	bfa8      	it	ge
 800786c:	463b      	movge	r3, r7
 800786e:	9a06      	ldr	r2, [sp, #24]
 8007870:	1aff      	subs	r7, r7, r3
 8007872:	1ad2      	subs	r2, r2, r3
 8007874:	9206      	str	r2, [sp, #24]
 8007876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	9309      	str	r3, [sp, #36]	; 0x24
 800787c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800787e:	b1f3      	cbz	r3, 80078be <_dtoa_r+0x7be>
 8007880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80a8 	beq.w	80079d8 <_dtoa_r+0x8d8>
 8007888:	2c00      	cmp	r4, #0
 800788a:	dd10      	ble.n	80078ae <_dtoa_r+0x7ae>
 800788c:	4631      	mov	r1, r6
 800788e:	4622      	mov	r2, r4
 8007890:	4628      	mov	r0, r5
 8007892:	f000 fccd 	bl	8008230 <__pow5mult>
 8007896:	465a      	mov	r2, fp
 8007898:	4601      	mov	r1, r0
 800789a:	4606      	mov	r6, r0
 800789c:	4628      	mov	r0, r5
 800789e:	f000 fc1f 	bl	80080e0 <__multiply>
 80078a2:	4680      	mov	r8, r0
 80078a4:	4659      	mov	r1, fp
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fb4e 	bl	8007f48 <_Bfree>
 80078ac:	46c3      	mov	fp, r8
 80078ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b0:	1b1a      	subs	r2, r3, r4
 80078b2:	d004      	beq.n	80078be <_dtoa_r+0x7be>
 80078b4:	4659      	mov	r1, fp
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 fcba 	bl	8008230 <__pow5mult>
 80078bc:	4683      	mov	fp, r0
 80078be:	2101      	movs	r1, #1
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 fbf7 	bl	80080b4 <__i2b>
 80078c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078c8:	4604      	mov	r4, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f340 8086 	ble.w	80079dc <_dtoa_r+0x8dc>
 80078d0:	461a      	mov	r2, r3
 80078d2:	4601      	mov	r1, r0
 80078d4:	4628      	mov	r0, r5
 80078d6:	f000 fcab 	bl	8008230 <__pow5mult>
 80078da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078dc:	4604      	mov	r4, r0
 80078de:	2b01      	cmp	r3, #1
 80078e0:	dd7f      	ble.n	80079e2 <_dtoa_r+0x8e2>
 80078e2:	f04f 0800 	mov.w	r8, #0
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078ec:	6918      	ldr	r0, [r3, #16]
 80078ee:	f000 fb93 	bl	8008018 <__hi0bits>
 80078f2:	f1c0 0020 	rsb	r0, r0, #32
 80078f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f8:	4418      	add	r0, r3
 80078fa:	f010 001f 	ands.w	r0, r0, #31
 80078fe:	f000 8092 	beq.w	8007a26 <_dtoa_r+0x926>
 8007902:	f1c0 0320 	rsb	r3, r0, #32
 8007906:	2b04      	cmp	r3, #4
 8007908:	f340 808a 	ble.w	8007a20 <_dtoa_r+0x920>
 800790c:	f1c0 001c 	rsb	r0, r0, #28
 8007910:	9b06      	ldr	r3, [sp, #24]
 8007912:	4407      	add	r7, r0
 8007914:	4403      	add	r3, r0
 8007916:	9306      	str	r3, [sp, #24]
 8007918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800791a:	4403      	add	r3, r0
 800791c:	9309      	str	r3, [sp, #36]	; 0x24
 800791e:	9b06      	ldr	r3, [sp, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	dd05      	ble.n	8007930 <_dtoa_r+0x830>
 8007924:	4659      	mov	r1, fp
 8007926:	461a      	mov	r2, r3
 8007928:	4628      	mov	r0, r5
 800792a:	f000 fcdb 	bl	80082e4 <__lshift>
 800792e:	4683      	mov	fp, r0
 8007930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007932:	2b00      	cmp	r3, #0
 8007934:	dd05      	ble.n	8007942 <_dtoa_r+0x842>
 8007936:	4621      	mov	r1, r4
 8007938:	461a      	mov	r2, r3
 800793a:	4628      	mov	r0, r5
 800793c:	f000 fcd2 	bl	80082e4 <__lshift>
 8007940:	4604      	mov	r4, r0
 8007942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007944:	2b00      	cmp	r3, #0
 8007946:	d070      	beq.n	8007a2a <_dtoa_r+0x92a>
 8007948:	4621      	mov	r1, r4
 800794a:	4658      	mov	r0, fp
 800794c:	f000 fd3a 	bl	80083c4 <__mcmp>
 8007950:	2800      	cmp	r0, #0
 8007952:	da6a      	bge.n	8007a2a <_dtoa_r+0x92a>
 8007954:	2300      	movs	r3, #0
 8007956:	4659      	mov	r1, fp
 8007958:	220a      	movs	r2, #10
 800795a:	4628      	mov	r0, r5
 800795c:	f000 fb16 	bl	8007f8c <__multadd>
 8007960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007962:	4683      	mov	fp, r0
 8007964:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 8194 	beq.w	8007c96 <_dtoa_r+0xb96>
 800796e:	4631      	mov	r1, r6
 8007970:	2300      	movs	r3, #0
 8007972:	220a      	movs	r2, #10
 8007974:	4628      	mov	r0, r5
 8007976:	f000 fb09 	bl	8007f8c <__multadd>
 800797a:	f1b9 0f00 	cmp.w	r9, #0
 800797e:	4606      	mov	r6, r0
 8007980:	f300 8093 	bgt.w	8007aaa <_dtoa_r+0x9aa>
 8007984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007986:	2b02      	cmp	r3, #2
 8007988:	dc57      	bgt.n	8007a3a <_dtoa_r+0x93a>
 800798a:	e08e      	b.n	8007aaa <_dtoa_r+0x9aa>
 800798c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800798e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007992:	e757      	b.n	8007844 <_dtoa_r+0x744>
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	1e5c      	subs	r4, r3, #1
 8007998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800799a:	42a3      	cmp	r3, r4
 800799c:	bfb7      	itett	lt
 800799e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80079a0:	1b1c      	subge	r4, r3, r4
 80079a2:	1ae2      	sublt	r2, r4, r3
 80079a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80079a6:	bfbe      	ittt	lt
 80079a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80079aa:	189b      	addlt	r3, r3, r2
 80079ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80079ae:	9b08      	ldr	r3, [sp, #32]
 80079b0:	bfb8      	it	lt
 80079b2:	2400      	movlt	r4, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	bfbb      	ittet	lt
 80079b8:	9b06      	ldrlt	r3, [sp, #24]
 80079ba:	9a08      	ldrlt	r2, [sp, #32]
 80079bc:	9f06      	ldrge	r7, [sp, #24]
 80079be:	1a9f      	sublt	r7, r3, r2
 80079c0:	bfac      	ite	ge
 80079c2:	9b08      	ldrge	r3, [sp, #32]
 80079c4:	2300      	movlt	r3, #0
 80079c6:	e73f      	b.n	8007848 <_dtoa_r+0x748>
 80079c8:	3fe00000 	.word	0x3fe00000
 80079cc:	40240000 	.word	0x40240000
 80079d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079d2:	9f06      	ldr	r7, [sp, #24]
 80079d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80079d6:	e742      	b.n	800785e <_dtoa_r+0x75e>
 80079d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079da:	e76b      	b.n	80078b4 <_dtoa_r+0x7b4>
 80079dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079de:	2b01      	cmp	r3, #1
 80079e0:	dc19      	bgt.n	8007a16 <_dtoa_r+0x916>
 80079e2:	9b04      	ldr	r3, [sp, #16]
 80079e4:	b9bb      	cbnz	r3, 8007a16 <_dtoa_r+0x916>
 80079e6:	9b05      	ldr	r3, [sp, #20]
 80079e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079ec:	b99b      	cbnz	r3, 8007a16 <_dtoa_r+0x916>
 80079ee:	9b05      	ldr	r3, [sp, #20]
 80079f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079f4:	0d1b      	lsrs	r3, r3, #20
 80079f6:	051b      	lsls	r3, r3, #20
 80079f8:	b183      	cbz	r3, 8007a1c <_dtoa_r+0x91c>
 80079fa:	f04f 0801 	mov.w	r8, #1
 80079fe:	9b06      	ldr	r3, [sp, #24]
 8007a00:	3301      	adds	r3, #1
 8007a02:	9306      	str	r3, [sp, #24]
 8007a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a06:	3301      	adds	r3, #1
 8007a08:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f47f af6a 	bne.w	80078e6 <_dtoa_r+0x7e6>
 8007a12:	2001      	movs	r0, #1
 8007a14:	e76f      	b.n	80078f6 <_dtoa_r+0x7f6>
 8007a16:	f04f 0800 	mov.w	r8, #0
 8007a1a:	e7f6      	b.n	8007a0a <_dtoa_r+0x90a>
 8007a1c:	4698      	mov	r8, r3
 8007a1e:	e7f4      	b.n	8007a0a <_dtoa_r+0x90a>
 8007a20:	f43f af7d 	beq.w	800791e <_dtoa_r+0x81e>
 8007a24:	4618      	mov	r0, r3
 8007a26:	301c      	adds	r0, #28
 8007a28:	e772      	b.n	8007910 <_dtoa_r+0x810>
 8007a2a:	9b08      	ldr	r3, [sp, #32]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dc36      	bgt.n	8007a9e <_dtoa_r+0x99e>
 8007a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	dd33      	ble.n	8007a9e <_dtoa_r+0x99e>
 8007a36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a3a:	f1b9 0f00 	cmp.w	r9, #0
 8007a3e:	d10d      	bne.n	8007a5c <_dtoa_r+0x95c>
 8007a40:	4621      	mov	r1, r4
 8007a42:	464b      	mov	r3, r9
 8007a44:	2205      	movs	r2, #5
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 faa0 	bl	8007f8c <__multadd>
 8007a4c:	4601      	mov	r1, r0
 8007a4e:	4604      	mov	r4, r0
 8007a50:	4658      	mov	r0, fp
 8007a52:	f000 fcb7 	bl	80083c4 <__mcmp>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f73f adb8 	bgt.w	80075cc <_dtoa_r+0x4cc>
 8007a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a5e:	9f03      	ldr	r7, [sp, #12]
 8007a60:	ea6f 0a03 	mvn.w	sl, r3
 8007a64:	f04f 0800 	mov.w	r8, #0
 8007a68:	4621      	mov	r1, r4
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f000 fa6c 	bl	8007f48 <_Bfree>
 8007a70:	2e00      	cmp	r6, #0
 8007a72:	f43f aea7 	beq.w	80077c4 <_dtoa_r+0x6c4>
 8007a76:	f1b8 0f00 	cmp.w	r8, #0
 8007a7a:	d005      	beq.n	8007a88 <_dtoa_r+0x988>
 8007a7c:	45b0      	cmp	r8, r6
 8007a7e:	d003      	beq.n	8007a88 <_dtoa_r+0x988>
 8007a80:	4641      	mov	r1, r8
 8007a82:	4628      	mov	r0, r5
 8007a84:	f000 fa60 	bl	8007f48 <_Bfree>
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	f000 fa5c 	bl	8007f48 <_Bfree>
 8007a90:	e698      	b.n	80077c4 <_dtoa_r+0x6c4>
 8007a92:	2400      	movs	r4, #0
 8007a94:	4626      	mov	r6, r4
 8007a96:	e7e1      	b.n	8007a5c <_dtoa_r+0x95c>
 8007a98:	46c2      	mov	sl, r8
 8007a9a:	4626      	mov	r6, r4
 8007a9c:	e596      	b.n	80075cc <_dtoa_r+0x4cc>
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 80fd 	beq.w	8007ca4 <_dtoa_r+0xba4>
 8007aaa:	2f00      	cmp	r7, #0
 8007aac:	dd05      	ble.n	8007aba <_dtoa_r+0x9ba>
 8007aae:	4631      	mov	r1, r6
 8007ab0:	463a      	mov	r2, r7
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	f000 fc16 	bl	80082e4 <__lshift>
 8007ab8:	4606      	mov	r6, r0
 8007aba:	f1b8 0f00 	cmp.w	r8, #0
 8007abe:	d05c      	beq.n	8007b7a <_dtoa_r+0xa7a>
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	6871      	ldr	r1, [r6, #4]
 8007ac4:	f000 fa00 	bl	8007ec8 <_Balloc>
 8007ac8:	4607      	mov	r7, r0
 8007aca:	b928      	cbnz	r0, 8007ad8 <_dtoa_r+0x9d8>
 8007acc:	4602      	mov	r2, r0
 8007ace:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ad2:	4b7f      	ldr	r3, [pc, #508]	; (8007cd0 <_dtoa_r+0xbd0>)
 8007ad4:	f7ff bb28 	b.w	8007128 <_dtoa_r+0x28>
 8007ad8:	6932      	ldr	r2, [r6, #16]
 8007ada:	f106 010c 	add.w	r1, r6, #12
 8007ade:	3202      	adds	r2, #2
 8007ae0:	0092      	lsls	r2, r2, #2
 8007ae2:	300c      	adds	r0, #12
 8007ae4:	f7fe fc95 	bl	8006412 <memcpy>
 8007ae8:	2201      	movs	r2, #1
 8007aea:	4639      	mov	r1, r7
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 fbf9 	bl	80082e4 <__lshift>
 8007af2:	46b0      	mov	r8, r6
 8007af4:	4606      	mov	r6, r0
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	9308      	str	r3, [sp, #32]
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	444b      	add	r3, r9
 8007b00:	930a      	str	r3, [sp, #40]	; 0x28
 8007b02:	9b04      	ldr	r3, [sp, #16]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	9309      	str	r3, [sp, #36]	; 0x24
 8007b0a:	9b08      	ldr	r3, [sp, #32]
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	4658      	mov	r0, fp
 8007b12:	9304      	str	r3, [sp, #16]
 8007b14:	f7ff fa68 	bl	8006fe8 <quorem>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	4641      	mov	r1, r8
 8007b1c:	3330      	adds	r3, #48	; 0x30
 8007b1e:	9006      	str	r0, [sp, #24]
 8007b20:	4658      	mov	r0, fp
 8007b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b24:	f000 fc4e 	bl	80083c4 <__mcmp>
 8007b28:	4632      	mov	r2, r6
 8007b2a:	4681      	mov	r9, r0
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 fc64 	bl	80083fc <__mdiff>
 8007b34:	68c2      	ldr	r2, [r0, #12]
 8007b36:	4607      	mov	r7, r0
 8007b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3a:	bb02      	cbnz	r2, 8007b7e <_dtoa_r+0xa7e>
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	4658      	mov	r0, fp
 8007b40:	f000 fc40 	bl	80083c4 <__mcmp>
 8007b44:	4602      	mov	r2, r0
 8007b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b48:	4639      	mov	r1, r7
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007b50:	f000 f9fa 	bl	8007f48 <_Bfree>
 8007b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b58:	9f08      	ldr	r7, [sp, #32]
 8007b5a:	ea43 0102 	orr.w	r1, r3, r2
 8007b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b60:	430b      	orrs	r3, r1
 8007b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b64:	d10d      	bne.n	8007b82 <_dtoa_r+0xa82>
 8007b66:	2b39      	cmp	r3, #57	; 0x39
 8007b68:	d029      	beq.n	8007bbe <_dtoa_r+0xabe>
 8007b6a:	f1b9 0f00 	cmp.w	r9, #0
 8007b6e:	dd01      	ble.n	8007b74 <_dtoa_r+0xa74>
 8007b70:	9b06      	ldr	r3, [sp, #24]
 8007b72:	3331      	adds	r3, #49	; 0x31
 8007b74:	9a04      	ldr	r2, [sp, #16]
 8007b76:	7013      	strb	r3, [r2, #0]
 8007b78:	e776      	b.n	8007a68 <_dtoa_r+0x968>
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	e7b9      	b.n	8007af2 <_dtoa_r+0x9f2>
 8007b7e:	2201      	movs	r2, #1
 8007b80:	e7e2      	b.n	8007b48 <_dtoa_r+0xa48>
 8007b82:	f1b9 0f00 	cmp.w	r9, #0
 8007b86:	db06      	blt.n	8007b96 <_dtoa_r+0xa96>
 8007b88:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007b8a:	ea41 0909 	orr.w	r9, r1, r9
 8007b8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b90:	ea59 0101 	orrs.w	r1, r9, r1
 8007b94:	d120      	bne.n	8007bd8 <_dtoa_r+0xad8>
 8007b96:	2a00      	cmp	r2, #0
 8007b98:	ddec      	ble.n	8007b74 <_dtoa_r+0xa74>
 8007b9a:	4659      	mov	r1, fp
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	9308      	str	r3, [sp, #32]
 8007ba2:	f000 fb9f 	bl	80082e4 <__lshift>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	4683      	mov	fp, r0
 8007baa:	f000 fc0b 	bl	80083c4 <__mcmp>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	9b08      	ldr	r3, [sp, #32]
 8007bb2:	dc02      	bgt.n	8007bba <_dtoa_r+0xaba>
 8007bb4:	d1de      	bne.n	8007b74 <_dtoa_r+0xa74>
 8007bb6:	07da      	lsls	r2, r3, #31
 8007bb8:	d5dc      	bpl.n	8007b74 <_dtoa_r+0xa74>
 8007bba:	2b39      	cmp	r3, #57	; 0x39
 8007bbc:	d1d8      	bne.n	8007b70 <_dtoa_r+0xa70>
 8007bbe:	2339      	movs	r3, #57	; 0x39
 8007bc0:	9a04      	ldr	r2, [sp, #16]
 8007bc2:	7013      	strb	r3, [r2, #0]
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	461f      	mov	r7, r3
 8007bc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	2a39      	cmp	r2, #57	; 0x39
 8007bd0:	d050      	beq.n	8007c74 <_dtoa_r+0xb74>
 8007bd2:	3201      	adds	r2, #1
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	e747      	b.n	8007a68 <_dtoa_r+0x968>
 8007bd8:	2a00      	cmp	r2, #0
 8007bda:	dd03      	ble.n	8007be4 <_dtoa_r+0xae4>
 8007bdc:	2b39      	cmp	r3, #57	; 0x39
 8007bde:	d0ee      	beq.n	8007bbe <_dtoa_r+0xabe>
 8007be0:	3301      	adds	r3, #1
 8007be2:	e7c7      	b.n	8007b74 <_dtoa_r+0xa74>
 8007be4:	9a08      	ldr	r2, [sp, #32]
 8007be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007be8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007bec:	428a      	cmp	r2, r1
 8007bee:	d02a      	beq.n	8007c46 <_dtoa_r+0xb46>
 8007bf0:	4659      	mov	r1, fp
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	220a      	movs	r2, #10
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f000 f9c8 	bl	8007f8c <__multadd>
 8007bfc:	45b0      	cmp	r8, r6
 8007bfe:	4683      	mov	fp, r0
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	f04f 020a 	mov.w	r2, #10
 8007c08:	4641      	mov	r1, r8
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	d107      	bne.n	8007c1e <_dtoa_r+0xb1e>
 8007c0e:	f000 f9bd 	bl	8007f8c <__multadd>
 8007c12:	4680      	mov	r8, r0
 8007c14:	4606      	mov	r6, r0
 8007c16:	9b08      	ldr	r3, [sp, #32]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	9308      	str	r3, [sp, #32]
 8007c1c:	e775      	b.n	8007b0a <_dtoa_r+0xa0a>
 8007c1e:	f000 f9b5 	bl	8007f8c <__multadd>
 8007c22:	4631      	mov	r1, r6
 8007c24:	4680      	mov	r8, r0
 8007c26:	2300      	movs	r3, #0
 8007c28:	220a      	movs	r2, #10
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f000 f9ae 	bl	8007f8c <__multadd>
 8007c30:	4606      	mov	r6, r0
 8007c32:	e7f0      	b.n	8007c16 <_dtoa_r+0xb16>
 8007c34:	f1b9 0f00 	cmp.w	r9, #0
 8007c38:	bfcc      	ite	gt
 8007c3a:	464f      	movgt	r7, r9
 8007c3c:	2701      	movle	r7, #1
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	9a03      	ldr	r2, [sp, #12]
 8007c44:	4417      	add	r7, r2
 8007c46:	4659      	mov	r1, fp
 8007c48:	2201      	movs	r2, #1
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	9308      	str	r3, [sp, #32]
 8007c4e:	f000 fb49 	bl	80082e4 <__lshift>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4683      	mov	fp, r0
 8007c56:	f000 fbb5 	bl	80083c4 <__mcmp>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	dcb2      	bgt.n	8007bc4 <_dtoa_r+0xac4>
 8007c5e:	d102      	bne.n	8007c66 <_dtoa_r+0xb66>
 8007c60:	9b08      	ldr	r3, [sp, #32]
 8007c62:	07db      	lsls	r3, r3, #31
 8007c64:	d4ae      	bmi.n	8007bc4 <_dtoa_r+0xac4>
 8007c66:	463b      	mov	r3, r7
 8007c68:	461f      	mov	r7, r3
 8007c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c6e:	2a30      	cmp	r2, #48	; 0x30
 8007c70:	d0fa      	beq.n	8007c68 <_dtoa_r+0xb68>
 8007c72:	e6f9      	b.n	8007a68 <_dtoa_r+0x968>
 8007c74:	9a03      	ldr	r2, [sp, #12]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d1a5      	bne.n	8007bc6 <_dtoa_r+0xac6>
 8007c7a:	2331      	movs	r3, #49	; 0x31
 8007c7c:	f10a 0a01 	add.w	sl, sl, #1
 8007c80:	e779      	b.n	8007b76 <_dtoa_r+0xa76>
 8007c82:	4b14      	ldr	r3, [pc, #80]	; (8007cd4 <_dtoa_r+0xbd4>)
 8007c84:	f7ff baa8 	b.w	80071d8 <_dtoa_r+0xd8>
 8007c88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f47f aa81 	bne.w	8007192 <_dtoa_r+0x92>
 8007c90:	4b11      	ldr	r3, [pc, #68]	; (8007cd8 <_dtoa_r+0xbd8>)
 8007c92:	f7ff baa1 	b.w	80071d8 <_dtoa_r+0xd8>
 8007c96:	f1b9 0f00 	cmp.w	r9, #0
 8007c9a:	dc03      	bgt.n	8007ca4 <_dtoa_r+0xba4>
 8007c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	f73f aecb 	bgt.w	8007a3a <_dtoa_r+0x93a>
 8007ca4:	9f03      	ldr	r7, [sp, #12]
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4658      	mov	r0, fp
 8007caa:	f7ff f99d 	bl	8006fe8 <quorem>
 8007cae:	9a03      	ldr	r2, [sp, #12]
 8007cb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007cb4:	f807 3b01 	strb.w	r3, [r7], #1
 8007cb8:	1aba      	subs	r2, r7, r2
 8007cba:	4591      	cmp	r9, r2
 8007cbc:	ddba      	ble.n	8007c34 <_dtoa_r+0xb34>
 8007cbe:	4659      	mov	r1, fp
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	220a      	movs	r2, #10
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 f961 	bl	8007f8c <__multadd>
 8007cca:	4683      	mov	fp, r0
 8007ccc:	e7eb      	b.n	8007ca6 <_dtoa_r+0xba6>
 8007cce:	bf00      	nop
 8007cd0:	08008f1f 	.word	0x08008f1f
 8007cd4:	08008e7c 	.word	0x08008e7c
 8007cd8:	08008ea0 	.word	0x08008ea0

08007cdc <__sflush_r>:
 8007cdc:	898a      	ldrh	r2, [r1, #12]
 8007cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	0710      	lsls	r0, r2, #28
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	d457      	bmi.n	8007d98 <__sflush_r+0xbc>
 8007ce8:	684b      	ldr	r3, [r1, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dc04      	bgt.n	8007cf8 <__sflush_r+0x1c>
 8007cee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	dc01      	bgt.n	8007cf8 <__sflush_r+0x1c>
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cfa:	2e00      	cmp	r6, #0
 8007cfc:	d0fa      	beq.n	8007cf4 <__sflush_r+0x18>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d04:	682f      	ldr	r7, [r5, #0]
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	d032      	beq.n	8007d70 <__sflush_r+0x94>
 8007d0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d0c:	89a3      	ldrh	r3, [r4, #12]
 8007d0e:	075a      	lsls	r2, r3, #29
 8007d10:	d505      	bpl.n	8007d1e <__sflush_r+0x42>
 8007d12:	6863      	ldr	r3, [r4, #4]
 8007d14:	1ac0      	subs	r0, r0, r3
 8007d16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d18:	b10b      	cbz	r3, 8007d1e <__sflush_r+0x42>
 8007d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d1c:	1ac0      	subs	r0, r0, r3
 8007d1e:	2300      	movs	r3, #0
 8007d20:	4602      	mov	r2, r0
 8007d22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d24:	4628      	mov	r0, r5
 8007d26:	6a21      	ldr	r1, [r4, #32]
 8007d28:	47b0      	blx	r6
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	89a3      	ldrh	r3, [r4, #12]
 8007d2e:	d106      	bne.n	8007d3e <__sflush_r+0x62>
 8007d30:	6829      	ldr	r1, [r5, #0]
 8007d32:	291d      	cmp	r1, #29
 8007d34:	d82c      	bhi.n	8007d90 <__sflush_r+0xb4>
 8007d36:	4a29      	ldr	r2, [pc, #164]	; (8007ddc <__sflush_r+0x100>)
 8007d38:	40ca      	lsrs	r2, r1
 8007d3a:	07d6      	lsls	r6, r2, #31
 8007d3c:	d528      	bpl.n	8007d90 <__sflush_r+0xb4>
 8007d3e:	2200      	movs	r2, #0
 8007d40:	6062      	str	r2, [r4, #4]
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	04d9      	lsls	r1, r3, #19
 8007d46:	6022      	str	r2, [r4, #0]
 8007d48:	d504      	bpl.n	8007d54 <__sflush_r+0x78>
 8007d4a:	1c42      	adds	r2, r0, #1
 8007d4c:	d101      	bne.n	8007d52 <__sflush_r+0x76>
 8007d4e:	682b      	ldr	r3, [r5, #0]
 8007d50:	b903      	cbnz	r3, 8007d54 <__sflush_r+0x78>
 8007d52:	6560      	str	r0, [r4, #84]	; 0x54
 8007d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d56:	602f      	str	r7, [r5, #0]
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	d0cb      	beq.n	8007cf4 <__sflush_r+0x18>
 8007d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d60:	4299      	cmp	r1, r3
 8007d62:	d002      	beq.n	8007d6a <__sflush_r+0x8e>
 8007d64:	4628      	mov	r0, r5
 8007d66:	f000 fc45 	bl	80085f4 <_free_r>
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d6e:	e7c2      	b.n	8007cf6 <__sflush_r+0x1a>
 8007d70:	6a21      	ldr	r1, [r4, #32]
 8007d72:	2301      	movs	r3, #1
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b0      	blx	r6
 8007d78:	1c41      	adds	r1, r0, #1
 8007d7a:	d1c7      	bne.n	8007d0c <__sflush_r+0x30>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0c4      	beq.n	8007d0c <__sflush_r+0x30>
 8007d82:	2b1d      	cmp	r3, #29
 8007d84:	d001      	beq.n	8007d8a <__sflush_r+0xae>
 8007d86:	2b16      	cmp	r3, #22
 8007d88:	d101      	bne.n	8007d8e <__sflush_r+0xb2>
 8007d8a:	602f      	str	r7, [r5, #0]
 8007d8c:	e7b2      	b.n	8007cf4 <__sflush_r+0x18>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	e7ae      	b.n	8007cf6 <__sflush_r+0x1a>
 8007d98:	690f      	ldr	r7, [r1, #16]
 8007d9a:	2f00      	cmp	r7, #0
 8007d9c:	d0aa      	beq.n	8007cf4 <__sflush_r+0x18>
 8007d9e:	0793      	lsls	r3, r2, #30
 8007da0:	bf18      	it	ne
 8007da2:	2300      	movne	r3, #0
 8007da4:	680e      	ldr	r6, [r1, #0]
 8007da6:	bf08      	it	eq
 8007da8:	694b      	ldreq	r3, [r1, #20]
 8007daa:	1bf6      	subs	r6, r6, r7
 8007dac:	600f      	str	r7, [r1, #0]
 8007dae:	608b      	str	r3, [r1, #8]
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	dd9f      	ble.n	8007cf4 <__sflush_r+0x18>
 8007db4:	4633      	mov	r3, r6
 8007db6:	463a      	mov	r2, r7
 8007db8:	4628      	mov	r0, r5
 8007dba:	6a21      	ldr	r1, [r4, #32]
 8007dbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007dc0:	47e0      	blx	ip
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	dc06      	bgt.n	8007dd4 <__sflush_r+0xf8>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	e790      	b.n	8007cf6 <__sflush_r+0x1a>
 8007dd4:	4407      	add	r7, r0
 8007dd6:	1a36      	subs	r6, r6, r0
 8007dd8:	e7ea      	b.n	8007db0 <__sflush_r+0xd4>
 8007dda:	bf00      	nop
 8007ddc:	20400001 	.word	0x20400001

08007de0 <_fflush_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	690b      	ldr	r3, [r1, #16]
 8007de4:	4605      	mov	r5, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	b913      	cbnz	r3, 8007df0 <_fflush_r+0x10>
 8007dea:	2500      	movs	r5, #0
 8007dec:	4628      	mov	r0, r5
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	b118      	cbz	r0, 8007dfa <_fflush_r+0x1a>
 8007df2:	6983      	ldr	r3, [r0, #24]
 8007df4:	b90b      	cbnz	r3, 8007dfa <_fflush_r+0x1a>
 8007df6:	f7fe fa47 	bl	8006288 <__sinit>
 8007dfa:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <_fflush_r+0x6c>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	d11b      	bne.n	8007e38 <_fflush_r+0x58>
 8007e00:	686c      	ldr	r4, [r5, #4]
 8007e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0ef      	beq.n	8007dea <_fflush_r+0xa>
 8007e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e0c:	07d0      	lsls	r0, r2, #31
 8007e0e:	d404      	bmi.n	8007e1a <_fflush_r+0x3a>
 8007e10:	0599      	lsls	r1, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_fflush_r+0x3a>
 8007e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e16:	f7fe fafa 	bl	800640e <__retarget_lock_acquire_recursive>
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f7ff ff5d 	bl	8007cdc <__sflush_r>
 8007e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e24:	4605      	mov	r5, r0
 8007e26:	07da      	lsls	r2, r3, #31
 8007e28:	d4e0      	bmi.n	8007dec <_fflush_r+0xc>
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	059b      	lsls	r3, r3, #22
 8007e2e:	d4dd      	bmi.n	8007dec <_fflush_r+0xc>
 8007e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e32:	f7fe faed 	bl	8006410 <__retarget_lock_release_recursive>
 8007e36:	e7d9      	b.n	8007dec <_fflush_r+0xc>
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <_fflush_r+0x70>)
 8007e3a:	429c      	cmp	r4, r3
 8007e3c:	d101      	bne.n	8007e42 <_fflush_r+0x62>
 8007e3e:	68ac      	ldr	r4, [r5, #8]
 8007e40:	e7df      	b.n	8007e02 <_fflush_r+0x22>
 8007e42:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <_fflush_r+0x74>)
 8007e44:	429c      	cmp	r4, r3
 8007e46:	bf08      	it	eq
 8007e48:	68ec      	ldreq	r4, [r5, #12]
 8007e4a:	e7da      	b.n	8007e02 <_fflush_r+0x22>
 8007e4c:	08008e28 	.word	0x08008e28
 8007e50:	08008e48 	.word	0x08008e48
 8007e54:	08008e08 	.word	0x08008e08

08007e58 <_localeconv_r>:
 8007e58:	4800      	ldr	r0, [pc, #0]	; (8007e5c <_localeconv_r+0x4>)
 8007e5a:	4770      	bx	lr
 8007e5c:	20000178 	.word	0x20000178

08007e60 <_lseek_r>:
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4604      	mov	r4, r0
 8007e64:	4608      	mov	r0, r1
 8007e66:	4611      	mov	r1, r2
 8007e68:	2200      	movs	r2, #0
 8007e6a:	4d05      	ldr	r5, [pc, #20]	; (8007e80 <_lseek_r+0x20>)
 8007e6c:	602a      	str	r2, [r5, #0]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f7fa fb8c 	bl	800258c <_lseek>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	d102      	bne.n	8007e7e <_lseek_r+0x1e>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	b103      	cbz	r3, 8007e7e <_lseek_r+0x1e>
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	bd38      	pop	{r3, r4, r5, pc}
 8007e80:	20001eec 	.word	0x20001eec

08007e84 <malloc>:
 8007e84:	4b02      	ldr	r3, [pc, #8]	; (8007e90 <malloc+0xc>)
 8007e86:	4601      	mov	r1, r0
 8007e88:	6818      	ldr	r0, [r3, #0]
 8007e8a:	f7fe baf9 	b.w	8006480 <_malloc_r>
 8007e8e:	bf00      	nop
 8007e90:	20000024 	.word	0x20000024

08007e94 <memchr>:
 8007e94:	4603      	mov	r3, r0
 8007e96:	b510      	push	{r4, lr}
 8007e98:	b2c9      	uxtb	r1, r1
 8007e9a:	4402      	add	r2, r0
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	d101      	bne.n	8007ea6 <memchr+0x12>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e003      	b.n	8007eae <memchr+0x1a>
 8007ea6:	7804      	ldrb	r4, [r0, #0]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	428c      	cmp	r4, r1
 8007eac:	d1f6      	bne.n	8007e9c <memchr+0x8>
 8007eae:	bd10      	pop	{r4, pc}

08007eb0 <__malloc_lock>:
 8007eb0:	4801      	ldr	r0, [pc, #4]	; (8007eb8 <__malloc_lock+0x8>)
 8007eb2:	f7fe baac 	b.w	800640e <__retarget_lock_acquire_recursive>
 8007eb6:	bf00      	nop
 8007eb8:	20001ee0 	.word	0x20001ee0

08007ebc <__malloc_unlock>:
 8007ebc:	4801      	ldr	r0, [pc, #4]	; (8007ec4 <__malloc_unlock+0x8>)
 8007ebe:	f7fe baa7 	b.w	8006410 <__retarget_lock_release_recursive>
 8007ec2:	bf00      	nop
 8007ec4:	20001ee0 	.word	0x20001ee0

08007ec8 <_Balloc>:
 8007ec8:	b570      	push	{r4, r5, r6, lr}
 8007eca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ecc:	4604      	mov	r4, r0
 8007ece:	460d      	mov	r5, r1
 8007ed0:	b976      	cbnz	r6, 8007ef0 <_Balloc+0x28>
 8007ed2:	2010      	movs	r0, #16
 8007ed4:	f7ff ffd6 	bl	8007e84 <malloc>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	6260      	str	r0, [r4, #36]	; 0x24
 8007edc:	b920      	cbnz	r0, 8007ee8 <_Balloc+0x20>
 8007ede:	2166      	movs	r1, #102	; 0x66
 8007ee0:	4b17      	ldr	r3, [pc, #92]	; (8007f40 <_Balloc+0x78>)
 8007ee2:	4818      	ldr	r0, [pc, #96]	; (8007f44 <_Balloc+0x7c>)
 8007ee4:	f000 fbe0 	bl	80086a8 <__assert_func>
 8007ee8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eec:	6006      	str	r6, [r0, #0]
 8007eee:	60c6      	str	r6, [r0, #12]
 8007ef0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ef2:	68f3      	ldr	r3, [r6, #12]
 8007ef4:	b183      	cbz	r3, 8007f18 <_Balloc+0x50>
 8007ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007efe:	b9b8      	cbnz	r0, 8007f30 <_Balloc+0x68>
 8007f00:	2101      	movs	r1, #1
 8007f02:	fa01 f605 	lsl.w	r6, r1, r5
 8007f06:	1d72      	adds	r2, r6, #5
 8007f08:	4620      	mov	r0, r4
 8007f0a:	0092      	lsls	r2, r2, #2
 8007f0c:	f000 fb5e 	bl	80085cc <_calloc_r>
 8007f10:	b160      	cbz	r0, 8007f2c <_Balloc+0x64>
 8007f12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f16:	e00e      	b.n	8007f36 <_Balloc+0x6e>
 8007f18:	2221      	movs	r2, #33	; 0x21
 8007f1a:	2104      	movs	r1, #4
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fb55 	bl	80085cc <_calloc_r>
 8007f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f24:	60f0      	str	r0, [r6, #12]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e4      	bne.n	8007ef6 <_Balloc+0x2e>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	6802      	ldr	r2, [r0, #0]
 8007f32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f36:	2300      	movs	r3, #0
 8007f38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f3c:	e7f7      	b.n	8007f2e <_Balloc+0x66>
 8007f3e:	bf00      	nop
 8007f40:	08008ead 	.word	0x08008ead
 8007f44:	08008f30 	.word	0x08008f30

08007f48 <_Bfree>:
 8007f48:	b570      	push	{r4, r5, r6, lr}
 8007f4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	b976      	cbnz	r6, 8007f70 <_Bfree+0x28>
 8007f52:	2010      	movs	r0, #16
 8007f54:	f7ff ff96 	bl	8007e84 <malloc>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	6268      	str	r0, [r5, #36]	; 0x24
 8007f5c:	b920      	cbnz	r0, 8007f68 <_Bfree+0x20>
 8007f5e:	218a      	movs	r1, #138	; 0x8a
 8007f60:	4b08      	ldr	r3, [pc, #32]	; (8007f84 <_Bfree+0x3c>)
 8007f62:	4809      	ldr	r0, [pc, #36]	; (8007f88 <_Bfree+0x40>)
 8007f64:	f000 fba0 	bl	80086a8 <__assert_func>
 8007f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f6c:	6006      	str	r6, [r0, #0]
 8007f6e:	60c6      	str	r6, [r0, #12]
 8007f70:	b13c      	cbz	r4, 8007f82 <_Bfree+0x3a>
 8007f72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f74:	6862      	ldr	r2, [r4, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f7c:	6021      	str	r1, [r4, #0]
 8007f7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f82:	bd70      	pop	{r4, r5, r6, pc}
 8007f84:	08008ead 	.word	0x08008ead
 8007f88:	08008f30 	.word	0x08008f30

08007f8c <__multadd>:
 8007f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f90:	4607      	mov	r7, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	461e      	mov	r6, r3
 8007f96:	2000      	movs	r0, #0
 8007f98:	690d      	ldr	r5, [r1, #16]
 8007f9a:	f101 0c14 	add.w	ip, r1, #20
 8007f9e:	f8dc 3000 	ldr.w	r3, [ip]
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	b299      	uxth	r1, r3
 8007fa6:	fb02 6101 	mla	r1, r2, r1, r6
 8007faa:	0c1e      	lsrs	r6, r3, #16
 8007fac:	0c0b      	lsrs	r3, r1, #16
 8007fae:	fb02 3306 	mla	r3, r2, r6, r3
 8007fb2:	b289      	uxth	r1, r1
 8007fb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fb8:	4285      	cmp	r5, r0
 8007fba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8007fc2:	dcec      	bgt.n	8007f9e <__multadd+0x12>
 8007fc4:	b30e      	cbz	r6, 800800a <__multadd+0x7e>
 8007fc6:	68a3      	ldr	r3, [r4, #8]
 8007fc8:	42ab      	cmp	r3, r5
 8007fca:	dc19      	bgt.n	8008000 <__multadd+0x74>
 8007fcc:	6861      	ldr	r1, [r4, #4]
 8007fce:	4638      	mov	r0, r7
 8007fd0:	3101      	adds	r1, #1
 8007fd2:	f7ff ff79 	bl	8007ec8 <_Balloc>
 8007fd6:	4680      	mov	r8, r0
 8007fd8:	b928      	cbnz	r0, 8007fe6 <__multadd+0x5a>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	21b5      	movs	r1, #181	; 0xb5
 8007fde:	4b0c      	ldr	r3, [pc, #48]	; (8008010 <__multadd+0x84>)
 8007fe0:	480c      	ldr	r0, [pc, #48]	; (8008014 <__multadd+0x88>)
 8007fe2:	f000 fb61 	bl	80086a8 <__assert_func>
 8007fe6:	6922      	ldr	r2, [r4, #16]
 8007fe8:	f104 010c 	add.w	r1, r4, #12
 8007fec:	3202      	adds	r2, #2
 8007fee:	0092      	lsls	r2, r2, #2
 8007ff0:	300c      	adds	r0, #12
 8007ff2:	f7fe fa0e 	bl	8006412 <memcpy>
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f7ff ffa5 	bl	8007f48 <_Bfree>
 8007ffe:	4644      	mov	r4, r8
 8008000:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008004:	3501      	adds	r5, #1
 8008006:	615e      	str	r6, [r3, #20]
 8008008:	6125      	str	r5, [r4, #16]
 800800a:	4620      	mov	r0, r4
 800800c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008010:	08008f1f 	.word	0x08008f1f
 8008014:	08008f30 	.word	0x08008f30

08008018 <__hi0bits>:
 8008018:	0c02      	lsrs	r2, r0, #16
 800801a:	0412      	lsls	r2, r2, #16
 800801c:	4603      	mov	r3, r0
 800801e:	b9ca      	cbnz	r2, 8008054 <__hi0bits+0x3c>
 8008020:	0403      	lsls	r3, r0, #16
 8008022:	2010      	movs	r0, #16
 8008024:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008028:	bf04      	itt	eq
 800802a:	021b      	lsleq	r3, r3, #8
 800802c:	3008      	addeq	r0, #8
 800802e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008032:	bf04      	itt	eq
 8008034:	011b      	lsleq	r3, r3, #4
 8008036:	3004      	addeq	r0, #4
 8008038:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800803c:	bf04      	itt	eq
 800803e:	009b      	lsleq	r3, r3, #2
 8008040:	3002      	addeq	r0, #2
 8008042:	2b00      	cmp	r3, #0
 8008044:	db05      	blt.n	8008052 <__hi0bits+0x3a>
 8008046:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800804a:	f100 0001 	add.w	r0, r0, #1
 800804e:	bf08      	it	eq
 8008050:	2020      	moveq	r0, #32
 8008052:	4770      	bx	lr
 8008054:	2000      	movs	r0, #0
 8008056:	e7e5      	b.n	8008024 <__hi0bits+0xc>

08008058 <__lo0bits>:
 8008058:	6803      	ldr	r3, [r0, #0]
 800805a:	4602      	mov	r2, r0
 800805c:	f013 0007 	ands.w	r0, r3, #7
 8008060:	d00b      	beq.n	800807a <__lo0bits+0x22>
 8008062:	07d9      	lsls	r1, r3, #31
 8008064:	d421      	bmi.n	80080aa <__lo0bits+0x52>
 8008066:	0798      	lsls	r0, r3, #30
 8008068:	bf49      	itett	mi
 800806a:	085b      	lsrmi	r3, r3, #1
 800806c:	089b      	lsrpl	r3, r3, #2
 800806e:	2001      	movmi	r0, #1
 8008070:	6013      	strmi	r3, [r2, #0]
 8008072:	bf5c      	itt	pl
 8008074:	2002      	movpl	r0, #2
 8008076:	6013      	strpl	r3, [r2, #0]
 8008078:	4770      	bx	lr
 800807a:	b299      	uxth	r1, r3
 800807c:	b909      	cbnz	r1, 8008082 <__lo0bits+0x2a>
 800807e:	2010      	movs	r0, #16
 8008080:	0c1b      	lsrs	r3, r3, #16
 8008082:	b2d9      	uxtb	r1, r3
 8008084:	b909      	cbnz	r1, 800808a <__lo0bits+0x32>
 8008086:	3008      	adds	r0, #8
 8008088:	0a1b      	lsrs	r3, r3, #8
 800808a:	0719      	lsls	r1, r3, #28
 800808c:	bf04      	itt	eq
 800808e:	091b      	lsreq	r3, r3, #4
 8008090:	3004      	addeq	r0, #4
 8008092:	0799      	lsls	r1, r3, #30
 8008094:	bf04      	itt	eq
 8008096:	089b      	lsreq	r3, r3, #2
 8008098:	3002      	addeq	r0, #2
 800809a:	07d9      	lsls	r1, r3, #31
 800809c:	d403      	bmi.n	80080a6 <__lo0bits+0x4e>
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	f100 0001 	add.w	r0, r0, #1
 80080a4:	d003      	beq.n	80080ae <__lo0bits+0x56>
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	4770      	bx	lr
 80080aa:	2000      	movs	r0, #0
 80080ac:	4770      	bx	lr
 80080ae:	2020      	movs	r0, #32
 80080b0:	4770      	bx	lr
	...

080080b4 <__i2b>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	460c      	mov	r4, r1
 80080b8:	2101      	movs	r1, #1
 80080ba:	f7ff ff05 	bl	8007ec8 <_Balloc>
 80080be:	4602      	mov	r2, r0
 80080c0:	b928      	cbnz	r0, 80080ce <__i2b+0x1a>
 80080c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080c6:	4b04      	ldr	r3, [pc, #16]	; (80080d8 <__i2b+0x24>)
 80080c8:	4804      	ldr	r0, [pc, #16]	; (80080dc <__i2b+0x28>)
 80080ca:	f000 faed 	bl	80086a8 <__assert_func>
 80080ce:	2301      	movs	r3, #1
 80080d0:	6144      	str	r4, [r0, #20]
 80080d2:	6103      	str	r3, [r0, #16]
 80080d4:	bd10      	pop	{r4, pc}
 80080d6:	bf00      	nop
 80080d8:	08008f1f 	.word	0x08008f1f
 80080dc:	08008f30 	.word	0x08008f30

080080e0 <__multiply>:
 80080e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	4691      	mov	r9, r2
 80080e6:	690a      	ldr	r2, [r1, #16]
 80080e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080ec:	460c      	mov	r4, r1
 80080ee:	429a      	cmp	r2, r3
 80080f0:	bfbe      	ittt	lt
 80080f2:	460b      	movlt	r3, r1
 80080f4:	464c      	movlt	r4, r9
 80080f6:	4699      	movlt	r9, r3
 80080f8:	6927      	ldr	r7, [r4, #16]
 80080fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80080fe:	68a3      	ldr	r3, [r4, #8]
 8008100:	6861      	ldr	r1, [r4, #4]
 8008102:	eb07 060a 	add.w	r6, r7, sl
 8008106:	42b3      	cmp	r3, r6
 8008108:	b085      	sub	sp, #20
 800810a:	bfb8      	it	lt
 800810c:	3101      	addlt	r1, #1
 800810e:	f7ff fedb 	bl	8007ec8 <_Balloc>
 8008112:	b930      	cbnz	r0, 8008122 <__multiply+0x42>
 8008114:	4602      	mov	r2, r0
 8008116:	f240 115d 	movw	r1, #349	; 0x15d
 800811a:	4b43      	ldr	r3, [pc, #268]	; (8008228 <__multiply+0x148>)
 800811c:	4843      	ldr	r0, [pc, #268]	; (800822c <__multiply+0x14c>)
 800811e:	f000 fac3 	bl	80086a8 <__assert_func>
 8008122:	f100 0514 	add.w	r5, r0, #20
 8008126:	462b      	mov	r3, r5
 8008128:	2200      	movs	r2, #0
 800812a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800812e:	4543      	cmp	r3, r8
 8008130:	d321      	bcc.n	8008176 <__multiply+0x96>
 8008132:	f104 0314 	add.w	r3, r4, #20
 8008136:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800813a:	f109 0314 	add.w	r3, r9, #20
 800813e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008142:	9202      	str	r2, [sp, #8]
 8008144:	1b3a      	subs	r2, r7, r4
 8008146:	3a15      	subs	r2, #21
 8008148:	f022 0203 	bic.w	r2, r2, #3
 800814c:	3204      	adds	r2, #4
 800814e:	f104 0115 	add.w	r1, r4, #21
 8008152:	428f      	cmp	r7, r1
 8008154:	bf38      	it	cc
 8008156:	2204      	movcc	r2, #4
 8008158:	9201      	str	r2, [sp, #4]
 800815a:	9a02      	ldr	r2, [sp, #8]
 800815c:	9303      	str	r3, [sp, #12]
 800815e:	429a      	cmp	r2, r3
 8008160:	d80c      	bhi.n	800817c <__multiply+0x9c>
 8008162:	2e00      	cmp	r6, #0
 8008164:	dd03      	ble.n	800816e <__multiply+0x8e>
 8008166:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800816a:	2b00      	cmp	r3, #0
 800816c:	d059      	beq.n	8008222 <__multiply+0x142>
 800816e:	6106      	str	r6, [r0, #16]
 8008170:	b005      	add	sp, #20
 8008172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008176:	f843 2b04 	str.w	r2, [r3], #4
 800817a:	e7d8      	b.n	800812e <__multiply+0x4e>
 800817c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008180:	f1ba 0f00 	cmp.w	sl, #0
 8008184:	d023      	beq.n	80081ce <__multiply+0xee>
 8008186:	46a9      	mov	r9, r5
 8008188:	f04f 0c00 	mov.w	ip, #0
 800818c:	f104 0e14 	add.w	lr, r4, #20
 8008190:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008194:	f8d9 1000 	ldr.w	r1, [r9]
 8008198:	fa1f fb82 	uxth.w	fp, r2
 800819c:	b289      	uxth	r1, r1
 800819e:	fb0a 110b 	mla	r1, sl, fp, r1
 80081a2:	4461      	add	r1, ip
 80081a4:	f8d9 c000 	ldr.w	ip, [r9]
 80081a8:	0c12      	lsrs	r2, r2, #16
 80081aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80081ae:	fb0a c202 	mla	r2, sl, r2, ip
 80081b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081b6:	b289      	uxth	r1, r1
 80081b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081bc:	4577      	cmp	r7, lr
 80081be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081c2:	f849 1b04 	str.w	r1, [r9], #4
 80081c6:	d8e3      	bhi.n	8008190 <__multiply+0xb0>
 80081c8:	9a01      	ldr	r2, [sp, #4]
 80081ca:	f845 c002 	str.w	ip, [r5, r2]
 80081ce:	9a03      	ldr	r2, [sp, #12]
 80081d0:	3304      	adds	r3, #4
 80081d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081d6:	f1b9 0f00 	cmp.w	r9, #0
 80081da:	d020      	beq.n	800821e <__multiply+0x13e>
 80081dc:	46ae      	mov	lr, r5
 80081de:	f04f 0a00 	mov.w	sl, #0
 80081e2:	6829      	ldr	r1, [r5, #0]
 80081e4:	f104 0c14 	add.w	ip, r4, #20
 80081e8:	f8bc b000 	ldrh.w	fp, [ip]
 80081ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80081f0:	b289      	uxth	r1, r1
 80081f2:	fb09 220b 	mla	r2, r9, fp, r2
 80081f6:	4492      	add	sl, r2
 80081f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80081fc:	f84e 1b04 	str.w	r1, [lr], #4
 8008200:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008204:	f8be 1000 	ldrh.w	r1, [lr]
 8008208:	0c12      	lsrs	r2, r2, #16
 800820a:	fb09 1102 	mla	r1, r9, r2, r1
 800820e:	4567      	cmp	r7, ip
 8008210:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008214:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008218:	d8e6      	bhi.n	80081e8 <__multiply+0x108>
 800821a:	9a01      	ldr	r2, [sp, #4]
 800821c:	50a9      	str	r1, [r5, r2]
 800821e:	3504      	adds	r5, #4
 8008220:	e79b      	b.n	800815a <__multiply+0x7a>
 8008222:	3e01      	subs	r6, #1
 8008224:	e79d      	b.n	8008162 <__multiply+0x82>
 8008226:	bf00      	nop
 8008228:	08008f1f 	.word	0x08008f1f
 800822c:	08008f30 	.word	0x08008f30

08008230 <__pow5mult>:
 8008230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008234:	4615      	mov	r5, r2
 8008236:	f012 0203 	ands.w	r2, r2, #3
 800823a:	4606      	mov	r6, r0
 800823c:	460f      	mov	r7, r1
 800823e:	d007      	beq.n	8008250 <__pow5mult+0x20>
 8008240:	4c25      	ldr	r4, [pc, #148]	; (80082d8 <__pow5mult+0xa8>)
 8008242:	3a01      	subs	r2, #1
 8008244:	2300      	movs	r3, #0
 8008246:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800824a:	f7ff fe9f 	bl	8007f8c <__multadd>
 800824e:	4607      	mov	r7, r0
 8008250:	10ad      	asrs	r5, r5, #2
 8008252:	d03d      	beq.n	80082d0 <__pow5mult+0xa0>
 8008254:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008256:	b97c      	cbnz	r4, 8008278 <__pow5mult+0x48>
 8008258:	2010      	movs	r0, #16
 800825a:	f7ff fe13 	bl	8007e84 <malloc>
 800825e:	4602      	mov	r2, r0
 8008260:	6270      	str	r0, [r6, #36]	; 0x24
 8008262:	b928      	cbnz	r0, 8008270 <__pow5mult+0x40>
 8008264:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008268:	4b1c      	ldr	r3, [pc, #112]	; (80082dc <__pow5mult+0xac>)
 800826a:	481d      	ldr	r0, [pc, #116]	; (80082e0 <__pow5mult+0xb0>)
 800826c:	f000 fa1c 	bl	80086a8 <__assert_func>
 8008270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008274:	6004      	str	r4, [r0, #0]
 8008276:	60c4      	str	r4, [r0, #12]
 8008278:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800827c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008280:	b94c      	cbnz	r4, 8008296 <__pow5mult+0x66>
 8008282:	f240 2171 	movw	r1, #625	; 0x271
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ff14 	bl	80080b4 <__i2b>
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	f8c8 0008 	str.w	r0, [r8, #8]
 8008294:	6003      	str	r3, [r0, #0]
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	07eb      	lsls	r3, r5, #31
 800829c:	d50a      	bpl.n	80082b4 <__pow5mult+0x84>
 800829e:	4639      	mov	r1, r7
 80082a0:	4622      	mov	r2, r4
 80082a2:	4630      	mov	r0, r6
 80082a4:	f7ff ff1c 	bl	80080e0 <__multiply>
 80082a8:	4680      	mov	r8, r0
 80082aa:	4639      	mov	r1, r7
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff fe4b 	bl	8007f48 <_Bfree>
 80082b2:	4647      	mov	r7, r8
 80082b4:	106d      	asrs	r5, r5, #1
 80082b6:	d00b      	beq.n	80082d0 <__pow5mult+0xa0>
 80082b8:	6820      	ldr	r0, [r4, #0]
 80082ba:	b938      	cbnz	r0, 80082cc <__pow5mult+0x9c>
 80082bc:	4622      	mov	r2, r4
 80082be:	4621      	mov	r1, r4
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7ff ff0d 	bl	80080e0 <__multiply>
 80082c6:	6020      	str	r0, [r4, #0]
 80082c8:	f8c0 9000 	str.w	r9, [r0]
 80082cc:	4604      	mov	r4, r0
 80082ce:	e7e4      	b.n	800829a <__pow5mult+0x6a>
 80082d0:	4638      	mov	r0, r7
 80082d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082d6:	bf00      	nop
 80082d8:	08009080 	.word	0x08009080
 80082dc:	08008ead 	.word	0x08008ead
 80082e0:	08008f30 	.word	0x08008f30

080082e4 <__lshift>:
 80082e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	460c      	mov	r4, r1
 80082ea:	4607      	mov	r7, r0
 80082ec:	4691      	mov	r9, r2
 80082ee:	6923      	ldr	r3, [r4, #16]
 80082f0:	6849      	ldr	r1, [r1, #4]
 80082f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082f6:	68a3      	ldr	r3, [r4, #8]
 80082f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082fc:	f108 0601 	add.w	r6, r8, #1
 8008300:	42b3      	cmp	r3, r6
 8008302:	db0b      	blt.n	800831c <__lshift+0x38>
 8008304:	4638      	mov	r0, r7
 8008306:	f7ff fddf 	bl	8007ec8 <_Balloc>
 800830a:	4605      	mov	r5, r0
 800830c:	b948      	cbnz	r0, 8008322 <__lshift+0x3e>
 800830e:	4602      	mov	r2, r0
 8008310:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008314:	4b29      	ldr	r3, [pc, #164]	; (80083bc <__lshift+0xd8>)
 8008316:	482a      	ldr	r0, [pc, #168]	; (80083c0 <__lshift+0xdc>)
 8008318:	f000 f9c6 	bl	80086a8 <__assert_func>
 800831c:	3101      	adds	r1, #1
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	e7ee      	b.n	8008300 <__lshift+0x1c>
 8008322:	2300      	movs	r3, #0
 8008324:	f100 0114 	add.w	r1, r0, #20
 8008328:	f100 0210 	add.w	r2, r0, #16
 800832c:	4618      	mov	r0, r3
 800832e:	4553      	cmp	r3, sl
 8008330:	db37      	blt.n	80083a2 <__lshift+0xbe>
 8008332:	6920      	ldr	r0, [r4, #16]
 8008334:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008338:	f104 0314 	add.w	r3, r4, #20
 800833c:	f019 091f 	ands.w	r9, r9, #31
 8008340:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008344:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008348:	d02f      	beq.n	80083aa <__lshift+0xc6>
 800834a:	468a      	mov	sl, r1
 800834c:	f04f 0c00 	mov.w	ip, #0
 8008350:	f1c9 0e20 	rsb	lr, r9, #32
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	fa02 f209 	lsl.w	r2, r2, r9
 800835a:	ea42 020c 	orr.w	r2, r2, ip
 800835e:	f84a 2b04 	str.w	r2, [sl], #4
 8008362:	f853 2b04 	ldr.w	r2, [r3], #4
 8008366:	4298      	cmp	r0, r3
 8008368:	fa22 fc0e 	lsr.w	ip, r2, lr
 800836c:	d8f2      	bhi.n	8008354 <__lshift+0x70>
 800836e:	1b03      	subs	r3, r0, r4
 8008370:	3b15      	subs	r3, #21
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	3304      	adds	r3, #4
 8008378:	f104 0215 	add.w	r2, r4, #21
 800837c:	4290      	cmp	r0, r2
 800837e:	bf38      	it	cc
 8008380:	2304      	movcc	r3, #4
 8008382:	f841 c003 	str.w	ip, [r1, r3]
 8008386:	f1bc 0f00 	cmp.w	ip, #0
 800838a:	d001      	beq.n	8008390 <__lshift+0xac>
 800838c:	f108 0602 	add.w	r6, r8, #2
 8008390:	3e01      	subs	r6, #1
 8008392:	4638      	mov	r0, r7
 8008394:	4621      	mov	r1, r4
 8008396:	612e      	str	r6, [r5, #16]
 8008398:	f7ff fdd6 	bl	8007f48 <_Bfree>
 800839c:	4628      	mov	r0, r5
 800839e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80083a6:	3301      	adds	r3, #1
 80083a8:	e7c1      	b.n	800832e <__lshift+0x4a>
 80083aa:	3904      	subs	r1, #4
 80083ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80083b0:	4298      	cmp	r0, r3
 80083b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80083b6:	d8f9      	bhi.n	80083ac <__lshift+0xc8>
 80083b8:	e7ea      	b.n	8008390 <__lshift+0xac>
 80083ba:	bf00      	nop
 80083bc:	08008f1f 	.word	0x08008f1f
 80083c0:	08008f30 	.word	0x08008f30

080083c4 <__mcmp>:
 80083c4:	4603      	mov	r3, r0
 80083c6:	690a      	ldr	r2, [r1, #16]
 80083c8:	6900      	ldr	r0, [r0, #16]
 80083ca:	b530      	push	{r4, r5, lr}
 80083cc:	1a80      	subs	r0, r0, r2
 80083ce:	d10d      	bne.n	80083ec <__mcmp+0x28>
 80083d0:	3314      	adds	r3, #20
 80083d2:	3114      	adds	r1, #20
 80083d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80083d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80083dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083e4:	4295      	cmp	r5, r2
 80083e6:	d002      	beq.n	80083ee <__mcmp+0x2a>
 80083e8:	d304      	bcc.n	80083f4 <__mcmp+0x30>
 80083ea:	2001      	movs	r0, #1
 80083ec:	bd30      	pop	{r4, r5, pc}
 80083ee:	42a3      	cmp	r3, r4
 80083f0:	d3f4      	bcc.n	80083dc <__mcmp+0x18>
 80083f2:	e7fb      	b.n	80083ec <__mcmp+0x28>
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	e7f8      	b.n	80083ec <__mcmp+0x28>
	...

080083fc <__mdiff>:
 80083fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	460d      	mov	r5, r1
 8008402:	4607      	mov	r7, r0
 8008404:	4611      	mov	r1, r2
 8008406:	4628      	mov	r0, r5
 8008408:	4614      	mov	r4, r2
 800840a:	f7ff ffdb 	bl	80083c4 <__mcmp>
 800840e:	1e06      	subs	r6, r0, #0
 8008410:	d111      	bne.n	8008436 <__mdiff+0x3a>
 8008412:	4631      	mov	r1, r6
 8008414:	4638      	mov	r0, r7
 8008416:	f7ff fd57 	bl	8007ec8 <_Balloc>
 800841a:	4602      	mov	r2, r0
 800841c:	b928      	cbnz	r0, 800842a <__mdiff+0x2e>
 800841e:	f240 2132 	movw	r1, #562	; 0x232
 8008422:	4b3a      	ldr	r3, [pc, #232]	; (800850c <__mdiff+0x110>)
 8008424:	483a      	ldr	r0, [pc, #232]	; (8008510 <__mdiff+0x114>)
 8008426:	f000 f93f 	bl	80086a8 <__assert_func>
 800842a:	2301      	movs	r3, #1
 800842c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008430:	4610      	mov	r0, r2
 8008432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008436:	bfa4      	itt	ge
 8008438:	4623      	movge	r3, r4
 800843a:	462c      	movge	r4, r5
 800843c:	4638      	mov	r0, r7
 800843e:	6861      	ldr	r1, [r4, #4]
 8008440:	bfa6      	itte	ge
 8008442:	461d      	movge	r5, r3
 8008444:	2600      	movge	r6, #0
 8008446:	2601      	movlt	r6, #1
 8008448:	f7ff fd3e 	bl	8007ec8 <_Balloc>
 800844c:	4602      	mov	r2, r0
 800844e:	b918      	cbnz	r0, 8008458 <__mdiff+0x5c>
 8008450:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008454:	4b2d      	ldr	r3, [pc, #180]	; (800850c <__mdiff+0x110>)
 8008456:	e7e5      	b.n	8008424 <__mdiff+0x28>
 8008458:	f102 0814 	add.w	r8, r2, #20
 800845c:	46c2      	mov	sl, r8
 800845e:	f04f 0c00 	mov.w	ip, #0
 8008462:	6927      	ldr	r7, [r4, #16]
 8008464:	60c6      	str	r6, [r0, #12]
 8008466:	692e      	ldr	r6, [r5, #16]
 8008468:	f104 0014 	add.w	r0, r4, #20
 800846c:	f105 0914 	add.w	r9, r5, #20
 8008470:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8008474:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008478:	3410      	adds	r4, #16
 800847a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800847e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008482:	fa1f f18b 	uxth.w	r1, fp
 8008486:	448c      	add	ip, r1
 8008488:	b299      	uxth	r1, r3
 800848a:	0c1b      	lsrs	r3, r3, #16
 800848c:	ebac 0101 	sub.w	r1, ip, r1
 8008490:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008494:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008498:	b289      	uxth	r1, r1
 800849a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800849e:	454e      	cmp	r6, r9
 80084a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80084a4:	f84a 3b04 	str.w	r3, [sl], #4
 80084a8:	d8e7      	bhi.n	800847a <__mdiff+0x7e>
 80084aa:	1b73      	subs	r3, r6, r5
 80084ac:	3b15      	subs	r3, #21
 80084ae:	f023 0303 	bic.w	r3, r3, #3
 80084b2:	3515      	adds	r5, #21
 80084b4:	3304      	adds	r3, #4
 80084b6:	42ae      	cmp	r6, r5
 80084b8:	bf38      	it	cc
 80084ba:	2304      	movcc	r3, #4
 80084bc:	4418      	add	r0, r3
 80084be:	4443      	add	r3, r8
 80084c0:	461e      	mov	r6, r3
 80084c2:	4605      	mov	r5, r0
 80084c4:	4575      	cmp	r5, lr
 80084c6:	d30e      	bcc.n	80084e6 <__mdiff+0xea>
 80084c8:	f10e 0103 	add.w	r1, lr, #3
 80084cc:	1a09      	subs	r1, r1, r0
 80084ce:	f021 0103 	bic.w	r1, r1, #3
 80084d2:	3803      	subs	r0, #3
 80084d4:	4586      	cmp	lr, r0
 80084d6:	bf38      	it	cc
 80084d8:	2100      	movcc	r1, #0
 80084da:	4419      	add	r1, r3
 80084dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80084e0:	b18b      	cbz	r3, 8008506 <__mdiff+0x10a>
 80084e2:	6117      	str	r7, [r2, #16]
 80084e4:	e7a4      	b.n	8008430 <__mdiff+0x34>
 80084e6:	f855 8b04 	ldr.w	r8, [r5], #4
 80084ea:	fa1f f188 	uxth.w	r1, r8
 80084ee:	4461      	add	r1, ip
 80084f0:	140c      	asrs	r4, r1, #16
 80084f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80084f6:	b289      	uxth	r1, r1
 80084f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80084fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008500:	f846 1b04 	str.w	r1, [r6], #4
 8008504:	e7de      	b.n	80084c4 <__mdiff+0xc8>
 8008506:	3f01      	subs	r7, #1
 8008508:	e7e8      	b.n	80084dc <__mdiff+0xe0>
 800850a:	bf00      	nop
 800850c:	08008f1f 	.word	0x08008f1f
 8008510:	08008f30 	.word	0x08008f30

08008514 <__d2b>:
 8008514:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008518:	2101      	movs	r1, #1
 800851a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800851e:	4690      	mov	r8, r2
 8008520:	461d      	mov	r5, r3
 8008522:	f7ff fcd1 	bl	8007ec8 <_Balloc>
 8008526:	4604      	mov	r4, r0
 8008528:	b930      	cbnz	r0, 8008538 <__d2b+0x24>
 800852a:	4602      	mov	r2, r0
 800852c:	f240 310a 	movw	r1, #778	; 0x30a
 8008530:	4b24      	ldr	r3, [pc, #144]	; (80085c4 <__d2b+0xb0>)
 8008532:	4825      	ldr	r0, [pc, #148]	; (80085c8 <__d2b+0xb4>)
 8008534:	f000 f8b8 	bl	80086a8 <__assert_func>
 8008538:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800853c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008540:	bb2d      	cbnz	r5, 800858e <__d2b+0x7a>
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	f1b8 0300 	subs.w	r3, r8, #0
 8008548:	d026      	beq.n	8008598 <__d2b+0x84>
 800854a:	4668      	mov	r0, sp
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	f7ff fd83 	bl	8008058 <__lo0bits>
 8008552:	9900      	ldr	r1, [sp, #0]
 8008554:	b1f0      	cbz	r0, 8008594 <__d2b+0x80>
 8008556:	9a01      	ldr	r2, [sp, #4]
 8008558:	f1c0 0320 	rsb	r3, r0, #32
 800855c:	fa02 f303 	lsl.w	r3, r2, r3
 8008560:	430b      	orrs	r3, r1
 8008562:	40c2      	lsrs	r2, r0
 8008564:	6163      	str	r3, [r4, #20]
 8008566:	9201      	str	r2, [sp, #4]
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	bf14      	ite	ne
 800856e:	2102      	movne	r1, #2
 8008570:	2101      	moveq	r1, #1
 8008572:	61a3      	str	r3, [r4, #24]
 8008574:	6121      	str	r1, [r4, #16]
 8008576:	b1c5      	cbz	r5, 80085aa <__d2b+0x96>
 8008578:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800857c:	4405      	add	r5, r0
 800857e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008582:	603d      	str	r5, [r7, #0]
 8008584:	6030      	str	r0, [r6, #0]
 8008586:	4620      	mov	r0, r4
 8008588:	b002      	add	sp, #8
 800858a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800858e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008592:	e7d6      	b.n	8008542 <__d2b+0x2e>
 8008594:	6161      	str	r1, [r4, #20]
 8008596:	e7e7      	b.n	8008568 <__d2b+0x54>
 8008598:	a801      	add	r0, sp, #4
 800859a:	f7ff fd5d 	bl	8008058 <__lo0bits>
 800859e:	2101      	movs	r1, #1
 80085a0:	9b01      	ldr	r3, [sp, #4]
 80085a2:	6121      	str	r1, [r4, #16]
 80085a4:	6163      	str	r3, [r4, #20]
 80085a6:	3020      	adds	r0, #32
 80085a8:	e7e5      	b.n	8008576 <__d2b+0x62>
 80085aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80085ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085b2:	6038      	str	r0, [r7, #0]
 80085b4:	6918      	ldr	r0, [r3, #16]
 80085b6:	f7ff fd2f 	bl	8008018 <__hi0bits>
 80085ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80085be:	6031      	str	r1, [r6, #0]
 80085c0:	e7e1      	b.n	8008586 <__d2b+0x72>
 80085c2:	bf00      	nop
 80085c4:	08008f1f 	.word	0x08008f1f
 80085c8:	08008f30 	.word	0x08008f30

080085cc <_calloc_r>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	fba1 5402 	umull	r5, r4, r1, r2
 80085d2:	b934      	cbnz	r4, 80085e2 <_calloc_r+0x16>
 80085d4:	4629      	mov	r1, r5
 80085d6:	f7fd ff53 	bl	8006480 <_malloc_r>
 80085da:	4606      	mov	r6, r0
 80085dc:	b928      	cbnz	r0, 80085ea <_calloc_r+0x1e>
 80085de:	4630      	mov	r0, r6
 80085e0:	bd70      	pop	{r4, r5, r6, pc}
 80085e2:	220c      	movs	r2, #12
 80085e4:	2600      	movs	r6, #0
 80085e6:	6002      	str	r2, [r0, #0]
 80085e8:	e7f9      	b.n	80085de <_calloc_r+0x12>
 80085ea:	462a      	mov	r2, r5
 80085ec:	4621      	mov	r1, r4
 80085ee:	f7fd ff1e 	bl	800642e <memset>
 80085f2:	e7f4      	b.n	80085de <_calloc_r+0x12>

080085f4 <_free_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4605      	mov	r5, r0
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d040      	beq.n	800867e <_free_r+0x8a>
 80085fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008600:	1f0c      	subs	r4, r1, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	bfb8      	it	lt
 8008606:	18e4      	addlt	r4, r4, r3
 8008608:	f7ff fc52 	bl	8007eb0 <__malloc_lock>
 800860c:	4a1c      	ldr	r2, [pc, #112]	; (8008680 <_free_r+0x8c>)
 800860e:	6813      	ldr	r3, [r2, #0]
 8008610:	b933      	cbnz	r3, 8008620 <_free_r+0x2c>
 8008612:	6063      	str	r3, [r4, #4]
 8008614:	6014      	str	r4, [r2, #0]
 8008616:	4628      	mov	r0, r5
 8008618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800861c:	f7ff bc4e 	b.w	8007ebc <__malloc_unlock>
 8008620:	42a3      	cmp	r3, r4
 8008622:	d908      	bls.n	8008636 <_free_r+0x42>
 8008624:	6820      	ldr	r0, [r4, #0]
 8008626:	1821      	adds	r1, r4, r0
 8008628:	428b      	cmp	r3, r1
 800862a:	bf01      	itttt	eq
 800862c:	6819      	ldreq	r1, [r3, #0]
 800862e:	685b      	ldreq	r3, [r3, #4]
 8008630:	1809      	addeq	r1, r1, r0
 8008632:	6021      	streq	r1, [r4, #0]
 8008634:	e7ed      	b.n	8008612 <_free_r+0x1e>
 8008636:	461a      	mov	r2, r3
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	b10b      	cbz	r3, 8008640 <_free_r+0x4c>
 800863c:	42a3      	cmp	r3, r4
 800863e:	d9fa      	bls.n	8008636 <_free_r+0x42>
 8008640:	6811      	ldr	r1, [r2, #0]
 8008642:	1850      	adds	r0, r2, r1
 8008644:	42a0      	cmp	r0, r4
 8008646:	d10b      	bne.n	8008660 <_free_r+0x6c>
 8008648:	6820      	ldr	r0, [r4, #0]
 800864a:	4401      	add	r1, r0
 800864c:	1850      	adds	r0, r2, r1
 800864e:	4283      	cmp	r3, r0
 8008650:	6011      	str	r1, [r2, #0]
 8008652:	d1e0      	bne.n	8008616 <_free_r+0x22>
 8008654:	6818      	ldr	r0, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	4401      	add	r1, r0
 800865a:	6011      	str	r1, [r2, #0]
 800865c:	6053      	str	r3, [r2, #4]
 800865e:	e7da      	b.n	8008616 <_free_r+0x22>
 8008660:	d902      	bls.n	8008668 <_free_r+0x74>
 8008662:	230c      	movs	r3, #12
 8008664:	602b      	str	r3, [r5, #0]
 8008666:	e7d6      	b.n	8008616 <_free_r+0x22>
 8008668:	6820      	ldr	r0, [r4, #0]
 800866a:	1821      	adds	r1, r4, r0
 800866c:	428b      	cmp	r3, r1
 800866e:	bf01      	itttt	eq
 8008670:	6819      	ldreq	r1, [r3, #0]
 8008672:	685b      	ldreq	r3, [r3, #4]
 8008674:	1809      	addeq	r1, r1, r0
 8008676:	6021      	streq	r1, [r4, #0]
 8008678:	6063      	str	r3, [r4, #4]
 800867a:	6054      	str	r4, [r2, #4]
 800867c:	e7cb      	b.n	8008616 <_free_r+0x22>
 800867e:	bd38      	pop	{r3, r4, r5, pc}
 8008680:	20001ee4 	.word	0x20001ee4

08008684 <_read_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	4611      	mov	r1, r2
 800868c:	2200      	movs	r2, #0
 800868e:	4d05      	ldr	r5, [pc, #20]	; (80086a4 <_read_r+0x20>)
 8008690:	602a      	str	r2, [r5, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	f7f9 ff54 	bl	8002540 <_read>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_read_r+0x1e>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_read_r+0x1e>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	20001eec 	.word	0x20001eec

080086a8 <__assert_func>:
 80086a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086aa:	4614      	mov	r4, r2
 80086ac:	461a      	mov	r2, r3
 80086ae:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <__assert_func+0x2c>)
 80086b0:	4605      	mov	r5, r0
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68d8      	ldr	r0, [r3, #12]
 80086b6:	b14c      	cbz	r4, 80086cc <__assert_func+0x24>
 80086b8:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <__assert_func+0x30>)
 80086ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086be:	9100      	str	r1, [sp, #0]
 80086c0:	462b      	mov	r3, r5
 80086c2:	4906      	ldr	r1, [pc, #24]	; (80086dc <__assert_func+0x34>)
 80086c4:	f000 f80e 	bl	80086e4 <fiprintf>
 80086c8:	f000 fa56 	bl	8008b78 <abort>
 80086cc:	4b04      	ldr	r3, [pc, #16]	; (80086e0 <__assert_func+0x38>)
 80086ce:	461c      	mov	r4, r3
 80086d0:	e7f3      	b.n	80086ba <__assert_func+0x12>
 80086d2:	bf00      	nop
 80086d4:	20000024 	.word	0x20000024
 80086d8:	0800908c 	.word	0x0800908c
 80086dc:	08009099 	.word	0x08009099
 80086e0:	080090c7 	.word	0x080090c7

080086e4 <fiprintf>:
 80086e4:	b40e      	push	{r1, r2, r3}
 80086e6:	b503      	push	{r0, r1, lr}
 80086e8:	4601      	mov	r1, r0
 80086ea:	ab03      	add	r3, sp, #12
 80086ec:	4805      	ldr	r0, [pc, #20]	; (8008704 <fiprintf+0x20>)
 80086ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f2:	6800      	ldr	r0, [r0, #0]
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	f000 f841 	bl	800877c <_vfiprintf_r>
 80086fa:	b002      	add	sp, #8
 80086fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008700:	b003      	add	sp, #12
 8008702:	4770      	bx	lr
 8008704:	20000024 	.word	0x20000024

08008708 <__ascii_mbtowc>:
 8008708:	b082      	sub	sp, #8
 800870a:	b901      	cbnz	r1, 800870e <__ascii_mbtowc+0x6>
 800870c:	a901      	add	r1, sp, #4
 800870e:	b142      	cbz	r2, 8008722 <__ascii_mbtowc+0x1a>
 8008710:	b14b      	cbz	r3, 8008726 <__ascii_mbtowc+0x1e>
 8008712:	7813      	ldrb	r3, [r2, #0]
 8008714:	600b      	str	r3, [r1, #0]
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	1e10      	subs	r0, r2, #0
 800871a:	bf18      	it	ne
 800871c:	2001      	movne	r0, #1
 800871e:	b002      	add	sp, #8
 8008720:	4770      	bx	lr
 8008722:	4610      	mov	r0, r2
 8008724:	e7fb      	b.n	800871e <__ascii_mbtowc+0x16>
 8008726:	f06f 0001 	mvn.w	r0, #1
 800872a:	e7f8      	b.n	800871e <__ascii_mbtowc+0x16>

0800872c <__sfputc_r>:
 800872c:	6893      	ldr	r3, [r2, #8]
 800872e:	b410      	push	{r4}
 8008730:	3b01      	subs	r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	6093      	str	r3, [r2, #8]
 8008736:	da07      	bge.n	8008748 <__sfputc_r+0x1c>
 8008738:	6994      	ldr	r4, [r2, #24]
 800873a:	42a3      	cmp	r3, r4
 800873c:	db01      	blt.n	8008742 <__sfputc_r+0x16>
 800873e:	290a      	cmp	r1, #10
 8008740:	d102      	bne.n	8008748 <__sfputc_r+0x1c>
 8008742:	bc10      	pop	{r4}
 8008744:	f000 b94a 	b.w	80089dc <__swbuf_r>
 8008748:	6813      	ldr	r3, [r2, #0]
 800874a:	1c58      	adds	r0, r3, #1
 800874c:	6010      	str	r0, [r2, #0]
 800874e:	7019      	strb	r1, [r3, #0]
 8008750:	4608      	mov	r0, r1
 8008752:	bc10      	pop	{r4}
 8008754:	4770      	bx	lr

08008756 <__sfputs_r>:
 8008756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008758:	4606      	mov	r6, r0
 800875a:	460f      	mov	r7, r1
 800875c:	4614      	mov	r4, r2
 800875e:	18d5      	adds	r5, r2, r3
 8008760:	42ac      	cmp	r4, r5
 8008762:	d101      	bne.n	8008768 <__sfputs_r+0x12>
 8008764:	2000      	movs	r0, #0
 8008766:	e007      	b.n	8008778 <__sfputs_r+0x22>
 8008768:	463a      	mov	r2, r7
 800876a:	4630      	mov	r0, r6
 800876c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008770:	f7ff ffdc 	bl	800872c <__sfputc_r>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d1f3      	bne.n	8008760 <__sfputs_r+0xa>
 8008778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800877c <_vfiprintf_r>:
 800877c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008780:	460d      	mov	r5, r1
 8008782:	4614      	mov	r4, r2
 8008784:	4698      	mov	r8, r3
 8008786:	4606      	mov	r6, r0
 8008788:	b09d      	sub	sp, #116	; 0x74
 800878a:	b118      	cbz	r0, 8008794 <_vfiprintf_r+0x18>
 800878c:	6983      	ldr	r3, [r0, #24]
 800878e:	b90b      	cbnz	r3, 8008794 <_vfiprintf_r+0x18>
 8008790:	f7fd fd7a 	bl	8006288 <__sinit>
 8008794:	4b89      	ldr	r3, [pc, #548]	; (80089bc <_vfiprintf_r+0x240>)
 8008796:	429d      	cmp	r5, r3
 8008798:	d11b      	bne.n	80087d2 <_vfiprintf_r+0x56>
 800879a:	6875      	ldr	r5, [r6, #4]
 800879c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800879e:	07d9      	lsls	r1, r3, #31
 80087a0:	d405      	bmi.n	80087ae <_vfiprintf_r+0x32>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	059a      	lsls	r2, r3, #22
 80087a6:	d402      	bmi.n	80087ae <_vfiprintf_r+0x32>
 80087a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087aa:	f7fd fe30 	bl	800640e <__retarget_lock_acquire_recursive>
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	071b      	lsls	r3, r3, #28
 80087b2:	d501      	bpl.n	80087b8 <_vfiprintf_r+0x3c>
 80087b4:	692b      	ldr	r3, [r5, #16]
 80087b6:	b9eb      	cbnz	r3, 80087f4 <_vfiprintf_r+0x78>
 80087b8:	4629      	mov	r1, r5
 80087ba:	4630      	mov	r0, r6
 80087bc:	f000 f96e 	bl	8008a9c <__swsetup_r>
 80087c0:	b1c0      	cbz	r0, 80087f4 <_vfiprintf_r+0x78>
 80087c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087c4:	07dc      	lsls	r4, r3, #31
 80087c6:	d50e      	bpl.n	80087e6 <_vfiprintf_r+0x6a>
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295
 80087cc:	b01d      	add	sp, #116	; 0x74
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	4b7b      	ldr	r3, [pc, #492]	; (80089c0 <_vfiprintf_r+0x244>)
 80087d4:	429d      	cmp	r5, r3
 80087d6:	d101      	bne.n	80087dc <_vfiprintf_r+0x60>
 80087d8:	68b5      	ldr	r5, [r6, #8]
 80087da:	e7df      	b.n	800879c <_vfiprintf_r+0x20>
 80087dc:	4b79      	ldr	r3, [pc, #484]	; (80089c4 <_vfiprintf_r+0x248>)
 80087de:	429d      	cmp	r5, r3
 80087e0:	bf08      	it	eq
 80087e2:	68f5      	ldreq	r5, [r6, #12]
 80087e4:	e7da      	b.n	800879c <_vfiprintf_r+0x20>
 80087e6:	89ab      	ldrh	r3, [r5, #12]
 80087e8:	0598      	lsls	r0, r3, #22
 80087ea:	d4ed      	bmi.n	80087c8 <_vfiprintf_r+0x4c>
 80087ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ee:	f7fd fe0f 	bl	8006410 <__retarget_lock_release_recursive>
 80087f2:	e7e9      	b.n	80087c8 <_vfiprintf_r+0x4c>
 80087f4:	2300      	movs	r3, #0
 80087f6:	9309      	str	r3, [sp, #36]	; 0x24
 80087f8:	2320      	movs	r3, #32
 80087fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087fe:	2330      	movs	r3, #48	; 0x30
 8008800:	f04f 0901 	mov.w	r9, #1
 8008804:	f8cd 800c 	str.w	r8, [sp, #12]
 8008808:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80089c8 <_vfiprintf_r+0x24c>
 800880c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008810:	4623      	mov	r3, r4
 8008812:	469a      	mov	sl, r3
 8008814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008818:	b10a      	cbz	r2, 800881e <_vfiprintf_r+0xa2>
 800881a:	2a25      	cmp	r2, #37	; 0x25
 800881c:	d1f9      	bne.n	8008812 <_vfiprintf_r+0x96>
 800881e:	ebba 0b04 	subs.w	fp, sl, r4
 8008822:	d00b      	beq.n	800883c <_vfiprintf_r+0xc0>
 8008824:	465b      	mov	r3, fp
 8008826:	4622      	mov	r2, r4
 8008828:	4629      	mov	r1, r5
 800882a:	4630      	mov	r0, r6
 800882c:	f7ff ff93 	bl	8008756 <__sfputs_r>
 8008830:	3001      	adds	r0, #1
 8008832:	f000 80aa 	beq.w	800898a <_vfiprintf_r+0x20e>
 8008836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008838:	445a      	add	r2, fp
 800883a:	9209      	str	r2, [sp, #36]	; 0x24
 800883c:	f89a 3000 	ldrb.w	r3, [sl]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 80a2 	beq.w	800898a <_vfiprintf_r+0x20e>
 8008846:	2300      	movs	r3, #0
 8008848:	f04f 32ff 	mov.w	r2, #4294967295
 800884c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008850:	f10a 0a01 	add.w	sl, sl, #1
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	9307      	str	r3, [sp, #28]
 8008858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800885c:	931a      	str	r3, [sp, #104]	; 0x68
 800885e:	4654      	mov	r4, sl
 8008860:	2205      	movs	r2, #5
 8008862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008866:	4858      	ldr	r0, [pc, #352]	; (80089c8 <_vfiprintf_r+0x24c>)
 8008868:	f7ff fb14 	bl	8007e94 <memchr>
 800886c:	9a04      	ldr	r2, [sp, #16]
 800886e:	b9d8      	cbnz	r0, 80088a8 <_vfiprintf_r+0x12c>
 8008870:	06d1      	lsls	r1, r2, #27
 8008872:	bf44      	itt	mi
 8008874:	2320      	movmi	r3, #32
 8008876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887a:	0713      	lsls	r3, r2, #28
 800887c:	bf44      	itt	mi
 800887e:	232b      	movmi	r3, #43	; 0x2b
 8008880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008884:	f89a 3000 	ldrb.w	r3, [sl]
 8008888:	2b2a      	cmp	r3, #42	; 0x2a
 800888a:	d015      	beq.n	80088b8 <_vfiprintf_r+0x13c>
 800888c:	4654      	mov	r4, sl
 800888e:	2000      	movs	r0, #0
 8008890:	f04f 0c0a 	mov.w	ip, #10
 8008894:	9a07      	ldr	r2, [sp, #28]
 8008896:	4621      	mov	r1, r4
 8008898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800889c:	3b30      	subs	r3, #48	; 0x30
 800889e:	2b09      	cmp	r3, #9
 80088a0:	d94e      	bls.n	8008940 <_vfiprintf_r+0x1c4>
 80088a2:	b1b0      	cbz	r0, 80088d2 <_vfiprintf_r+0x156>
 80088a4:	9207      	str	r2, [sp, #28]
 80088a6:	e014      	b.n	80088d2 <_vfiprintf_r+0x156>
 80088a8:	eba0 0308 	sub.w	r3, r0, r8
 80088ac:	fa09 f303 	lsl.w	r3, r9, r3
 80088b0:	4313      	orrs	r3, r2
 80088b2:	46a2      	mov	sl, r4
 80088b4:	9304      	str	r3, [sp, #16]
 80088b6:	e7d2      	b.n	800885e <_vfiprintf_r+0xe2>
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	1d19      	adds	r1, r3, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	9103      	str	r1, [sp, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bfbb      	ittet	lt
 80088c4:	425b      	neglt	r3, r3
 80088c6:	f042 0202 	orrlt.w	r2, r2, #2
 80088ca:	9307      	strge	r3, [sp, #28]
 80088cc:	9307      	strlt	r3, [sp, #28]
 80088ce:	bfb8      	it	lt
 80088d0:	9204      	strlt	r2, [sp, #16]
 80088d2:	7823      	ldrb	r3, [r4, #0]
 80088d4:	2b2e      	cmp	r3, #46	; 0x2e
 80088d6:	d10c      	bne.n	80088f2 <_vfiprintf_r+0x176>
 80088d8:	7863      	ldrb	r3, [r4, #1]
 80088da:	2b2a      	cmp	r3, #42	; 0x2a
 80088dc:	d135      	bne.n	800894a <_vfiprintf_r+0x1ce>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	3402      	adds	r4, #2
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	9203      	str	r2, [sp, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	bfb8      	it	lt
 80088ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80088f0:	9305      	str	r3, [sp, #20]
 80088f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80089cc <_vfiprintf_r+0x250>
 80088f6:	2203      	movs	r2, #3
 80088f8:	4650      	mov	r0, sl
 80088fa:	7821      	ldrb	r1, [r4, #0]
 80088fc:	f7ff faca 	bl	8007e94 <memchr>
 8008900:	b140      	cbz	r0, 8008914 <_vfiprintf_r+0x198>
 8008902:	2340      	movs	r3, #64	; 0x40
 8008904:	eba0 000a 	sub.w	r0, r0, sl
 8008908:	fa03 f000 	lsl.w	r0, r3, r0
 800890c:	9b04      	ldr	r3, [sp, #16]
 800890e:	3401      	adds	r4, #1
 8008910:	4303      	orrs	r3, r0
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008918:	2206      	movs	r2, #6
 800891a:	482d      	ldr	r0, [pc, #180]	; (80089d0 <_vfiprintf_r+0x254>)
 800891c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008920:	f7ff fab8 	bl	8007e94 <memchr>
 8008924:	2800      	cmp	r0, #0
 8008926:	d03f      	beq.n	80089a8 <_vfiprintf_r+0x22c>
 8008928:	4b2a      	ldr	r3, [pc, #168]	; (80089d4 <_vfiprintf_r+0x258>)
 800892a:	bb1b      	cbnz	r3, 8008974 <_vfiprintf_r+0x1f8>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	3307      	adds	r3, #7
 8008930:	f023 0307 	bic.w	r3, r3, #7
 8008934:	3308      	adds	r3, #8
 8008936:	9303      	str	r3, [sp, #12]
 8008938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893a:	443b      	add	r3, r7
 800893c:	9309      	str	r3, [sp, #36]	; 0x24
 800893e:	e767      	b.n	8008810 <_vfiprintf_r+0x94>
 8008940:	460c      	mov	r4, r1
 8008942:	2001      	movs	r0, #1
 8008944:	fb0c 3202 	mla	r2, ip, r2, r3
 8008948:	e7a5      	b.n	8008896 <_vfiprintf_r+0x11a>
 800894a:	2300      	movs	r3, #0
 800894c:	f04f 0c0a 	mov.w	ip, #10
 8008950:	4619      	mov	r1, r3
 8008952:	3401      	adds	r4, #1
 8008954:	9305      	str	r3, [sp, #20]
 8008956:	4620      	mov	r0, r4
 8008958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800895c:	3a30      	subs	r2, #48	; 0x30
 800895e:	2a09      	cmp	r2, #9
 8008960:	d903      	bls.n	800896a <_vfiprintf_r+0x1ee>
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0c5      	beq.n	80088f2 <_vfiprintf_r+0x176>
 8008966:	9105      	str	r1, [sp, #20]
 8008968:	e7c3      	b.n	80088f2 <_vfiprintf_r+0x176>
 800896a:	4604      	mov	r4, r0
 800896c:	2301      	movs	r3, #1
 800896e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008972:	e7f0      	b.n	8008956 <_vfiprintf_r+0x1da>
 8008974:	ab03      	add	r3, sp, #12
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	462a      	mov	r2, r5
 800897a:	4630      	mov	r0, r6
 800897c:	4b16      	ldr	r3, [pc, #88]	; (80089d8 <_vfiprintf_r+0x25c>)
 800897e:	a904      	add	r1, sp, #16
 8008980:	f7fd fe90 	bl	80066a4 <_printf_float>
 8008984:	4607      	mov	r7, r0
 8008986:	1c78      	adds	r0, r7, #1
 8008988:	d1d6      	bne.n	8008938 <_vfiprintf_r+0x1bc>
 800898a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800898c:	07d9      	lsls	r1, r3, #31
 800898e:	d405      	bmi.n	800899c <_vfiprintf_r+0x220>
 8008990:	89ab      	ldrh	r3, [r5, #12]
 8008992:	059a      	lsls	r2, r3, #22
 8008994:	d402      	bmi.n	800899c <_vfiprintf_r+0x220>
 8008996:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008998:	f7fd fd3a 	bl	8006410 <__retarget_lock_release_recursive>
 800899c:	89ab      	ldrh	r3, [r5, #12]
 800899e:	065b      	lsls	r3, r3, #25
 80089a0:	f53f af12 	bmi.w	80087c8 <_vfiprintf_r+0x4c>
 80089a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089a6:	e711      	b.n	80087cc <_vfiprintf_r+0x50>
 80089a8:	ab03      	add	r3, sp, #12
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	462a      	mov	r2, r5
 80089ae:	4630      	mov	r0, r6
 80089b0:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <_vfiprintf_r+0x25c>)
 80089b2:	a904      	add	r1, sp, #16
 80089b4:	f7fe f912 	bl	8006bdc <_printf_i>
 80089b8:	e7e4      	b.n	8008984 <_vfiprintf_r+0x208>
 80089ba:	bf00      	nop
 80089bc:	08008e28 	.word	0x08008e28
 80089c0:	08008e48 	.word	0x08008e48
 80089c4:	08008e08 	.word	0x08008e08
 80089c8:	080090d2 	.word	0x080090d2
 80089cc:	080090d8 	.word	0x080090d8
 80089d0:	080090dc 	.word	0x080090dc
 80089d4:	080066a5 	.word	0x080066a5
 80089d8:	08008757 	.word	0x08008757

080089dc <__swbuf_r>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	460e      	mov	r6, r1
 80089e0:	4614      	mov	r4, r2
 80089e2:	4605      	mov	r5, r0
 80089e4:	b118      	cbz	r0, 80089ee <__swbuf_r+0x12>
 80089e6:	6983      	ldr	r3, [r0, #24]
 80089e8:	b90b      	cbnz	r3, 80089ee <__swbuf_r+0x12>
 80089ea:	f7fd fc4d 	bl	8006288 <__sinit>
 80089ee:	4b21      	ldr	r3, [pc, #132]	; (8008a74 <__swbuf_r+0x98>)
 80089f0:	429c      	cmp	r4, r3
 80089f2:	d12b      	bne.n	8008a4c <__swbuf_r+0x70>
 80089f4:	686c      	ldr	r4, [r5, #4]
 80089f6:	69a3      	ldr	r3, [r4, #24]
 80089f8:	60a3      	str	r3, [r4, #8]
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	071a      	lsls	r2, r3, #28
 80089fe:	d52f      	bpl.n	8008a60 <__swbuf_r+0x84>
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	b36b      	cbz	r3, 8008a60 <__swbuf_r+0x84>
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	6820      	ldr	r0, [r4, #0]
 8008a08:	b2f6      	uxtb	r6, r6
 8008a0a:	1ac0      	subs	r0, r0, r3
 8008a0c:	6963      	ldr	r3, [r4, #20]
 8008a0e:	4637      	mov	r7, r6
 8008a10:	4283      	cmp	r3, r0
 8008a12:	dc04      	bgt.n	8008a1e <__swbuf_r+0x42>
 8008a14:	4621      	mov	r1, r4
 8008a16:	4628      	mov	r0, r5
 8008a18:	f7ff f9e2 	bl	8007de0 <_fflush_r>
 8008a1c:	bb30      	cbnz	r0, 8008a6c <__swbuf_r+0x90>
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	3001      	adds	r0, #1
 8008a22:	3b01      	subs	r3, #1
 8008a24:	60a3      	str	r3, [r4, #8]
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	6022      	str	r2, [r4, #0]
 8008a2c:	701e      	strb	r6, [r3, #0]
 8008a2e:	6963      	ldr	r3, [r4, #20]
 8008a30:	4283      	cmp	r3, r0
 8008a32:	d004      	beq.n	8008a3e <__swbuf_r+0x62>
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	07db      	lsls	r3, r3, #31
 8008a38:	d506      	bpl.n	8008a48 <__swbuf_r+0x6c>
 8008a3a:	2e0a      	cmp	r6, #10
 8008a3c:	d104      	bne.n	8008a48 <__swbuf_r+0x6c>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4628      	mov	r0, r5
 8008a42:	f7ff f9cd 	bl	8007de0 <_fflush_r>
 8008a46:	b988      	cbnz	r0, 8008a6c <__swbuf_r+0x90>
 8008a48:	4638      	mov	r0, r7
 8008a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a4c:	4b0a      	ldr	r3, [pc, #40]	; (8008a78 <__swbuf_r+0x9c>)
 8008a4e:	429c      	cmp	r4, r3
 8008a50:	d101      	bne.n	8008a56 <__swbuf_r+0x7a>
 8008a52:	68ac      	ldr	r4, [r5, #8]
 8008a54:	e7cf      	b.n	80089f6 <__swbuf_r+0x1a>
 8008a56:	4b09      	ldr	r3, [pc, #36]	; (8008a7c <__swbuf_r+0xa0>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	bf08      	it	eq
 8008a5c:	68ec      	ldreq	r4, [r5, #12]
 8008a5e:	e7ca      	b.n	80089f6 <__swbuf_r+0x1a>
 8008a60:	4621      	mov	r1, r4
 8008a62:	4628      	mov	r0, r5
 8008a64:	f000 f81a 	bl	8008a9c <__swsetup_r>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d0cb      	beq.n	8008a04 <__swbuf_r+0x28>
 8008a6c:	f04f 37ff 	mov.w	r7, #4294967295
 8008a70:	e7ea      	b.n	8008a48 <__swbuf_r+0x6c>
 8008a72:	bf00      	nop
 8008a74:	08008e28 	.word	0x08008e28
 8008a78:	08008e48 	.word	0x08008e48
 8008a7c:	08008e08 	.word	0x08008e08

08008a80 <__ascii_wctomb>:
 8008a80:	4603      	mov	r3, r0
 8008a82:	4608      	mov	r0, r1
 8008a84:	b141      	cbz	r1, 8008a98 <__ascii_wctomb+0x18>
 8008a86:	2aff      	cmp	r2, #255	; 0xff
 8008a88:	d904      	bls.n	8008a94 <__ascii_wctomb+0x14>
 8008a8a:	228a      	movs	r2, #138	; 0x8a
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	4770      	bx	lr
 8008a94:	2001      	movs	r0, #1
 8008a96:	700a      	strb	r2, [r1, #0]
 8008a98:	4770      	bx	lr
	...

08008a9c <__swsetup_r>:
 8008a9c:	4b32      	ldr	r3, [pc, #200]	; (8008b68 <__swsetup_r+0xcc>)
 8008a9e:	b570      	push	{r4, r5, r6, lr}
 8008aa0:	681d      	ldr	r5, [r3, #0]
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	b125      	cbz	r5, 8008ab2 <__swsetup_r+0x16>
 8008aa8:	69ab      	ldr	r3, [r5, #24]
 8008aaa:	b913      	cbnz	r3, 8008ab2 <__swsetup_r+0x16>
 8008aac:	4628      	mov	r0, r5
 8008aae:	f7fd fbeb 	bl	8006288 <__sinit>
 8008ab2:	4b2e      	ldr	r3, [pc, #184]	; (8008b6c <__swsetup_r+0xd0>)
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	d10f      	bne.n	8008ad8 <__swsetup_r+0x3c>
 8008ab8:	686c      	ldr	r4, [r5, #4]
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ac0:	0719      	lsls	r1, r3, #28
 8008ac2:	d42c      	bmi.n	8008b1e <__swsetup_r+0x82>
 8008ac4:	06dd      	lsls	r5, r3, #27
 8008ac6:	d411      	bmi.n	8008aec <__swsetup_r+0x50>
 8008ac8:	2309      	movs	r3, #9
 8008aca:	6033      	str	r3, [r6, #0]
 8008acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	e03e      	b.n	8008b56 <__swsetup_r+0xba>
 8008ad8:	4b25      	ldr	r3, [pc, #148]	; (8008b70 <__swsetup_r+0xd4>)
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d101      	bne.n	8008ae2 <__swsetup_r+0x46>
 8008ade:	68ac      	ldr	r4, [r5, #8]
 8008ae0:	e7eb      	b.n	8008aba <__swsetup_r+0x1e>
 8008ae2:	4b24      	ldr	r3, [pc, #144]	; (8008b74 <__swsetup_r+0xd8>)
 8008ae4:	429c      	cmp	r4, r3
 8008ae6:	bf08      	it	eq
 8008ae8:	68ec      	ldreq	r4, [r5, #12]
 8008aea:	e7e6      	b.n	8008aba <__swsetup_r+0x1e>
 8008aec:	0758      	lsls	r0, r3, #29
 8008aee:	d512      	bpl.n	8008b16 <__swsetup_r+0x7a>
 8008af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008af2:	b141      	cbz	r1, 8008b06 <__swsetup_r+0x6a>
 8008af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008af8:	4299      	cmp	r1, r3
 8008afa:	d002      	beq.n	8008b02 <__swsetup_r+0x66>
 8008afc:	4630      	mov	r0, r6
 8008afe:	f7ff fd79 	bl	80085f4 <_free_r>
 8008b02:	2300      	movs	r3, #0
 8008b04:	6363      	str	r3, [r4, #52]	; 0x34
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	6063      	str	r3, [r4, #4]
 8008b12:	6923      	ldr	r3, [r4, #16]
 8008b14:	6023      	str	r3, [r4, #0]
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	f043 0308 	orr.w	r3, r3, #8
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	b94b      	cbnz	r3, 8008b36 <__swsetup_r+0x9a>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b2c:	d003      	beq.n	8008b36 <__swsetup_r+0x9a>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4630      	mov	r0, r6
 8008b32:	f000 f84d 	bl	8008bd0 <__smakebuf_r>
 8008b36:	89a0      	ldrh	r0, [r4, #12]
 8008b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b3c:	f010 0301 	ands.w	r3, r0, #1
 8008b40:	d00a      	beq.n	8008b58 <__swsetup_r+0xbc>
 8008b42:	2300      	movs	r3, #0
 8008b44:	60a3      	str	r3, [r4, #8]
 8008b46:	6963      	ldr	r3, [r4, #20]
 8008b48:	425b      	negs	r3, r3
 8008b4a:	61a3      	str	r3, [r4, #24]
 8008b4c:	6923      	ldr	r3, [r4, #16]
 8008b4e:	b943      	cbnz	r3, 8008b62 <__swsetup_r+0xc6>
 8008b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b54:	d1ba      	bne.n	8008acc <__swsetup_r+0x30>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	0781      	lsls	r1, r0, #30
 8008b5a:	bf58      	it	pl
 8008b5c:	6963      	ldrpl	r3, [r4, #20]
 8008b5e:	60a3      	str	r3, [r4, #8]
 8008b60:	e7f4      	b.n	8008b4c <__swsetup_r+0xb0>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e7f7      	b.n	8008b56 <__swsetup_r+0xba>
 8008b66:	bf00      	nop
 8008b68:	20000024 	.word	0x20000024
 8008b6c:	08008e28 	.word	0x08008e28
 8008b70:	08008e48 	.word	0x08008e48
 8008b74:	08008e08 	.word	0x08008e08

08008b78 <abort>:
 8008b78:	2006      	movs	r0, #6
 8008b7a:	b508      	push	{r3, lr}
 8008b7c:	f000 f890 	bl	8008ca0 <raise>
 8008b80:	2001      	movs	r0, #1
 8008b82:	f7f9 fcd7 	bl	8002534 <_exit>

08008b86 <__swhatbuf_r>:
 8008b86:	b570      	push	{r4, r5, r6, lr}
 8008b88:	460e      	mov	r6, r1
 8008b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8e:	4614      	mov	r4, r2
 8008b90:	2900      	cmp	r1, #0
 8008b92:	461d      	mov	r5, r3
 8008b94:	b096      	sub	sp, #88	; 0x58
 8008b96:	da08      	bge.n	8008baa <__swhatbuf_r+0x24>
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008b9e:	602a      	str	r2, [r5, #0]
 8008ba0:	061a      	lsls	r2, r3, #24
 8008ba2:	d410      	bmi.n	8008bc6 <__swhatbuf_r+0x40>
 8008ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ba8:	e00e      	b.n	8008bc8 <__swhatbuf_r+0x42>
 8008baa:	466a      	mov	r2, sp
 8008bac:	f000 f894 	bl	8008cd8 <_fstat_r>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	dbf1      	blt.n	8008b98 <__swhatbuf_r+0x12>
 8008bb4:	9a01      	ldr	r2, [sp, #4]
 8008bb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bbe:	425a      	negs	r2, r3
 8008bc0:	415a      	adcs	r2, r3
 8008bc2:	602a      	str	r2, [r5, #0]
 8008bc4:	e7ee      	b.n	8008ba4 <__swhatbuf_r+0x1e>
 8008bc6:	2340      	movs	r3, #64	; 0x40
 8008bc8:	2000      	movs	r0, #0
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	b016      	add	sp, #88	; 0x58
 8008bce:	bd70      	pop	{r4, r5, r6, pc}

08008bd0 <__smakebuf_r>:
 8008bd0:	898b      	ldrh	r3, [r1, #12]
 8008bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008bd4:	079d      	lsls	r5, r3, #30
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	460c      	mov	r4, r1
 8008bda:	d507      	bpl.n	8008bec <__smakebuf_r+0x1c>
 8008bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	6123      	str	r3, [r4, #16]
 8008be4:	2301      	movs	r3, #1
 8008be6:	6163      	str	r3, [r4, #20]
 8008be8:	b002      	add	sp, #8
 8008bea:	bd70      	pop	{r4, r5, r6, pc}
 8008bec:	466a      	mov	r2, sp
 8008bee:	ab01      	add	r3, sp, #4
 8008bf0:	f7ff ffc9 	bl	8008b86 <__swhatbuf_r>
 8008bf4:	9900      	ldr	r1, [sp, #0]
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7fd fc41 	bl	8006480 <_malloc_r>
 8008bfe:	b948      	cbnz	r0, 8008c14 <__smakebuf_r+0x44>
 8008c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c04:	059a      	lsls	r2, r3, #22
 8008c06:	d4ef      	bmi.n	8008be8 <__smakebuf_r+0x18>
 8008c08:	f023 0303 	bic.w	r3, r3, #3
 8008c0c:	f043 0302 	orr.w	r3, r3, #2
 8008c10:	81a3      	strh	r3, [r4, #12]
 8008c12:	e7e3      	b.n	8008bdc <__smakebuf_r+0xc>
 8008c14:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <__smakebuf_r+0x7c>)
 8008c16:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	6020      	str	r0, [r4, #0]
 8008c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	9b00      	ldr	r3, [sp, #0]
 8008c24:	6120      	str	r0, [r4, #16]
 8008c26:	6163      	str	r3, [r4, #20]
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	b15b      	cbz	r3, 8008c44 <__smakebuf_r+0x74>
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c32:	f000 f863 	bl	8008cfc <_isatty_r>
 8008c36:	b128      	cbz	r0, 8008c44 <__smakebuf_r+0x74>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f023 0303 	bic.w	r3, r3, #3
 8008c3e:	f043 0301 	orr.w	r3, r3, #1
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	89a0      	ldrh	r0, [r4, #12]
 8008c46:	4305      	orrs	r5, r0
 8008c48:	81a5      	strh	r5, [r4, #12]
 8008c4a:	e7cd      	b.n	8008be8 <__smakebuf_r+0x18>
 8008c4c:	08006221 	.word	0x08006221

08008c50 <_raise_r>:
 8008c50:	291f      	cmp	r1, #31
 8008c52:	b538      	push	{r3, r4, r5, lr}
 8008c54:	4604      	mov	r4, r0
 8008c56:	460d      	mov	r5, r1
 8008c58:	d904      	bls.n	8008c64 <_raise_r+0x14>
 8008c5a:	2316      	movs	r3, #22
 8008c5c:	6003      	str	r3, [r0, #0]
 8008c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c66:	b112      	cbz	r2, 8008c6e <_raise_r+0x1e>
 8008c68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c6c:	b94b      	cbnz	r3, 8008c82 <_raise_r+0x32>
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 f830 	bl	8008cd4 <_getpid_r>
 8008c74:	462a      	mov	r2, r5
 8008c76:	4601      	mov	r1, r0
 8008c78:	4620      	mov	r0, r4
 8008c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c7e:	f000 b817 	b.w	8008cb0 <_kill_r>
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d00a      	beq.n	8008c9c <_raise_r+0x4c>
 8008c86:	1c59      	adds	r1, r3, #1
 8008c88:	d103      	bne.n	8008c92 <_raise_r+0x42>
 8008c8a:	2316      	movs	r3, #22
 8008c8c:	6003      	str	r3, [r0, #0]
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e7e7      	b.n	8008c62 <_raise_r+0x12>
 8008c92:	2400      	movs	r4, #0
 8008c94:	4628      	mov	r0, r5
 8008c96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c9a:	4798      	blx	r3
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	e7e0      	b.n	8008c62 <_raise_r+0x12>

08008ca0 <raise>:
 8008ca0:	4b02      	ldr	r3, [pc, #8]	; (8008cac <raise+0xc>)
 8008ca2:	4601      	mov	r1, r0
 8008ca4:	6818      	ldr	r0, [r3, #0]
 8008ca6:	f7ff bfd3 	b.w	8008c50 <_raise_r>
 8008caa:	bf00      	nop
 8008cac:	20000024 	.word	0x20000024

08008cb0 <_kill_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	4d06      	ldr	r5, [pc, #24]	; (8008cd0 <_kill_r+0x20>)
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	4608      	mov	r0, r1
 8008cba:	4611      	mov	r1, r2
 8008cbc:	602b      	str	r3, [r5, #0]
 8008cbe:	f7f9 fc31 	bl	8002524 <_kill>
 8008cc2:	1c43      	adds	r3, r0, #1
 8008cc4:	d102      	bne.n	8008ccc <_kill_r+0x1c>
 8008cc6:	682b      	ldr	r3, [r5, #0]
 8008cc8:	b103      	cbz	r3, 8008ccc <_kill_r+0x1c>
 8008cca:	6023      	str	r3, [r4, #0]
 8008ccc:	bd38      	pop	{r3, r4, r5, pc}
 8008cce:	bf00      	nop
 8008cd0:	20001eec 	.word	0x20001eec

08008cd4 <_getpid_r>:
 8008cd4:	f7f9 bc24 	b.w	8002520 <_getpid>

08008cd8 <_fstat_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4d06      	ldr	r5, [pc, #24]	; (8008cf8 <_fstat_r+0x20>)
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	f7f9 fc4a 	bl	800257e <_fstat>
 8008cea:	1c43      	adds	r3, r0, #1
 8008cec:	d102      	bne.n	8008cf4 <_fstat_r+0x1c>
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	b103      	cbz	r3, 8008cf4 <_fstat_r+0x1c>
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20001eec 	.word	0x20001eec

08008cfc <_isatty_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4d05      	ldr	r5, [pc, #20]	; (8008d18 <_isatty_r+0x1c>)
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7f9 fc3e 	bl	8002588 <_isatty>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_isatty_r+0x1a>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_isatty_r+0x1a>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20001eec 	.word	0x20001eec

08008d1c <_init>:
 8008d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1e:	bf00      	nop
 8008d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d22:	bc08      	pop	{r3}
 8008d24:	469e      	mov	lr, r3
 8008d26:	4770      	bx	lr

08008d28 <_fini>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	bf00      	nop
 8008d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d2e:	bc08      	pop	{r3}
 8008d30:	469e      	mov	lr, r3
 8008d32:	4770      	bx	lr
